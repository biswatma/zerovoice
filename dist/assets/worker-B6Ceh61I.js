const O0=new Map,Mi=[],U8=(a,o,n)=>{if(o&&typeof o.init=="function"&&typeof o.createInferenceSessionHandler=="function"){const u=O0.get(a);if(u===void 0)O0.set(a,{backend:o,priority:n});else{if(u.priority>n)return;if(u.priority===n&&u.backend!==o)throw new Error(`cannot register backend "${a}" using priority ${n}`)}if(n>=0){const m=Mi.indexOf(a);m!==-1&&Mi.splice(m,1);for(let b=0;b<Mi.length;b++)if(O0.get(Mi[b]).priority<=n){Mi.splice(b,0,a);return}Mi.push(a)}return}throw new TypeError("not a valid backend")},K8=async a=>{const o=O0.get(a);if(!o)return"backend not found.";if(o.initialized)return o.backend;if(o.aborted)return o.error;{const n=!!o.initPromise;try{return n||(o.initPromise=o.backend.init(a)),await o.initPromise,o.initialized=!0,o.backend}catch(u){return n||(o.error=`${u}`,o.aborted=!0),o.error}finally{delete o.initPromise}}},X8=async a=>{const o=a.executionProviders||[],n=o.map(E=>typeof E=="string"?E:E.name),u=n.length===0?Mi:n;let m;const b=[],C=new Set;for(const E of u){const B=await K8(E);typeof B=="string"?b.push({name:E,err:B}):(m||(m=B),m===B&&C.add(E))}if(!m)throw new Error(`no available backend found. ERR: ${b.map(E=>`[${E.name}] ${E.err}`).join(", ")}`);for(const{name:E,err:B}of b)n.includes(E)&&console.warn(`removing requested execution provider "${E}" from session options because it is not available: ${B}`);const w=o.filter(E=>C.has(typeof E=="string"?E:E.name));return[m,new Proxy(a,{get:(E,B)=>B==="executionProviders"?w:Reflect.get(E,B)})]},Z8="1.21.0";let Jd="warning";const Ga={wasm:{},webgl:{},webgpu:{},versions:{common:Z8},set logLevel(a){if(a!==void 0){if(typeof a!="string"||["verbose","info","warning","error","fatal"].indexOf(a)===-1)throw new Error(`Unsupported logging level: ${a}`);Jd=a}},get logLevel(){return Jd}};Object.defineProperty(Ga,"logLevel",{enumerable:!0});const J8=Ga,q8=(a,o)=>{const n=typeof document<"u"?document.createElement("canvas"):new OffscreenCanvas(1,1);n.width=a.dims[3],n.height=a.dims[2];const u=n.getContext("2d");if(u!=null){let m,b;o?.tensorLayout!==void 0&&o.tensorLayout==="NHWC"?(m=a.dims[2],b=a.dims[3]):(m=a.dims[3],b=a.dims[2]);const C=o?.format!==void 0?o.format:"RGB",w=o?.norm;let E,B;w===void 0||w.mean===void 0?E=[255,255,255,255]:typeof w.mean=="number"?E=[w.mean,w.mean,w.mean,w.mean]:(E=[w.mean[0],w.mean[1],w.mean[2],0],w.mean[3]!==void 0&&(E[3]=w.mean[3])),w===void 0||w.bias===void 0?B=[0,0,0,0]:typeof w.bias=="number"?B=[w.bias,w.bias,w.bias,w.bias]:(B=[w.bias[0],w.bias[1],w.bias[2],0],w.bias[3]!==void 0&&(B[3]=w.bias[3]));const D=b*m;let v=0,x=D,S=D*2,F=-1;C==="RGBA"?(v=0,x=D,S=D*2,F=D*3):C==="RGB"?(v=0,x=D,S=D*2):C==="RBG"&&(v=0,S=D,x=D*2);for(let j=0;j<b;j++)for(let J=0;J<m;J++){const L=(a.data[v++]-B[0])*E[0],N=(a.data[x++]-B[1])*E[1],U=(a.data[S++]-B[2])*E[2],f=F===-1?255:(a.data[F++]-B[3])*E[3];u.fillStyle="rgba("+L+","+N+","+U+","+f+")",u.fillRect(J,j,1,1)}if("toDataURL"in n)return n.toDataURL();throw new Error("toDataURL is not supported")}else throw new Error("Can not access image data")},$8=(a,o)=>{const n=typeof document<"u"?document.createElement("canvas").getContext("2d"):new OffscreenCanvas(1,1).getContext("2d");let u;if(n!=null){let m,b,C;o?.tensorLayout!==void 0&&o.tensorLayout==="NHWC"?(m=a.dims[2],b=a.dims[1],C=a.dims[3]):(m=a.dims[3],b=a.dims[2],C=a.dims[1]);const w=o!==void 0&&o.format!==void 0?o.format:"RGB",E=o?.norm;let B,D;E===void 0||E.mean===void 0?B=[255,255,255,255]:typeof E.mean=="number"?B=[E.mean,E.mean,E.mean,E.mean]:(B=[E.mean[0],E.mean[1],E.mean[2],255],E.mean[3]!==void 0&&(B[3]=E.mean[3])),E===void 0||E.bias===void 0?D=[0,0,0,0]:typeof E.bias=="number"?D=[E.bias,E.bias,E.bias,E.bias]:(D=[E.bias[0],E.bias[1],E.bias[2],0],E.bias[3]!==void 0&&(D[3]=E.bias[3]));const v=b*m;if(o!==void 0&&(o.format!==void 0&&C===4&&o.format!=="RGBA"||C===3&&o.format!=="RGB"&&o.format!=="BGR"))throw new Error("Tensor format doesn't match input tensor dims");const x=4;let S=0,F=1,j=2,J=3,L=0,N=v,U=v*2,f=-1;w==="RGBA"?(L=0,N=v,U=v*2,f=v*3):w==="RGB"?(L=0,N=v,U=v*2):w==="RBG"&&(L=0,U=v,N=v*2),u=n.createImageData(m,b);for(let k=0;k<b*m;S+=x,F+=x,j+=x,J+=x,k++)u.data[S]=(a.data[L++]-D[0])*B[0],u.data[F]=(a.data[N++]-D[1])*B[1],u.data[j]=(a.data[U++]-D[2])*B[2],u.data[J]=f===-1?255:(a.data[f++]-D[3])*B[3]}else throw new Error("Can not access image data");return u},Ll=(a,o)=>{if(a===void 0)throw new Error("Image buffer must be defined");if(o.height===void 0||o.width===void 0)throw new Error("Image height and width must be defined");if(o.tensorLayout==="NHWC")throw new Error("NHWC Tensor layout is not supported yet");const{height:n,width:u}=o,m=o.norm??{mean:255,bias:0};let b,C;typeof m.mean=="number"?b=[m.mean,m.mean,m.mean,m.mean]:b=[m.mean[0],m.mean[1],m.mean[2],m.mean[3]??255],typeof m.bias=="number"?C=[m.bias,m.bias,m.bias,m.bias]:C=[m.bias[0],m.bias[1],m.bias[2],m.bias[3]??0];const w=o.format!==void 0?o.format:"RGBA",E=o.tensorFormat!==void 0&&o.tensorFormat!==void 0?o.tensorFormat:"RGB",B=n*u,D=E==="RGBA"?new Float32Array(B*4):new Float32Array(B*3);let v=4,x=0,S=1,F=2,j=3,J=0,L=B,N=B*2,U=-1;w==="RGB"&&(v=3,x=0,S=1,F=2,j=-1),E==="RGBA"?U=B*3:E==="RBG"?(J=0,N=B,L=B*2):E==="BGR"&&(N=0,L=B,J=B*2);for(let k=0;k<B;k++,x+=v,F+=v,S+=v,j+=v)D[J++]=(a[x]+C[0])/b[0],D[L++]=(a[S]+C[1])/b[1],D[N++]=(a[F]+C[2])/b[2],U!==-1&&j!==-1&&(D[U++]=(a[j]+C[3])/b[3]);return E==="RGBA"?new ma("float32",D,[1,4,n,u]):new ma("float32",D,[1,3,n,u])},e6=async(a,o)=>{const n=typeof HTMLImageElement<"u"&&a instanceof HTMLImageElement,u=typeof ImageData<"u"&&a instanceof ImageData,m=typeof ImageBitmap<"u"&&a instanceof ImageBitmap,b=typeof a=="string";let C,w=o??{};const E=()=>{if(typeof document<"u")return document.createElement("canvas");if(typeof OffscreenCanvas<"u")return new OffscreenCanvas(1,1);throw new Error("Canvas is not supported")},B=D=>typeof HTMLCanvasElement<"u"&&D instanceof HTMLCanvasElement||D instanceof OffscreenCanvas?D.getContext("2d"):null;if(n){const D=E();D.width=a.width,D.height=a.height;const v=B(D);if(v!=null){let x=a.height,S=a.width;if(o!==void 0&&o.resizedHeight!==void 0&&o.resizedWidth!==void 0&&(x=o.resizedHeight,S=o.resizedWidth),o!==void 0){if(w=o,o.tensorFormat!==void 0)throw new Error("Image input config format must be RGBA for HTMLImageElement");w.tensorFormat="RGBA",w.height=x,w.width=S}else w.tensorFormat="RGBA",w.height=x,w.width=S;v.drawImage(a,0,0),C=v.getImageData(0,0,S,x).data}else throw new Error("Can not access image data")}else if(u){let D,v;if(o!==void 0&&o.resizedWidth!==void 0&&o.resizedHeight!==void 0?(D=o.resizedHeight,v=o.resizedWidth):(D=a.height,v=a.width),o!==void 0&&(w=o),w.format="RGBA",w.height=D,w.width=v,o!==void 0){const x=E();x.width=v,x.height=D;const S=B(x);if(S!=null)S.putImageData(a,0,0),C=S.getImageData(0,0,v,D).data;else throw new Error("Can not access image data")}else C=a.data}else if(m){if(o===void 0)throw new Error("Please provide image config with format for Imagebitmap");const D=E();D.width=a.width,D.height=a.height;const v=B(D);if(v!=null){const x=a.height,S=a.width;return v.drawImage(a,0,0,S,x),C=v.getImageData(0,0,S,x).data,w.height=x,w.width=S,Ll(C,w)}else throw new Error("Can not access image data")}else{if(b)return new Promise((D,v)=>{const x=E(),S=B(x);if(!a||!S)return v();const F=new Image;F.crossOrigin="Anonymous",F.src=a,F.onload=()=>{x.width=F.width,x.height=F.height,S.drawImage(F,0,0,x.width,x.height);const j=S.getImageData(0,0,x.width,x.height);w.height=x.height,w.width=x.width,D(Ll(j.data,w))}});throw new Error("Input data provided is not supported - aborted tensor creation")}if(C!==void 0)return Ll(C,w);throw new Error("Input data provided is not supported - aborted tensor creation")},A6=(a,o)=>{const{width:n,height:u,download:m,dispose:b}=o,C=[1,u,n,4];return new ma({location:"texture",type:"float32",texture:a,dims:C,download:m,dispose:b})},t6=(a,o)=>{const{dataType:n,dims:u,download:m,dispose:b}=o;return new ma({location:"gpu-buffer",type:n??"float32",gpuBuffer:a,dims:u,download:m,dispose:b})},r6=(a,o)=>{const{dataType:n,dims:u,download:m,dispose:b}=o;return new ma({location:"ml-tensor",type:n??"float32",mlTensor:a,dims:u,download:m,dispose:b})},s6=(a,o,n)=>new ma({location:"cpu-pinned",type:a,data:o,dims:n??[o.length]}),to=new Map([["float32",Float32Array],["uint8",Uint8Array],["int8",Int8Array],["uint16",Uint16Array],["int16",Int16Array],["int32",Int32Array],["bool",Uint8Array],["float64",Float64Array],["uint32",Uint32Array],["int4",Uint8Array],["uint4",Uint8Array]]),z0=new Map([[Float32Array,"float32"],[Uint8Array,"uint8"],[Int8Array,"int8"],[Uint16Array,"uint16"],[Int16Array,"int16"],[Int32Array,"int32"],[Float64Array,"float64"],[Uint32Array,"uint32"]]);let qd=!1;const a6=()=>{if(!qd){qd=!0;const a=typeof BigInt64Array<"u"&&BigInt64Array.from,o=typeof BigUint64Array<"u"&&BigUint64Array.from,n=globalThis.Float16Array,u=typeof n<"u"&&n.from;a&&(to.set("int64",BigInt64Array),z0.set(BigInt64Array,"int64")),o&&(to.set("uint64",BigUint64Array),z0.set(BigUint64Array,"uint64")),u?(to.set("float16",n),z0.set(n,"float16")):to.set("float16",Uint16Array)}},n6=a=>{let o=1;for(let n=0;n<a.length;n++){const u=a[n];if(typeof u!="number"||!Number.isSafeInteger(u))throw new TypeError(`dims[${n}] must be an integer, got: ${u}`);if(u<0)throw new RangeError(`dims[${n}] must be a non-negative integer, got: ${u}`);o*=u}return o},i6=(a,o)=>{switch(a.location){case"cpu":return new ma(a.type,a.data,o);case"cpu-pinned":return new ma({location:"cpu-pinned",data:a.data,type:a.type,dims:o});case"texture":return new ma({location:"texture",texture:a.texture,type:a.type,dims:o});case"gpu-buffer":return new ma({location:"gpu-buffer",gpuBuffer:a.gpuBuffer,type:a.type,dims:o});case"ml-tensor":return new ma({location:"ml-tensor",mlTensor:a.mlTensor,type:a.type,dims:o});default:throw new Error(`tensorReshape: tensor location ${a.location} is not supported`)}};let ma=class{constructor(o,n,u){a6();let m,b;if(typeof o=="object"&&"location"in o)switch(this.dataLocation=o.location,m=o.type,b=o.dims,o.location){case"cpu-pinned":{const w=to.get(m);if(!w)throw new TypeError(`unsupported type "${m}" to create tensor from pinned buffer`);if(!(o.data instanceof w))throw new TypeError(`buffer should be of type ${w.name}`);this.cpuData=o.data;break}case"texture":{if(m!=="float32")throw new TypeError(`unsupported type "${m}" to create tensor from texture`);this.gpuTextureData=o.texture,this.downloader=o.download,this.disposer=o.dispose;break}case"gpu-buffer":{if(m!=="float32"&&m!=="float16"&&m!=="int32"&&m!=="int64"&&m!=="uint32"&&m!=="uint8"&&m!=="bool"&&m!=="uint4"&&m!=="int4")throw new TypeError(`unsupported type "${m}" to create tensor from gpu buffer`);this.gpuBufferData=o.gpuBuffer,this.downloader=o.download,this.disposer=o.dispose;break}case"ml-tensor":{if(m!=="float32"&&m!=="float16"&&m!=="int32"&&m!=="int64"&&m!=="uint32"&&m!=="uint64"&&m!=="int8"&&m!=="uint8"&&m!=="bool"&&m!=="uint4"&&m!=="int4")throw new TypeError(`unsupported type "${m}" to create tensor from MLTensor`);this.mlTensorData=o.mlTensor,this.downloader=o.download,this.disposer=o.dispose;break}default:throw new Error(`Tensor constructor: unsupported location '${this.dataLocation}'`)}else{let w,E;if(typeof o=="string")if(m=o,E=u,o==="string"){if(!Array.isArray(n))throw new TypeError("A string tensor's data must be a string array.");w=n}else{const B=to.get(o);if(B===void 0)throw new TypeError(`Unsupported tensor type: ${o}.`);if(Array.isArray(n)){if(o==="float16"&&B===Uint16Array||o==="uint4"||o==="int4")throw new TypeError(`Creating a ${o} tensor from number array is not supported. Please use ${B.name} as data.`);o==="uint64"||o==="int64"?w=B.from(n,BigInt):w=B.from(n)}else if(n instanceof B)w=n;else if(n instanceof Uint8ClampedArray)if(o==="uint8")w=Uint8Array.from(n);else throw new TypeError("A Uint8ClampedArray tensor's data must be type of uint8");else if(o==="float16"&&n instanceof Uint16Array&&B!==Uint16Array)w=new globalThis.Float16Array(n.buffer,n.byteOffset,n.length);else throw new TypeError(`A ${m} tensor's data must be type of ${B}`)}else if(E=n,Array.isArray(o)){if(o.length===0)throw new TypeError("Tensor type cannot be inferred from an empty array.");const B=typeof o[0];if(B==="string")m="string",w=o;else if(B==="boolean")m="bool",w=Uint8Array.from(o);else throw new TypeError(`Invalid element type of data array: ${B}.`)}else if(o instanceof Uint8ClampedArray)m="uint8",w=Uint8Array.from(o);else{const B=z0.get(o.constructor);if(B===void 0)throw new TypeError(`Unsupported type for tensor data: ${o.constructor}.`);m=B,w=o}if(E===void 0)E=[w.length];else if(!Array.isArray(E))throw new TypeError("A tensor's dims must be a number array");b=E,this.cpuData=w,this.dataLocation="cpu"}const C=n6(b);if(this.cpuData&&C!==this.cpuData.length&&!((m==="uint4"||m==="int4")&&Math.ceil(C/2)===this.cpuData.length))throw new Error(`Tensor's size(${C}) does not match data length(${this.cpuData.length}).`);this.type=m,this.dims=b,this.size=C}static async fromImage(o,n){return e6(o,n)}static fromTexture(o,n){return A6(o,n)}static fromGpuBuffer(o,n){return t6(o,n)}static fromMLTensor(o,n){return r6(o,n)}static fromPinnedBuffer(o,n,u){return s6(o,n,u)}toDataURL(o){return q8(this,o)}toImageData(o){return $8(this,o)}get data(){if(this.ensureValid(),!this.cpuData)throw new Error("The data is not on CPU. Use `getData()` to download GPU data to CPU, or use `texture` or `gpuBuffer` property to access the GPU data directly.");return this.cpuData}get location(){return this.dataLocation}get texture(){if(this.ensureValid(),!this.gpuTextureData)throw new Error("The data is not stored as a WebGL texture.");return this.gpuTextureData}get gpuBuffer(){if(this.ensureValid(),!this.gpuBufferData)throw new Error("The data is not stored as a WebGPU buffer.");return this.gpuBufferData}get mlTensor(){if(this.ensureValid(),!this.mlTensorData)throw new Error("The data is not stored as a WebNN MLTensor.");return this.mlTensorData}async getData(o){switch(this.ensureValid(),this.dataLocation){case"cpu":case"cpu-pinned":return this.data;case"texture":case"gpu-buffer":case"ml-tensor":{if(!this.downloader)throw new Error("The current tensor is not created with a specified data downloader.");if(this.isDownloading)throw new Error("The current tensor is being downloaded.");try{this.isDownloading=!0;const n=await this.downloader();return this.downloader=void 0,this.dataLocation="cpu",this.cpuData=n,o&&this.disposer&&(this.disposer(),this.disposer=void 0),n}finally{this.isDownloading=!1}}default:throw new Error(`cannot get data from location: ${this.dataLocation}`)}}dispose(){if(this.isDownloading)throw new Error("The current tensor is being downloaded.");this.disposer&&(this.disposer(),this.disposer=void 0),this.cpuData=void 0,this.gpuTextureData=void 0,this.gpuBufferData=void 0,this.mlTensorData=void 0,this.downloader=void 0,this.isDownloading=void 0,this.dataLocation="none"}ensureValid(){if(this.dataLocation==="none")throw new Error("The tensor is disposed.")}reshape(o){if(this.ensureValid(),this.downloader||this.disposer)throw new Error("Cannot reshape a tensor that owns GPU resource.");return i6(this,o)}};const eo=ma,Wp=(a,o)=>{(typeof Ga.trace>"u"?!Ga.wasm.trace:!Ga.trace)||console.timeStamp(`${a}::ORT::${o}`)},Yp=(a,o)=>{const n=new Error().stack?.split(/\r\n|\r|\n/g)||[];let u=!1;for(let m=0;m<n.length;m++){if(u&&!n[m].includes("TRACE_FUNC")){let b=`FUNC_${a}::${n[m].trim().split(" ")[1]}`;o&&(b+=`::${o}`),Wp("CPU",b);return}n[m].includes("TRACE_FUNC")&&(u=!0)}},U2=a=>{(typeof Ga.trace>"u"?!Ga.wasm.trace:!Ga.trace)||Yp("BEGIN",a)},K2=a=>{(typeof Ga.trace>"u"?!Ga.wasm.trace:!Ga.trace)||Yp("END",a)};let o6=class Vp{constructor(o){this.handler=o}async run(o,n,u){U2();const m={};let b={};if(typeof o!="object"||o===null||o instanceof eo||Array.isArray(o))throw new TypeError("'feeds' must be an object that use input names as keys and OnnxValue as corresponding values.");let C=!0;if(typeof n=="object"){if(n===null)throw new TypeError("Unexpected argument[1]: cannot be null.");if(n instanceof eo)throw new TypeError("'fetches' cannot be a Tensor");if(Array.isArray(n)){if(n.length===0)throw new TypeError("'fetches' cannot be an empty array.");C=!1;for(const B of n){if(typeof B!="string")throw new TypeError("'fetches' must be a string array or an object.");if(this.outputNames.indexOf(B)===-1)throw new RangeError(`'fetches' contains invalid output name: ${B}.`);m[B]=null}if(typeof u=="object"&&u!==null)b=u;else if(typeof u<"u")throw new TypeError("'options' must be an object.")}else{let B=!1;const D=Object.getOwnPropertyNames(n);for(const v of this.outputNames)if(D.indexOf(v)!==-1){const x=n[v];(x===null||x instanceof eo)&&(B=!0,C=!1,m[v]=x)}if(B){if(typeof u=="object"&&u!==null)b=u;else if(typeof u<"u")throw new TypeError("'options' must be an object.")}else b=n}}else if(typeof n<"u")throw new TypeError("Unexpected argument[1]: must be 'fetches' or 'options'.");for(const B of this.inputNames)if(typeof o[B]>"u")throw new Error(`input '${B}' is missing in 'feeds'.`);if(C)for(const B of this.outputNames)m[B]=null;const w=await this.handler.run(o,m,b),E={};for(const B in w)if(Object.hasOwnProperty.call(w,B)){const D=w[B];D instanceof eo?E[B]=D:E[B]=new eo(D.type,D.data,D.dims)}return K2(),E}async release(){return this.handler.dispose()}static async create(o,n,u,m){U2();let b,C={};if(typeof o=="string"){if(b=o,typeof n=="object"&&n!==null)C=n;else if(typeof n<"u")throw new TypeError("'options' must be an object.")}else if(o instanceof Uint8Array){if(b=o,typeof n=="object"&&n!==null)C=n;else if(typeof n<"u")throw new TypeError("'options' must be an object.")}else if(o instanceof ArrayBuffer||typeof SharedArrayBuffer<"u"&&o instanceof SharedArrayBuffer){const D=o;let v=0,x=o.byteLength;if(typeof n=="object"&&n!==null)C=n;else if(typeof n=="number"){if(v=n,!Number.isSafeInteger(v))throw new RangeError("'byteOffset' must be an integer.");if(v<0||v>=D.byteLength)throw new RangeError(`'byteOffset' is out of range [0, ${D.byteLength}).`);if(x=o.byteLength-v,typeof u=="number"){if(x=u,!Number.isSafeInteger(x))throw new RangeError("'byteLength' must be an integer.");if(x<=0||v+x>D.byteLength)throw new RangeError(`'byteLength' is out of range (0, ${D.byteLength-v}].`);if(typeof m=="object"&&m!==null)C=m;else if(typeof m<"u")throw new TypeError("'options' must be an object.")}else if(typeof u<"u")throw new TypeError("'byteLength' must be a number.")}else if(typeof n<"u")throw new TypeError("'options' must be an object.");b=new Uint8Array(D,v,x)}else throw new TypeError("Unexpected argument[0]: must be 'path' or 'buffer'.");const[w,E]=await X8(C),B=await w.createInferenceSessionHandler(b,E);return K2(),new Vp(B)}startProfiling(){this.handler.startProfiling()}endProfiling(){this.handler.endProfiling()}get inputNames(){return this.handler.inputNames}get outputNames(){return this.handler.outputNames}};const l6=o6;var c6=Object.freeze({__proto__:null,InferenceSession:l6,TRACE:Wp,TRACE_FUNC_BEGIN:U2,TRACE_FUNC_END:K2,Tensor:eo,env:J8,registerBackend:U8});/*!
 * ONNX Runtime Web v1.22.0-dev.20250409-89f8206ba4
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */var gc=Object.defineProperty,u6=Object.getOwnPropertyDescriptor,d6=Object.getOwnPropertyNames,f6=Object.prototype.hasOwnProperty,g6=(a=>typeof require<"u"?require:typeof Proxy<"u"?new Proxy(a,{get:(o,n)=>(typeof require<"u"?require:o)[n]}):a)(function(a){if(typeof require<"u")return require.apply(this,arguments);throw Error('Dynamic require of "'+a+'" is not supported')}),hA=(a,o)=>()=>(a&&(o=a(a=0)),o),go=(a,o)=>{for(var n in o)gc(a,n,{get:o[n],enumerable:!0})},p6=(a,o,n,u)=>{if(o&&typeof o=="object"||typeof o=="function")for(let m of d6(o))!f6.call(a,m)&&m!==n&&gc(a,m,{get:()=>o[m],enumerable:!(u=u6(o,m))||u.enumerable});return a},$o=a=>p6(gc({},"__esModule",{value:!0}),a),Go,Hn,xi,$d,Hp,Up=hA(()=>{Go=new Map,Hn=[],xi=(a,o,n)=>{if(o&&typeof o.init=="function"&&typeof o.createInferenceSessionHandler=="function"){let u=Go.get(a);if(u===void 0)Go.set(a,{backend:o,priority:n});else{if(u.priority>n)return;if(u.priority===n&&u.backend!==o)throw new Error(`cannot register backend "${a}" using priority ${n}`)}if(n>=0){let m=Hn.indexOf(a);m!==-1&&Hn.splice(m,1);for(let b=0;b<Hn.length;b++)if(Go.get(Hn[b]).priority<=n){Hn.splice(b,0,a);return}Hn.push(a)}return}throw new TypeError("not a valid backend")},$d=async a=>{let o=Go.get(a);if(!o)return"backend not found.";if(o.initialized)return o.backend;if(o.aborted)return o.error;{let n=!!o.initPromise;try{return n||(o.initPromise=o.backend.init(a)),await o.initPromise,o.initialized=!0,o.backend}catch(u){return n||(o.error=`${u}`,o.aborted=!0),o.error}finally{delete o.initPromise}}},Hp=async a=>{let o=a.executionProviders||[],n=o.map(E=>typeof E=="string"?E:E.name),u=n.length===0?Hn:n,m,b=[],C=new Set;for(let E of u){let B=await $d(E);typeof B=="string"?b.push({name:E,err:B}):(m||(m=B),m===B&&C.add(E))}if(!m)throw new Error(`no available backend found. ERR: ${b.map(E=>`[${E.name}] ${E.err}`).join(", ")}`);for(let{name:E,err:B}of b)n.includes(E)&&console.warn(`removing requested execution provider "${E}" from session options because it is not available: ${B}`);let w=o.filter(E=>C.has(typeof E=="string"?E:E.name));return[m,new Proxy(a,{get:(E,B)=>B==="executionProviders"?w:Reflect.get(E,B)})]}}),m6=hA(()=>{Up()}),Kp,h6=hA(()=>{Kp="1.22.0-dev.20250409-89f8206ba4"}),_l,pa,Xp=hA(()=>{h6(),_l="warning",pa={wasm:{},webgl:{},webgpu:{},versions:{common:Kp},set logLevel(a){if(a!==void 0){if(typeof a!="string"||["verbose","info","warning","error","fatal"].indexOf(a)===-1)throw new Error(`Unsupported logging level: ${a}`);_l=a}},get logLevel(){return _l}},Object.defineProperty(pa,"logLevel",{enumerable:!0})}),gr,C6=hA(()=>{Xp(),gr=pa}),Zp,Jp,b6=hA(()=>{Zp=(a,o)=>{let n=typeof document<"u"?document.createElement("canvas"):new OffscreenCanvas(1,1);n.width=a.dims[3],n.height=a.dims[2];let u=n.getContext("2d");if(u!=null){let m,b;o?.tensorLayout!==void 0&&o.tensorLayout==="NHWC"?(m=a.dims[2],b=a.dims[3]):(m=a.dims[3],b=a.dims[2]);let C=o?.format!==void 0?o.format:"RGB",w=o?.norm,E,B;w===void 0||w.mean===void 0?E=[255,255,255,255]:typeof w.mean=="number"?E=[w.mean,w.mean,w.mean,w.mean]:(E=[w.mean[0],w.mean[1],w.mean[2],0],w.mean[3]!==void 0&&(E[3]=w.mean[3])),w===void 0||w.bias===void 0?B=[0,0,0,0]:typeof w.bias=="number"?B=[w.bias,w.bias,w.bias,w.bias]:(B=[w.bias[0],w.bias[1],w.bias[2],0],w.bias[3]!==void 0&&(B[3]=w.bias[3]));let D=b*m,v=0,x=D,S=D*2,F=-1;C==="RGBA"?(v=0,x=D,S=D*2,F=D*3):C==="RGB"?(v=0,x=D,S=D*2):C==="RBG"&&(v=0,S=D,x=D*2);for(let j=0;j<b;j++)for(let J=0;J<m;J++){let L=(a.data[v++]-B[0])*E[0],N=(a.data[x++]-B[1])*E[1],U=(a.data[S++]-B[2])*E[2],f=F===-1?255:(a.data[F++]-B[3])*E[3];u.fillStyle="rgba("+L+","+N+","+U+","+f+")",u.fillRect(J,j,1,1)}if("toDataURL"in n)return n.toDataURL();throw new Error("toDataURL is not supported")}else throw new Error("Can not access image data")},Jp=(a,o)=>{let n=typeof document<"u"?document.createElement("canvas").getContext("2d"):new OffscreenCanvas(1,1).getContext("2d"),u;if(n!=null){let m,b,C;o?.tensorLayout!==void 0&&o.tensorLayout==="NHWC"?(m=a.dims[2],b=a.dims[1],C=a.dims[3]):(m=a.dims[3],b=a.dims[2],C=a.dims[1]);let w=o!==void 0&&o.format!==void 0?o.format:"RGB",E=o?.norm,B,D;E===void 0||E.mean===void 0?B=[255,255,255,255]:typeof E.mean=="number"?B=[E.mean,E.mean,E.mean,E.mean]:(B=[E.mean[0],E.mean[1],E.mean[2],255],E.mean[3]!==void 0&&(B[3]=E.mean[3])),E===void 0||E.bias===void 0?D=[0,0,0,0]:typeof E.bias=="number"?D=[E.bias,E.bias,E.bias,E.bias]:(D=[E.bias[0],E.bias[1],E.bias[2],0],E.bias[3]!==void 0&&(D[3]=E.bias[3]));let v=b*m;if(o!==void 0&&(o.format!==void 0&&C===4&&o.format!=="RGBA"||C===3&&o.format!=="RGB"&&o.format!=="BGR"))throw new Error("Tensor format doesn't match input tensor dims");let x=4,S=0,F=1,j=2,J=3,L=0,N=v,U=v*2,f=-1;w==="RGBA"?(L=0,N=v,U=v*2,f=v*3):w==="RGB"?(L=0,N=v,U=v*2):w==="RBG"&&(L=0,U=v,N=v*2),u=n.createImageData(m,b);for(let k=0;k<b*m;S+=x,F+=x,j+=x,J+=x,k++)u.data[S]=(a.data[L++]-D[0])*B[0],u.data[F]=(a.data[N++]-D[1])*B[1],u.data[j]=(a.data[U++]-D[2])*B[2],u.data[J]=f===-1?255:(a.data[f++]-D[3])*B[3]}else throw new Error("Can not access image data");return u}}),w0,qp,$p,em,Am,tm,I6=hA(()=>{pc(),w0=(a,o)=>{if(a===void 0)throw new Error("Image buffer must be defined");if(o.height===void 0||o.width===void 0)throw new Error("Image height and width must be defined");if(o.tensorLayout==="NHWC")throw new Error("NHWC Tensor layout is not supported yet");let{height:n,width:u}=o,m=o.norm??{mean:255,bias:0},b,C;typeof m.mean=="number"?b=[m.mean,m.mean,m.mean,m.mean]:b=[m.mean[0],m.mean[1],m.mean[2],m.mean[3]??255],typeof m.bias=="number"?C=[m.bias,m.bias,m.bias,m.bias]:C=[m.bias[0],m.bias[1],m.bias[2],m.bias[3]??0];let w=o.format!==void 0?o.format:"RGBA",E=o.tensorFormat!==void 0&&o.tensorFormat!==void 0?o.tensorFormat:"RGB",B=n*u,D=E==="RGBA"?new Float32Array(B*4):new Float32Array(B*3),v=4,x=0,S=1,F=2,j=3,J=0,L=B,N=B*2,U=-1;w==="RGB"&&(v=3,x=0,S=1,F=2,j=-1),E==="RGBA"?U=B*3:E==="RBG"?(J=0,N=B,L=B*2):E==="BGR"&&(N=0,L=B,J=B*2);for(let f=0;f<B;f++,x+=v,F+=v,S+=v,j+=v)D[J++]=(a[x]+C[0])/b[0],D[L++]=(a[S]+C[1])/b[1],D[N++]=(a[F]+C[2])/b[2],U!==-1&&j!==-1&&(D[U++]=(a[j]+C[3])/b[3]);return E==="RGBA"?new na("float32",D,[1,4,n,u]):new na("float32",D,[1,3,n,u])},qp=async(a,o)=>{let n=typeof HTMLImageElement<"u"&&a instanceof HTMLImageElement,u=typeof ImageData<"u"&&a instanceof ImageData,m=typeof ImageBitmap<"u"&&a instanceof ImageBitmap,b=typeof a=="string",C,w=o??{},E=()=>{if(typeof document<"u")return document.createElement("canvas");if(typeof OffscreenCanvas<"u")return new OffscreenCanvas(1,1);throw new Error("Canvas is not supported")},B=D=>typeof HTMLCanvasElement<"u"&&D instanceof HTMLCanvasElement||D instanceof OffscreenCanvas?D.getContext("2d"):null;if(n){let D=E();D.width=a.width,D.height=a.height;let v=B(D);if(v!=null){let x=a.height,S=a.width;if(o!==void 0&&o.resizedHeight!==void 0&&o.resizedWidth!==void 0&&(x=o.resizedHeight,S=o.resizedWidth),o!==void 0){if(w=o,o.tensorFormat!==void 0)throw new Error("Image input config format must be RGBA for HTMLImageElement");w.tensorFormat="RGBA",w.height=x,w.width=S}else w.tensorFormat="RGBA",w.height=x,w.width=S;v.drawImage(a,0,0),C=v.getImageData(0,0,S,x).data}else throw new Error("Can not access image data")}else if(u){let D,v;if(o!==void 0&&o.resizedWidth!==void 0&&o.resizedHeight!==void 0?(D=o.resizedHeight,v=o.resizedWidth):(D=a.height,v=a.width),o!==void 0&&(w=o),w.format="RGBA",w.height=D,w.width=v,o!==void 0){let x=E();x.width=v,x.height=D;let S=B(x);if(S!=null)S.putImageData(a,0,0),C=S.getImageData(0,0,v,D).data;else throw new Error("Can not access image data")}else C=a.data}else if(m){if(o===void 0)throw new Error("Please provide image config with format for Imagebitmap");let D=E();D.width=a.width,D.height=a.height;let v=B(D);if(v!=null){let x=a.height,S=a.width;return v.drawImage(a,0,0,S,x),C=v.getImageData(0,0,S,x).data,w.height=x,w.width=S,w0(C,w)}else throw new Error("Can not access image data")}else{if(b)return new Promise((D,v)=>{let x=E(),S=B(x);if(!a||!S)return v();let F=new Image;F.crossOrigin="Anonymous",F.src=a,F.onload=()=>{x.width=F.width,x.height=F.height,S.drawImage(F,0,0,x.width,x.height);let j=S.getImageData(0,0,x.width,x.height);w.height=x.height,w.width=x.width,D(w0(j.data,w))}});throw new Error("Input data provided is not supported - aborted tensor creation")}if(C!==void 0)return w0(C,w);throw new Error("Input data provided is not supported - aborted tensor creation")},$p=(a,o)=>{let{width:n,height:u,download:m,dispose:b}=o,C=[1,u,n,4];return new na({location:"texture",type:"float32",texture:a,dims:C,download:m,dispose:b})},em=(a,o)=>{let{dataType:n,dims:u,download:m,dispose:b}=o;return new na({location:"gpu-buffer",type:n??"float32",gpuBuffer:a,dims:u,download:m,dispose:b})},Am=(a,o)=>{let{dataType:n,dims:u,download:m,dispose:b}=o;return new na({location:"ml-tensor",type:n??"float32",mlTensor:a,dims:u,download:m,dispose:b})},tm=(a,o,n)=>new na({location:"cpu-pinned",type:a,data:o,dims:n??[o.length]})}),vi,Wo,Rl,rm,w6=hA(()=>{vi=new Map([["float32",Float32Array],["uint8",Uint8Array],["int8",Int8Array],["uint16",Uint16Array],["int16",Int16Array],["int32",Int32Array],["bool",Uint8Array],["float64",Float64Array],["uint32",Uint32Array],["int4",Uint8Array],["uint4",Uint8Array]]),Wo=new Map([[Float32Array,"float32"],[Uint8Array,"uint8"],[Int8Array,"int8"],[Uint16Array,"uint16"],[Int16Array,"int16"],[Int32Array,"int32"],[Float64Array,"float64"],[Uint32Array,"uint32"]]),Rl=!1,rm=()=>{if(!Rl){Rl=!0;let a=typeof BigInt64Array<"u"&&BigInt64Array.from,o=typeof BigUint64Array<"u"&&BigUint64Array.from,n=globalThis.Float16Array,u=typeof n<"u"&&n.from;a&&(vi.set("int64",BigInt64Array),Wo.set(BigInt64Array,"int64")),o&&(vi.set("uint64",BigUint64Array),Wo.set(BigUint64Array,"uint64")),u?(vi.set("float16",n),Wo.set(n,"float16")):vi.set("float16",Uint16Array)}}}),sm,am,k6=hA(()=>{pc(),sm=a=>{let o=1;for(let n=0;n<a.length;n++){let u=a[n];if(typeof u!="number"||!Number.isSafeInteger(u))throw new TypeError(`dims[${n}] must be an integer, got: ${u}`);if(u<0)throw new RangeError(`dims[${n}] must be a non-negative integer, got: ${u}`);o*=u}return o},am=(a,o)=>{switch(a.location){case"cpu":return new na(a.type,a.data,o);case"cpu-pinned":return new na({location:"cpu-pinned",data:a.data,type:a.type,dims:o});case"texture":return new na({location:"texture",texture:a.texture,type:a.type,dims:o});case"gpu-buffer":return new na({location:"gpu-buffer",gpuBuffer:a.gpuBuffer,type:a.type,dims:o});case"ml-tensor":return new na({location:"ml-tensor",mlTensor:a.mlTensor,type:a.type,dims:o});default:throw new Error(`tensorReshape: tensor location ${a.location} is not supported`)}}}),na,pc=hA(()=>{b6(),I6(),w6(),k6(),na=class{constructor(a,o,n){rm();let u,m;if(typeof a=="object"&&"location"in a)switch(this.dataLocation=a.location,u=a.type,m=a.dims,a.location){case"cpu-pinned":{let C=vi.get(u);if(!C)throw new TypeError(`unsupported type "${u}" to create tensor from pinned buffer`);if(!(a.data instanceof C))throw new TypeError(`buffer should be of type ${C.name}`);this.cpuData=a.data;break}case"texture":{if(u!=="float32")throw new TypeError(`unsupported type "${u}" to create tensor from texture`);this.gpuTextureData=a.texture,this.downloader=a.download,this.disposer=a.dispose;break}case"gpu-buffer":{if(u!=="float32"&&u!=="float16"&&u!=="int32"&&u!=="int64"&&u!=="uint32"&&u!=="uint8"&&u!=="bool"&&u!=="uint4"&&u!=="int4")throw new TypeError(`unsupported type "${u}" to create tensor from gpu buffer`);this.gpuBufferData=a.gpuBuffer,this.downloader=a.download,this.disposer=a.dispose;break}case"ml-tensor":{if(u!=="float32"&&u!=="float16"&&u!=="int32"&&u!=="int64"&&u!=="uint32"&&u!=="uint64"&&u!=="int8"&&u!=="uint8"&&u!=="bool"&&u!=="uint4"&&u!=="int4")throw new TypeError(`unsupported type "${u}" to create tensor from MLTensor`);this.mlTensorData=a.mlTensor,this.downloader=a.download,this.disposer=a.dispose;break}default:throw new Error(`Tensor constructor: unsupported location '${this.dataLocation}'`)}else{let C,w;if(typeof a=="string")if(u=a,w=n,a==="string"){if(!Array.isArray(o))throw new TypeError("A string tensor's data must be a string array.");C=o}else{let E=vi.get(a);if(E===void 0)throw new TypeError(`Unsupported tensor type: ${a}.`);if(Array.isArray(o)){if(a==="float16"&&E===Uint16Array||a==="uint4"||a==="int4")throw new TypeError(`Creating a ${a} tensor from number array is not supported. Please use ${E.name} as data.`);a==="uint64"||a==="int64"?C=E.from(o,BigInt):C=E.from(o)}else if(o instanceof E)C=o;else if(o instanceof Uint8ClampedArray)if(a==="uint8")C=Uint8Array.from(o);else throw new TypeError("A Uint8ClampedArray tensor's data must be type of uint8");else if(a==="float16"&&o instanceof Uint16Array&&E!==Uint16Array)C=new globalThis.Float16Array(o.buffer,o.byteOffset,o.length);else throw new TypeError(`A ${u} tensor's data must be type of ${E}`)}else if(w=o,Array.isArray(a)){if(a.length===0)throw new TypeError("Tensor type cannot be inferred from an empty array.");let E=typeof a[0];if(E==="string")u="string",C=a;else if(E==="boolean")u="bool",C=Uint8Array.from(a);else throw new TypeError(`Invalid element type of data array: ${E}.`)}else if(a instanceof Uint8ClampedArray)u="uint8",C=Uint8Array.from(a);else{let E=Wo.get(a.constructor);if(E===void 0)throw new TypeError(`Unsupported type for tensor data: ${a.constructor}.`);u=E,C=a}if(w===void 0)w=[C.length];else if(!Array.isArray(w))throw new TypeError("A tensor's dims must be a number array");m=w,this.cpuData=C,this.dataLocation="cpu"}let b=sm(m);if(this.cpuData&&b!==this.cpuData.length&&!((u==="uint4"||u==="int4")&&Math.ceil(b/2)===this.cpuData.length))throw new Error(`Tensor's size(${b}) does not match data length(${this.cpuData.length}).`);this.type=u,this.dims=m,this.size=b}static async fromImage(a,o){return qp(a,o)}static fromTexture(a,o){return $p(a,o)}static fromGpuBuffer(a,o){return em(a,o)}static fromMLTensor(a,o){return Am(a,o)}static fromPinnedBuffer(a,o,n){return tm(a,o,n)}toDataURL(a){return Zp(this,a)}toImageData(a){return Jp(this,a)}get data(){if(this.ensureValid(),!this.cpuData)throw new Error("The data is not on CPU. Use `getData()` to download GPU data to CPU, or use `texture` or `gpuBuffer` property to access the GPU data directly.");return this.cpuData}get location(){return this.dataLocation}get texture(){if(this.ensureValid(),!this.gpuTextureData)throw new Error("The data is not stored as a WebGL texture.");return this.gpuTextureData}get gpuBuffer(){if(this.ensureValid(),!this.gpuBufferData)throw new Error("The data is not stored as a WebGPU buffer.");return this.gpuBufferData}get mlTensor(){if(this.ensureValid(),!this.mlTensorData)throw new Error("The data is not stored as a WebNN MLTensor.");return this.mlTensorData}async getData(a){switch(this.ensureValid(),this.dataLocation){case"cpu":case"cpu-pinned":return this.data;case"texture":case"gpu-buffer":case"ml-tensor":{if(!this.downloader)throw new Error("The current tensor is not created with a specified data downloader.");if(this.isDownloading)throw new Error("The current tensor is being downloaded.");try{this.isDownloading=!0;let o=await this.downloader();return this.downloader=void 0,this.dataLocation="cpu",this.cpuData=o,a&&this.disposer&&(this.disposer(),this.disposer=void 0),o}finally{this.isDownloading=!1}}default:throw new Error(`cannot get data from location: ${this.dataLocation}`)}}dispose(){if(this.isDownloading)throw new Error("The current tensor is being downloaded.");this.disposer&&(this.disposer(),this.disposer=void 0),this.cpuData=void 0,this.gpuTextureData=void 0,this.gpuBufferData=void 0,this.mlTensorData=void 0,this.downloader=void 0,this.isDownloading=void 0,this.dataLocation="none"}ensureValid(){if(this.dataLocation==="none")throw new Error("The tensor is disposed.")}reshape(a){if(this.ensureValid(),this.downloader||this.disposer)throw new Error("Cannot reshape a tensor that owns GPU resource.");return am(this,a)}}}),Pa,nm=hA(()=>{pc(),Pa=na}),e0,jl,Qa,ha,im=hA(()=>{Xp(),e0=(a,o)=>{(typeof pa.trace>"u"?!pa.wasm.trace:!pa.trace)||console.timeStamp(`${a}::ORT::${o}`)},jl=(a,o)=>{let n=new Error().stack?.split(/\r\n|\r|\n/g)||[],u=!1;for(let m=0;m<n.length;m++){if(u&&!n[m].includes("TRACE_FUNC")){let b=`FUNC_${a}::${n[m].trim().split(" ")[1]}`;o&&(b+=`::${o}`),e0("CPU",b);return}n[m].includes("TRACE_FUNC")&&(u=!0)}},Qa=a=>{(typeof pa.trace>"u"?!pa.wasm.trace:!pa.trace)||jl("BEGIN",a)},ha=a=>{(typeof pa.trace>"u"?!pa.wasm.trace:!pa.trace)||jl("END",a)}}),om,E6=hA(()=>{Up(),nm(),im(),om=class lm{constructor(o){this.handler=o}async run(o,n,u){Qa();let m={},b={};if(typeof o!="object"||o===null||o instanceof Pa||Array.isArray(o))throw new TypeError("'feeds' must be an object that use input names as keys and OnnxValue as corresponding values.");let C=!0;if(typeof n=="object"){if(n===null)throw new TypeError("Unexpected argument[1]: cannot be null.");if(n instanceof Pa)throw new TypeError("'fetches' cannot be a Tensor");if(Array.isArray(n)){if(n.length===0)throw new TypeError("'fetches' cannot be an empty array.");C=!1;for(let B of n){if(typeof B!="string")throw new TypeError("'fetches' must be a string array or an object.");if(this.outputNames.indexOf(B)===-1)throw new RangeError(`'fetches' contains invalid output name: ${B}.`);m[B]=null}if(typeof u=="object"&&u!==null)b=u;else if(typeof u<"u")throw new TypeError("'options' must be an object.")}else{let B=!1,D=Object.getOwnPropertyNames(n);for(let v of this.outputNames)if(D.indexOf(v)!==-1){let x=n[v];(x===null||x instanceof Pa)&&(B=!0,C=!1,m[v]=x)}if(B){if(typeof u=="object"&&u!==null)b=u;else if(typeof u<"u")throw new TypeError("'options' must be an object.")}else b=n}}else if(typeof n<"u")throw new TypeError("Unexpected argument[1]: must be 'fetches' or 'options'.");for(let B of this.inputNames)if(typeof o[B]>"u")throw new Error(`input '${B}' is missing in 'feeds'.`);if(C)for(let B of this.outputNames)m[B]=null;let w=await this.handler.run(o,m,b),E={};for(let B in w)if(Object.hasOwnProperty.call(w,B)){let D=w[B];D instanceof Pa?E[B]=D:E[B]=new Pa(D.type,D.data,D.dims)}return ha(),E}async release(){return this.handler.dispose()}static async create(o,n,u,m){Qa();let b,C={};if(typeof o=="string"){if(b=o,typeof n=="object"&&n!==null)C=n;else if(typeof n<"u")throw new TypeError("'options' must be an object.")}else if(o instanceof Uint8Array){if(b=o,typeof n=="object"&&n!==null)C=n;else if(typeof n<"u")throw new TypeError("'options' must be an object.")}else if(o instanceof ArrayBuffer||typeof SharedArrayBuffer<"u"&&o instanceof SharedArrayBuffer){let D=o,v=0,x=o.byteLength;if(typeof n=="object"&&n!==null)C=n;else if(typeof n=="number"){if(v=n,!Number.isSafeInteger(v))throw new RangeError("'byteOffset' must be an integer.");if(v<0||v>=D.byteLength)throw new RangeError(`'byteOffset' is out of range [0, ${D.byteLength}).`);if(x=o.byteLength-v,typeof u=="number"){if(x=u,!Number.isSafeInteger(x))throw new RangeError("'byteLength' must be an integer.");if(x<=0||v+x>D.byteLength)throw new RangeError(`'byteLength' is out of range (0, ${D.byteLength-v}].`);if(typeof m=="object"&&m!==null)C=m;else if(typeof m<"u")throw new TypeError("'options' must be an object.")}else if(typeof u<"u")throw new TypeError("'byteLength' must be a number.")}else if(typeof n<"u")throw new TypeError("'options' must be an object.");b=new Uint8Array(D,v,x)}else throw new TypeError("Unexpected argument[0]: must be 'path' or 'buffer'.");let[w,E]=await Hp(C),B=await w.createInferenceSessionHandler(b,E);return ha(),new lm(B)}startProfiling(){this.handler.startProfiling()}endProfiling(){this.handler.endProfiling()}get inputNames(){return this.handler.inputNames}get outputNames(){return this.handler.outputNames}get inputMetadata(){return this.handler.inputMetadata}get outputMetadata(){return this.handler.outputMetadata}}}),mc,M6=hA(()=>{E6(),mc=om}),v6=hA(()=>{}),B6=hA(()=>{}),x6=hA(()=>{}),y6=hA(()=>{}),cm={};go(cm,{InferenceSession:()=>mc,TRACE:()=>e0,TRACE_FUNC_BEGIN:()=>Qa,TRACE_FUNC_END:()=>ha,Tensor:()=>Pa,env:()=>gr,registerBackend:()=>xi});var Fa=hA(()=>{m6(),C6(),M6(),nm(),v6(),B6(),im(),x6(),y6()}),hc=hA(()=>{}),um={};go(um,{default:()=>dm});var Wl,Yl,dm,D6=hA(()=>{hC(),Qi(),Cc(),Wl="ort-wasm-proxy-worker",Yl=globalThis.self?.name===Wl,Yl&&(self.onmessage=a=>{let{type:o,in:n}=a.data;try{switch(o){case"init-wasm":bc(n.wasm).then(()=>{zc(n).then(()=>{postMessage({type:o})},u=>{postMessage({type:o,err:u})})},u=>{postMessage({type:o,err:u})});break;case"init-ep":{let{epName:u,env:m}=n;Nc(m,u).then(()=>{postMessage({type:o})},b=>{postMessage({type:o,err:b})});break}case"copy-from":{let{buffer:u}=n,m=X0(u);postMessage({type:o,out:m});break}case"create":{let{model:u,options:m}=n;Lc(u,m).then(b=>{postMessage({type:o,out:b})},b=>{postMessage({type:o,err:b})});break}case"release":_c(n),postMessage({type:o});break;case"run":{let{sessionId:u,inputIndices:m,inputs:b,outputIndices:C,options:w}=n;Rc(u,m,b,C,new Array(C.length).fill(null),w).then(E=>{E.some(B=>B[3]!=="cpu")?postMessage({type:o,err:"Proxy does not support non-cpu tensor location."}):postMessage({type:o,out:E},Wc([...b,...E]))},E=>{postMessage({type:o,err:E})});break}case"end-profiling":jc(n),postMessage({type:o});break;default:}}catch(u){postMessage({type:o,err:u})}}),dm=Yl?null:a=>new Worker(a??aa,{type:"module",name:Wl})}),fm={};go(fm,{default:()=>gm});var Vl,Hl,gm,ef,T6=hA(()=>{Hl=(Vl=import.meta.url,async function(a={}){var o,n,u=a,m=new Promise((G,W)=>{o=G,n=W}),b=typeof window=="object",C=typeof WorkerGlobalScope<"u",w=C&&self.name?.startsWith("em-pthread");u.mountExternalData=(G,W)=>{G.startsWith("./")&&(G=G.substring(2)),(u.Eb||(u.Eb=new Map)).set(G,W)},u.unmountExternalData=()=>{delete u.Eb};var E=globalThis.SharedArrayBuffer??new WebAssembly.Memory({initial:0,maximum:0,pc:!0}).buffer.constructor;let B=G=>async(...W)=>{try{if(u.Fb)throw Error("Session already started");let Z=u.Fb={dc:W[0],errors:[]},se=await G(...W);if(u.Fb!==Z)throw Error("Session mismatch");u.Jb?.flush();let ce=Z.errors;if(0<ce.length){let Te=await Promise.all(ce);if(Te=Te.filter(Ze=>Ze),0<Te.length)throw Error(Te.join(`
`))}return se}finally{u.Fb=null}};u.jsepInit=(G,W)=>{if(G==="webgpu"){[u.Jb,u.Ub,u.Yb,u.Kb,u.Xb,u.jb,u.Zb,u.ac,u.Vb,u.Wb,u.$b]=W;let Z=u.Jb;u.jsepRegisterBuffer=(se,ce,Te,Ze)=>Z.registerBuffer(se,ce,Te,Ze),u.jsepGetBuffer=se=>Z.getBuffer(se),u.jsepCreateDownloader=(se,ce,Te)=>Z.createDownloader(se,ce,Te),u.jsepOnCreateSession=se=>{Z.onCreateSession(se)},u.jsepOnReleaseSession=se=>{Z.onReleaseSession(se)},u.jsepOnRunStart=se=>Z.onRunStart(se),u.bc=(se,ce)=>{Z.upload(se,ce)}}else if(G==="webnn"){let Z=W[0];[u.nc,u.Nb,u.webnnEnsureTensor,u.Ob,u.webnnDownloadTensor]=W.slice(1),u.webnnReleaseTensorId=u.Nb,u.webnnUploadTensor=u.Ob,u.webnnOnRunStart=se=>Z.onRunStart(se),u.webnnOnRunEnd=Z.onRunEnd.bind(Z),u.webnnRegisterMLContext=(se,ce)=>{Z.registerMLContext(se,ce)},u.webnnOnReleaseSession=se=>{Z.onReleaseSession(se)},u.webnnCreateMLTensorDownloader=(se,ce)=>Z.createMLTensorDownloader(se,ce),u.webnnRegisterMLTensor=(se,ce,Te,Ze)=>Z.registerMLTensor(se,ce,Te,Ze),u.webnnCreateMLContext=se=>Z.createMLContext(se),u.webnnRegisterMLConstant=(se,ce,Te,Ze,dA,MA)=>Z.registerMLConstant(se,ce,Te,Ze,dA,u.Eb,MA),u.webnnRegisterGraphInput=Z.registerGraphInput.bind(Z),u.webnnIsGraphInput=Z.isGraphInput.bind(Z),u.webnnCreateTemporaryTensor=Z.createTemporaryTensor.bind(Z),u.webnnIsInt64Supported=Z.isInt64Supported.bind(Z)}};let D=()=>{let G=(W,Z,se)=>(...ce)=>{let Te=Jt,Ze=Z?.();ce=W(...ce);let dA=Z?.();return Ze!==dA&&(W=dA,se(Ze),Z=se=null),Jt!=Te?new Promise((MA,FA)=>{wr={resolve:MA,reject:FA}}):ce};(()=>{for(let W of["_OrtAppendExecutionProvider","_OrtCreateSession","_OrtRun","_OrtRunWithBinding","_OrtBindInput"])u[W]=G(u[W],()=>u[W],Z=>u[W]=Z)})(),B!==void 0&&(u._OrtRun=B(u._OrtRun),u._OrtRunWithBinding=B(u._OrtRunWithBinding)),D=void 0};u.asyncInit=()=>{D?.()};var v,x,S=Object.assign({},u),F=(G,W)=>{throw W},j="";(b||C)&&(C?j=self.location.href:typeof document<"u"&&document.currentScript&&(j=document.currentScript.src),Vl&&(j=Vl),j=j.startsWith("blob:")?"":j.slice(0,j.replace(/[?#].*/,"").lastIndexOf("/")+1),C&&(x=G=>{var W=new XMLHttpRequest;return W.open("GET",G,!1),W.responseType="arraybuffer",W.send(null),new Uint8Array(W.response)}),v=async G=>{if(Ne(G))return new Promise((Z,se)=>{var ce=new XMLHttpRequest;ce.open("GET",G,!0),ce.responseType="arraybuffer",ce.onload=()=>{ce.status==200||ce.status==0&&ce.response?Z(ce.response):se(ce.status)},ce.onerror=se,ce.send(null)});var W=await fetch(G,{credentials:"same-origin"});if(W.ok)return W.arrayBuffer();throw Error(W.status+" : "+W.url)});var J=console.log.bind(console),L=console.error.bind(console),N=J,U=L;Object.assign(u,S),S=null;var f,k,e,d,y,ee,T,O,we,$,be,Ce,Ee,Be=u.wasmBinary,ve=!1,Ne=G=>G.startsWith("file://");function Fe(){return f.buffer!=d.buffer&&ze(),d}function le(){return f.buffer!=d.buffer&&ze(),y}function Ae(){return f.buffer!=d.buffer&&ze(),ee}function pe(){return f.buffer!=d.buffer&&ze(),T}function oe(){return f.buffer!=d.buffer&&ze(),O}function Ge(){return f.buffer!=d.buffer&&ze(),we}function nA(){return f.buffer!=d.buffer&&ze(),$}function Je(){return f.buffer!=d.buffer&&ze(),Ee}if(w){let G=function(W){try{var Z=W.data,se=Z.Bb;if(se==="load"){let ce=[];self.onmessage=Te=>ce.push(Te),self.startWorker=()=>{postMessage({Bb:"loaded"});for(let Te of ce)G(Te);self.onmessage=G};for(let Te of Z.Rb)u[Te]&&!u[Te].proxy||(u[Te]=(...Ze)=>{postMessage({Bb:"callHandler",Qb:Te,args:Ze})},Te=="print"&&(N=u[Te]),Te=="printErr"&&(U=u[Te]));f=Z.kc,ze(),aA(Z.lc)}else if(se==="run"){re(Z.Ab),Ha(Z.Ab,0,0,1,0,0),Wr(),Ie(Z.Ab),kA||(ln(),kA=!0);try{De(Z.fc,Z.Hb)}catch(ce){if(ce!="unwind")throw ce}}else Z.target!=="setimmediate"&&(se==="checkMailbox"?kA&&We():se&&(U(`worker: received unknown command ${se}`),U(Z)))}catch(ce){throw Sn(),ce}};var aA,kA=!1;U=function(...W){W=W.join(" "),console.error(W)},self.alert=function(...W){postMessage({Bb:"alert",text:W.join(" "),ic:ka()})},self.onunhandledrejection=W=>{throw W.reason||W},self.onmessage=G}function ze(){var G=f.buffer;u.HEAP8=d=new Int8Array(G),u.HEAP16=ee=new Int16Array(G),u.HEAPU8=y=new Uint8Array(G),u.HEAPU16=T=new Uint16Array(G),u.HEAP32=O=new Int32Array(G),u.HEAPU32=we=new Uint32Array(G),u.HEAPF32=$=new Float32Array(G),u.HEAPF64=Ee=new Float64Array(G),u.HEAP64=be=new BigInt64Array(G),u.HEAPU64=Ce=new BigUint64Array(G)}function de(){w?startWorker(u):UA.Ca()}w||(f=new WebAssembly.Memory({initial:256,maximum:65536,shared:!0}),ze());var Se,ge=0,He=null;function Xe(){if(--ge==0&&He){var G=He;He=null,G()}}function AA(G){throw U(G="Aborted("+G+")"),ve=!0,G=new WebAssembly.RuntimeError(G+". Build with -sASSERTIONS for more info."),n(G),G}function qe(){return{a:{L:fA,Aa:cA,b:xe,$:oA,A:SA,pa:tr,X:_t,Z:Rt,qa:zA,na:rr,ga:Ps,ma:Rs,J:Is,Y:ea,V:fs,oa:ws,W:ks,va:oa,E:uA,Q:WA,O:is,D:Sa,u:Ca,r:Oa,P:Ss,z:Oe,R:K,ja:fe,T:eA,aa:xA,M:BA,F:Ve,ia:Ie,sa:gt,t:Qr,Ba:lr,w:Yr,o:kr,l:_A,c:js,n:Vr,j:ei,v:ba,p:la,f:Ai,s:en,m:Ra,e:Br,k:yA,i:es,g:Bn,d:An,da:xn,ea:Tn,fa:rn,ba:Bt,ca:ja,N:ta,xa:Os,ua:Gn,h:ti,C:Wa,G:iA,ta:Pn,x:ri,ra:DA,U:Ks,q:Hs,y:an,K:Hr,S:ls,za:dr,ya:si,ka:Va,la:on,_:tA,B:wa,I:CA,ha:ps,H:ni,a:f,wa:ZA}}}var H={829644:(G,W,Z,se,ce)=>{if(u===void 0||!u.Eb)return 1;if((G=QA(Number(G>>>0))).startsWith("./")&&(G=G.substring(2)),!(G=u.Eb.get(G)))return 2;if(W=Number(W>>>0),Z=Number(Z>>>0),se=Number(se>>>0),W+Z>G.byteLength)return 3;try{let Te=G.subarray(W,W+Z);switch(ce){case 0:le().set(Te,se>>>0);break;case 1:u.mc?u.mc(se,Te):u.bc(se,Te);break;default:return 4}return 0}catch{return 4}},830468:(G,W,Z)=>{u.Ob(G,le().subarray(W>>>0,W+Z>>>0))},830532:()=>u.nc(),830574:G=>{u.Nb(G)},830611:()=>{u.Vb()},830642:()=>{u.Wb()},830671:()=>{u.$b()},830696:G=>u.Ub(G),830729:G=>u.Yb(G),830761:(G,W,Z)=>{u.Kb(Number(G),Number(W),Number(Z),!0)},830824:(G,W,Z)=>{u.Kb(Number(G),Number(W),Number(Z))},830881:()=>typeof wasmOffsetConverter<"u",830938:G=>{u.jb("Abs",G,void 0)},830989:G=>{u.jb("Neg",G,void 0)},831040:G=>{u.jb("Floor",G,void 0)},831093:G=>{u.jb("Ceil",G,void 0)},831145:G=>{u.jb("Reciprocal",G,void 0)},831203:G=>{u.jb("Sqrt",G,void 0)},831255:G=>{u.jb("Exp",G,void 0)},831306:G=>{u.jb("Erf",G,void 0)},831357:G=>{u.jb("Sigmoid",G,void 0)},831412:(G,W,Z)=>{u.jb("HardSigmoid",G,{alpha:W,beta:Z})},831491:G=>{u.jb("Log",G,void 0)},831542:G=>{u.jb("Sin",G,void 0)},831593:G=>{u.jb("Cos",G,void 0)},831644:G=>{u.jb("Tan",G,void 0)},831695:G=>{u.jb("Asin",G,void 0)},831747:G=>{u.jb("Acos",G,void 0)},831799:G=>{u.jb("Atan",G,void 0)},831851:G=>{u.jb("Sinh",G,void 0)},831903:G=>{u.jb("Cosh",G,void 0)},831955:G=>{u.jb("Asinh",G,void 0)},832008:G=>{u.jb("Acosh",G,void 0)},832061:G=>{u.jb("Atanh",G,void 0)},832114:G=>{u.jb("Tanh",G,void 0)},832166:G=>{u.jb("Not",G,void 0)},832217:(G,W,Z)=>{u.jb("Clip",G,{min:W,max:Z})},832286:G=>{u.jb("Clip",G,void 0)},832338:(G,W)=>{u.jb("Elu",G,{alpha:W})},832396:G=>{u.jb("Gelu",G,void 0)},832448:G=>{u.jb("Relu",G,void 0)},832500:(G,W)=>{u.jb("LeakyRelu",G,{alpha:W})},832564:(G,W)=>{u.jb("ThresholdedRelu",G,{alpha:W})},832634:(G,W)=>{u.jb("Cast",G,{to:W})},832692:G=>{u.jb("Add",G,void 0)},832743:G=>{u.jb("Sub",G,void 0)},832794:G=>{u.jb("Mul",G,void 0)},832845:G=>{u.jb("Div",G,void 0)},832896:G=>{u.jb("Pow",G,void 0)},832947:G=>{u.jb("Equal",G,void 0)},833e3:G=>{u.jb("Greater",G,void 0)},833055:G=>{u.jb("GreaterOrEqual",G,void 0)},833117:G=>{u.jb("Less",G,void 0)},833169:G=>{u.jb("LessOrEqual",G,void 0)},833228:(G,W,Z,se,ce)=>{u.jb("ReduceMean",G,{keepDims:!!W,noopWithEmptyAxes:!!Z,axes:se?Array.from(oe().subarray(Number(se)>>>0,Number(ce)>>>0)):[]})},833403:(G,W,Z,se,ce)=>{u.jb("ReduceMax",G,{keepDims:!!W,noopWithEmptyAxes:!!Z,axes:se?Array.from(oe().subarray(Number(se)>>>0,Number(ce)>>>0)):[]})},833577:(G,W,Z,se,ce)=>{u.jb("ReduceMin",G,{keepDims:!!W,noopWithEmptyAxes:!!Z,axes:se?Array.from(oe().subarray(Number(se)>>>0,Number(ce)>>>0)):[]})},833751:(G,W,Z,se,ce)=>{u.jb("ReduceProd",G,{keepDims:!!W,noopWithEmptyAxes:!!Z,axes:se?Array.from(oe().subarray(Number(se)>>>0,Number(ce)>>>0)):[]})},833926:(G,W,Z,se,ce)=>{u.jb("ReduceSum",G,{keepDims:!!W,noopWithEmptyAxes:!!Z,axes:se?Array.from(oe().subarray(Number(se)>>>0,Number(ce)>>>0)):[]})},834100:(G,W,Z,se,ce)=>{u.jb("ReduceL1",G,{keepDims:!!W,noopWithEmptyAxes:!!Z,axes:se?Array.from(oe().subarray(Number(se)>>>0,Number(ce)>>>0)):[]})},834273:(G,W,Z,se,ce)=>{u.jb("ReduceL2",G,{keepDims:!!W,noopWithEmptyAxes:!!Z,axes:se?Array.from(oe().subarray(Number(se)>>>0,Number(ce)>>>0)):[]})},834446:(G,W,Z,se,ce)=>{u.jb("ReduceLogSum",G,{keepDims:!!W,noopWithEmptyAxes:!!Z,axes:se?Array.from(oe().subarray(Number(se)>>>0,Number(ce)>>>0)):[]})},834623:(G,W,Z,se,ce)=>{u.jb("ReduceSumSquare",G,{keepDims:!!W,noopWithEmptyAxes:!!Z,axes:se?Array.from(oe().subarray(Number(se)>>>0,Number(ce)>>>0)):[]})},834803:(G,W,Z,se,ce)=>{u.jb("ReduceLogSumExp",G,{keepDims:!!W,noopWithEmptyAxes:!!Z,axes:se?Array.from(oe().subarray(Number(se)>>>0,Number(ce)>>>0)):[]})},834983:G=>{u.jb("Where",G,void 0)},835036:(G,W,Z)=>{u.jb("Transpose",G,{perm:W?Array.from(oe().subarray(Number(W)>>>0,Number(Z)>>>0)):[]})},835160:(G,W,Z,se)=>{u.jb("DepthToSpace",G,{blocksize:W,mode:QA(Z),format:se?"NHWC":"NCHW"})},835293:(G,W,Z,se)=>{u.jb("DepthToSpace",G,{blocksize:W,mode:QA(Z),format:se?"NHWC":"NCHW"})},835426:(G,W,Z,se,ce,Te,Ze,dA,MA,FA,lt,Et,yt,Fr,As)=>{u.jb("ConvTranspose",G,{format:MA?"NHWC":"NCHW",autoPad:W,dilations:[Z],group:se,kernelShape:[ce],pads:[Te,Ze],strides:[dA],wIsConst:()=>!!Fe()[FA>>>0],outputPadding:lt?Array.from(oe().subarray(Number(lt)>>>0,Number(Et)>>>0)):[],outputShape:yt?Array.from(oe().subarray(Number(yt)>>>0,Number(Fr)>>>0)):[],activation:QA(As)})},835859:(G,W,Z,se,ce,Te,Ze,dA,MA,FA,lt,Et,yt,Fr)=>{u.jb("ConvTranspose",G,{format:dA?"NHWC":"NCHW",autoPad:W,dilations:Array.from(oe().subarray(Number(Z)>>>0,2+(Number(Z)>>>0)>>>0)),group:se,kernelShape:Array.from(oe().subarray(Number(ce)>>>0,2+(Number(ce)>>>0)>>>0)),pads:Array.from(oe().subarray(Number(Te)>>>0,4+(Number(Te)>>>0)>>>0)),strides:Array.from(oe().subarray(Number(Ze)>>>0,2+(Number(Ze)>>>0)>>>0)),wIsConst:()=>!!Fe()[MA>>>0],outputPadding:FA?Array.from(oe().subarray(Number(FA)>>>0,Number(lt)>>>0)):[],outputShape:Et?Array.from(oe().subarray(Number(Et)>>>0,Number(yt)>>>0)):[],activation:QA(Fr)})},836520:(G,W,Z,se,ce,Te,Ze,dA,MA,FA,lt,Et,yt,Fr,As)=>{u.jb("ConvTranspose",G,{format:MA?"NHWC":"NCHW",autoPad:W,dilations:[Z],group:se,kernelShape:[ce],pads:[Te,Ze],strides:[dA],wIsConst:()=>!!Fe()[FA>>>0],outputPadding:lt?Array.from(oe().subarray(Number(lt)>>>0,Number(Et)>>>0)):[],outputShape:yt?Array.from(oe().subarray(Number(yt)>>>0,Number(Fr)>>>0)):[],activation:QA(As)})},836953:(G,W,Z,se,ce,Te,Ze,dA,MA,FA,lt,Et,yt,Fr)=>{u.jb("ConvTranspose",G,{format:dA?"NHWC":"NCHW",autoPad:W,dilations:Array.from(oe().subarray(Number(Z)>>>0,2+(Number(Z)>>>0)>>>0)),group:se,kernelShape:Array.from(oe().subarray(Number(ce)>>>0,2+(Number(ce)>>>0)>>>0)),pads:Array.from(oe().subarray(Number(Te)>>>0,4+(Number(Te)>>>0)>>>0)),strides:Array.from(oe().subarray(Number(Ze)>>>0,2+(Number(Ze)>>>0)>>>0)),wIsConst:()=>!!Fe()[MA>>>0],outputPadding:FA?Array.from(oe().subarray(Number(FA)>>>0,Number(lt)>>>0)):[],outputShape:Et?Array.from(oe().subarray(Number(Et)>>>0,Number(yt)>>>0)):[],activation:QA(Fr)})},837614:(G,W)=>{u.jb("GlobalAveragePool",G,{format:W?"NHWC":"NCHW"})},837705:(G,W,Z,se,ce,Te,Ze,dA,MA,FA,lt,Et,yt,Fr)=>{u.jb("AveragePool",G,{format:Fr?"NHWC":"NCHW",auto_pad:W,ceil_mode:Z,count_include_pad:se,storage_order:ce,dilations:Te?Array.from(oe().subarray(Number(Te)>>>0,Number(Ze)>>>0)):[],kernel_shape:dA?Array.from(oe().subarray(Number(dA)>>>0,Number(MA)>>>0)):[],pads:FA?Array.from(oe().subarray(Number(FA)>>>0,Number(lt)>>>0)):[],strides:Et?Array.from(oe().subarray(Number(Et)>>>0,Number(yt)>>>0)):[]})},838184:(G,W)=>{u.jb("GlobalAveragePool",G,{format:W?"NHWC":"NCHW"})},838275:(G,W,Z,se,ce,Te,Ze,dA,MA,FA,lt,Et,yt,Fr)=>{u.jb("AveragePool",G,{format:Fr?"NHWC":"NCHW",auto_pad:W,ceil_mode:Z,count_include_pad:se,storage_order:ce,dilations:Te?Array.from(oe().subarray(Number(Te)>>>0,Number(Ze)>>>0)):[],kernel_shape:dA?Array.from(oe().subarray(Number(dA)>>>0,Number(MA)>>>0)):[],pads:FA?Array.from(oe().subarray(Number(FA)>>>0,Number(lt)>>>0)):[],strides:Et?Array.from(oe().subarray(Number(Et)>>>0,Number(yt)>>>0)):[]})},838754:(G,W)=>{u.jb("GlobalMaxPool",G,{format:W?"NHWC":"NCHW"})},838841:(G,W,Z,se,ce,Te,Ze,dA,MA,FA,lt,Et,yt,Fr)=>{u.jb("MaxPool",G,{format:Fr?"NHWC":"NCHW",auto_pad:W,ceil_mode:Z,count_include_pad:se,storage_order:ce,dilations:Te?Array.from(oe().subarray(Number(Te)>>>0,Number(Ze)>>>0)):[],kernel_shape:dA?Array.from(oe().subarray(Number(dA)>>>0,Number(MA)>>>0)):[],pads:FA?Array.from(oe().subarray(Number(FA)>>>0,Number(lt)>>>0)):[],strides:Et?Array.from(oe().subarray(Number(Et)>>>0,Number(yt)>>>0)):[]})},839316:(G,W)=>{u.jb("GlobalMaxPool",G,{format:W?"NHWC":"NCHW"})},839403:(G,W,Z,se,ce,Te,Ze,dA,MA,FA,lt,Et,yt,Fr)=>{u.jb("MaxPool",G,{format:Fr?"NHWC":"NCHW",auto_pad:W,ceil_mode:Z,count_include_pad:se,storage_order:ce,dilations:Te?Array.from(oe().subarray(Number(Te)>>>0,Number(Ze)>>>0)):[],kernel_shape:dA?Array.from(oe().subarray(Number(dA)>>>0,Number(MA)>>>0)):[],pads:FA?Array.from(oe().subarray(Number(FA)>>>0,Number(lt)>>>0)):[],strides:Et?Array.from(oe().subarray(Number(Et)>>>0,Number(yt)>>>0)):[]})},839878:(G,W,Z,se,ce)=>{u.jb("Gemm",G,{alpha:W,beta:Z,transA:se,transB:ce})},839982:G=>{u.jb("MatMul",G,void 0)},840036:(G,W,Z,se)=>{u.jb("ArgMax",G,{keepDims:!!W,selectLastIndex:!!Z,axis:se})},840144:(G,W,Z,se)=>{u.jb("ArgMin",G,{keepDims:!!W,selectLastIndex:!!Z,axis:se})},840252:(G,W)=>{u.jb("Softmax",G,{axis:W})},840315:(G,W)=>{u.jb("Concat",G,{axis:W})},840375:(G,W,Z,se,ce)=>{u.jb("Split",G,{axis:W,numOutputs:Z,splitSizes:se?Array.from(oe().subarray(Number(se)>>>0,Number(ce)>>>0)):[]})},840531:G=>{u.jb("Expand",G,void 0)},840585:(G,W)=>{u.jb("Gather",G,{axis:Number(W)})},840656:(G,W)=>{u.jb("GatherElements",G,{axis:Number(W)})},840735:(G,W)=>{u.jb("GatherND",G,{batch_dims:Number(W)})},840814:(G,W,Z,se,ce,Te,Ze,dA,MA,FA,lt)=>{u.jb("Resize",G,{antialias:W,axes:Z?Array.from(oe().subarray(Number(Z)>>>0,Number(se)>>>0)):[],coordinateTransformMode:QA(ce),cubicCoeffA:Te,excludeOutside:Ze,extrapolationValue:dA,keepAspectRatioPolicy:QA(MA),mode:QA(FA),nearestMode:QA(lt)})},841176:(G,W,Z,se,ce,Te,Ze)=>{u.jb("Slice",G,{starts:W?Array.from(oe().subarray(Number(W)>>>0,Number(Z)>>>0)):[],ends:se?Array.from(oe().subarray(Number(se)>>>0,Number(ce)>>>0)):[],axes:Te?Array.from(oe().subarray(Number(Te)>>>0,Number(Ze)>>>0)):[]})},841440:G=>{u.jb("Tile",G,void 0)},841492:(G,W,Z)=>{u.jb("InstanceNormalization",G,{epsilon:W,format:Z?"NHWC":"NCHW"})},841606:(G,W,Z)=>{u.jb("InstanceNormalization",G,{epsilon:W,format:Z?"NHWC":"NCHW"})},841720:G=>{u.jb("Range",G,void 0)},841773:(G,W)=>{u.jb("Einsum",G,{equation:QA(W)})},841854:(G,W,Z,se,ce)=>{u.jb("Pad",G,{mode:W,value:Z,pads:se?Array.from(oe().subarray(Number(se)>>>0,Number(ce)>>>0)):[]})},841997:(G,W,Z,se,ce,Te)=>{u.jb("BatchNormalization",G,{epsilon:W,momentum:Z,spatial:!!ce,trainingMode:!!se,format:Te?"NHWC":"NCHW"})},842166:(G,W,Z,se,ce,Te)=>{u.jb("BatchNormalization",G,{epsilon:W,momentum:Z,spatial:!!ce,trainingMode:!!se,format:Te?"NHWC":"NCHW"})},842335:(G,W,Z)=>{u.jb("CumSum",G,{exclusive:Number(W),reverse:Number(Z)})},842432:(G,W,Z)=>{u.jb("DequantizeLinear",G,{axis:W,blockSize:Z})},842522:(G,W,Z,se,ce)=>{u.jb("GridSample",G,{align_corners:W,mode:QA(Z),padding_mode:QA(se),format:ce?"NHWC":"NCHW"})},842692:(G,W,Z,se,ce)=>{u.jb("GridSample",G,{align_corners:W,mode:QA(Z),padding_mode:QA(se),format:ce?"NHWC":"NCHW"})},842862:(G,W)=>{u.jb("ScatterND",G,{reduction:QA(W)})},842947:(G,W,Z,se,ce,Te,Ze,dA,MA)=>{u.jb("Attention",G,{numHeads:W,isUnidirectional:Z,maskFilterValue:se,scale:ce,doRotary:Te,qkvHiddenSizes:Ze?Array.from(oe().subarray(Number(dA)>>>0,Number(dA)+Ze>>>0)):[],pastPresentShareBuffer:!!MA})},843219:G=>{u.jb("BiasAdd",G,void 0)},843274:G=>{u.jb("BiasSplitGelu",G,void 0)},843335:G=>{u.jb("FastGelu",G,void 0)},843391:(G,W,Z,se,ce,Te,Ze,dA,MA,FA,lt,Et,yt,Fr,As,fn)=>{u.jb("Conv",G,{format:Et?"NHWC":"NCHW",auto_pad:W,dilations:Z?Array.from(oe().subarray(Number(Z)>>>0,Number(se)>>>0)):[],group:ce,kernel_shape:Te?Array.from(oe().subarray(Number(Te)>>>0,Number(Ze)>>>0)):[],pads:dA?Array.from(oe().subarray(Number(dA)>>>0,Number(MA)>>>0)):[],strides:FA?Array.from(oe().subarray(Number(FA)>>>0,Number(lt)>>>0)):[],w_is_const:()=>!!Fe()[Number(yt)>>>0],activation:QA(Fr),activation_params:As?Array.from(nA().subarray(Number(As)>>>0,Number(fn)>>>0)):[]})},843975:G=>{u.jb("Gelu",G,void 0)},844027:(G,W,Z,se,ce,Te,Ze,dA,MA)=>{u.jb("GroupQueryAttention",G,{numHeads:W,kvNumHeads:Z,scale:se,softcap:ce,doRotary:Te,rotaryInterleaved:Ze,smoothSoftmax:dA,localWindowSize:MA})},844244:(G,W,Z,se)=>{u.jb("LayerNormalization",G,{axis:W,epsilon:Z,simplified:!!se})},844355:(G,W,Z,se)=>{u.jb("LayerNormalization",G,{axis:W,epsilon:Z,simplified:!!se})},844466:(G,W,Z,se,ce,Te)=>{u.jb("MatMulNBits",G,{k:W,n:Z,accuracyLevel:se,bits:ce,blockSize:Te})},844593:(G,W,Z,se,ce,Te)=>{u.jb("MultiHeadAttention",G,{numHeads:W,isUnidirectional:Z,maskFilterValue:se,scale:ce,doRotary:Te})},844752:(G,W)=>{u.jb("QuickGelu",G,{alpha:W})},844816:(G,W,Z,se,ce)=>{u.jb("RotaryEmbedding",G,{interleaved:!!W,numHeads:Z,rotaryEmbeddingDim:se,scale:ce})},844955:(G,W,Z)=>{u.jb("SkipLayerNormalization",G,{epsilon:W,simplified:!!Z})},845057:(G,W,Z)=>{u.jb("SkipLayerNormalization",G,{epsilon:W,simplified:!!Z})},845159:(G,W,Z,se)=>{u.jb("GatherBlockQuantized",G,{gatherAxis:W,quantizeAxis:Z,blockSize:se})},845280:G=>{u.Zb(G)},845314:(G,W)=>u.ac(Number(G),Number(W),u.Fb.dc,u.Fb.errors)};function cA(G,W,Z){return cr(async()=>{await u.Xb(Number(G),Number(W),Number(Z))})}function fA(){return typeof wasmOffsetConverter<"u"}class he{name="ExitStatus";constructor(W){this.message=`Program terminated with exit(${W})`,this.status=W}}var bA=G=>{G.terminate(),G.onmessage=()=>{}},rA=[],EA=G=>{OA.length==0&&(Ts(),VA(OA[0]));var W=OA.pop();if(!W)return 6;ot.push(W),tt[G.Ab]=W,W.Ab=G.Ab;var Z={Bb:"run",fc:G.ec,Hb:G.Hb,Ab:G.Ab};return W.postMessage(Z,G.Mb),0},PA=0,wA=(G,W,...Z)=>{for(var se=2*Z.length,ce=Bs(),Te=mr(8*se),Ze=Te>>>3,dA=0;dA<Z.length;dA++){var MA=Z[dA];typeof MA=="bigint"?(be[Ze+2*dA]=1n,be[Ze+2*dA+1]=MA):(be[Ze+2*dA]=0n,Je()[Ze+2*dA+1>>>0]=MA)}return G=At(G,0,se,Te,W),vs(ce),G};function ZA(G){if(w)return wA(0,1,G);if(e=G,!(0<PA)){for(var W of ot)bA(W);for(W of OA)bA(W);OA=[],ot=[],tt={},ve=!0}F(0,new he(G))}function TA(G){if(w)return wA(1,0,G);tA(G)}var tA=G=>{if(e=G,w)throw TA(G),"unwind";ZA(G)},OA=[],ot=[],$A=[],tt={},Lt=G=>{var W=G.Ab;delete tt[W],OA.push(G),ot.splice(ot.indexOf(G),1),G.Ab=0,Ms(W)};function Wr(){$A.forEach(G=>G())}var VA=G=>new Promise(W=>{G.onmessage=ce=>{var Te=(ce=ce.data).Bb;if(ce.Gb&&ce.Gb!=ka()){var Ze=tt[ce.Gb];Ze?Ze.postMessage(ce,ce.Mb):U(`Internal error! Worker sent a message "${Te}" to target pthread ${ce.Gb}, but that thread no longer exists!`)}else Te==="checkMailbox"?We():Te==="spawnThread"?EA(ce):Te==="cleanupThread"?Lt(tt[ce.hc]):Te==="loaded"?(G.loaded=!0,W(G)):Te==="alert"?alert(`Thread ${ce.ic}: ${ce.text}`):ce.target==="setimmediate"?G.postMessage(ce):Te==="callHandler"?u[ce.Qb](...ce.args):Te&&U(`worker sent an unknown command ${Te}`)},G.onerror=ce=>{throw U(`worker sent an error! ${ce.filename}:${ce.lineno}: ${ce.message}`),ce};var Z,se=[];for(Z of[])u.propertyIsEnumerable(Z)&&se.push(Z);G.postMessage({Bb:"load",Rb:se,kc:f,lc:k})});function Ts(){var G=new Worker((()=>{let W=URL;return import.meta.url>"file:"&&import.meta.url<"file;"?new W("ort.bundle.min.mjs",import.meta.url):new URL(import.meta.url)})(),{type:"module",workerData:"em-pthread",name:"em-pthread"});OA.push(G)}var re=G=>{ze();var W=Ge()[G+52>>>2>>>0];G=Ge()[G+56>>>2>>>0],xr(W,W-G),vs(W)},De=(G,W)=>{PA=0,G=un(G,W),0<PA?e=G:Ua(G)};class ie{constructor(W){this.Ib=W-24}}function xe(G,W,Z){var se=new ie(G>>>=0);throw W>>>=0,Z>>>=0,Ge()[se.Ib+16>>>2>>>0]=0,Ge()[se.Ib+4>>>2>>>0]=W,Ge()[se.Ib+8>>>2>>>0]=Z,G}function Re(G,W,Z,se){return w?wA(2,1,G,W,Z,se):oA(G,W,Z,se)}function oA(G,W,Z,se){if(G>>>=0,Z>>>=0,se>>>=0,E===void 0)return 6;var ce=[];return w&&ce.length===0?Re(G,W>>>=0,Z,se):(G={ec:Z,Ab:G,Hb:se,Mb:ce},w?(G.Bb="spawnThread",postMessage(G,ce),0):EA(G))}var Le=typeof TextDecoder<"u"?new TextDecoder:void 0,LA=(G,W=0,Z=NaN)=>{var se=(W>>>=0)+Z;for(Z=W;G[Z]&&!(Z>=se);)++Z;if(16<Z-W&&G.buffer&&Le)return Le.decode(G.buffer instanceof ArrayBuffer?G.subarray(W,Z):G.slice(W,Z));for(se="";W<Z;){var ce=G[W++];if(128&ce){var Te=63&G[W++];if((224&ce)==192)se+=String.fromCharCode((31&ce)<<6|Te);else{var Ze=63&G[W++];65536>(ce=(240&ce)==224?(15&ce)<<12|Te<<6|Ze:(7&ce)<<18|Te<<12|Ze<<6|63&G[W++])?se+=String.fromCharCode(ce):(ce-=65536,se+=String.fromCharCode(55296|ce>>10,56320|1023&ce))}}else se+=String.fromCharCode(ce)}return se},QA=(G,W)=>(G>>>=0)?LA(le(),G,W):"";function SA(G,W,Z){return w?wA(3,1,G,W,Z):0}function tr(G,W){if(w)return wA(4,1,G,W)}var bt=G=>{for(var W=0,Z=0;Z<G.length;++Z){var se=G.charCodeAt(Z);127>=se?W++:2047>=se?W+=2:55296<=se&&57343>=se?(W+=4,++Z):W+=3}return W},or=(G,W,Z)=>{var se=le();if(W>>>=0,0<Z){var ce=W;Z=W+Z-1;for(var Te=0;Te<G.length;++Te){var Ze=G.charCodeAt(Te);if(55296<=Ze&&57343>=Ze&&(Ze=65536+((1023&Ze)<<10)|1023&G.charCodeAt(++Te)),127>=Ze){if(W>=Z)break;se[W++>>>0]=Ze}else{if(2047>=Ze){if(W+1>=Z)break;se[W++>>>0]=192|Ze>>6}else{if(65535>=Ze){if(W+2>=Z)break;se[W++>>>0]=224|Ze>>12}else{if(W+3>=Z)break;se[W++>>>0]=240|Ze>>18,se[W++>>>0]=128|Ze>>12&63}se[W++>>>0]=128|Ze>>6&63}se[W++>>>0]=128|63&Ze}}se[W>>>0]=0,G=W-ce}else G=0;return G};function _t(G,W){if(w)return wA(5,1,G,W)}function Rt(G,W,Z){if(w)return wA(6,1,G,W,Z)}function zA(G,W,Z){return w?wA(7,1,G,W,Z):0}function rr(G,W){if(w)return wA(8,1,G,W)}function Ps(G,W,Z){if(w)return wA(9,1,G,W,Z)}function Rs(G,W,Z,se){if(w)return wA(10,1,G,W,Z,se)}function Is(G,W,Z,se){if(w)return wA(11,1,G,W,Z,se)}function ea(G,W,Z,se){if(w)return wA(12,1,G,W,Z,se)}function fs(G){if(w)return wA(13,1,G)}function ws(G,W){if(w)return wA(14,1,G,W)}function ks(G,W,Z){if(w)return wA(15,1,G,W,Z)}var Gs,Jr,oa=()=>AA(""),Tt=G=>{for(var W="";le()[G>>>0];)W+=Gs[le()[G++>>>0]];return W},Qs={},Fs={};function qr(G,W,Z={}){return function(se,ce,Te={}){var Ze=ce.name;if(!se)throw new Jr(`type "${Ze}" must have a positive integer typeid pointer`);if(Fs.hasOwnProperty(se)){if(Te.Sb)return;throw new Jr(`Cannot register type '${Ze}' twice`)}Fs[se]=ce,Qs.hasOwnProperty(se)&&(ce=Qs[se],delete Qs[se],ce.forEach(dA=>dA()))}(G,W,Z)}var Lr=(G,W,Z)=>{switch(W){case 1:return Z?se=>Fe()[se>>>0]:se=>le()[se>>>0];case 2:return Z?se=>Ae()[se>>>1>>>0]:se=>pe()[se>>>1>>>0];case 4:return Z?se=>oe()[se>>>2>>>0]:se=>Ge()[se>>>2>>>0];case 8:return Z?se=>be[se>>>3]:se=>Ce[se>>>3];default:throw new TypeError(`invalid integer width (${W}): ${G}`)}};function uA(G,W,Z){Z>>>=0,qr(G>>>=0,{name:W=Tt(W>>>0),fromWireType:se=>se,toWireType:function(se,ce){if(typeof ce!="bigint"&&typeof ce!="number")throw ce=ce===null?"null":(se=typeof ce)=="object"||se==="array"||se==="function"?ce.toString():""+ce,new TypeError(`Cannot convert "${ce}" to ${this.name}`);return typeof ce=="number"&&(ce=BigInt(ce)),ce},Cb:gA,readValueFromPointer:Lr(W,Z,W.indexOf("u")==-1),Db:null})}var gA=8;function WA(G,W,Z,se){qr(G>>>=0,{name:W=Tt(W>>>0),fromWireType:function(ce){return!!ce},toWireType:function(ce,Te){return Te?Z:se},Cb:gA,readValueFromPointer:function(ce){return this.fromWireType(le()[ce>>>0])},Db:null})}var Mr=[],gs=[];function js(G){9<(G>>>=0)&&--gs[G+1]==0&&(gs[G]=void 0,Mr.push(G))}var pr=G=>{if(!G)throw new Jr("Cannot use deleted val. handle = "+G);return gs[G]},Gr=G=>{switch(G){case void 0:return 2;case null:return 4;case!0:return 6;case!1:return 8;default:let W=Mr.pop()||gs.length;return gs[W]=G,gs[W+1]=1,W}};function Ws(G){return this.fromWireType(Ge()[G>>>2>>>0])}var rt={name:"emscripten::val",fromWireType:G=>{var W=pr(G);return js(G),W},toWireType:(G,W)=>Gr(W),Cb:gA,readValueFromPointer:Ws,Db:null};function is(G){return qr(G>>>0,rt)}var $r=(G,W)=>{switch(W){case 4:return function(Z){return this.fromWireType(nA()[Z>>>2>>>0])};case 8:return function(Z){return this.fromWireType(Je()[Z>>>3>>>0])};default:throw new TypeError(`invalid float width (${W}): ${G}`)}};function Sa(G,W,Z){Z>>>=0,qr(G>>>=0,{name:W=Tt(W>>>0),fromWireType:se=>se,toWireType:(se,ce)=>ce,Cb:gA,readValueFromPointer:$r(W,Z),Db:null})}function Ca(G,W,Z,se,ce){if(G>>>=0,Z>>>=0,W=Tt(W>>>0),ce===-1&&(ce=4294967295),ce=dA=>dA,se===0){var Te=32-8*Z;ce=dA=>dA<<Te>>>Te}var Ze=W.includes("unsigned")?function(dA,MA){return MA>>>0}:function(dA,MA){return MA};qr(G,{name:W,fromWireType:ce,toWireType:Ze,Cb:gA,readValueFromPointer:Lr(W,Z,se!==0),Db:null})}function Oa(G,W,Z){function se(Te){var Ze=Ge()[Te>>>2>>>0];return Te=Ge()[Te+4>>>2>>>0],new ce(Fe().buffer,Te,Ze)}var ce=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array,BigInt64Array,BigUint64Array][W];qr(G>>>=0,{name:Z=Tt(Z>>>0),fromWireType:se,Cb:gA,readValueFromPointer:se},{Sb:!0})}function Ss(G,W){qr(G>>>=0,{name:W=Tt(W>>>0),fromWireType:function(Z){for(var se,ce=Ge()[Z>>>2>>>0],Te=Z+4,Ze=Te,dA=0;dA<=ce;++dA){var MA=Te+dA;dA!=ce&&le()[MA>>>0]!=0||(Ze=QA(Ze,MA-Ze),se===void 0?se=Ze:(se+="\0",se+=Ze),Ze=MA+1)}return Es(Z),se},toWireType:function(Z,se){se instanceof ArrayBuffer&&(se=new Uint8Array(se));var ce=typeof se=="string";if(!(ce||se instanceof Uint8Array||se instanceof Uint8ClampedArray||se instanceof Int8Array))throw new Jr("Cannot pass non-string to std::string");var Te=ce?bt(se):se.length,Ze=ar(4+Te+1),dA=Ze+4;if(Ge()[Ze>>>2>>>0]=Te,ce)or(se,dA,Te+1);else if(ce)for(ce=0;ce<Te;++ce){var MA=se.charCodeAt(ce);if(255<MA)throw Es(Ze),new Jr("String has UTF-16 code units that do not fit in 8 bits");le()[dA+ce>>>0]=MA}else for(ce=0;ce<Te;++ce)le()[dA+ce>>>0]=se[ce];return Z!==null&&Z.push(Es,Ze),Ze},Cb:gA,readValueFromPointer:Ws,Db(Z){Es(Z)}})}var Ys=typeof TextDecoder<"u"?new TextDecoder("utf-16le"):void 0,Aa=(G,W)=>{for(var Z=G>>1,se=Z+W/2;!(Z>=se)&&pe()[Z>>>0];)++Z;if(32<(Z<<=1)-G&&Ys)return Ys.decode(le().slice(G,Z));for(Z="",se=0;!(se>=W/2);++se){var ce=Ae()[G+2*se>>>1>>>0];if(ce==0)break;Z+=String.fromCharCode(ce)}return Z},za=(G,W,Z)=>{if(Z??=2147483647,2>Z)return 0;var se=W;Z=(Z-=2)<2*G.length?Z/2:G.length;for(var ce=0;ce<Z;++ce){var Te=G.charCodeAt(ce);Ae()[W>>>1>>>0]=Te,W+=2}return Ae()[W>>>1>>>0]=0,W-se},Na=G=>2*G.length,La=(G,W)=>{for(var Z=0,se="";!(Z>=W/4);){var ce=oe()[G+4*Z>>>2>>>0];if(ce==0)break;++Z,65536<=ce?(ce-=65536,se+=String.fromCharCode(55296|ce>>10,56320|1023&ce)):se+=String.fromCharCode(ce)}return se},_a=(G,W,Z)=>{if(W>>>=0,Z??=2147483647,4>Z)return 0;var se=W;Z=se+Z-4;for(var ce=0;ce<G.length;++ce){var Te=G.charCodeAt(ce);if(55296<=Te&&57343>=Te&&(Te=65536+((1023&Te)<<10)|1023&G.charCodeAt(++ce)),oe()[W>>>2>>>0]=Te,(W+=4)+4>Z)break}return oe()[W>>>2>>>0]=0,W-se},Vs=G=>{for(var W=0,Z=0;Z<G.length;++Z){var se=G.charCodeAt(Z);55296<=se&&57343>=se&&++Z,W+=4}return W};function Oe(G,W,Z){if(G>>>=0,W>>>=0,Z=Tt(Z>>>=0),W===2)var se=Aa,ce=za,Te=Na,Ze=dA=>pe()[dA>>>1>>>0];else W===4&&(se=La,ce=_a,Te=Vs,Ze=dA=>Ge()[dA>>>2>>>0]);qr(G,{name:Z,fromWireType:dA=>{for(var MA,FA=Ge()[dA>>>2>>>0],lt=dA+4,Et=0;Et<=FA;++Et){var yt=dA+4+Et*W;Et!=FA&&Ze(yt)!=0||(lt=se(lt,yt-lt),MA===void 0?MA=lt:(MA+="\0",MA+=lt),lt=yt+W)}return Es(dA),MA},toWireType:(dA,MA)=>{if(typeof MA!="string")throw new Jr(`Cannot pass non-string to C++ string type ${Z}`);var FA=Te(MA),lt=ar(4+FA+W);return Ge()[lt>>>2>>>0]=FA/W,ce(MA,lt+4,FA+W),dA!==null&&dA.push(Es,lt),lt},Cb:gA,readValueFromPointer:Ws,Db(dA){Es(dA)}})}function K(G,W){qr(G>>>=0,{Tb:!0,name:W=Tt(W>>>0),Cb:0,fromWireType:()=>{},toWireType:()=>{}})}function fe(G){Ha(G>>>0,!C,1,!b,131072,!1),Wr()}var Me=G=>{if(!ve)try{if(G(),!(0<PA))try{w?Ua(e):tA(e)}catch(W){W instanceof he||W=="unwind"||F(0,W)}}catch(W){W instanceof he||W=="unwind"||F(0,W)}};function Ie(G){G>>>=0,typeof Atomics.jc=="function"&&(Atomics.jc(oe(),G>>>2,G).value.then(We),G+=128,Atomics.store(oe(),G>>>2,1))}var We=()=>{var G=ka();G&&(Ie(G),Me(cn))};function eA(G,W){(G>>>=0)==W>>>0?setTimeout(We):w?postMessage({Gb:G,Bb:"checkMailbox"}):(G=tt[G])&&G.postMessage({Bb:"checkMailbox"})}var vA=[];function xA(G,W,Z,se,ce){for(W>>>=0,se/=2,vA.length=se,Z=ce>>>0>>>3,ce=0;ce<se;ce++)vA[ce]=be[Z+2*ce]?be[Z+2*ce+1]:Je()[Z+2*ce+1>>>0];return(W?H[W]:Qn[G])(...vA)}var BA=()=>{PA=0};function Ve(G){G>>>=0,w?postMessage({Bb:"cleanupThread",hc:G}):Lt(tt[G])}function gt(G){}var nt=(G,W)=>{var Z=Fs[G];if(Z===void 0)throw G=Fn(G),Z=Tt(G),Es(G),new Jr(`${W} has unknown type ${Z}`);return Z},jt=(G,W,Z)=>{var se=[];return G=G.toWireType(se,Z),se.length&&(Ge()[W>>>2>>>0]=Gr(se)),G};function Qr(G,W,Z){return W>>>=0,Z>>>=0,G=pr(G>>>0),W=nt(W,"emval::as"),jt(W,Z,G)}function lr(G,W){return W>>>=0,G=pr(G>>>0),(W=nt(W,"emval::as")).toWireType(null,G)}var vr=G=>{try{G()}catch(W){AA(W)}},kt=0,Jt=null,os=0,br=[],_r={},Wt={},Ir=0,wr=null,Pt=[];function cr(G){return function(W){if(!ve){if(kt===0){var Z=!1,se=!1;W((ce=0)=>{if(!ve&&(os=ce,Z=!0,se)){kt=2,vr(()=>dn(Jt)),typeof MainLoop<"u"&&MainLoop.Pb&&MainLoop.resume(),ce=!1;try{var Te=function(){var MA=oe()[Jt+8>>>2>>>0];return MA=UA[Wt[MA]],--PA,MA()}()}catch(MA){Te=MA,ce=!0}var Ze=!1;if(!Jt){var dA=wr;dA&&(wr=null,(ce?dA.reject:dA.resolve)(Te),Ze=!0)}if(ce&&!Ze)throw Te}}),se=!0,Z||(kt=1,Jt=function(){var ce=ar(65548),Te=ce+12;Ge()[ce>>>2>>>0]=Te,Ge()[ce+4>>>2>>>0]=Te+65536,Te=br[0];var Ze=_r[Te];return Ze===void 0&&(Ze=Ir++,_r[Te]=Ze,Wt[Ze]=Te),Te=Ze,oe()[ce+8>>>2>>>0]=Te,ce}(),typeof MainLoop<"u"&&MainLoop.Pb&&MainLoop.pause(),vr(()=>Ka(Jt)))}else kt===2?(kt=0,vr(Ut),Es(Jt),Jt=null,Pt.forEach(Me)):AA(`invalid state: ${kt}`);return os}}(W=>{G().then(W)})}function Yr(G){return G>>>=0,cr(async()=>{var W=await pr(G);return Gr(W)})}var ur=[];function kr(G,W,Z,se){return Z>>>=0,se>>>=0,(G=ur[G>>>0])(null,W=pr(W>>>0),Z,se)}var sr={},qt=G=>{var W=sr[G];return W===void 0?Tt(G):W};function _A(G,W,Z,se,ce){return Z>>>=0,se>>>=0,ce>>>=0,(G=ur[G>>>0])(W=pr(W>>>0),W[Z=qt(Z)],se,ce)}var Gt=()=>typeof globalThis=="object"?globalThis:Function("return this")();function Vr(G){return(G>>>=0)==0?Gr(Gt()):(G=qt(G),Gr(Gt()[G]))}var $a=G=>{var W=ur.length;return ur.push(G),W},$n=(G,W)=>{for(var Z=Array(G),se=0;se<G;++se)Z[se]=nt(Ge()[W+4*se>>>2>>>0],"parameter "+se);return Z},vn=(G,W)=>Object.defineProperty(W,"name",{value:G});function ei(G,W,Z){var se=(W=$n(G,W>>>0)).shift();G--;var ce=`return function (obj, func, destructorsRef, args) {
`,Te=0,Ze=[];Z===0&&Ze.push("obj");for(var dA=["retType"],MA=[se],FA=0;FA<G;++FA)Ze.push("arg"+FA),dA.push("argType"+FA),MA.push(W[FA]),ce+=`  var arg${FA} = argType${FA}.readValueFromPointer(args${Te?"+"+Te:""});
`,Te+=W[FA].Cb;return ce+=`  var rv = ${Z===1?"new func":"func.call"}(${Ze.join(", ")});
`,se.Tb||(dA.push("emval_returnValue"),MA.push(jt),ce+=`  return emval_returnValue(retType, destructorsRef, rv);
`),dA.push(ce+`};
`),G=function(lt){var Et=Function;if(!(Et instanceof Function))throw new TypeError(`new_ called with constructor type ${typeof Et} which is not a function`);var yt=vn(Et.name||"unknownFunctionName",function(){});return yt.prototype=Et.prototype,yt=new yt,(lt=Et.apply(yt,lt))instanceof Object?lt:yt}(dA)(...MA),Z=`methodCaller<(${W.map(lt=>lt.name).join(", ")}) => ${se.name}>`,$a(vn(Z,G))}function ba(G){return G=qt(G>>>0),Gr(u[G])}function la(G,W){return W>>>=0,G=pr(G>>>0),W=pr(W),Gr(G[W])}function Ai(G){9<(G>>>=0)&&(gs[G+1]+=1)}function en(){return Gr([])}function Ra(G){G=pr(G>>>0);for(var W=Array(G.length),Z=0;Z<G.length;Z++)W[Z]=G[Z];return Gr(W)}function Br(G){return Gr(qt(G>>>0))}function yA(){return Gr({})}function es(G){for(var W=pr(G>>>=0);W.length;){var Z=W.pop();W.pop()(Z)}js(G)}function Bn(G,W,Z){W>>>=0,Z>>>=0,G=pr(G>>>0),W=pr(W),Z=pr(Z),G[W]=Z}function An(G,W){return W>>>=0,G=(G=nt(G>>>0,"_emval_take_value")).readValueFromPointer(W),Gr(G)}function xn(G,W){G=-9007199254740992>G||9007199254740992<G?NaN:Number(G),W>>>=0,G=new Date(1e3*G),oe()[W>>>2>>>0]=G.getUTCSeconds(),oe()[W+4>>>2>>>0]=G.getUTCMinutes(),oe()[W+8>>>2>>>0]=G.getUTCHours(),oe()[W+12>>>2>>>0]=G.getUTCDate(),oe()[W+16>>>2>>>0]=G.getUTCMonth(),oe()[W+20>>>2>>>0]=G.getUTCFullYear()-1900,oe()[W+24>>>2>>>0]=G.getUTCDay(),G=(G.getTime()-Date.UTC(G.getUTCFullYear(),0,1,0,0,0,0))/864e5|0,oe()[W+28>>>2>>>0]=G}var yn=G=>G%4==0&&(G%100!=0||G%400==0),tn=[0,31,60,91,121,152,182,213,244,274,305,335],Dn=[0,31,59,90,120,151,181,212,243,273,304,334];function Tn(G,W){G=-9007199254740992>G||9007199254740992<G?NaN:Number(G),W>>>=0,G=new Date(1e3*G),oe()[W>>>2>>>0]=G.getSeconds(),oe()[W+4>>>2>>>0]=G.getMinutes(),oe()[W+8>>>2>>>0]=G.getHours(),oe()[W+12>>>2>>>0]=G.getDate(),oe()[W+16>>>2>>>0]=G.getMonth(),oe()[W+20>>>2>>>0]=G.getFullYear()-1900,oe()[W+24>>>2>>>0]=G.getDay();var Z=(yn(G.getFullYear())?tn:Dn)[G.getMonth()]+G.getDate()-1|0;oe()[W+28>>>2>>>0]=Z,oe()[W+36>>>2>>>0]=-60*G.getTimezoneOffset(),Z=new Date(G.getFullYear(),6,1).getTimezoneOffset();var se=new Date(G.getFullYear(),0,1).getTimezoneOffset();G=0|(Z!=se&&G.getTimezoneOffset()==Math.min(se,Z)),oe()[W+32>>>2>>>0]=G}function rn(G){G>>>=0;var W=new Date(oe()[G+20>>>2>>>0]+1900,oe()[G+16>>>2>>>0],oe()[G+12>>>2>>>0],oe()[G+8>>>2>>>0],oe()[G+4>>>2>>>0],oe()[G>>>2>>>0],0),Z=oe()[G+32>>>2>>>0],se=W.getTimezoneOffset(),ce=new Date(W.getFullYear(),6,1).getTimezoneOffset(),Te=new Date(W.getFullYear(),0,1).getTimezoneOffset(),Ze=Math.min(Te,ce);return 0>Z?oe()[G+32>>>2>>>0]=+(ce!=Te&&Ze==se):0<Z!=(Ze==se)&&(ce=Math.max(Te,ce),W.setTime(W.getTime()+6e4*((0<Z?Ze:ce)-se))),oe()[G+24>>>2>>>0]=W.getDay(),Z=(yn(W.getFullYear())?tn:Dn)[W.getMonth()]+W.getDate()-1|0,oe()[G+28>>>2>>>0]=Z,oe()[G>>>2>>>0]=W.getSeconds(),oe()[G+4>>>2>>>0]=W.getMinutes(),oe()[G+8>>>2>>>0]=W.getHours(),oe()[G+12>>>2>>>0]=W.getDate(),oe()[G+16>>>2>>>0]=W.getMonth(),oe()[G+20>>>2>>>0]=W.getYear(),G=W.getTime(),BigInt(isNaN(G)?-1:G/1e3)}function Bt(G,W,Z,se,ce,Te,Ze){return w?wA(16,1,G,W,Z,se,ce,Te,Ze):-52}function ja(G,W,Z,se,ce,Te){if(w)return wA(17,1,G,W,Z,se,ce,Te)}var Ia={},Hs=()=>performance.timeOrigin+performance.now();function ta(G,W){if(w)return wA(18,1,G,W);if(Ia[G]&&(clearTimeout(Ia[G].id),delete Ia[G]),!W)return 0;var Z=setTimeout(()=>{delete Ia[G],Me(()=>zs(G,performance.timeOrigin+performance.now()))},W);return Ia[G]={id:Z,qc:W},0}function Os(G,W,Z,se){G>>>=0,W>>>=0,Z>>>=0,se>>>=0;var ce=new Date().getFullYear(),Te=new Date(ce,0,1).getTimezoneOffset();ce=new Date(ce,6,1).getTimezoneOffset();var Ze=Math.max(Te,ce);Ge()[G>>>2>>>0]=60*Ze,oe()[W>>>2>>>0]=+(Te!=ce),G=(W=dA=>{var MA=Math.abs(dA);return`UTC${0<=dA?"-":"+"}${String(Math.floor(MA/60)).padStart(2,"0")}${String(MA%60).padStart(2,"0")}`})(Te),W=W(ce),ce<Te?(or(G,Z,17),or(W,se,17)):(or(G,se,17),or(W,Z,17))}var Pn=()=>Date.now();function Gn(G,W,Z){return 0<=G&&3>=G?(G===0?G=Date.now():G=performance.timeOrigin+performance.now(),be[Z>>>0>>>3]=BigInt(Math.round(1e6*G)),0):28}var Us=[],sn=(G,W)=>{Us.length=0;for(var Z;Z=le()[G++>>>0];){var se=Z!=105;W+=(se&=Z!=112)&&W%8?4:0,Us.push(Z==112?Ge()[W>>>2>>>0]:Z==106?be[W>>>3]:Z==105?oe()[W>>>2>>>0]:Je()[W>>>3>>>0]),W+=se?8:4}return Us};function ti(G,W,Z){return G>>>=0,W=sn(W>>>0,Z>>>0),H[G](...W)}function Wa(G,W,Z){return G>>>=0,W=sn(W>>>0,Z>>>0),H[G](...W)}var iA=()=>{};function ri(G,W){return U(QA(G>>>0,W>>>0))}var DA=()=>{throw PA+=1,"unwind"};function Ks(){return 4294901760}var an=()=>navigator.hardwareConcurrency;function Hr(){return AA("Cannot use emscripten_pc_get_function without -sUSE_OFFSET_CONVERTER"),0}function ls(G){G>>>=0;var W=le().length;if(G<=W||4294901760<G)return!1;for(var Z=1;4>=Z;Z*=2){var se=W*(1+.2/Z);se=Math.min(se,G+100663296);e:{se=(Math.min(4294901760,65536*Math.ceil(Math.max(G,se)/65536))-f.buffer.byteLength+65535)/65536|0;try{f.grow(se),ze();var ce=1;break e}catch{}ce=void 0}if(ce)return!0}return!1}var ca=()=>(AA("Cannot use convertFrameToPC (needed by __builtin_return_address) without -sUSE_OFFSET_CONVERTER"),0),Xs={},Ya=G=>{G.forEach(W=>{ca()})};function dr(){var G=Error().stack.toString().split(`
`);return G[0]=="Error"&&G.shift(),Ya(G),Xs.Lb=ca(),Xs.cc=G,Xs.Lb}function si(G,W,Z){if(G>>>=0,W>>>=0,Xs.Lb==G)var se=Xs.cc;else(se=Error().stack.toString().split(`
`))[0]=="Error"&&se.shift(),Ya(se);for(var ce=3;se[ce]&&ca()!=G;)++ce;for(G=0;G<Z&&se[G+ce];++G)oe()[W+4*G>>>2>>>0]=ca();return G}var nn,ua={},da=()=>{if(!nn){var G,W={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:(typeof navigator=="object"&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",_:"./this.program"};for(G in ua)ua[G]===void 0?delete W[G]:W[G]=ua[G];var Z=[];for(G in W)Z.push(`${G}=${W[G]}`);nn=Z}return nn};function Va(G,W){if(w)return wA(19,1,G,W);G>>>=0,W>>>=0;var Z=0;return da().forEach((se,ce)=>{var Te=W+Z;for(ce=Ge()[G+4*ce>>>2>>>0]=Te,Te=0;Te<se.length;++Te)Fe()[ce++>>>0]=se.charCodeAt(Te);Fe()[ce>>>0]=0,Z+=se.length+1}),0}function on(G,W){if(w)return wA(20,1,G,W);G>>>=0,W>>>=0;var Z=da();Ge()[G>>>2>>>0]=Z.length;var se=0;return Z.forEach(ce=>se+=ce.length+1),Ge()[W>>>2>>>0]=se,0}function wa(G){return w?wA(21,1,G):52}function CA(G,W,Z,se){return w?wA(22,1,G,W,Z,se):52}function ps(G,W,Z,se){return w?wA(23,1,G,W,Z,se):70}var ai=[null,[],[]];function ni(G,W,Z,se){if(w)return wA(24,1,G,W,Z,se);W>>>=0,Z>>>=0,se>>>=0;for(var ce=0,Te=0;Te<Z;Te++){var Ze=Ge()[W>>>2>>>0],dA=Ge()[W+4>>>2>>>0];W+=8;for(var MA=0;MA<dA;MA++){var FA=le()[Ze+MA>>>0],lt=ai[G];FA===0||FA===10?((G===1?N:U)(LA(lt)),lt.length=0):lt.push(FA)}ce+=dA}return Ge()[se>>>2>>>0]=ce,0}w||function(){for(var G=u.numThreads-1;G--;)Ts();rA.unshift(()=>{ge++,function(W){w?W():Promise.all(OA.map(VA)).then(W)}(()=>Xe())})}();for(var fa=Array(256),Zs=0;256>Zs;++Zs)fa[Zs]=String.fromCharCode(Zs);Gs=fa,Jr=u.BindingError=class extends Error{constructor(G){super(G),this.name="BindingError"}},u.InternalError=class extends Error{constructor(G){super(G),this.name="InternalError"}},gs.push(0,1,void 0,1,null,1,!0,1,!1,1),u.count_emval_handles=()=>gs.length/2-5-Mr.length;var UA,Qn=[ZA,TA,Re,SA,tr,_t,Rt,zA,rr,Ps,Rs,Is,ea,fs,ws,ks,Bt,ja,ta,Va,on,wa,CA,ps,ni];(async function(){function G(se,ce){return UA=se.exports,UA=function(){var Te=UA,Ze={};for(let[dA,MA]of Object.entries(Te))Ze[dA]=typeof MA=="function"?(...FA)=>{br.push(dA);try{return MA(...FA)}finally{ve||(br.pop(),Jt&&kt===1&&br.length===0&&(kt=0,PA+=1,vr(On),typeof Fibers<"u"&&Fibers.rc()))}}:MA;return Ze}(),UA=function(){var Te=UA,Ze=MA=>FA=>MA(FA)>>>0,dA=MA=>()=>MA()>>>0;return(Te=Object.assign({},Te)).Da=Ze(Te.Da),Te.fb=dA(Te.fb),Te.hb=Ze(Te.hb),Te.tb=Ze(Te.tb),Te.ub=dA(Te.ub),Te.__cxa_get_exception_ptr=Ze(Te.__cxa_get_exception_ptr),Te}(),$A.push(UA.ib),k=ce,Xe(),UA}ge++;var W=qe();if(u.instantiateWasm)return new Promise(se=>{u.instantiateWasm(W,(ce,Te)=>{G(ce,Te),se(ce.exports)})});if(w)return new Promise(se=>{aA=ce=>{var Te=new WebAssembly.Instance(ce,qe());se(G(Te,ce))}});Se??=u.locateFile?u.locateFile?u.locateFile("ort-wasm-simd-threaded.jsep.wasm",j):j+"ort-wasm-simd-threaded.jsep.wasm":new URL("/zerovoice/assets/ort-wasm-simd-threaded.jsep-B0T3yYHD.wasm",import.meta.url).href;try{var Z=await async function(se){var ce=Se;if(!Be&&typeof WebAssembly.instantiateStreaming=="function"&&!Ne(ce))try{var Te=fetch(ce,{credentials:"same-origin"});return await WebAssembly.instantiateStreaming(Te,se)}catch(Ze){U(`wasm streaming compile failed: ${Ze}`),U("falling back to ArrayBuffer instantiation")}return async function(Ze,dA){try{var MA=await async function(FA){if(!Be)try{var lt=await v(FA);return new Uint8Array(lt)}catch{}if(FA==Se&&Be)FA=new Uint8Array(Be);else{if(!x)throw"both async and sync fetching of the wasm failed";FA=x(FA)}return FA}(Ze);return await WebAssembly.instantiate(MA,dA)}catch(FA){U(`failed to asynchronously prepare wasm: ${FA}`),AA(FA)}}(ce,se)}(W);return G(Z.instance,Z.module)}catch(se){return n(se),Promise.reject(se)}})();var Fn=G=>(Fn=UA.Da)(G),ln=()=>(ln=UA.Ea)();u._OrtInit=(G,W)=>(u._OrtInit=UA.Fa)(G,W),u._OrtGetLastError=(G,W)=>(u._OrtGetLastError=UA.Ga)(G,W),u._OrtCreateSessionOptions=(G,W,Z,se,ce,Te,Ze,dA,MA,FA)=>(u._OrtCreateSessionOptions=UA.Ha)(G,W,Z,se,ce,Te,Ze,dA,MA,FA),u._OrtAppendExecutionProvider=(G,W,Z,se,ce)=>(u._OrtAppendExecutionProvider=UA.Ia)(G,W,Z,se,ce),u._OrtAddFreeDimensionOverride=(G,W,Z)=>(u._OrtAddFreeDimensionOverride=UA.Ja)(G,W,Z),u._OrtAddSessionConfigEntry=(G,W,Z)=>(u._OrtAddSessionConfigEntry=UA.Ka)(G,W,Z),u._OrtReleaseSessionOptions=G=>(u._OrtReleaseSessionOptions=UA.La)(G),u._OrtCreateSession=(G,W,Z)=>(u._OrtCreateSession=UA.Ma)(G,W,Z),u._OrtReleaseSession=G=>(u._OrtReleaseSession=UA.Na)(G),u._OrtGetInputOutputCount=(G,W,Z)=>(u._OrtGetInputOutputCount=UA.Oa)(G,W,Z),u._OrtGetInputOutputMetadata=(G,W,Z,se)=>(u._OrtGetInputOutputMetadata=UA.Pa)(G,W,Z,se),u._OrtFree=G=>(u._OrtFree=UA.Qa)(G),u._OrtCreateTensor=(G,W,Z,se,ce,Te)=>(u._OrtCreateTensor=UA.Ra)(G,W,Z,se,ce,Te),u._OrtGetTensorData=(G,W,Z,se,ce)=>(u._OrtGetTensorData=UA.Sa)(G,W,Z,se,ce),u._OrtReleaseTensor=G=>(u._OrtReleaseTensor=UA.Ta)(G),u._OrtCreateRunOptions=(G,W,Z,se)=>(u._OrtCreateRunOptions=UA.Ua)(G,W,Z,se),u._OrtAddRunConfigEntry=(G,W,Z)=>(u._OrtAddRunConfigEntry=UA.Va)(G,W,Z),u._OrtReleaseRunOptions=G=>(u._OrtReleaseRunOptions=UA.Wa)(G),u._OrtCreateBinding=G=>(u._OrtCreateBinding=UA.Xa)(G),u._OrtBindInput=(G,W,Z)=>(u._OrtBindInput=UA.Ya)(G,W,Z),u._OrtBindOutput=(G,W,Z,se)=>(u._OrtBindOutput=UA.Za)(G,W,Z,se),u._OrtClearBoundOutputs=G=>(u._OrtClearBoundOutputs=UA._a)(G),u._OrtReleaseBinding=G=>(u._OrtReleaseBinding=UA.$a)(G),u._OrtRunWithBinding=(G,W,Z,se,ce)=>(u._OrtRunWithBinding=UA.ab)(G,W,Z,se,ce),u._OrtRun=(G,W,Z,se,ce,Te,Ze,dA)=>(u._OrtRun=UA.bb)(G,W,Z,se,ce,Te,Ze,dA),u._OrtEndProfiling=G=>(u._OrtEndProfiling=UA.cb)(G),u._JsepOutput=(G,W,Z)=>(u._JsepOutput=UA.db)(G,W,Z),u._JsepGetNodeName=G=>(u._JsepGetNodeName=UA.eb)(G);var ka=()=>(ka=UA.fb)(),Es=u._free=G=>(Es=u._free=UA.gb)(G),ar=u._malloc=G=>(ar=u._malloc=UA.hb)(G),Ha=(G,W,Z,se,ce,Te)=>(Ha=UA.kb)(G,W,Z,se,ce,Te),Sn=()=>(Sn=UA.lb)(),At=(G,W,Z,se,ce)=>(At=UA.mb)(G,W,Z,se,ce),Ms=G=>(Ms=UA.nb)(G),Ua=G=>(Ua=UA.ob)(G),zs=(G,W)=>(zs=UA.pb)(G,W),cn=()=>(cn=UA.qb)(),xr=(G,W)=>(xr=UA.rb)(G,W),vs=G=>(vs=UA.sb)(G),mr=G=>(mr=UA.tb)(G),Bs=()=>(Bs=UA.ub)(),un=u.dynCall_ii=(G,W)=>(un=u.dynCall_ii=UA.vb)(G,W),Ka=G=>(Ka=UA.wb)(G),On=()=>(On=UA.xb)(),dn=G=>(dn=UA.yb)(G),Ut=()=>(Ut=UA.zb)();return u.stackSave=()=>Bs(),u.stackRestore=G=>vs(G),u.stackAlloc=G=>mr(G),u.setValue=function(G,W,Z="i8"){switch(Z.endsWith("*")&&(Z="*"),Z){case"i1":case"i8":Fe()[G>>>0]=W;break;case"i16":Ae()[G>>>1>>>0]=W;break;case"i32":oe()[G>>>2>>>0]=W;break;case"i64":be[G>>>3]=BigInt(W);break;case"float":nA()[G>>>2>>>0]=W;break;case"double":Je()[G>>>3>>>0]=W;break;case"*":Ge()[G>>>2>>>0]=W;break;default:AA(`invalid type for setValue: ${Z}`)}},u.getValue=function(G,W="i8"){switch(W.endsWith("*")&&(W="*"),W){case"i1":case"i8":return Fe()[G>>>0];case"i16":return Ae()[G>>>1>>>0];case"i32":return oe()[G>>>2>>>0];case"i64":return be[G>>>3];case"float":return nA()[G>>>2>>>0];case"double":return Je()[G>>>3>>>0];case"*":return Ge()[G>>>2>>>0];default:AA(`invalid type for getValue: ${W}`)}},u.UTF8ToString=QA,u.stringToUTF8=or,u.lengthBytesUTF8=bt,function G(){if(0<ge)He=G;else if(w)o(u),de();else{for(;0<rA.length;)rA.shift()(u);0<ge?He=G:(u.calledRun=!0,ve||(de(),o(u)))}}(),u.PTR_SIZE=4,m}),gm=Hl,ef=globalThis.self?.name?.startsWith("em-pthread"),ef&&Hl()}),Ul,X2,Af,aa,pm,k0,tf,rf,Kl,sf,Xl,mm,Zl,hm,Cc=hA(()=>{hc(),Ul=typeof location>"u"?void 0:location.origin,X2=import.meta.url>"file:"&&import.meta.url<"file;",Af=()=>{{if(X2){let a=URL;return new URL(new a("ort.bundle.min.mjs",import.meta.url).href,Ul).href}return import.meta.url}},aa=Af(),pm=()=>{if(aa&&!aa.startsWith("blob:"))return aa.substring(0,aa.lastIndexOf("/")+1)},k0=(a,o)=>{try{let n=o??aa;return(n?new URL(a,n):new URL(a)).origin===Ul}catch{return!1}},tf=(a,o)=>{let n=o??aa;try{return(n?new URL(a,n):new URL(a)).href}catch{return}},rf=(a,o)=>`${o??"./"}${a}`,Kl=async a=>{let o=await(await fetch(a,{credentials:"same-origin"})).blob();return URL.createObjectURL(o)},sf=async a=>(await import(a)).default,Xl=(D6(),$o(um)).default,mm=async()=>{if(!aa)throw new Error("Failed to load proxy worker: cannot determine the script source URL.");if(k0(aa))return[void 0,Xl()];let a=await Kl(aa);return[a,Xl(a)]},Zl=(T6(),$o(fm)).default,hm=async(a,o,n)=>{if(!a&&!o&&Zl&&aa&&k0(aa))return[void 0,Zl];{let u="ort-wasm-simd-threaded.jsep.mjs",m=a??tf(u,o),b=n&&m&&!k0(m,o),C=b?await Kl(m):m??rf(u,o);return[b?C:void 0,await sf(C)]}}}),Jl,E0,Qo,ql,af,nf,of,bc,ir,Qi=hA(()=>{Cc(),E0=!1,Qo=!1,ql=!1,af=()=>{if(typeof SharedArrayBuffer>"u")return!1;try{return typeof MessageChannel<"u"&&new MessageChannel().port1.postMessage(new SharedArrayBuffer(1)),WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,4,1,3,1,1,10,11,1,9,0,65,0,254,16,2,0,26,11]))}catch{return!1}},nf=()=>{try{return WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,30,1,28,0,65,0,253,15,253,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,186,1,26,11]))}catch{return!1}},of=()=>{try{return WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,5,1,96,0,1,123,3,2,1,0,10,19,1,17,0,65,1,253,15,65,2,253,15,65,3,253,15,253,147,2,11]))}catch{return!1}},bc=async a=>{if(E0)return Promise.resolve();if(Qo)throw new Error("multiple calls to 'initializeWebAssembly()' detected.");if(ql)throw new Error("previous call to 'initializeWebAssembly()' failed.");Qo=!0;let o=a.initTimeout,n=a.numThreads;if(a.simd!==!1){if(a.simd==="relaxed"){if(!of())throw new Error("Relaxed WebAssembly SIMD is not supported in the current environment.")}else if(!nf())throw new Error("WebAssembly SIMD is not supported in the current environment.")}let u=af();n>1&&!u&&(typeof self<"u"&&!self.crossOriginIsolated&&console.warn("env.wasm.numThreads is set to "+n+", but this will not work unless you enable crossOriginIsolated mode. See https://web.dev/cross-origin-isolation-guide/ for more info."),console.warn("WebAssembly multi-threading is not supported in the current environment. Falling back to single-threading."),a.numThreads=n=1);let m=a.wasmPaths,b=typeof m=="string"?m:void 0,C=m?.mjs,w=C?.href??C,E=m?.wasm,B=E?.href??E,D=a.wasmBinary,[v,x]=await hm(w,b,n>1),S=!1,F=[];if(o>0&&F.push(new Promise(j=>{setTimeout(()=>{S=!0,j()},o)})),F.push(new Promise((j,J)=>{let L={numThreads:n};if(D)L.wasmBinary=D;else if(B||b)L.locateFile=N=>B??b+N;else if(w&&w.indexOf("blob:")!==0)L.locateFile=N=>new URL(N,w).href;else if(v){let N=pm();N&&(L.locateFile=U=>N+U)}x(L).then(N=>{Qo=!1,E0=!0,Jl=N,j(),v&&URL.revokeObjectURL(v)},N=>{Qo=!1,ql=!0,J(N)})})),await Promise.race(F),S)throw new Error(`WebAssembly backend initializing failed due to timeout: ${o}ms`)},ir=()=>{if(E0&&Jl)return Jl;throw new Error("WebAssembly is not initialized yet.")}}),Ta,W0,Xt,Ic=hA(()=>{Qi(),Ta=(a,o)=>{let n=ir(),u=n.lengthBytesUTF8(a)+1,m=n._malloc(u);return n.stringToUTF8(a,m,u),o.push(m),m},W0=(a,o,n,u)=>{if(typeof a=="object"&&a!==null){if(n.has(a))throw new Error("Circular reference in options");n.add(a)}Object.entries(a).forEach(([m,b])=>{let C=o?o+m:m;if(typeof b=="object")W0(b,C+".",n,u);else if(typeof b=="string"||typeof b=="number")u(C,b.toString());else if(typeof b=="boolean")u(C,b?"1":"0");else throw new Error(`Can't handle extra config type: ${typeof b}`)})},Xt=a=>{let o=ir(),n=o.stackSave();try{let u=o.PTR_SIZE,m=o.stackAlloc(2*u);o._OrtGetLastError(m,m+u);let b=Number(o.getValue(m,u===4?"i32":"i64")),C=o.getValue(m+u,"*"),w=C?o.UTF8ToString(C):"";throw new Error(`${a} ERROR_CODE: ${b}, ERROR_MESSAGE: ${w}`)}finally{o.stackRestore(n)}}}),Cm,P6=hA(()=>{Qi(),Ic(),Cm=a=>{let o=ir(),n=0,u=[],m=a||{};try{if(a?.logSeverityLevel===void 0)m.logSeverityLevel=2;else if(typeof a.logSeverityLevel!="number"||!Number.isInteger(a.logSeverityLevel)||a.logSeverityLevel<0||a.logSeverityLevel>4)throw new Error(`log serverity level is not valid: ${a.logSeverityLevel}`);if(a?.logVerbosityLevel===void 0)m.logVerbosityLevel=0;else if(typeof a.logVerbosityLevel!="number"||!Number.isInteger(a.logVerbosityLevel))throw new Error(`log verbosity level is not valid: ${a.logVerbosityLevel}`);a?.terminate===void 0&&(m.terminate=!1);let b=0;return a?.tag!==void 0&&(b=Ta(a.tag,u)),n=o._OrtCreateRunOptions(m.logSeverityLevel,m.logVerbosityLevel,!!m.terminate,b),n===0&&Xt("Can't create run options."),a?.extra!==void 0&&W0(a.extra,"",new WeakSet,(C,w)=>{let E=Ta(C,u),B=Ta(w,u);o._OrtAddRunConfigEntry(n,E,B)!==0&&Xt(`Can't set a run config entry: ${C} - ${w}.`)}),[n,u]}catch(b){throw n!==0&&o._OrtReleaseRunOptions(n),u.forEach(C=>o._free(C)),b}}}),lf,cf,uf,Fo,df,bm,G6=hA(()=>{Qi(),Ic(),lf=a=>{switch(a){case"disabled":return 0;case"basic":return 1;case"extended":return 2;case"all":return 99;default:throw new Error(`unsupported graph optimization level: ${a}`)}},cf=a=>{switch(a){case"sequential":return 0;case"parallel":return 1;default:throw new Error(`unsupported execution mode: ${a}`)}},uf=a=>{a.extra||(a.extra={}),a.extra.session||(a.extra.session={});let o=a.extra.session;o.use_ort_model_bytes_directly||(o.use_ort_model_bytes_directly="1"),a.executionProviders&&a.executionProviders.some(n=>(typeof n=="string"?n:n.name)==="webgpu")&&(a.enableMemPattern=!1)},Fo=(a,o,n,u)=>{let m=Ta(o,u),b=Ta(n,u);ir()._OrtAddSessionConfigEntry(a,m,b)!==0&&Xt(`Can't set a session config entry: ${o} - ${n}.`)},df=async(a,o,n)=>{for(let u of o){let m=typeof u=="string"?u:u.name,b=[];switch(m){case"webnn":if(m="WEBNN",typeof u!="string"){let D=u?.deviceType;D&&Fo(a,"deviceType",D,n)}break;case"webgpu":if(m="JS",typeof u!="string"){let D=u;if(D?.preferredLayout){if(D.preferredLayout!=="NCHW"&&D.preferredLayout!=="NHWC")throw new Error(`preferredLayout must be either 'NCHW' or 'NHWC': ${D.preferredLayout}`);Fo(a,"preferredLayout",D.preferredLayout,n)}}break;case"wasm":case"cpu":continue;default:throw new Error(`not supported execution provider: ${m}`)}let C=Ta(m,n),w=b.length,E=0,B=0;if(w>0){E=ir()._malloc(w*ir().PTR_SIZE),n.push(E),B=ir()._malloc(w*ir().PTR_SIZE),n.push(B);for(let D=0;D<w;D++)ir().setValue(E+D*ir().PTR_SIZE,b[D][0],"*"),ir().setValue(B+D*ir().PTR_SIZE,b[D][1],"*")}await ir()._OrtAppendExecutionProvider(a,C,E,B,w)!==0&&Xt(`Can't append execution provider: ${m}.`)}},bm=async a=>{let o=ir(),n=0,u=[],m=a||{};uf(m);try{let b=lf(m.graphOptimizationLevel??"all"),C=cf(m.executionMode??"sequential"),w=typeof m.logId=="string"?Ta(m.logId,u):0,E=m.logSeverityLevel??2;if(!Number.isInteger(E)||E<0||E>4)throw new Error(`log serverity level is not valid: ${E}`);let B=m.logVerbosityLevel??0;if(!Number.isInteger(B)||B<0||B>4)throw new Error(`log verbosity level is not valid: ${B}`);let D=typeof m.optimizedModelFilePath=="string"?Ta(m.optimizedModelFilePath,u):0;if(n=o._OrtCreateSessionOptions(b,!!m.enableCpuMemArena,!!m.enableMemPattern,C,!!m.enableProfiling,0,w,E,B,D),n===0&&Xt("Can't create session options."),m.executionProviders&&await df(n,m.executionProviders,u),m.enableGraphCapture!==void 0){if(typeof m.enableGraphCapture!="boolean")throw new Error(`enableGraphCapture must be a boolean value: ${m.enableGraphCapture}`);Fo(n,"enableGraphCapture",m.enableGraphCapture.toString(),u)}if(m.freeDimensionOverrides)for(let[v,x]of Object.entries(m.freeDimensionOverrides)){if(typeof v!="string")throw new Error(`free dimension override name must be a string: ${v}`);if(typeof x!="number"||!Number.isInteger(x)||x<0)throw new Error(`free dimension override value must be a non-negative integer: ${x}`);let S=Ta(v,u);o._OrtAddFreeDimensionOverride(n,S,x)!==0&&Xt(`Can't set a free dimension override: ${v} - ${x}.`)}return m.extra!==void 0&&W0(m.extra,"",new WeakSet,(v,x)=>{Fo(n,v,x,u)}),[n,u]}catch(b){throw n!==0&&o._OrtReleaseSessionOptions(n)!==0&&Xt("Can't release session options."),u.forEach(C=>o._free(C)),b}}}),Ao,kn,Bi,wc,Y0,kc,Ec,Z2,it=hA(()=>{Ao=a=>{switch(a){case"int8":return 3;case"uint8":return 2;case"bool":return 9;case"int16":return 5;case"uint16":return 4;case"int32":return 6;case"uint32":return 12;case"float16":return 10;case"float32":return 1;case"float64":return 11;case"string":return 8;case"int64":return 7;case"uint64":return 13;case"int4":return 22;case"uint4":return 21;default:throw new Error(`unsupported data type: ${a}`)}},kn=a=>{switch(a){case 3:return"int8";case 2:return"uint8";case 9:return"bool";case 5:return"int16";case 4:return"uint16";case 6:return"int32";case 12:return"uint32";case 10:return"float16";case 1:return"float32";case 11:return"float64";case 8:return"string";case 7:return"int64";case 13:return"uint64";case 22:return"int4";case 21:return"uint4";default:throw new Error(`unsupported data type: ${a}`)}},Bi=(a,o)=>{let n=[-1,4,1,1,2,2,4,8,-1,1,2,8,4,8,-1,-1,-1,-1,-1,-1,-1,.5,.5][a],u=typeof o=="number"?o:o.reduce((m,b)=>m*b,1);return n>0?Math.ceil(u*n):void 0},wc=a=>{switch(a){case"float16":return typeof Float16Array<"u"&&Float16Array.from?Float16Array:Uint16Array;case"float32":return Float32Array;case"uint8":return Uint8Array;case"int8":return Int8Array;case"uint16":return Uint16Array;case"int16":return Int16Array;case"int32":return Int32Array;case"bool":return Uint8Array;case"float64":return Float64Array;case"uint32":return Uint32Array;case"int64":return BigInt64Array;case"uint64":return BigUint64Array;default:throw new Error(`unsupported type: ${a}`)}},Y0=a=>{switch(a){case"verbose":return 0;case"info":return 1;case"warning":return 2;case"error":return 3;case"fatal":return 4;default:throw new Error(`unsupported logging level: ${a}`)}},kc=a=>a==="float32"||a==="float16"||a==="int32"||a==="int64"||a==="uint32"||a==="uint8"||a==="bool"||a==="uint4"||a==="int4",Ec=a=>a==="float32"||a==="float16"||a==="int32"||a==="int64"||a==="uint32"||a==="uint64"||a==="int8"||a==="uint8"||a==="bool"||a==="uint4"||a==="int4",Z2=a=>{switch(a){case"none":return 0;case"cpu":return 1;case"cpu-pinned":return 2;case"texture":return 3;case"gpu-buffer":return 4;case"ml-tensor":return 5;default:throw new Error(`unsupported data location: ${a}`)}}}),Mc,Im=hA(()=>{hc(),Mc=async a=>{if(typeof a=="string"){let o=await fetch(a);if(!o.ok)throw new Error(`failed to load external data file: ${a}`);let n=o.headers.get("Content-Length"),u=n?parseInt(n,10):0;if(u<1073741824)return new Uint8Array(await o.arrayBuffer());{if(!o.body)throw new Error(`failed to load external data file: ${a}, no response body.`);let m=o.body.getReader(),b;try{b=new ArrayBuffer(u)}catch(w){if(w instanceof RangeError){let E=Math.ceil(u/65536);b=new WebAssembly.Memory({initial:E,maximum:E}).buffer}else throw w}let C=0;for(;;){let{done:w,value:E}=await m.read();if(w)break;let B=E.byteLength;new Uint8Array(b,C,B).set(E),C+=B}return new Uint8Array(b,0,u)}}else return a instanceof Blob?new Uint8Array(await a.arrayBuffer()):a instanceof Uint8Array?a:new Uint8Array(a)}}),ff,gf,pf,mf,vc,hf,xt,Mn=hA(()=>{it(),ff=["V","I","W","E","F"],gf=(a,o)=>{console.log(`[${ff[a]},${new Date().toISOString()}]${o}`)},vc=(a,o)=>{pf=a,mf=o},hf=(a,o)=>{let n=Y0(a),u=Y0(pf);n>=u&&gf(n,typeof o=="function"?o():o)},xt=(...a)=>{mf&&hf(...a)}}),Cf,lo,Ue,V0,wm,km,Em,ft=hA(()=>{Cf=class{static calcMatMulShape(a,o){return a[1]!==o[0]?void 0:[a[0],o[1]]}},lo=class{static calcShape(a,o,n=!1){let u=a.length,m=o.length;if(u===0)return o;if(m===0)return a;let b=Math.max(a.length,o.length),C=new Array(b);if(n){if(u<2||m<2)return;let w=Cf.calcMatMulShape([a[u-2],a[u-1]],[o[m-2],o[m-1]]);if(w===void 0)return;[C[b-2],C[b-1]]=w}for(let w=n?3:1;w<=b;w++){let E=u-w<0?1:a[u-w],B=m-w<0?1:o[m-w];if(E!==B&&E>1&&B>1)return;let D=Math.max(E,B);if(E&&B)C[b-w]=Math.max(E,B);else{if(D>1)return;C[b-w]=0}}return C}static isValidBroadcast(a,o){let n=a.length,u=o.length;if(n>u)return!1;for(let m=1;m<=n;m++)if(a[n-m]!==1&&a[n-m]!==o[u-m])return!1;return!0}},Ue=class N0{static size(o){return N0.getSizeFromDimensionRange(o,0,o.length)}static convertShape(o,n=4){let u=o.length;if(u===0)return[];let m=new Array(u),b=u-1;for(;b>=0;){if(o[b]%n===0){m[b]=o[b]/n;break}if(n%o[b]!==0)throw new Error("cannot convert shape");m[b]=1,n/=o[b],b--}for(b--;b>=0;b--)m[b]=o[b];return m}static sizeFromDimension(o,n){if(n<0||n>o.length)throw new Error(`invalid dimension of ${n} for sizeFromDimension as Tensor has ${o.length} dimensions.`);return N0.getSizeFromDimensionRange(o,n,o.length)}static sizeToDimension(o,n){if(n<0||n>o.length)throw new Error(`invalid dimension of ${n} for sizeToDimension as Tensor has ${o.length} dimensions.`);return N0.getSizeFromDimensionRange(o,0,n)}static getSizeFromDimensionRange(o,n,u){let m=1;for(let b=n;b<u;b++){if(o[b]<0)throw new Error("cannot get valid size from specified dimension range. Most likely the range contains negative values in them.");m*=Number(o[b])}return m}static computeStrides(o){let n=o.length;if(n===0)return[];if(n===1)return[1];let u=new Array(n);u[n-1]=1,u[n-2]=o[n-1];for(let m=n-3;m>=0;--m)u[m]=u[m+1]*o[m+1];return u}static normalizeAxis(o,n){if(o<-n&&o>=n)throw new Error("unsupported axis for this operation.");return o<0?o+n:o}static normalizeAxes(o,n){return o.map(u=>this.normalizeAxis(u,n??o.length))}static sortBasedOnPerm(o,n){return n?n.map(u=>o[u]):o.slice().reverse()}static padShape(o,n){let u=o.length;return o.map((m,b)=>m+n[b]+n[b+u])}static areEqual(o,n){return o.length!==n.length?!1:o.every((u,m)=>u===n[m])}},V0=class Yo{static adjustPoolAttributes(o,n,u,m,b,C){if(!o&&u.length!==n.length-2)throw new Error("length of specified kernel shapes should be 2 less than length of input dimensions");if(o)for(let w=0;w<n.length-2;w++)w>=u.length?u.push(n[w+2]):u[w]=n[w+2];for(let w=0;w<u.length;w++)if(w<m.length){if(m[w]<0)throw new Error("strides should be greater than or equal to 1")}else m.push(1);for(let w=0;w<u.length;w++)if(w<b.length){if(b[w]<0)throw new Error("dilations should be greater than or equal to 1")}else b.push(1);for(let w=0;w<u.length*2;w++)if(w<C.length){if(C[w]<0)throw new Error("pad should be greater than or equal to 1")}else C.push(0);for(let w=0;w<u.length;w++){if(u[w]<=0)throw new Error("kernel shapes need to be greater than 0");if(C[w]>=u[w]||C[w+u.length]>=u[w])throw new Error("pads should be smaller than kernel")}}static adjustPadsBasedOnAutoPad(o,n,u,m,b,C,w){if(w){if(b.length!==2*(o.length-2))throw new Error("length of pads should be twice the length of data dimensions");if(n.length!==o.length-2)throw new Error("length of strides should be the length of data dimensions");if(m.length!==o.length-2)throw new Error("length of kernel shapes should be the length of data dimensions");for(let E=0;E<o.length-2;E++)Yo.adjustPadAndReturnShape(o[E+(C?1:2)],n[E],u[E],m[E],b,E,E+o.length-2,w)}}static computePoolOutputShape(o,n,u,m,b,C,w){if(n.length<=0)throw new Error("input shape must be of size greater than 0");let E=[n[0],n[1]];return Yo.computeShapeHelper(o,n,E,u,m,b,C,w),E}static computeConvOutputShape(o,n,u,m,b,C,w){if(o.length<=0||n.length<=0)throw new Error("invalid input tensor dims or invalid filter tensor dims");let E=[o[0],n[0]];return Yo.computeShapeHelper(!1,o,E,u,m,b,C,w),E}static computeShapeHelper(o,n,u,m,b,C,w,E){if(o)for(let B=0;B<n.length-2;B++)u.push(1);else for(let B=0;B<n.length-2;B++)u.push(Yo.adjustPadAndReturnShape(n[B+2],m[B],b[B],C[B],w,B,B+n.length-2,E))}static adjustPadAndReturnShape(o,n,u,m,b,C,w,E){let B=u*(m-1)+1;if(E&&E!=="NOTSET")switch(E){case"VALID":return b[C]=0,b[w]=0,Math.floor((o-B)/n+1);case"SAME_LOWER":case"SAME_UPPER":if(u!==1)throw new Error("Dilation not supported for SAME_UPPER or SAME_LOWER");{let D=((o+n-1)/n-1)*n+m-o;return b[C]=Math.floor(E==="SAME_LOWER"?(D+1)/2:D/2),b[w]=D-b[C],Math.floor((o+D-m)/n+1)}default:throw new Error("Unsupported AutoPad type")}else return Math.floor((o+b[C]+b[w]-B)/n+1)}},wm=class{static getShapeOfGemmResult(a,o,n,u,m){if(a.length!==2||n.length!==2)throw new Error("shape need to be of size 2");let b,C,w;o?(b=a[1],C=a[0]):(b=a[0],C=a[1]);let E=-1;if(u?(w=n[0],E=1):(w=n[1],E=0),n[E]!==C)throw new Error("dimension mismatch");if(b<=0||w<=0||C<=0)throw new Error("invalid shape specified");if(m&&!lo.isValidBroadcast(m,[b,w]))throw new Error("gemm: invalid bias shape for broadcast");return[b,w,C]}},km=-34028234663852886e22,Em=34028234663852886e22}),Bc,Mm=hA(()=>{it(),Bc=(a,o)=>new(wc(o))(a)}),J2,$l,bf,e2,If,A2,t2,r2,wf,vm,Q6=hA(()=>{Mn(),J2=(a,o=!0)=>{if(a.byteLength%8!==0)throw new Error("Invalid Uint8Array length - must be a multiple of 8 (BigInt).");let n=a.byteLength/8,u=new BigInt64Array(a.buffer,a.byteOffset,n),m=new Int32Array(n);for(let b=0;b<n;b++){let C=u[b];if(C>2147483647n||C<-2147483648n)throw new Error(`Overflow occurred when converting BigInt to Int32 at index ${b}: ${C}`);m[b]=Number(C)}return o?new Uint8Array(m.buffer):m},$l=(a,o=!0)=>{if(a.byteLength%4!==0)throw new Error("Invalid Uint8Array length - must be a multiple of 4 (Int32).");let n=a.byteLength/4,u=new Int32Array(a.buffer,a.byteOffset,n),m=BigInt64Array.from(u,BigInt);return o?new Uint8Array(m.buffer):m},bf=1,e2=()=>bf++,If=new Map([["float32",32],["float16",16],["int32",32],["uint32",32],["int64",64],["uint64",64],["int8",8],["uint8",8],["int4",4],["uint4",4]]),A2=(a,o)=>{let n=If.get(a);if(!n)throw new Error("Unsupported data type.");return o.length>0?Math.ceil(o.reduce((u,m)=>u*m)*n/8):0},t2=class{constructor(a){this.shouldConvertInt64toInt32=!1,this.isInt64ToInt32Converted=!1;let{sessionId:o,context:n,tensor:u,dataType:m,shape:b,shouldConvertInt64toInt32:C=!1}=a;this.sessionId=o,this.mlContext=n,this.mlTensor=u,this.dataType=m,this.tensorShape=b,this.shouldConvertInt64toInt32=C}get tensor(){return this.mlTensor}get type(){return this.dataType}get shape(){return this.tensorShape}get byteLength(){return A2(this.dataType,this.tensorShape)}destroy(){xt("verbose",()=>"[WebNN] TensorWrapper.destroy"),this.mlTensor.destroy()}write(a){this.mlContext.writeTensor(this.mlTensor,a)}async read(a,o){if(a){let n=await this.mlContext.readTensor(this.mlTensor),u=$l(new Uint8Array(n));if(o){(o instanceof ArrayBuffer?new Uint8Array(o):new Uint8Array(o.buffer,o.byteOffset,o.byteLength)).set(u);return}else return u.buffer}else return o?this.mlContext.readTensor(this.mlTensor,o):this.mlContext.readTensor(this.mlTensor)}canReuseTensor(a,o,n){return this.mlContext===a&&this.dataType===o&&this.tensorShape.length===n.length&&this.tensorShape.every((u,m)=>u===n[m])}setIsInt64ToInt32Converted(a){this.isInt64ToInt32Converted=a}},r2=class{constructor(a,o){this.tensorManager=a,this.wrapper=o}get tensorWrapper(){return this.wrapper}releaseTensor(){this.tensorWrapper&&(this.tensorManager.releaseTensor(this.tensorWrapper),this.wrapper=void 0)}async ensureTensor(a,o,n,u){let m=o,b=this.tensorManager.getMLContext(a),C=m==="int64"&&!b.opSupportLimits().input.dataTypes.includes("int64");if(C&&(m="int32",xt("verbose",()=>"[WebNN] TensorIdTracker.ensureTensor: convert dataType from int64 to int32")),this.wrapper){if(this.wrapper.canReuseTensor(b,m,n))return this.wrapper.tensor;if(u){if(this.wrapper.byteLength!==A2(m,n))throw new Error("Unable to copy data to tensor with different size.");this.activeUpload=new Uint8Array(await this.wrapper.read())}this.tensorManager.releaseTensor(this.wrapper)}let w=typeof MLTensorUsage>"u"?void 0:MLTensorUsage.READ|MLTensorUsage.WRITE;return this.wrapper=await this.tensorManager.getCachedTensor(a,m,n,w,!0,!0,C),u&&this.activeUpload&&(this.wrapper.write(this.activeUpload),this.activeUpload=void 0),this.wrapper.tensor}upload(a){let o=a;if(this.wrapper)if(this.wrapper.shouldConvertInt64toInt32&&(o=J2(a,!0),this.wrapper.setIsInt64ToInt32Converted(!0)),o.byteLength===this.wrapper.byteLength){this.wrapper.write(o);return}else xt("verbose",()=>"Data size does not match tensor size. Releasing tensor."),this.releaseTensor();this.activeUpload?this.activeUpload.set(o):this.activeUpload=new Uint8Array(o)}async download(a){if(this.activeUpload){let o=this.wrapper?.isInt64ToInt32Converted?$l(this.activeUpload):this.activeUpload;if(a){a instanceof ArrayBuffer?new Uint8Array(a).set(o):new Uint8Array(a.buffer,a.byteOffset,a.byteLength).set(o);return}else return o.buffer}if(!this.wrapper)throw new Error("Tensor has not been created.");return a?this.wrapper.read(this.wrapper?.shouldConvertInt64toInt32,a):this.wrapper.read(this.wrapper?.shouldConvertInt64toInt32)}},wf=class{constructor(a){this.backend=a,this.tensorTrackersById=new Map,this.freeTensors=[],this.externalTensors=new Set}getMLContext(a){let o=this.backend.getMLContext(a);if(!o)throw new Error("MLContext not found for session.");return o}reserveTensorId(){let a=e2();return this.tensorTrackersById.set(a,new r2(this)),a}releaseTensorId(a){let o=this.tensorTrackersById.get(a);o&&(this.tensorTrackersById.delete(a),o.tensorWrapper&&this.releaseTensor(o.tensorWrapper))}async ensureTensor(a,o,n,u,m){xt("verbose",()=>`[WebNN] TensorManager.ensureTensor {tensorId: ${o}, dataType: ${n}, shape: ${u}, copyOld: ${m}}`);let b=this.tensorTrackersById.get(o);if(!b)throw new Error("Tensor not found.");return b.ensureTensor(a,n,u,m)}upload(a,o){let n=this.tensorTrackersById.get(a);if(!n)throw new Error("Tensor not found.");n.upload(o)}async download(a,o){xt("verbose",()=>`[WebNN] TensorManager.download {tensorId: ${a}, dstBuffer: ${o?.byteLength}}`);let n=this.tensorTrackersById.get(a);if(!n)throw new Error("Tensor not found.");return n.download(o)}releaseTensorsForSession(a){for(let o of this.freeTensors)o.sessionId===a&&o.destroy();this.freeTensors=this.freeTensors.filter(o=>o.sessionId!==a)}registerTensor(a,o,n,u){let m=this.getMLContext(a),b=e2(),C=new t2({sessionId:a,context:m,tensor:o,dataType:n,shape:u});return this.tensorTrackersById.set(b,new r2(this,C)),this.externalTensors.add(C),b}async getCachedTensor(a,o,n,u,m,b,C=!1){let w=this.getMLContext(a);for(let[B,D]of this.freeTensors.entries())if(D.canReuseTensor(w,o,n)){xt("verbose",()=>`[WebNN] Reusing tensor {dataType: ${o}, shape: ${n}}`);let v=this.freeTensors.splice(B,1)[0];return v.sessionId=a,v}xt("verbose",()=>`[WebNN] MLContext.createTensor {dataType: ${o}, shape: ${n}}`);let E=await w.createTensor({dataType:o,shape:n,dimensions:n,usage:u,writable:m,readable:b});return new t2({sessionId:a,context:w,tensor:E,dataType:o,shape:n,shouldConvertInt64toInt32:C})}releaseTensor(a){this.externalTensors.has(a)&&this.externalTensors.delete(a),this.freeTensors.push(a)}},vm=(...a)=>new wf(...a)}),M0,kf,Bm,F6=hA(()=>{it(),Qi(),Mm(),Q6(),Mn(),M0=new Map([[1,"float32"],[10,"float16"],[6,"int32"],[12,"uint32"],[7,"int64"],[13,"uint64"],[22,"int4"],[21,"uint4"],[3,"int8"],[2,"uint8"],[9,"uint8"]]),kf=(a,o)=>{if(a===o)return!0;if(a===void 0||o===void 0)return!1;let n=Object.keys(a).sort(),u=Object.keys(o).sort();return n.length===u.length&&n.every((m,b)=>m===u[b]&&a[m]===o[m])},Bm=class{constructor(a){this.tensorManager=vm(this),this.mlContextBySessionId=new Map,this.sessionIdsByMLContext=new Map,this.mlContextCache=[],this.sessionGraphInputs=new Map,this.temporaryGraphInputs=[],this.temporarySessionTensorIds=new Map,vc(a.logLevel,!!a.debug)}get currentSessionId(){if(this.activeSessionId===void 0)throw new Error("No active session");return this.activeSessionId}onRunStart(a){xt("verbose",()=>`[WebNN] onRunStart {sessionId: ${a}}`),this.activeSessionId=a}onRunEnd(a){xt("verbose",()=>`[WebNN] onRunEnd {sessionId: ${a}}`);let o=this.temporarySessionTensorIds.get(a);if(o){for(let n of o)xt("verbose",()=>`[WebNN] releasing temporary tensor {tensorId: ${n}}`),this.tensorManager.releaseTensorId(n);this.temporarySessionTensorIds.delete(a),this.activeSessionId=void 0}}async createMLContext(a){if(a instanceof GPUDevice){let n=this.mlContextCache.findIndex(u=>u.gpuDevice===a);if(n!==-1)return this.mlContextCache[n].mlContext;{let u=await navigator.ml.createContext(a);return this.mlContextCache.push({gpuDevice:a,mlContext:u}),u}}else if(a===void 0){let n=this.mlContextCache.findIndex(u=>u.options===void 0&&u.gpuDevice===void 0);if(n!==-1)return this.mlContextCache[n].mlContext;{let u=await navigator.ml.createContext();return this.mlContextCache.push({mlContext:u}),u}}let o=this.mlContextCache.findIndex(n=>kf(n.options,a));if(o!==-1)return this.mlContextCache[o].mlContext;{let n=await navigator.ml.createContext(a);return this.mlContextCache.push({options:a,mlContext:n}),n}}registerMLContext(a,o){this.mlContextBySessionId.set(a,o);let n=this.sessionIdsByMLContext.get(o);n||(n=new Set,this.sessionIdsByMLContext.set(o,n)),n.add(a),this.temporaryGraphInputs.length>0&&(this.sessionGraphInputs.set(a,this.temporaryGraphInputs),this.temporaryGraphInputs=[])}onReleaseSession(a){this.sessionGraphInputs.delete(a);let o=this.mlContextBySessionId.get(a);if(!o)return;this.tensorManager.releaseTensorsForSession(a),this.mlContextBySessionId.delete(a);let n=this.sessionIdsByMLContext.get(o);if(n.delete(a),n.size===0){this.sessionIdsByMLContext.delete(o);let u=this.mlContextCache.findIndex(m=>m.mlContext===o);u!==-1&&this.mlContextCache.splice(u,1)}}getMLContext(a){return this.mlContextBySessionId.get(a)}reserveTensorId(){return this.tensorManager.reserveTensorId()}releaseTensorId(a){xt("verbose",()=>`[WebNN] releaseTensorId {tensorId: ${a}}`),this.tensorManager.releaseTensorId(a)}async ensureTensor(a,o,n,u,m){let b=M0.get(n);if(!b)throw new Error(`Unsupported ONNX data type: ${n}`);return this.tensorManager.ensureTensor(a??this.currentSessionId,o,b,u,m)}async createTemporaryTensor(a,o,n){xt("verbose",()=>`[WebNN] createTemporaryTensor {onnxDataType: ${o}, shape: ${n}}`);let u=M0.get(o);if(!u)throw new Error(`Unsupported ONNX data type: ${o}`);let m=this.tensorManager.reserveTensorId();await this.tensorManager.ensureTensor(a,m,u,n,!1);let b=this.temporarySessionTensorIds.get(a);return b?b.push(m):this.temporarySessionTensorIds.set(a,[m]),m}uploadTensor(a,o){if(!ir().shouldTransferToMLTensor)throw new Error("Trying to upload to a MLTensor while shouldTransferToMLTensor is false");xt("verbose",()=>`[WebNN] uploadTensor {tensorId: ${a}, data: ${o.byteLength}}`),this.tensorManager.upload(a,o)}async downloadTensor(a,o){return this.tensorManager.download(a,o)}createMLTensorDownloader(a,o){return async()=>{let n=await this.tensorManager.download(a);return Bc(n,o)}}registerMLTensor(a,o,n,u){let m=M0.get(n);if(!m)throw new Error(`Unsupported ONNX data type: ${n}`);let b=this.tensorManager.registerTensor(a,o,m,u);return xt("verbose",()=>`[WebNN] registerMLTensor {tensor: ${o}, dataType: ${m}, dimensions: ${u}} -> {tensorId: ${b}}`),b}registerMLConstant(a,o,n,u,m,b,C=!1){if(!b)throw new Error("External mounted files are not available.");let w=a;a.startsWith("./")&&(w=a.substring(2));let E=b.get(w);if(!E)throw new Error(`File with name ${w} not found in preloaded files.`);if(o+n>E.byteLength)throw new Error("Out of bounds: data offset and length exceed the external file data size.");let B=E.slice(o,o+n).buffer,D;switch(m.dataType){case"float32":D=new Float32Array(B);break;case"float16":D=typeof Float16Array<"u"&&Float16Array.from?new Float16Array(B):new Uint16Array(B);break;case"int32":D=new Int32Array(B);break;case"uint32":D=new Uint32Array(B);break;case"int64":C?(D=J2(new Uint8Array(B),!1),m.dataType="int32"):D=new BigInt64Array(B);break;case"uint64":D=new BigUint64Array(B);break;case"int8":D=new Int8Array(B);break;case"int4":case"uint4":case"uint8":D=new Uint8Array(B);break;default:throw new Error(`Unsupported data type: ${m.dataType} in creating WebNN Constant from external data.`)}return xt("verbose",()=>`[WebNN] registerMLConstant {dataType: ${m.dataType}, shape: ${m.shape}}} ${C?"(Note: it was int64 data type and registered to int32 as workaround)":""}`),u.constant(m,D)}registerGraphInput(a){this.temporaryGraphInputs.push(a)}isGraphInput(a,o){let n=this.sessionGraphInputs.get(a);return n?n.includes(o):!1}isInt64Supported(a){return!!this.mlContextBySessionId.get(a)?.opSupportLimits().input.dataTypes.includes("int64")}flush(){}}}),xc=hA(()=>{}),s2,v0,B0,Ef,Mf,a2,q2,vf,xm,S6=hA(()=>{Mn(),xc(),s2=new Map([[64,250],[128,200],[256,200],[512,200],[2048,230],[4096,200],[8192,50],[16384,50],[32768,50],[65536,50],[131072,50],[262144,50],[524288,50],[1048576,50],[2097152,30],[4194304,20],[8388608,10],[12582912,10],[16777216,10],[26214400,15],[33554432,22],[44236800,2],[58982400,6],[67108864,6],[134217728,6],[167772160,6]]),v0=[],B0=a=>Math.ceil(Number(a)/16)*16,Ef=a=>{for(let o=0;o<v0.length;o++){let n=v0[o];if(a<=n)return n}return Math.ceil(a/16)*16},Mf=1,a2=()=>Mf++,q2=async(a,o,n,u)=>{let m=B0(n),b=a.device.createBuffer({size:m,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ});try{let C=a.getCommandEncoder();a.endComputePass(),C.copyBufferToBuffer(o,0,b,0,m),a.flush(),await b.mapAsync(GPUMapMode.READ);let w=b.getMappedRange();if(u){let E=u();return E.set(new Uint8Array(w,0,n)),E}else return new Uint8Array(w.slice(0,n))}finally{b.destroy()}},vf=class{constructor(a){this.backend=a,this.storageCache=new Map,this.freeBuffers=new Map,this.freeUniformBuffers=new Map,this.buffersPending=[],this.capturedPendingBuffers=new Map;for(let[o]of s2)v0.push(o),this.freeBuffers.set(o,[]),this.freeUniformBuffers.set(o,[]);this.sessionCount=0}upload(a,o){let n=o.buffer,u=o.byteOffset,m=o.byteLength,b=B0(m),C=this.storageCache.get(a);if(!C)throw new Error("gpu data for uploading does not exist");if(Number(C.originalSize)!==m)throw new Error(`inconsistent data size. gpu data size=${C.originalSize}, data size=${m}`);let w=this.backend.device.createBuffer({mappedAtCreation:!0,size:b,usage:GPUBufferUsage.MAP_WRITE|GPUBufferUsage.COPY_SRC}),E=w.getMappedRange();new Uint8Array(E).set(new Uint8Array(n,u,m)),w.unmap();let B=this.backend.device.createCommandEncoder();B.copyBufferToBuffer(w,0,C.gpuData.buffer,0,b),this.backend.device.queue.submit([B.finish()]),w.destroy(),xt("verbose",()=>`[WebGPU] GpuDataManager.upload(id=${a})`)}memcpy(a,o){let n=this.storageCache.get(a);if(!n)throw new Error("source gpu data for memcpy does not exist");let u=this.storageCache.get(o);if(!u)throw new Error("destination gpu data for memcpy does not exist");if(n.originalSize!==u.originalSize)throw new Error("inconsistent source and destination gpu data size");let m=B0(n.originalSize),b=this.backend.getCommandEncoder();this.backend.endComputePass(),b.copyBufferToBuffer(n.gpuData.buffer,0,u.gpuData.buffer,0,m)}registerExternalBuffer(a,o,n){let u;if(n){if(u=n[0],a===n[1])return xt("verbose",()=>`[WebGPU] GpuDataManager.registerExternalBuffer(size=${o}) => id=${u}, buffer is the same, skip.`),u;if(this.backend.capturedCommandList.has(this.backend.currentSessionId))throw new Error(`Registering a different external buffer under graph capture mode is not supported yet.
             Please use the previous external buffer!`)}else u=a2();return this.storageCache.set(u,{gpuData:{id:u,type:0,buffer:a},originalSize:o}),xt("verbose",()=>`[WebGPU] GpuDataManager.registerExternalBuffer(size=${o}) => id=${u}, registered.`),u}unregisterExternalBuffer(a){a!==void 0&&(this.storageCache.delete(a),xt("verbose",()=>`[WebGPU] GpuDataManager.unregisterExternalBuffer() => id=${a}`))}create(a,o=GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST){let n=Ef(a),u,m=(o&GPUBufferUsage.STORAGE)===GPUBufferUsage.STORAGE,b=(o&GPUBufferUsage.UNIFORM)===GPUBufferUsage.UNIFORM;if(m||b){let w=(m?this.freeBuffers:this.freeUniformBuffers).get(n);w?w.length>0?u=w.pop():u=this.backend.device.createBuffer({size:n,usage:o}):u=this.backend.device.createBuffer({size:n,usage:o})}else u=this.backend.device.createBuffer({size:n,usage:o});let C={id:a2(),type:0,buffer:u};return this.storageCache.set(C.id,{gpuData:C,originalSize:Number(a)}),xt("verbose",()=>`[WebGPU] GpuDataManager.create(size=${a}) => id=${C.id}`),C}get(a){return this.storageCache.get(a)?.gpuData}release(a){let o=typeof a=="bigint"?Number(a):a,n=this.storageCache.get(o);if(!n){if(this.storageCache.size===0)return 0;throw new Error("releasing data does not exist")}return xt("verbose",()=>`[WebGPU] GpuDataManager.release(id=${o}), gpuDataId=${n.gpuData.id}`),this.storageCache.delete(o),this.buffersPending.push(n.gpuData.buffer),n.originalSize}async download(a,o){let n=this.storageCache.get(Number(a));if(!n)throw new Error("data does not exist");await q2(this.backend,n.gpuData.buffer,n.originalSize,o)}refreshPendingBuffers(){if(this.buffersPending.length!==0)if(this.backend.sessionStatus==="default"){for(let a of this.buffersPending){let o=s2.get(a.size);if((a.usage&GPUBufferUsage.STORAGE)===GPUBufferUsage.STORAGE){let n=this.freeBuffers.get(a.size)||[];o===void 0||n.length>=o?a.destroy():n.push(a)}else if((a.usage&GPUBufferUsage.UNIFORM)===GPUBufferUsage.UNIFORM){let n=this.freeUniformBuffers.get(a.size)||[];o===void 0||n.length>=o?a.destroy():n.push(a)}else a.destroy()}this.buffersPending=[]}else{let a=this.capturedPendingBuffers.get(this.backend.currentSessionId);a||(a=[],this.capturedPendingBuffers.set(this.backend.currentSessionId,a));for(let o of this.buffersPending)a.push(o);this.buffersPending=[]}}dispose(){this.freeBuffers.forEach(a=>{a.forEach(o=>{o.destroy()})}),this.freeUniformBuffers.forEach(a=>{a.forEach(o=>{o.destroy()})}),this.storageCache.forEach(a=>{a.gpuData.buffer.destroy()}),this.capturedPendingBuffers.forEach(a=>{a.forEach(o=>{o.destroy()})}),this.storageCache=new Map,this.freeBuffers=new Map,this.freeUniformBuffers=new Map,this.capturedPendingBuffers=new Map}onCreateSession(){this.sessionCount+=1}onReleaseSession(a){let o=this.capturedPendingBuffers.get(a);o&&(o.forEach(n=>{n.destroy()}),this.capturedPendingBuffers.delete(a)),this.sessionCount-=1,this.sessionCount===0&&(xt("warning",()=>"[WebGPU] Clearing webgpu buffer cache"),this.storageCache.forEach(n=>{n.gpuData.buffer.destroy()}),this.storageCache=new Map)}},xm=(...a)=>new vf(...a)}),Bf,Nt,Nr=hA(()=>{Bf=class{constructor(a){Object.assign(this,a)}get cacheKey(){return this.key||(this.key=Object.getOwnPropertyNames(this).sort().map(a=>`${this[a]}`).join(";")),this.key}},Nt=a=>new Bf(a)}),co,x0,ds,ys,XA,Pr,$2,ro,Jn,HA,So,$e,YA,ym,yc,xf,Dm,ht=hA(()=>{it(),ft(),co=64,x0=(a,o)=>{if(o===3)throw new Error("vec3 has same alignment as vec4, use vec4 instead");switch(Number(a)){case 10:return o>1?`vec${o}<f16>`:"f16";case 1:return o>1?`vec${o}<f32>`:"f32";case 6:return o>1?`vec${o}<i32>`:"i32";case 12:return o>1?`vec${o}<u32>`:"u32";case 7:if(o>1)throw new Error("currently not supported vecX of uint64 yet");return["vec2<u32>","i32"];case 13:if(o>1)throw new Error("currently not supported vecX of uint64 yet");return["vec2<u32>","u32"];case 9:if(o!==4)throw new Error("bool must be vec4");return["u32","vec4<bool>"];case 22:return"i32";case 21:return"u32";default:throw new Error(`Unknown data type: ${a}`)}},ds=(a,o=1)=>{let n=x0(a,o);return typeof n=="string"?n:n[0]},ys=(a,o=1)=>{let n=x0(a,o);return typeof n=="string"?n:n[1]},XA=(...a)=>{let o=[];return a.forEach(n=>{n.length!==0&&o.push({type:12,data:n},{type:12,data:Ue.computeStrides(n)})}),o},Pr=a=>a%4===0?4:a%2===0?2:1,$2=(a="f32",o,n="0")=>!o||o===1?`${a}(${n})`:`vec${o}<${a}>(${n})`,ro=(a,o,n)=>a==="f32"?n:o===1?`f32(${n})`:`vec${o}<f32>(${n})`,Jn=(a,o)=>o===4?`(${a}.x + ${a}.y + ${a}.z + ${a}.w)`:o===2?`(${a}.x + ${a}.y)`:o===3?`(${a}.x + ${a}.y + ${a}.z)`:a,HA=(a,o,n,u)=>a.startsWith("uniforms.")&&n>4?typeof o=="string"?u==="f16"?`${a}[(${o}) / 8][(${o}) % 8 / 4][(${o}) % 8 % 4]`:`${a}[(${o}) / 4][(${o}) % 4]`:u==="f16"?`${a}[${Math.floor(o/8)}][${Math.floor(o%8/4)}][${o%8%4}]`:`${a}[${Math.floor(o/4)}][${o%4}]`:n>1?`${a}[${o}]`:a,So=(a,o,n,u,m)=>{let b=typeof n=="number",C=b?n:n.length,w=[...new Array(C).keys()],E=C<2?"u32":C<=4?`vec${C}<u32>`:`array<u32, ${C}>`,B=x0(o,m),D=typeof B=="string"?B:B[1],v=typeof B=="string"?B:B[0],x={indices:E,value:D,storage:v,tensor:o},S=le=>typeof le=="string"?le:`${le}u`,F={offsetToIndices:!1,indicesToOffset:!1,broadcastedIndicesToOffset:!1,set:!1,setByIndices:!1,get:!1,getByIndices:!1},j=b?"uniforms.":"",J=`${j}${a}_shape`,L=`${j}${a}_strides`,N="";for(let le=0;le<C-1;le++)N+=`
    let dim${le} = current / ${HA(L,le,C)};
    let rest${le} = current % ${HA(L,le,C)};
    indices[${le}] = dim${le};
    current = rest${le};
    `;N+=`indices[${C-1}] = current;`;let U=C<2?"":`
  fn o2i_${a}(offset: u32) -> ${x.indices} {
    var indices: ${x.indices};
    var current = offset;
    ${N}
    return indices;
  }`,f=le=>(F.offsetToIndices=!0,C<2?le:`o2i_${a}(${le})`),k=[];if(C>=2)for(let le=C-1;le>=0;le--)k.push(`${HA(L,le,C)} * (indices[${le}])`);let e=C<2?"":`
  fn i2o_${a}(indices: ${x.indices}) -> u32 {
    return ${k.join("+")};
  }`,d=le=>(F.indicesToOffset=!0,C<2?le:`i2o_${a}(${le})`),y=(...le)=>C===0?"0u":`${x.indices}(${le.map(S).join(",")})`,ee=(le,Ae)=>C<2?`${le}`:`${HA(le,Ae,C)}`,T=(le,Ae,pe)=>C<2?`${le}=${pe};`:`${HA(le,Ae,C)}=${pe};`,O={},we=(le,Ae)=>{F.broadcastedIndicesToOffset=!0;let pe=`${Ae.name}broadcastedIndicesTo${a}Offset`;if(pe in O)return`${pe}(${le})`;let oe=[];for(let Ge=C-1;Ge>=0;Ge--){let nA=Ae.indicesGet("outputIndices",Ge+Ae.rank-C);oe.push(`${ee(L,Ge)} * (${nA} % ${ee(J,Ge)})`)}return O[pe]=`fn ${pe}(outputIndices: ${Ae.type.indices}) -> u32 {
             return ${oe.length>0?oe.join("+"):"0u"};
           }`,`${pe}(${le})`},$=(le,Ae)=>(()=>{if(x.storage===x.value)return`${a}[${le}]=${Ae};`;if(x.storage==="vec2<u32>"&&x.value==="i32")return`${a}[${le}]=vec2<u32>(u32(${Ae}), select(0u, 0xFFFFFFFFu, ${Ae} < 0));`;if(x.storage==="vec2<u32>"&&x.value==="u32")return`${a}[${le}]=vec2<u32>(u32(${Ae}), 0u);`;if(x.storage==="u32"&&x.value==="vec4<bool>")return`${a}[${le}]=dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(${Ae}));`;throw new Error(`not supported combination of storage type ${x.storage} and value type ${x.value} yet`)})(),be=le=>(()=>{if(x.storage===x.value)return`${a}[${le}]`;if(x.storage==="vec2<u32>"&&x.value==="i32")return`i32(${a}[${le}].x)`;if(x.storage==="vec2<u32>"&&x.value==="u32")return`u32(${a}[${le}].x)`;if(x.storage==="u32"&&x.value==="vec4<bool>")return`vec4<bool>(bool(${a}[${le}] & 0xFFu), bool(${a}[${le}] & 0xFF00u), bool(${a}[${le}] & 0xFF0000u), bool(${a}[${le}] & 0xFF000000u))`;throw new Error(`not supported combination of storage type ${x.storage} and value type ${x.value} yet`)})(),Ce=C<2?"":`
  fn get_${a}ByIndices(indices: ${x.indices}) -> ${D} {
    return ${be(`i2o_${a}(indices)`)};
  }`,Ee=C<2?"":(()=>{let le=w.map(pe=>`d${pe}: u32`).join(", "),Ae=w.map(pe=>`d${pe}`).join(", ");return`
  fn get_${a}(${le}) -> ${D} {
    return get_${a}ByIndices(${y(Ae)});
  }`})(),Be=(...le)=>{if(le.length!==C)throw new Error(`indices length must be ${C}`);let Ae=le.map(S).join(",");return C===0?be("0u"):C===1?be(Ae[0]):(F.get=!0,F.getByIndices=!0,F.indicesToOffset=!0,`get_${a}(${Ae})`)},ve=le=>C<2?be(le):(F.getByIndices=!0,F.indicesToOffset=!0,`get_${a}ByIndices(${le})`),Ne=C<2?"":`
  fn set_${a}ByIndices(indices: ${x.indices}, value: ${D}) {
    ${$(`i2o_${a}(indices)`,"value")}
  }`,Fe=C<2?"":(()=>{let le=w.map(pe=>`d${pe}: u32`).join(", "),Ae=w.map(pe=>`d${pe}`).join(", ");return`
  fn set_${a}(${le}, value: ${D}) {
    set_${a}ByIndices(${y(Ae)}, value);
  }`})();return{impl:()=>{let le=[],Ae=!1;return F.offsetToIndices&&(le.push(U),Ae=!0),F.indicesToOffset&&(le.push(e),Ae=!0),F.broadcastedIndicesToOffset&&(Object.values(O).forEach(pe=>le.push(pe)),Ae=!0),F.set&&(le.push(Fe),Ae=!0),F.setByIndices&&(le.push(Ne),Ae=!0),F.get&&(le.push(Ee),Ae=!0),F.getByIndices&&(le.push(Ce),Ae=!0),!b&&Ae&&le.unshift(`const ${J} = ${x.indices}(${n.join(",")});`,`const ${L} = ${x.indices}(${Ue.computeStrides(n).join(",")});`),le.join(`
`)},type:x,offsetToIndices:f,indicesToOffset:d,broadcastedIndicesToOffset:we,indices:y,indicesGet:ee,indicesSet:T,set:(...le)=>{if(le.length!==C+1)throw new Error(`indices length must be ${C}`);let Ae=le[C];if(typeof Ae!="string")throw new Error("value must be string");let pe=le.slice(0,C).map(S).join(",");return C===0?$("0u",Ae):C===1?$(pe[0],Ae):(F.set=!0,F.setByIndices=!0,F.indicesToOffset=!0,`set_${a}(${pe}, ${Ae})`)},setByOffset:$,setByIndices:(le,Ae)=>C<2?$(le,Ae):(F.setByIndices=!0,F.indicesToOffset=!0,`set_${a}ByIndices(${le}, ${Ae});`),get:Be,getByOffset:be,getByIndices:ve,usage:u,name:a,strides:L,shape:J,rank:C}},$e=(a,o,n,u=1)=>So(a,o,n,"input",u),YA=(a,o,n,u=1)=>So(a,o,n,"output",u),ym=(a,o,n)=>So(a,o,n,"atomicOutput",1),yc=(a,o,n,u=1)=>So(a,o,n,"internal",u),xf=class{constructor(a,o){this.normalizedDispatchGroup=a,this.limits=o,this.internalVariables=[],this.variables=[],this.uniforms=[],this.variableIndex=0}guardAgainstOutOfBoundsWorkgroupSizes(a){return`if (global_idx >= ${typeof a=="number"?`${a}u`:a}) { return; }`}mainStart(a=co){let o=typeof a=="number"?a:a[0],n=typeof a=="number"?1:a[1],u=typeof a=="number"?1:a[2];if(o>this.limits.maxComputeWorkgroupSizeX||n>this.limits.maxComputeWorkgroupSizeY||u>this.limits.maxComputeWorkgroupSizeZ)throw new Error(`workgroup size [${o}, ${n}, ${u}] exceeds the maximum workgroup size [${this.limits.maxComputeWorkgroupSizeX}, ${this.limits.maxComputeWorkgroupSizeY}, ${this.limits.maxComputeWorkgroupSizeZ}].`);if(o*n*u>this.limits.maxComputeInvocationsPerWorkgroup)throw new Error(`workgroup size [${o}, ${n}, ${u}] exceeds the maximum workgroup invocations ${this.limits.maxComputeInvocationsPerWorkgroup}.`);let m=this.normalizedDispatchGroup[1]===1&&this.normalizedDispatchGroup[2]===1,b=m?`@builtin(global_invocation_id) global_id : vec3<u32>,
    @builtin(workgroup_id) workgroup_id : vec3<u32>,
    @builtin(local_invocation_index) local_idx : u32,
    @builtin(local_invocation_id) local_id : vec3<u32>`:`@builtin(global_invocation_id) global_id : vec3<u32>,
                                             @builtin(local_invocation_id) local_id : vec3<u32>,
    @builtin(local_invocation_index) local_idx : u32,
    @builtin(workgroup_id) workgroup_id : vec3<u32>,
    @builtin(num_workgroups) num_workgroups : vec3<u32>`,C=m?`let global_idx = global_id.x;
         let workgroup_index = workgroup_id.x;`:`let workgroup_index = workgroup_id.z * num_workgroups[0] * num_workgroups[1] +
             workgroup_id.y * num_workgroups[0] + workgroup_id.x;
         let global_idx = workgroup_index * ${o*n*u}u + local_idx;`;return`@compute @workgroup_size(${o}, ${n}, ${u})
  fn main(${b}) {
    ${C}
  `}appendVariableUniforms(a){a.rank!==0&&(a.shape.startsWith("uniforms.")&&this.uniforms.push({name:a.shape.replace("uniforms.",""),type:"u32",length:a.rank}),a.strides.startsWith("uniforms.")&&this.uniforms.push({name:a.strides.replace("uniforms.",""),type:"u32",length:a.rank}))}declareVariable(a,o){if(a.usage==="internal")throw new Error("cannot use internal variable with declareVariable(). use registerInternalVariables() instead.");this.variables.push(a),this.appendVariableUniforms(a);let n=a.usage==="input"?"read":"read_write",u=a.usage==="atomicOutput"?"atomic<i32>":a.type.storage;return`@group(0) @binding(${o}) var<storage, ${n}> ${a.name}: array<${u}>;`}declareVariables(...a){return a.map(o=>this.declareVariable(o,this.variableIndex++)).join(`
`)}registerInternalVariable(a){if(a.usage!=="internal")throw new Error("cannot use input or output variable with registerInternalVariable(). use declareVariables() instead.");this.internalVariables.push(a),this.appendVariableUniforms(a)}registerInternalVariables(...a){return a.forEach(o=>this.registerInternalVariable(o)),this}registerUniform(a,o,n=1){return this.uniforms.push({name:a,type:o,length:n}),this}registerUniforms(a){return this.uniforms=this.uniforms.concat(a),this}uniformDeclaration(){if(this.uniforms.length===0)return"";let a=[];for(let{name:o,type:n,length:u}of this.uniforms)if(u&&u>4)n==="f16"?a.push(`@align(16) ${o}:array<mat2x4<${n}>, ${Math.ceil(u/8)}>`):a.push(`${o}:array<vec4<${n}>, ${Math.ceil(u/4)}>`);else{let m=u==null||u===1?n:`vec${u}<${n}>`;a.push(`${o}:${m}`)}return`
      struct Uniforms { ${a.join(", ")} };
      @group(0) @binding(${this.variableIndex}) var<uniform> uniforms: Uniforms;`}get additionalImplementations(){return this.uniformDeclaration()+this.variables.map(a=>a.impl()).join(`
`)+this.internalVariables.map(a=>a.impl()).join(`
`)}get variablesInfo(){if(this.uniforms.length===0)return;let a=o=>[12,10,1,6][["u32","f16","f32","i32"].indexOf(o)];return this.uniforms.map(o=>[a(o.type),o.length??1])}},Dm=(a,o)=>new xf(a,o)}),yf,n2,Df,Tf,Pf,Gf,ia,Tm,Pm,qn=hA(()=>{it(),ft(),Nr(),ht(),yf=(a,o)=>{if(!a||a.length!==1)throw new Error("Transpose requires 1 input.");if(o.length!==0&&o.length!==a[0].dims.length)throw new Error(`perm size ${o.length} does not match input rank ${a[0].dims.length}`)},n2=(a,o)=>o.length!==0?o:[...new Array(a).keys()].reverse(),Df=(a,o)=>Ue.sortBasedOnPerm(a,n2(a.length,o)),Tf=(a,o,n,u)=>{let m=`fn perm(i: ${u.type.indices}) -> ${n.type.indices} {
    var a: ${n.type.indices};`;for(let b=0;b<o;++b)m+=`a[${a[b]}]=i[${b}];`;return m+="return a;}"},Pf=(a,o)=>{let n=[],u=[];for(let m=0;m<a.length;++m)a[m]!==1&&n.push(a[m]),a[o[m]]!==1&&u.push(o[m]);return{newShape:n,newPerm:u}},Gf=(a,o)=>{let n=0;for(let u=0;u<a.length;++u)if(o[a[u]]!==1){if(a[u]<n)return!1;n=a[u]}return!0},ia=(a,o)=>{let n=a.dataType,u=a.dims.length,m=n2(u,o),b=Df(a.dims,m),C=a.dims,w=b,E=u<2||Gf(m,a.dims),B;if(E)return B=F=>{let j=$e("input",n,C,4),J=YA("output",n,w,4);return`
  ${F.registerUniform("output_size","u32").declareVariables(j,J)}
  ${F.mainStart()}
    ${F.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
    output[global_idx] = input[global_idx];
  }`},{name:"TransposeCopy",shaderCache:{inputDependencies:["type"]},getRunData:()=>{let F=Ue.size(b);return{outputs:[{dims:b,dataType:a.dataType}],dispatchGroup:{x:Math.ceil(F/64/4)},programUniforms:[{type:12,data:Math.ceil(F/4)}]}},getShaderSource:B};let{newShape:D,newPerm:v}=Pf(a.dims,m),x=Ue.areEqual(v,[2,3,1]),S=Ue.areEqual(v,[3,1,2]);if(D.length===2||x||S){C=x?[D[0],D[1]*D[2]]:S?[D[0]*D[1],D[2]]:D,w=[C[1],C[0]];let F=16;return B=j=>{let J=$e("a",n,C.length),L=YA("output",n,w.length);return`
  ${j.registerUniform("output_size","u32").declareVariables(J,L)}
  var<workgroup> tile : array<array<${L.type.value}, ${F+1}>, ${F}>;
  ${j.mainStart([F,F,1])}
    let stride = (uniforms.output_shape[1] - 1) / ${F} + 1;
    let workgroup_id_x = workgroup_index % stride;
    let workgroup_id_y = workgroup_index / stride;
    let input_col = workgroup_id_y * ${F}u + local_id.x;
    let input_row = workgroup_id_x * ${F}u + local_id.y;
    if (input_row < uniforms.a_shape[0] && input_col < uniforms.a_shape[1]) {
      tile[local_id.y][local_id.x] = ${J.getByIndices(`${J.type.indices}(input_row, input_col)`)};
    }
    workgroupBarrier();

    let output_col = workgroup_id_x * ${F}u + local_id.x;
    let output_row = workgroup_id_y * ${F}u + local_id.y;
    if (output_row < uniforms.output_shape[0] && output_col < uniforms.output_shape[1]) {
      ${L.setByIndices(`${L.type.indices}(output_row, output_col)`,"tile[local_id.x][local_id.y]")}
    }
  }`},{name:"TransposeShared",shaderCache:{inputDependencies:["type"]},getRunData:()=>{let j=Ue.size(b);return{outputs:[{dims:b,dataType:a.dataType}],dispatchGroup:{x:Math.ceil(w[1]/F),y:Math.ceil(w[0]/F)},programUniforms:[{type:12,data:j},...XA(C,w)]}},getShaderSource:B}}return B=F=>{let j=$e("a",n,C.length),J=YA("output",n,w.length);return`
  ${F.registerUniform("output_size","u32").declareVariables(j,J)}

  ${Tf(m,u,j,J)}

  ${F.mainStart()}
    ${F.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}

    let indices = ${J.offsetToIndices("global_idx")};
    let aIndices = perm(indices);

    ${J.setByOffset("global_idx",j.getByIndices("aIndices"))}
  }`},{name:"Transpose",shaderCache:{hint:`${o}`,inputDependencies:["rank"]},getRunData:()=>{let F=Ue.size(b);return{outputs:[{dims:b,dataType:a.dataType}],dispatchGroup:{x:Math.ceil(F/64)},programUniforms:[{type:12,data:F},...XA(C,w)]}},getShaderSource:B}},Tm=(a,o)=>{yf(a.inputs,o.perm),a.compute(ia(a.inputs[0],o.perm))},Pm=a=>Nt({perm:a.perm})}),Qf,Ff,Sf,Of,zf,Nf,Lf,_f,Rf,jf,va,Gm,Qm,Fm,Sm,Om,zm,Nm,Lm,_m,Rm,O6=hA(()=>{it(),ft(),ht(),Dc(),qn(),Qf={max:"select(bestValue, candidate, candidate > bestValue)",min:"select(bestValue, candidate, candidate < bestValue)",mean:"bestValue + candidate",sum:"bestValue + candidate",prod:"bestValue * candidate",sumSquare:"bestValue + candidate * candidate",logSumExp:"bestValue + exp(candidate)",l1:"bestValue + abs(candidate)",l2:"bestValue + candidate * candidate",logSum:"bestValue + candidate"},Ff={max:"select(bestValue, candidate, candidate > bestValue)",min:"select(bestValue, candidate, candidate < bestValue)",mean:"bestValue + candidate",sum:"bestValue + candidate",prod:"bestValue * candidate",sumSquare:"bestValue + candidate",logSumExp:"bestValue + candidate",l1:"bestValue + candidate",l2:"bestValue + candidate",logSum:"bestValue + candidate"},Sf={max:"_A[offset]",min:"_A[offset]",mean:"0",sum:"0",prod:"1",sumSquare:"0",logSumExp:"0",l1:"0",l2:"0",logSum:"0"},Of={max:"bestValue",min:"bestValue",sum:"bestValue",prod:"bestValue",sumSquare:"bestValue",logSumExp:"log(bestValue)",l1:"bestValue",l2:"sqrt(bestValue)",logSum:"log(bestValue)"},zf=(a,o)=>{let n=[];for(let u=o-a;u<o;++u)n.push(u);return n},Nf=(a,o)=>{let n=[],u=a.length;for(let b=0;b<u;b++)o.indexOf(b)===-1&&n.push(a[b]);let m=o.map(b=>a[b]);return[n,m]},Lf=(a,o)=>{let n=a.length+o.length,u=[],m=0;for(let b=0;b<n;b++)o.indexOf(b)===-1?u.push(a[m++]):u.push(1);return u},_f=(a,o)=>{for(let n=0;n<a.length;++n)if(a[a.length-n-1]!==o-1-n)return!1;return!0},Rf=(a,o)=>{let n=[];if(!_f(a,o)){for(let u=0;u<o;++u)a.indexOf(u)===-1&&n.push(u);a.forEach(u=>n.push(u))}return n},jf=(a,o,n,u,m,b,C)=>{let w=n[0].dims,E=Ue.size(b),B=Ue.size(C),D=$e("_A",n[0].dataType,w),v=YA("output",m,b),x=64;E===1&&(x=256);let S=`
          var<workgroup> aBestValues : array<f32, ${x}>;
       `,F=j=>`
        ${j.registerUniform("reduceSize","u32").declareVariables(D,v)}
        ${S}
        fn DIV_CEIL(a : u32, b : u32) -> u32 {
          return ((a - 1u) / b + 1u);
         }
         ${j.mainStart(x)}

          let outputIndex = global_idx / ${x};
          let offset = outputIndex * uniforms.reduceSize;

          var bestValue = f32(${Sf[u]});
          let Length = uniforms.reduceSize;
          for (var k = local_idx; k < Length; k = k + ${x}) {
           let candidate = f32(${D.getByOffset("offset + k")});
           bestValue = ${Qf[u]};
          }
          aBestValues[local_idx] = bestValue;
          workgroupBarrier();

         var reduceSize = min(Length, ${x}u);
         for (var currentSize = reduceSize / 2u; reduceSize > 1u;
             currentSize = reduceSize / 2u) {
           let interval = DIV_CEIL(reduceSize, 2u);
           if (local_idx < currentSize) {
            let candidate = aBestValues[local_idx + interval];
            bestValue = ${Ff[u]};
            aBestValues[local_idx] = bestValue;
           }
           reduceSize = interval;
           workgroupBarrier();
         }

         if (local_idx == 0u) {
          ${v.setByOffset("outputIndex",`${u==="mean"?`${v.type.storage}(bestValue / f32(uniforms.reduceSize))`:`${v.type.storage}(${Of[u]})`}`)};
         }
        }`;return{name:a,shaderCache:{hint:`${o};${x}`,inputDependencies:["type"]},getShaderSource:F,getRunData:()=>({outputs:[{dims:b,dataType:m}],dispatchGroup:{x:E},programUniforms:[{type:12,data:B}]})}},va=(a,o,n,u)=>{let m=a.inputs.length===1?n:ec(a.inputs,n),b=m.axes;b.length===0&&!m.noopWithEmptyAxes&&(b=a.inputs[0].dims.map((S,F)=>F));let C=Ue.normalizeAxes(b,a.inputs[0].dims.length),w=C,E=a.inputs[0],B=Rf(w,a.inputs[0].dims.length);B.length>0&&(E=a.compute(ia(a.inputs[0],B),{inputs:[0],outputs:[-1]})[0],w=zf(w.length,E.dims.length));let[D,v]=Nf(E.dims,w),x=D;m.keepDims&&(x=Lf(D,C)),a.compute(jf(o,m.cacheKey,[E],u,a.inputs[0].dataType,x,v),{inputs:[E]})},Gm=(a,o)=>{va(a,"ReduceMeanShared",o,"mean")},Qm=(a,o)=>{va(a,"ReduceL1Shared",o,"l1")},Fm=(a,o)=>{va(a,"ReduceL2Shared",o,"l2")},Sm=(a,o)=>{va(a,"ReduceLogSumExpShared",o,"logSumExp")},Om=(a,o)=>{va(a,"ReduceMaxShared",o,"max")},zm=(a,o)=>{va(a,"ReduceMinShared",o,"min")},Nm=(a,o)=>{va(a,"ReduceProdShared",o,"prod")},Lm=(a,o)=>{va(a,"ReduceSumShared",o,"sum")},_m=(a,o)=>{va(a,"ReduceSumSquareShared",o,"sumSquare")},Rm=(a,o)=>{va(a,"ReduceLogSumShared",o,"logSum")}}),Ba,Wf,H0,ec,xa,Yf,Vf,Hf,Uf,Kf,Xf,Zf,Jf,qf,$f,ya,jm,Wm,Ym,Vm,Hm,Um,Km,Xm,Zm,Jm,Dc=hA(()=>{it(),ft(),Nr(),ht(),O6(),Ba=a=>{if(!a||a.length===0||a.length>2)throw new Error("Reduce op requires 1 or 2 inputs.");if(a.length===2&&a[1].dims.length!==1)throw new Error("Invalid axes input dims.")},Wf=a=>["","",`var value = ${a.getByIndices("input_indices")};`,""],H0=(a,o,n,u,m,b,C=!1,w=!1)=>{let E=[],B=n[0].dims,D=B.length,v=Ue.normalizeAxes(m,D),x=!w&&v.length===0;B.forEach((j,J)=>{x||v.indexOf(J)>=0?C&&E.push(1):E.push(j)});let S=E.length,F=Ue.size(E);return{name:a,shaderCache:o,getShaderSource:j=>{let J=[],L=$e("_A",n[0].dataType,D),N=YA("output",b,S),U=u(L,N,v),f=U[2];for(let k=0,e=0;k<D;k++)x||v.indexOf(k)>=0?(C&&e++,f=`for(var j${k}: u32 = 0; j${k} < ${B[k]}; j${k}++) {
                  ${U[2].includes("last_index")?`let last_index = j${k};`:""}
                  ${L.indicesSet("input_indices",k,`j${k}`)}
                  ${f}
                }`):(J.push(`${L.indicesSet("input_indices",k,N.indicesGet("output_indices",e))};`),e++);return`

        ${j.registerUniform("output_size","u32").declareVariables(L,N)}

        ${j.mainStart()}
          ${j.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
          var input_indices: ${L.type.indices};
          let output_indices = ${N.offsetToIndices("global_idx")};

          ${J.join(`
`)}
          ${U[0]}       // init ops for reduce max/min
          ${U[1]}
          ${f}
          ${U[3]}
          ${U.length===4?N.setByOffset("global_idx","value"):U.slice(4).join(`
`)}
        }`},getRunData:()=>({outputs:[{dims:E,dataType:b}],dispatchGroup:{x:Math.ceil(F/64)},programUniforms:[{type:12,data:F},...XA(B,E)]})}},ec=(a,o)=>{let n=[];return a[1].dims[0]>0&&a[1].getBigInt64Array().forEach(u=>n.push(Number(u))),Nt({axes:n,keepDims:o.keepDims,noopWithEmptyAxes:o.noopWithEmptyAxes})},xa=(a,o,n,u)=>{let m=a.inputs,b=m.length===1?n:ec(m,n);a.compute(H0(o,{hint:b.cacheKey,inputDependencies:["rank"]},[m[0]],b.noopWithEmptyAxes&&b.axes.length===0?Wf:u,b.axes,m[0].dataType,b.keepDims,b.noopWithEmptyAxes),{inputs:[0]})},Yf=(a,o)=>{Ba(a.inputs),xa(a,"ReduceLogSum",o,(n,u)=>[`var value = ${u.type.storage}(0);`,"",`value += ${n.getByIndices("input_indices")};`,"value = log(value);"])},Vf=(a,o)=>{Ba(a.inputs),xa(a,"ReduceL1",o,(n,u)=>[`var value = ${u.type.storage}(0);`,"",`value += abs(${n.getByIndices("input_indices")});`,""])},Hf=(a,o)=>{Ba(a.inputs),xa(a,"ReduceL2",o,(n,u)=>[`var t = ${u.type.value}(0); var value = ${u.type.value}(0);`,"",`t = ${n.getByIndices("input_indices")}; value += (t * t);`,"value = sqrt(value);"])},Uf=(a,o)=>{Ba(a.inputs),xa(a,"ReduceLogSumExp",o,(n,u)=>[`var value = ${u.type.storage}(0);`,"",`value += exp(${n.getByIndices("input_indices")});`,"value = log(value);"])},Kf=(a,o)=>{Ba(a.inputs),xa(a,"ReduceMax",o,(n,u,m)=>{let b=[];for(let C=0;C<n.rank;C++)(m.indexOf(C)>=0||m.length===0)&&b.push(n.indicesSet("input_indices",C,0));return[`${b.join(`
`)}`,`var value = ${n.getByIndices("input_indices")};`,`value = max(value, ${n.getByIndices("input_indices")});`,""]})},Xf=(a,o)=>{Ba(a.inputs),xa(a,"ReduceMean",o,(n,u,m)=>{let b=1;for(let C=0;C<n.rank;C++)(m.indexOf(C)>=0||m.length===0)&&(b*=a.inputs[0].dims[C]);return["var sum = f32(0);","",`sum += f32(${n.getByIndices("input_indices")});`,`let value = ${u.type.value}(sum / ${b});`]})},Zf=(a,o)=>{Ba(a.inputs),xa(a,"ReduceMin",o,(n,u,m)=>{let b=[];for(let C=0;C<n.rank;C++)(m.indexOf(C)>=0||m.length===0)&&b.push(`input_indices[${C}] = 0;`);return[`${b.join(`
`)}`,`var value = ${n.getByIndices("input_indices")};`,`value = min(value, ${n.getByIndices("input_indices")});`,""]})},Jf=(a,o)=>{Ba(a.inputs),xa(a,"ReduceProd",o,(n,u)=>[`var value = ${u.type.storage}(1);`,"",`value *= ${n.getByIndices("input_indices")};`,""])},qf=(a,o)=>{Ba(a.inputs),xa(a,"ReduceSum",o,(n,u)=>[`var value = ${u.type.storage}(0);`,"",`value += ${n.getByIndices("input_indices")};`,""])},$f=(a,o)=>{Ba(a.inputs),xa(a,"ReduceSumSquare",o,(n,u)=>[`var t = ${u.type.value}(0); var value = ${u.type.value}(0);`,"",`t = ${n.getByIndices("input_indices")}; value += t * t;`,""])},ya=(a,o,n)=>{if(o.length===0)return n;let u=1,m=1;for(let b=0;b<o.length;b++)o.indexOf(b)===-1?u*=a[b]:m*=a[b];return m<32&&u>1024},jm=(a,o)=>{ya(a.inputs[0].dims,o.axes,o.noopWithEmptyAxes)?Xf(a,o):Gm(a,o)},Wm=(a,o)=>{ya(a.inputs[0].dims,o.axes,o.noopWithEmptyAxes)?Vf(a,o):Qm(a,o)},Ym=(a,o)=>{ya(a.inputs[0].dims,o.axes,o.noopWithEmptyAxes)?Hf(a,o):Fm(a,o)},Vm=(a,o)=>{ya(a.inputs[0].dims,o.axes,o.noopWithEmptyAxes)?Uf(a,o):Sm(a,o)},Hm=(a,o)=>{ya(a.inputs[0].dims,o.axes,o.noopWithEmptyAxes)?Kf(a,o):Om(a,o)},Um=(a,o)=>{ya(a.inputs[0].dims,o.axes,o.noopWithEmptyAxes)?Zf(a,o):zm(a,o)},Km=(a,o)=>{ya(a.inputs[0].dims,o.axes,o.noopWithEmptyAxes)?Jf(a,o):Nm(a,o)},Xm=(a,o)=>{ya(a.inputs[0].dims,o.axes,o.noopWithEmptyAxes)?qf(a,o):Lm(a,o)},Zm=(a,o)=>{ya(a.inputs[0].dims,o.axes,o.noopWithEmptyAxes)?$f(a,o):_m(a,o)},Jm=(a,o)=>{ya(a.inputs[0].dims,o.axes,o.noopWithEmptyAxes)?Yf(a,o):Rm(a,o)}}),i2,qm,$m,Ac,z6=hA(()=>{it(),Nr(),Dc(),i2=a=>{if(!a||a.length===0||a.length>2)throw new Error("ArgMinMaxOp op requires 1 or 2 inputs.");if(a[0].dataType!==1)throw new Error("Invalid input type.")},qm=(a,o)=>{i2(a.inputs);let n=(u,m,b)=>{let C=[];for(let w=0;w<u.rank;w++)(b.indexOf(w)>=0||b.length===0)&&C.push(`input_indices[${w}] = 0;`);return[`${C.join(`
`)}`,`var value = ${u.getByIndices("input_indices")};
var best_index : i32 = 0;`,`if (${u.getByIndices("input_indices")} ${o.selectLastIndex>0?"<=":"<"} value) {
         value = ${u.getByIndices("input_indices")};
         best_index = i32(last_index);
       }`,"",m.setByOffset("global_idx","best_index")]};a.compute(H0("ArgMin",{hint:o.cacheKey,inputDependencies:["rank"]},[a.inputs[0]],n,[o.axis],7,o.keepDims),{inputs:[0]})},$m=(a,o)=>{i2(a.inputs);let n=(u,m,b)=>{let C=[];for(let w=0;w<u.rank;w++)(b.indexOf(w)>=0||b.length===0)&&C.push(`input_indices[${w}] = 0;`);return[`${C.join(`
`)}`,`var value = ${u.getByIndices("input_indices")};
var best_index : i32 = 0;`,`if (${u.getByIndices("input_indices")} ${o.selectLastIndex>0?">=":">"} value) {
         value = ${u.getByIndices("input_indices")};
         best_index = i32(last_index);
       }`,"",m.setByOffset("global_idx","best_index")]};a.compute(H0("argMax",{hint:o.cacheKey,inputDependencies:["rank"]},[a.inputs[0]],n,[o.axis],7,o.keepDims),{inputs:[0]})},Ac=a=>Nt(a)}),eg,y0,Ag,tg,rg,A0,sg,eh,Tc=hA(()=>{it(),ft(),xc(),ht(),eg=(a,o)=>{let n=a[0],u=a[1],m=a[2],b=a[3],C=a[4],w=a[5];if(C&&w)throw new Error("Attention cannot have both past and attention_bias");if(n.dims.length!==3)throw new Error('Input "input" must have 3 dimensions');let E=n.dims[0],B=n.dims[1],D=n.dims[2];if(m.dims.length!==1)throw new Error('Input "bias" is expected to have 1 dimensions');if(u.dims.length!==2)throw new Error('Input "weights" is expected to have 2 dimensions');if(u.dims[0]!==D)throw new Error("Input 1 dimension 0 should have same length as dimension 2 of input 0");if(m.dims[0]!==u.dims[1])throw new Error('Input "bias" dimension 0 should have same length as dimension 1 of input "weights"');let v=m.dims[0]/3,x=v,S=x;if(o.qkvHiddenSizes.length>0){if(o.qkvHiddenSizes.length!==3)throw new Error("qkv_hidden_sizes attribute should have 3 elements");for(let U of o.qkvHiddenSizes)if(U%o.numHeads!==0)throw new Error("qkv_hidden_sizes should be divisible by num_heads");v=o.qkvHiddenSizes[0],x=o.qkvHiddenSizes[1],S=o.qkvHiddenSizes[2]}let F=B;if(v!==x)throw new Error("qkv_hidden_sizes first element should be same as the second");if(m.dims[0]!==v+x+S)throw new Error('Input "bias" dimension 0 should have same length as sum of Q/K/V hidden sizes');let j=0;if(C){if(x!==S)throw new Error('Input "past" expect k_hidden_size == v_hidden_size');if(C.dims.length!==5)throw new Error('Input "past" must have 5 dimensions');if(C.dims[0]!==2)throw new Error('Input "past" first dimension must be 2');if(C.dims[1]!==E)throw new Error('Input "past" second dimension must be batch_size');if(C.dims[2]!==o.numHeads)throw new Error('Input "past" third dimension must be num_heads');if(C.dims[4]!==x/o.numHeads)throw new Error('Input "past" fifth dimension must be k_hidden_size / num_heads');o.pastPresentShareBuffer||(j=C.dims[3])}let J=F+j,L=-1,N=0;if(b)throw new Error("Mask not supported");if(C)throw new Error("past is not supported");if(w){if(w.dims.length!==4)throw new Error('Input "attention_bias" must have 4 dimensions');if(w.dims[0]!==E||w.dims[1]!==o.numHeads||w.dims[2]!==B||w.dims[3]!==J)throw new Error('Expect "attention_bias" shape (batch_size, num_heads, sequence_length, total_sequence_length)')}return{batchSize:E,sequenceLength:B,pastSequenceLength:j,kvSequenceLength:F,totalSequenceLength:J,maxSequenceLength:L,inputHiddenSize:D,hiddenSize:v,vHiddenSize:S,headSize:Math.floor(v/o.numHeads),vHeadSize:Math.floor(S/o.numHeads),numHeads:o.numHeads,isUnidirectional:!1,pastPresentShareBuffer:!1,maskFilterValue:o.maskFilterValue,maskType:N,scale:o.scale,broadcastResPosBias:!1,passPastInKv:!1,qkvFormat:1}},y0=(a,o,n)=>o&&a?`
      let total_sequence_length_input = u32(${o.getByOffset("0")});
      let present_sequence_length = max(total_sequence_length_input, uniforms.past_sequence_length);
      let is_subsequent_prompt: bool = sequence_length > 1 && sequence_length != total_sequence_length_input;
      let is_first_prompt: bool = is_subsequent_prompt == false && sequence_length == total_sequence_length_input;
      total_sequence_length = u32(${a?.getByOffset("batchIdx")}) + 1;
      var past_sequence_length: u32 = 0;
      if (is_first_prompt == false) {
        past_sequence_length = total_sequence_length - sequence_length;
      }
       `:`
    ${n?"let past_sequence_length = uniforms.past_sequence_length":""};
    let present_sequence_length = total_sequence_length;
    `,Ag=(a,o,n,u,m,b,C,w)=>{let E=Pr(C?1:b),B=64,D=b/E;D<B&&(B=32);let v=Math.ceil(b/E/B),x=[{type:12,data:o},{type:12,data:n},{type:12,data:u},{type:12,data:m},{type:12,data:D},{type:12,data:v}],S=ds(a.dataType,E),F=ys(1,E),j=["type"];C&&j.push("type"),w&&j.push("type");let J=L=>{let N=YA("x",a.dataType,a.dims,E),U=[N],f=C?$e("seq_lens",C.dataType,C.dims):void 0;f&&U.push(f);let k=w?$e("total_sequence_length_input",w.dataType,w.dims):void 0;k&&U.push(k);let e=ys(a.dataType),d=[{name:"batch_size",type:"u32"},{name:"num_heads",type:"u32"},{name:"past_sequence_length",type:"u32"},{name:"sequence_length",type:"u32"},{name:"total_sequence_length",type:"u32"},{name:"elements_per_thread",type:"u32"}];return`
  var<workgroup> thread_max: array<f32, ${B}>;
  var<workgroup> thread_sum: array<f32, ${B}>;
  ${L.registerUniforms(d).declareVariables(...U)}
  ${L.mainStart([B,1,1])}
    let batchIdx = workgroup_id.z / uniforms.num_heads;
    let headIdx = workgroup_id.z % uniforms.num_heads;
    let sequence_length = uniforms.sequence_length;
    var total_sequence_length = uniforms.total_sequence_length;
    ${y0(f,k,!1)}
    let local_offset = local_idx * uniforms.elements_per_thread;
    let offset = (global_idx / ${B}) * uniforms.total_sequence_length + local_offset;
    let seq_causal_length = ${C?"u32(past_sequence_length + workgroup_id.y + 1)":"total_sequence_length"};
    var thread_max_vector = ${F}(-3.402823e+38f);
    for (var i: u32 = 0; i < uniforms.elements_per_thread && i + local_offset < seq_causal_length; i++) {
      thread_max_vector = max(${F}(x[offset + i]), thread_max_vector);
    }
    thread_max[local_idx] = ${(()=>{switch(E){case 1:return"thread_max_vector";case 2:return"max(thread_max_vector.x, thread_max_vector.y)";case 4:return"max(max(thread_max_vector.x, thread_max_vector.y), max(thread_max_vector.z, thread_max_vector.w))";default:throw new Error(`Unsupported components: ${E}`)}})()};
    workgroupBarrier();

    var max_value =  f32(-3.402823e+38f);
    for (var i = 0u; i < ${B}; i++) {
      max_value = max(thread_max[i], max_value);
    }

    var sum_vector = ${F}(0);
    for (var i: u32 = 0; i < uniforms.elements_per_thread && i + local_offset < seq_causal_length; i++) {
      sum_vector += exp(${F}(x[offset + i]) - max_value);
    }
    thread_sum[local_idx] = ${(()=>{switch(E){case 1:return"sum_vector";case 2:return"sum_vector.x + sum_vector.y";case 4:return"sum_vector.x + sum_vector.y + sum_vector.z + sum_vector.w";default:throw new Error(`Unsupported components: ${E}`)}})()};
    workgroupBarrier();

    var sum: f32 = 0;
    for (var i = 0u; i < ${B}; i++) {
      sum += thread_sum[i];
    }

    if (sum == 0) {
      for (var i: u32 = 0; i < uniforms.elements_per_thread && i + local_offset < seq_causal_length; i++) {
        x[offset + i] = ${N.type.value}(${e}(1.0) / ${e}(seq_causal_length));
      }
    } else {
      for (var i: u32 = 0; i < uniforms.elements_per_thread && i + local_offset < seq_causal_length; i++) {
        var f32input = ${F}(x[offset + i]);
        x[offset + i] = ${N.type.value}(exp(f32input - max_value) / sum);
      }
    }
      ${C?`
        for (var total_seq_id: u32 = seq_causal_length; total_seq_id + local_offset < uniforms.total_sequence_length; total_seq_id++) {
          x[offset + total_seq_id] = ${N.type.value}(${e}(0));
        }`:""};
  }`};return{name:"AttentionProbsSoftmax",shaderCache:{hint:`${B};${S};${E}`,inputDependencies:j},getShaderSource:J,getRunData:()=>({outputs:[],dispatchGroup:{x:1,y:m,z:o*n},programUniforms:x})}},tg=(a,o,n,u,m,b,C,w,E)=>{let B=C+b.kvSequenceLength,D=[b.batchSize,b.numHeads,b.sequenceLength,B],v=a>1&&u,x=b.kvNumHeads?b.kvNumHeads:b.numHeads,S=v?[b.batchSize,x,B,b.headSize]:void 0,F=b.nReps?b.nReps:1,j=b.scale===0?1/Math.sqrt(b.headSize):b.scale,J=Pr(b.headSize),L=b.headSize/J,N=12,U={x:Math.ceil(B/N),y:Math.ceil(b.sequenceLength/N),z:b.batchSize*b.numHeads},f=[{type:12,data:b.sequenceLength},{type:12,data:L},{type:12,data:B},{type:12,data:b.numHeads},{type:12,data:b.headSize},{type:1,data:j},{type:12,data:C},{type:12,data:b.kvSequenceLength},{type:12,data:F}],k=v&&u&&Ue.size(u.dims)>0,e=["type","type"];k&&e.push("type"),m&&e.push("type"),w&&e.push("type"),E&&e.push("type");let d=[{dims:D,dataType:o.dataType,gpuDataType:0}];v&&d.push({dims:S,dataType:o.dataType,gpuDataType:0});let y=ee=>{let T=$e("q",o.dataType,o.dims,J),O=$e("key",n.dataType,n.dims,J),we=[T,O];if(k){let Ne=$e("past_key",u.dataType,u.dims,J);we.push(Ne)}m&&we.push($e("attention_bias",m.dataType,m.dims));let $=w?$e("seq_lens",w.dataType,w.dims):void 0;$&&we.push($);let be=E?$e("total_sequence_length_input",E.dataType,E.dims):void 0;be&&we.push(be);let Ce=YA("output",o.dataType,D),Ee=[Ce];v&&Ee.push(YA("present_key",o.dataType,S,J));let Be=ys(1,J),ve=[{name:"M",type:"u32"},{name:"K",type:"u32"},{name:"N",type:"u32"},{name:"num_heads",type:"u32"},{name:"head_size",type:"u32"},{name:"alpha",type:"f32"},{name:"past_sequence_length",type:"u32"},{name:"kv_sequence_length",type:"u32"},{name:"n_reps",type:"u32"}];return`
  const TILE_SIZE = ${N}u;

  var<workgroup> tileQ: array<${T.type.storage}, ${N*N}>;
  var<workgroup> tileK: array<${T.type.storage}, ${N*N}>;
  ${ee.registerUniforms(ve).declareVariables(...we,...Ee)}
  ${ee.mainStart([N,N,1])}
    // x holds the N and y holds the M
    let headIdx = workgroup_id.z % uniforms.num_heads;
    let kvHeadIdx = ${F===1?"headIdx":"headIdx / uniforms.n_reps"};
    let kv_num_heads = ${F===1?"uniforms.num_heads":"uniforms.num_heads / uniforms.n_reps"};
    let batchIdx = workgroup_id.z / uniforms.num_heads;
    let m = workgroup_id.y * TILE_SIZE;
    let n = workgroup_id.x * TILE_SIZE;
    let sequence_length = uniforms.M;
    var total_sequence_length = uniforms.N;
    ${y0($,be,!0)}
    let absKvHeadIdx = batchIdx * kv_num_heads + kvHeadIdx;
    let qOffset = workgroup_id.z * uniforms.M * uniforms.K + m * uniforms.K;
    ${k&&v?"let pastKeyOffset = absKvHeadIdx * uniforms.past_sequence_length * uniforms.K;":""};
    let kOffset = absKvHeadIdx * uniforms.kv_sequence_length * uniforms.K;
    ${v?"let presentKeyOffset = absKvHeadIdx * uniforms.N * uniforms.K;":""}
    var value = ${Be}(0);
    for (var w: u32 = 0u; w < uniforms.K; w += TILE_SIZE) {
      if (global_id.y < uniforms.M && w + local_id.x < uniforms.K) {
        tileQ[TILE_SIZE * local_id.y + local_id.x] = q[qOffset + local_id.y * uniforms.K + w + local_id.x];
      }
      if (n + local_id.y < uniforms.N && w + local_id.x < uniforms.K) {
        var idx = TILE_SIZE * local_id.y + local_id.x;
      ${k&&v?`
              if (n + local_id.y < past_sequence_length) {
                tileK[idx] = past_key[pastKeyOffset + (n + local_id.y) * uniforms.K + w + local_id.x];
              } else if (n + local_id.y - past_sequence_length < uniforms.kv_sequence_length) {
                tileK[idx] = key[kOffset + (n + local_id.y - past_sequence_length) * uniforms.K + w + local_id.x];
              }`:`
          if (n + local_id.y < uniforms.kv_sequence_length) {
            tileK[idx] = key[kOffset + (n + local_id.y) * uniforms.K + w + local_id.x];
          }`}
      ${v?`if (n + local_id.y < present_sequence_length) {
        present_key[presentKeyOffset + (n + local_id.y) * uniforms.K + w + local_id.x] = tileK[idx];
      }`:""}
      }
      workgroupBarrier();

      for (var k: u32 = 0u; k < TILE_SIZE && w+k < uniforms.K; k++) {
          value += ${Be}(tileQ[TILE_SIZE * local_id.y + k] * tileK[TILE_SIZE * local_id.x + k]);
      }

      workgroupBarrier();
    }

    if (global_id.y < uniforms.M && global_id.x < total_sequence_length) {
      let headOffset = workgroup_id.z * uniforms.M * uniforms.N;
      let outputIdx = headOffset + global_id.y * uniforms.N + global_id.x;
      var sum: f32 = ${(()=>{switch(J){case 1:return"value";case 2:return"value.x + value.y";case 4:return"value.x + value.y + value.z + value.w";default:throw new Error(`Unsupported components: ${J}`)}})()};
        output[outputIdx] = ${Ce.type.value} (sum * uniforms.alpha) + ${m?"attention_bias[outputIdx]":"0.0"};
    }
  }`};return{name:"AttentionProbs",shaderCache:{hint:`${J};${m!==void 0};${u!==void 0};${a}`,inputDependencies:e},getRunData:()=>({outputs:d,dispatchGroup:U,programUniforms:f}),getShaderSource:y}},rg=(a,o,n,u,m,b,C=void 0,w=void 0)=>{let E=b+m.kvSequenceLength,B=m.nReps?m.nReps:1,D=m.vHiddenSize*B,v=a>1&&u,x=m.kvNumHeads?m.kvNumHeads:m.numHeads,S=v?[m.batchSize,x,E,m.headSize]:void 0,F=[m.batchSize,m.sequenceLength,D],j=12,J={x:Math.ceil(m.vHeadSize/j),y:Math.ceil(m.sequenceLength/j),z:m.batchSize*m.numHeads},L=[{type:12,data:m.sequenceLength},{type:12,data:E},{type:12,data:m.vHeadSize},{type:12,data:m.numHeads},{type:12,data:m.headSize},{type:12,data:D},{type:12,data:b},{type:12,data:m.kvSequenceLength},{type:12,data:B}],N=v&&u&&Ue.size(u.dims)>0,U=["type","type"];N&&U.push("type"),C&&U.push("type"),w&&U.push("type");let f=[{dims:F,dataType:o.dataType,gpuDataType:0}];v&&f.push({dims:S,dataType:o.dataType,gpuDataType:0});let k=e=>{let d=$e("probs",o.dataType,o.dims),y=$e("v",n.dataType,n.dims),ee=[d,y];N&&ee.push($e("past_value",u.dataType,u.dims));let T=C?$e("seq_lens",C.dataType,C.dims):void 0;C&&ee.push(T);let O=w?$e("total_sequence_length_input",w.dataType,w.dims):void 0;w&&ee.push(O);let we=[YA("output",o.dataType,F)];v&&we.push(YA("present_value",o.dataType,S));let $=[{name:"M",type:"u32"},{name:"K",type:"u32"},{name:"N",type:"u32"},{name:"num_heads",type:"u32"},{name:"head_size",type:"u32"},{name:"v_hidden_size",type:"u32"},{name:"past_sequence_length",type:"u32"},{name:"kv_sequence_length",type:"u32"},{name:"n_reps",type:"u32"}];return`
  const TILE_SIZE = ${j}u;
  var<workgroup> tileQ: array<${d.type.value}, ${j*j}>;
  var<workgroup> tileV: array<${d.type.value}, ${j*j}>;
  ${e.registerUniforms($).declareVariables(...ee,...we)}
  ${e.mainStart([j,j,1])}
   let headIdx = workgroup_id.z % uniforms.num_heads;
   let batchIdx = workgroup_id.z / uniforms.num_heads;
   let kvHeadIdx = ${B===1?"headIdx":"headIdx / uniforms.n_reps"};
   let kv_num_heads = ${B===1?"uniforms.num_heads":"uniforms.num_heads / uniforms.n_reps"};
   let m = global_id.y;
   let n = global_id.x;
   let sequence_length = uniforms.M;
   var total_sequence_length = uniforms.K;
   ${y0(T,O,!0)}
   let offsetA = workgroup_id.z * uniforms.M * uniforms.K + m * uniforms.K;
   let absKvHeadIdx = batchIdx * kv_num_heads + kvHeadIdx; // kvHeadIdx is relative to the batch
   ${N&&v?"let pastValueOffset = absKvHeadIdx * uniforms.N * uniforms.past_sequence_length + n;":""};
   let vOffset = absKvHeadIdx * uniforms.N * uniforms.kv_sequence_length + n;
   ${v?"let presentValueOffset = absKvHeadIdx * uniforms.N * uniforms.K + n;":""}
   var value = ${d.type.storage}(0);
   for (var w: u32 = 0u; w < uniforms.K; w += TILE_SIZE) {
      if (m < uniforms.M && w + local_id.x < uniforms.K) {
        tileQ[TILE_SIZE * local_id.y + local_id.x] = probs[offsetA + w + local_id.x];
      }
      if (n < uniforms.N && w + local_id.y < uniforms.K) {
        var idx = TILE_SIZE * local_id.y + local_id.x;
        ${N&&v?`
        if (w + local_id.y < past_sequence_length) {
          tileV[idx] = past_value[pastValueOffset + (w + local_id.y) * uniforms.N];
        } else if (w + local_id.y - past_sequence_length < uniforms.kv_sequence_length) {
          tileV[idx] = v[vOffset + (w + local_id.y - past_sequence_length) * uniforms.N];
        }
      `:`
            if (w + local_id.y < uniforms.kv_sequence_length) {
              tileV[idx] = v[vOffset + (w + local_id.y) * uniforms.N];
            }`}
        ${v?`
            if (w + local_id.y < present_sequence_length) {
          present_value[presentValueOffset + (w + local_id.y) * uniforms.N] = tileV[idx];
        }`:""}
      }
     workgroupBarrier();
     for (var k: u32 = 0u; k < TILE_SIZE && w+k < total_sequence_length; k++) {
       value += tileQ[TILE_SIZE * local_id.y + k] * tileV[TILE_SIZE * k + local_id.x];
     }
     workgroupBarrier();
   }

   // we need to transpose output from BNSH_v to BSND_v
   if (m < uniforms.M && n < uniforms.N) {
     let outputIdx = batchIdx * uniforms.M * uniforms.v_hidden_size + m * uniforms.v_hidden_size
       + headIdx * uniforms.N + n;
     output[outputIdx] = value;
   }
  }`};return{name:"AttentionScore",shaderCache:{hint:`${u!==void 0};${a}`,inputDependencies:U},getRunData:()=>({outputs:f,dispatchGroup:J,programUniforms:L}),getShaderSource:k}},A0=(a,o,n,u,m,b,C,w,E,B,D=void 0,v=void 0)=>{let x=Math.min(a.outputCount,1+(C?1:0)+(w?1:0)),S=x>1?B.pastSequenceLength:0,F=S+B.kvSequenceLength,j=E&&Ue.size(E.dims)>0?E:void 0,J=[o,n];x>1&&C&&Ue.size(C.dims)>0&&J.push(C),j&&J.push(j),D&&J.push(D),v&&J.push(v);let L=a.compute(tg(x,o,n,C,j,B,S,D,v),{inputs:J,outputs:x>1?[-1,1]:[-1]})[0];a.compute(Ag(L,B.batchSize,B.numHeads,S,B.sequenceLength,F,D,v),{inputs:D&&v?[L,D,v]:[L],outputs:[]});let N=[L,u];x>1&&w&&Ue.size(w.dims)>0&&N.push(w),D&&N.push(D),v&&N.push(v),a.compute(rg(x,L,u,w,B,S,D,v),{inputs:N,outputs:x>1?[0,2]:[0]})},sg=(a,o)=>{let n=[o.batchSize,o.numHeads,o.sequenceLength,o.headSize],u=o.sequenceLength,m=o.inputHiddenSize,b=o.headSize,C=12,w={x:Math.ceil(o.headSize/C),y:Math.ceil(o.sequenceLength/C),z:o.batchSize*o.numHeads},E=[a.inputs[0],a.inputs[1],a.inputs[2]],B=[{type:12,data:u},{type:12,data:m},{type:12,data:b},{type:12,data:o.numHeads},{type:12,data:o.headSize},{type:12,data:o.hiddenSize},{type:12,data:o.hiddenSize+o.hiddenSize+o.vHiddenSize}],D=v=>{let x=YA("output_q",E[0].dataType,n),S=YA("output_k",E[0].dataType,n),F=YA("output_v",E[0].dataType,n),j=$e("input",E[0].dataType,E[0].dims),J=$e("weight",E[1].dataType,E[1].dims),L=$e("bias",E[2].dataType,E[2].dims),N=j.type.storage,U=[{name:"M",type:"u32"},{name:"K",type:"u32"},{name:"N",type:"u32"},{name:"num_heads",type:"u32"},{name:"head_size",type:"u32"},{name:"hidden_size",type:"u32"},{name:"ldb",type:"u32"}];return`
  const TILE_SIZE = ${C}u;
  var<workgroup> tileInput: array<${N}, ${C*C}>;
  var<workgroup> tileWeightQ: array<${N}, ${C*C}>;
  var<workgroup> tileWeightK: array<${N}, ${C*C}>;
  var<workgroup> tileWeightV: array<${N}, ${C*C}>;
  ${v.registerUniforms(U).declareVariables(j,J,L,x,S,F)}
  ${v.mainStart([C,C,1])}
    let batchIndex = workgroup_id.z / uniforms.num_heads;
    let headNumber = workgroup_id.z % uniforms.num_heads;
    let m = global_id.y;
    let n = global_id.x;

    let inputOffset = batchIndex * (uniforms.M * uniforms.K) + m * uniforms.K;
    let biasOffsetQ = headNumber * uniforms.head_size;
    let biasOffsetK = uniforms.hidden_size + biasOffsetQ;
    let biasOffsetV = uniforms.hidden_size + biasOffsetK;

    var valueQ = ${N}(0);
    var valueK = ${N}(0);
    var valueV = ${N}(0);
    for (var w: u32 = 0u; w < uniforms.K; w += TILE_SIZE) {
      if (m < uniforms.M && w + local_id.x < uniforms.K) {
        tileInput[TILE_SIZE * local_id.y + local_id.x] = input[inputOffset + w + local_id.x];
      }
      if (n < uniforms.N && w + local_id.y < uniforms.K) {
        let offset = n + (w + local_id.y) * uniforms.ldb;
        tileWeightQ[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetQ + offset];
        tileWeightK[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetK + offset];
        tileWeightV[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetV + offset];
      }
      workgroupBarrier();
      for (var k: u32 = 0u; k<TILE_SIZE && w+k < uniforms.K; k++) {
        let inputTileOffset = TILE_SIZE * local_id.y + k;
        let weightTileOffset = TILE_SIZE * k + local_id.x;
        valueQ += tileInput[inputTileOffset] * tileWeightQ[weightTileOffset];
        valueK += tileInput[inputTileOffset] * tileWeightK[weightTileOffset];
        valueV += tileInput[inputTileOffset] * tileWeightV[weightTileOffset];
      }

      workgroupBarrier();
    }

    let headOffset = (m * uniforms.N + n) % uniforms.head_size;
    valueQ += bias[headOffset + biasOffsetQ];
    valueK += bias[headOffset + biasOffsetK];
    valueV += bias[headOffset + biasOffsetV];

    let offset = workgroup_id.z * uniforms.M * uniforms.N;
    if (m < uniforms.M && n < uniforms.N) {
      let outputIdx = offset + m * uniforms.N + n;
      output_q[outputIdx] = valueQ;
      output_k[outputIdx] = valueK;
      output_v[outputIdx] = valueV;
    }
  }`};return a.compute({name:"AttentionPrepare",shaderCache:{inputDependencies:["type","type","type"]},getRunData:()=>({outputs:[{dims:n,dataType:a.inputs[0].dataType,gpuDataType:0},{dims:n,dataType:a.inputs[0].dataType,gpuDataType:0},{dims:n,dataType:a.inputs[0].dataType,gpuDataType:0}],dispatchGroup:w,programUniforms:B}),getShaderSource:D},{inputs:E,outputs:[-1,-1,-1]})},eh=(a,o)=>{let n=eg(a.inputs,o),[u,m,b]=sg(a,n);return A0(a,u,m,b,a.inputs[4],void 0,void 0,void 0,a.inputs[5],n)}}),ag,ng,ig,Ah,N6=hA(()=>{Fa(),it(),ft(),Nr(),ht(),ag=(a,o)=>{if(!a||a.length!==5)throw new Error("BatchNormalization requires 5 inputs");let n=(u,m,b)=>{let C=m.length;if(C!==u.length)throw new Error(`${b}: num dimensions != ${C}`);m.forEach((w,E)=>{if(w!==u[E])throw new Error(`${b}: dim[${E}] do not match`)})};if(a[0].dims.length>1){let u=o.format==="NHWC"?o.spatial?a[0].dims.slice(-1):a[0].dims.slice(-1).concat(a[0].dims.slice(1,a[0].dims.length-1)):a[0].dims.slice(1,o.spatial?2:void 0);n(a[1].dims,u,"Invalid input scale"),n(a[2].dims,u,"Invalid input B"),n(a[3].dims,u,"Invalid input mean"),n(a[4].dims,u,"Invalid input var")}else n(a[1].dims,[1],"Invalid input scale"),n(a[2].dims,[1],"Invalid input B"),n(a[3].dims,[1],"Invalid input mean"),n(a[4].dims,[1],"Invalid input var")},ng=(a,o)=>{let{epsilon:n,spatial:u,format:m}=o,b=a[0].dims,C=u?Pr(b[b.length-1]):1,w=m==="NHWC"&&b.length>1?C:1,E=Ue.size(b)/C,B=u,D=B?b.length:b,v=$e("x",a[0].dataType,a[0].dims,C),x=$e("scale",a[1].dataType,a[1].dims,w),S=$e("bias",a[2].dataType,a[2].dims,w),F=$e("inputMean",a[3].dataType,a[3].dims,w),j=$e("inputVar",a[4].dataType,a[4].dims,w),J=YA("y",a[0].dataType,D,C),L=()=>{let U="";if(u)U=`let cOffset = ${b.length===1?"0u":m==="NHWC"?`outputIndices[${b.length-1}] / ${C}`:"outputIndices[1]"};`;else if(m==="NCHW")U=`
            ${J.indicesSet("outputIndices","0","0")}
            let cOffset = ${J.indicesToOffset("outputIndices")};`;else{U=`var cIndices = ${x.type.indices}(0);
                       cIndices[0] = outputIndices[${b.length-1}];`;for(let f=1;f<x.rank;f++)U+=`cIndices[${f}] = outputIndices[${f}];`;U+=`let cOffset = ${x.indicesToOffset("cIndices")};`}return U},N=U=>`
  const epsilon = ${n};
  ${U.registerUniform("outputSize","u32").declareVariables(v,x,S,F,j,J)}
  ${U.mainStart()}
  ${U.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
    var outputIndices = ${J.offsetToIndices(`global_idx * ${C}`)};
    ${L()}
    let scale = ${x.getByOffset("cOffset")};
    let bias = ${S.getByOffset("cOffset")};
    let inputMean = ${F.getByOffset("cOffset")};
    let inputVar = ${j.getByOffset("cOffset")};
    let x = ${v.getByOffset("global_idx")};
    let value = (x - inputMean) * inverseSqrt(inputVar + epsilon) * scale + bias;
    ${J.setByOffset("global_idx","value")}
  }`;return{name:"BatchNormalization",shaderCache:{hint:`${o.epsilon}_${o.format}_${u}_${C}`,inputDependencies:B?["rank","type","type","type","type"]:void 0},getShaderSource:N,getRunData:()=>({outputs:[{dims:a[0].dims,dataType:a[0].dataType}],dispatchGroup:{x:Math.ceil(E/64)},programUniforms:B?[{type:12,data:E},...XA(b)]:[{type:12,data:E}]})}},ig=a=>Nt(a),Ah=(a,o)=>{let{inputs:n,outputCount:u}=a,m=ig({...o,outputCount:u});if(gr.webgpu.validateInputContent&&ag(n,m),o.trainingMode)throw new Error("BatchNormalization trainingMode is not supported yet.");a.compute(ng(n,m))}}),og,lg,th,L6=hA(()=>{ft(),ht(),og=a=>{if(a[0].dims.length!==3)throw new Error("input should have 3 dimensions");if(![320,640,1280].includes(a[0].dims[2]))throw new Error("number of channels should be 320, 640 or 1280");if(a[1].dims.length!==1)throw new Error("bias is expected to have 1 dimensions");if(a[0].dims[2]!==a[1].dims[0])throw new Error("last dimension of input and bias are not the same")},lg=a=>{let o=a[0].dims,n=a[0].dims[2],u=Ue.size(o)/4,m=a[0].dataType,b=$e("input",m,o,4),C=$e("bias",m,[n],4),w=$e("residual",m,o,4),E=YA("output",m,o,4);return{name:"BiasAdd",getRunData:()=>({outputs:[{dims:o,dataType:a[0].dataType}],dispatchGroup:{x:Math.ceil(u/64)}}),getShaderSource:B=>`
  const channels = ${n}u / 4;
  ${B.declareVariables(b,C,w,E)}

  ${B.mainStart()}
    ${B.guardAgainstOutOfBoundsWorkgroupSizes(u)}
    let value = ${b.getByOffset("global_idx")}
      + ${C.getByOffset("global_idx % channels")} + ${w.getByOffset("global_idx")};
    ${E.setByOffset("global_idx","value")}
  }`}},th=a=>{og(a.inputs),a.compute(lg(a.inputs))}}),cg,St,rh,sh,ah,nh,ih,oh,lh,ch,uh,ug,dh,fh,gh,ph,Vo,mh,L0,hh,Ch,bh,Ih,wh,kh,Eh,Mh,vh,Bh,xh,yh,Dh,Th,Ph,Gh,o2,Qh,tc,rc,Fh,Sh,Oh,dg,fg,zh,Pc=hA(()=>{it(),ft(),Nr(),ht(),cg=(a,o,n,u,m,b,C)=>{let w=Math.ceil(o/4),E="";typeof m=="string"?E=`${m}(a)`:E=m("a");let B=$e("inputData",n,[w],4),D=YA("outputData",u,[w],4),v=[{name:"vec_size",type:"u32"}];return C&&v.push(...C),`
      ${a.registerUniforms(v).declareVariables(B,D)}

  ${b??""}

  ${a.mainStart()}
    ${a.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}

    let a = ${B.getByOffset("global_idx")};
    ${D.setByOffset("global_idx",E)}
  }`},St=(a,o,n,u,m,b=a.dataType,C,w)=>{let E=[{type:12,data:Math.ceil(Ue.size(a.dims)/4)}];return C&&E.push(...C),{name:o,shaderCache:{hint:m,inputDependencies:["type"]},getShaderSource:B=>cg(B,Ue.size(a.dims),a.dataType,b,n,u,w),getRunData:B=>({outputs:[{dims:a.dims,dataType:b}],dispatchGroup:{x:Math.ceil(Ue.size(B[0].dims)/64/4)},programUniforms:E})}},rh=a=>{a.compute(St(a.inputs[0],"Abs","abs"))},sh=a=>{a.compute(St(a.inputs[0],"Acos","acos"))},ah=a=>{a.compute(St(a.inputs[0],"Acosh","acosh"))},nh=a=>{a.compute(St(a.inputs[0],"Asin","asin"))},ih=a=>{a.compute(St(a.inputs[0],"Asinh","asinh"))},oh=a=>{a.compute(St(a.inputs[0],"Atan","atan"))},lh=a=>{a.compute(St(a.inputs[0],"Atanh","atanh"))},ch=a=>Nt(a),uh=(a,o)=>{let n;switch(o.to){case 10:n="vec4<f16>";break;case 1:n="vec4<f32>";break;case 12:n="vec4<u32>";break;case 6:n="vec4<i32>";break;case 9:n="vec4<bool>";break;default:throw new RangeError(`not supported type (specified in attribute 'to' from 'Cast' operator): ${o.to}`)}a.compute(St(a.inputs[0],"Cast",n,void 0,o.cacheKey,o.to))},ug=a=>{let o,n,u=a.length>=2&&a[1].data!==0,m=a.length>=3&&a[2].data!==0;switch(a[0].dataType){case 1:o=u?a[1].getFloat32Array()[0]:-34028234663852886e22,n=m?a[2].getFloat32Array()[0]:34028234663852886e22;break;case 10:o=u?a[1].getUint16Array()[0]:64511,n=m?a[2].getUint16Array()[0]:31743;break;default:throw new Error("Unsupport data type")}return Nt({min:o,max:n})},dh=(a,o)=>{let n=o||ug(a.inputs),u=ys(a.inputs[0].dataType);a.compute(St(a.inputs[0],"Clip",m=>`clamp(${m}, vec4<${u}>(uniforms.min), vec4<${u}>(uniforms.max))`,void 0,n.cacheKey,void 0,[{type:a.inputs[0].dataType,data:n.min},{type:a.inputs[0].dataType,data:n.max}],[{name:"min",type:u},{name:"max",type:u}]),{inputs:[0]})},fh=a=>{a.compute(St(a.inputs[0],"Ceil","ceil"))},gh=a=>{a.compute(St(a.inputs[0],"Cos","cos"))},ph=a=>{a.compute(St(a.inputs[0],"Cosh","cosh"))},Vo=a=>Nt(a),mh=(a,o)=>{let n=ys(a.inputs[0].dataType);a.compute(St(a.inputs[0],"Elu",u=>`elu_vf32(${u})`,`
  const elu_alpha_ = ${n}(${o.alpha});

  fn elu_f32(a: ${n}) -> ${n} {
  return select((exp(a) - 1.0) * elu_alpha_, a, a >= 0.0);
  }

  fn elu_vf32(v: vec4<${n}>) -> vec4<${n}> {
  return vec4(elu_f32(v.x), elu_f32(v.y), elu_f32(v.z), elu_f32(v.w));
  }`,o.cacheKey))},L0=(a="f32")=>`
const r0: ${a} = 0.3275911;
const r1: ${a} = 0.254829592;
const r2: ${a} = -0.284496736;
const r3: ${a} = 1.421413741;
const r4: ${a} = -1.453152027;
const r5: ${a} = 1.061405429;

fn erf_vf32(v: vec4<${a}>) -> vec4<${a}> {
  let absv = abs(v);
  let x = 1.0 / (1.0 + r0 * absv);
  return sign(v) * (1.0 - ((((r5 * x + r4) * x + r3) * x + r2) * x + r1) * x * exp(-absv * absv));
}`,hh=a=>{let o=ys(a.inputs[0].dataType);a.compute(St(a.inputs[0],"Erf",n=>`erf_vf32(${n})`,L0(o)))},Ch=a=>{a.compute(St(a.inputs[0],"Exp","exp"))},bh=a=>{a.compute(St(a.inputs[0],"Floor","floor"))},Ih=a=>{let o=ys(a.inputs[0].dataType);a.compute(St(a.inputs[0],"Gelu",n=>`0.5 * ${n} * (1.0 + erf_vf32(${n} * 0.7071067811865475))`,L0(o)))},wh=(a,o)=>{let n=ys(a.inputs[0].dataType);a.compute(St(a.inputs[0],"LeakyRelu",u=>`select(leaky_relu_alpha_ * ${u}, ${u}, ${u} >= vec4<${n}>(0.0))`,`const leaky_relu_alpha_ = ${n}(${o.alpha});`,o.cacheKey))},kh=a=>{a.compute(St(a.inputs[0],"Not",o=>`!${o}`))},Eh=a=>{a.compute(St(a.inputs[0],"Neg",o=>`-${o}`))},Mh=a=>{a.compute(St(a.inputs[0],"Reciprocal",o=>`1.0/${o}`))},vh=a=>{let o=ys(a.inputs[0].dataType);a.compute(St(a.inputs[0],"Relu",n=>`select(vec4<${o}>(0.0), ${n}, ${n} > vec4<${o}>(0.0))`))},Bh=a=>{a.compute(St(a.inputs[0],"Sigmoid",o=>`(1.0 / (1.0 + exp(-${o})))`))},xh=a=>Nt(a),yh=(a,o)=>{let n=ys(a.inputs[0].dataType);a.compute(St(a.inputs[0],"HardSigmoid",u=>`max(vec4<${n}>(0.0), min(vec4<${n}>(1.0), ${o.alpha} * ${u} + vec4<${n}>(${o.beta})))`,void 0,o.cacheKey))},Dh=a=>{a.compute(St(a.inputs[0],"Sin","sin"))},Th=a=>{a.compute(St(a.inputs[0],"Sinh","sinh"))},Ph=a=>{a.compute(St(a.inputs[0],"Sqrt","sqrt"))},Gh=a=>{a.compute(St(a.inputs[0],"Tan","tan"))},o2=a=>`sign(${a}) * (1 - exp(-2 * abs(${a}))) / (1 + exp(-2 * abs(${a})))`,Qh=a=>{a.compute(St(a.inputs[0],"Tanh",o2))},tc=(a="f32")=>`
const fast_gelu_a: ${a} = 0.5;
const fast_gelu_b: ${a} = 0.7978845608028654;
const fast_gelu_c: ${a} = 0.035677408136300125;

fn tanh_v(v: vec4<${a}>) -> vec4<${a}> {
  return ${o2("v")};
}
`,rc=a=>`(fast_gelu_a + fast_gelu_a * tanh_v(${a} * (fast_gelu_c * ${a} * ${a} + fast_gelu_b))) * ${a}`,Fh=a=>{let o=ys(a.inputs[0].dataType);a.compute(St(a.inputs[0],"FastGelu",rc,tc(o),void 0,a.inputs[0].dataType))},Sh=(a,o)=>{let n=ys(a.inputs[0].dataType);return a.compute(St(a.inputs[0],"ThresholdedRelu",u=>`select(vec4<${n}>(0.0), ${u}, ${u} > thresholded_relu_alpha_)`,`const thresholded_relu_alpha_ = vec4<${n}>(${o.alpha});`,o.cacheKey)),0},Oh=a=>{a.compute(St(a.inputs[0],"Log","log"))},dg=(a,o)=>`
const alpha = vec4<${a}>(${o});
const one = ${a}(1.0);
const zero = ${a}(0.0);

fn quick_gelu_impl(x: vec4<${a}>) -> vec4<${a}> {
  let v = x *alpha;
  var x1 : vec4<${a}>;
  for (var i = 0; i < 4; i = i + 1) {
    if (v[i] >= zero) {
      x1[i] = one / (one + exp(-v[i]));
    } else {
      x1[i] = one - one / (one + exp(v[i]));
    }
  }
  return x * x1;
}
`,fg=a=>`quick_gelu_impl(${a})`,zh=(a,o)=>{let n=ys(a.inputs[0].dataType);a.compute(St(a.inputs[0],"QuickGelu",fg,dg(n,o.alpha),o.cacheKey,a.inputs[0].dataType))}}),gg,pg,Nh,_6=hA(()=>{ft(),ht(),Pc(),gg=a=>{if(a[0].dims.length!==3)throw new Error("input should have 3 dimensions");if(![2560,5120,10240].includes(a[0].dims[2]))throw new Error("hidden state should be 2560, 5120 or 10240");if(a[1].dims.length!==1)throw new Error("bias is expected to have 1 dimensions");if(a[0].dims[2]!==a[1].dims[0])throw new Error("last dimension of input and bias are not the same")},pg=a=>{let o=a[0].dims.slice();o[2]=o[2]/2;let n=$e("input",a[0].dataType,a[0].dims,4),u=$e("bias",a[0].dataType,[a[0].dims[2]],4),m=YA("output",a[0].dataType,o,4),b=Ue.size(o)/4,C=ds(a[0].dataType);return{name:"BiasSplitGelu",getRunData:()=>({outputs:[{dims:o,dataType:a[0].dataType}],dispatchGroup:{x:Math.ceil(b/64)}}),getShaderSource:w=>`
  const M_SQRT2 = sqrt(2.0);
  const halfChannels = ${a[0].dims[2]/4/2}u;

  ${w.declareVariables(n,u,m)}

  ${L0(C)}

  ${w.mainStart()}
    ${w.guardAgainstOutOfBoundsWorkgroupSizes(b)}
    let biasIdx = global_idx % halfChannels;
    let batchIndex = global_idx / halfChannels;
    let inputOffset = biasIdx + batchIndex * halfChannels * 2;
    let valueLeft = input[inputOffset] + bias[biasIdx];
    let valueRight = input[inputOffset + halfChannels] + bias[biasIdx + halfChannels];
    let geluRight = valueRight * 0.5 * (erf_vf32(valueRight / M_SQRT2) + 1);

    ${m.setByOffset("global_idx","valueLeft * geluRight")}
  }`}},Nh=a=>{gg(a.inputs),a.compute(pg(a.inputs))}}),mg,hg,Da,Lh,_h,Rh,jh,Wh,Yh,Vh,Hh,Uh,Kh,R6=hA(()=>{it(),ft(),ht(),mg=(a,o,n,u,m,b,C,w,E,B,D,v)=>{let x,S;typeof w=="string"?x=S=(N,U)=>`${w}((${N}),(${U}))`:typeof w=="function"?x=S=w:(x=w.scalar,S=w.vector);let F=YA("outputData",D,u.length,4),j=$e("aData",E,o.length,4),J=$e("bData",B,n.length,4),L;if(m)if(b){let N=Ue.size(o)===1,U=Ue.size(n)===1,f=o.length>0&&o[o.length-1]%4===0,k=n.length>0&&n[n.length-1]%4===0;N||U?L=F.setByOffset("global_idx",S(N?`${j.type.value}(${j.getByOffset("0")}.x)`:j.getByOffset("global_idx"),U?`${J.type.value}(${J.getByOffset("0")}.x)`:J.getByOffset("global_idx"))):L=`
            let outputIndices = ${F.offsetToIndices("global_idx * 4u")};
            let offsetA = ${j.broadcastedIndicesToOffset("outputIndices",F)};
            let offsetB = ${J.broadcastedIndicesToOffset("outputIndices",F)};
            ${F.setByOffset("global_idx",S(C||f?j.getByOffset("offsetA / 4u"):`${j.type.value}(${j.getByOffset("offsetA / 4u")}[offsetA % 4u])`,C||k?J.getByOffset("offsetB / 4u"):`${J.type.value}(${J.getByOffset("offsetB / 4u")}[offsetB % 4u])`))}
          `}else L=F.setByOffset("global_idx",S(j.getByOffset("global_idx"),J.getByOffset("global_idx")));else{if(!b)throw new Error("no necessary to use scalar implementation for element-wise binary op implementation.");let N=(U,f,k="")=>{let e=`aData[indexA${f}][componentA${f}]`,d=`bData[indexB${f}][componentB${f}]`;return`
            let outputIndices${f} = ${F.offsetToIndices(`global_idx * 4u + ${f}u`)};
            let offsetA${f} = ${j.broadcastedIndicesToOffset(`outputIndices${f}`,F)};
            let offsetB${f} = ${J.broadcastedIndicesToOffset(`outputIndices${f}`,F)};
            let indexA${f} = offsetA${f} / 4u;
            let indexB${f} = offsetB${f} / 4u;
            let componentA${f} = offsetA${f} % 4u;
            let componentB${f} = offsetB${f} % 4u;
            ${U}[${f}] = ${k}(${x(e,d)});
          `};D===9?L=`
            var data = vec4<u32>(0);
            ${N("data",0,"u32")}
            ${N("data",1,"u32")}
            ${N("data",2,"u32")}
            ${N("data",3,"u32")}
            outputData[global_idx] = dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(data));`:L=`
            ${N("outputData[global_idx]",0)}
            ${N("outputData[global_idx]",1)}
            ${N("outputData[global_idx]",2)}
            ${N("outputData[global_idx]",3)}
          `}return`
        ${a.registerUniform("vec_size","u32").declareVariables(j,J,F)}

        ${v??""}

        ${a.mainStart()}
        ${a.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}
        ${L}
      }`},hg=(a,o,n,u,m,b,C=n.dataType)=>{let w=n.dims.map(j=>Number(j)??1),E=u.dims.map(j=>Number(j)??1),B=!Ue.areEqual(w,E),D=w,v=Ue.size(w),x=!1,S=!1,F=[B];if(B){let j=lo.calcShape(w,E,!1);if(!j)throw new Error("Can't perform binary op on the given tensors");D=j.slice(),v=Ue.size(D);let J=Ue.size(w)===1,L=Ue.size(E)===1,N=w.length>0&&w[w.length-1]%4===0,U=E.length>0&&E[E.length-1]%4===0;F.push(J),F.push(L),F.push(N),F.push(U);let f=1;for(let k=1;k<D.length;k++){let e=w[w.length-k],d=E[E.length-k];if(e===d)f*=e;else break}f%4===0?(S=!0,x=!0):(J||L||N||U)&&(x=!0)}else x=!0;return F.push(x),{name:a,shaderCache:{hint:o+F.map(j=>j.toString()).join("_"),inputDependencies:["rank","rank"]},getShaderSource:j=>mg(j,w,E,D,x,B,S,m,n.dataType,u.dataType,C,b),getRunData:()=>({outputs:[{dims:D,dataType:C}],dispatchGroup:{x:Math.ceil(v/64/4)},programUniforms:[{type:12,data:Math.ceil(Ue.size(D)/4)},...XA(w,E,D)]})}},Da=(a,o,n,u,m,b)=>{a.compute(hg(o,m??"",a.inputs[0],a.inputs[1],n,u,b))},Lh=a=>{Da(a,"Add",(o,n)=>`${o}+${n}`)},_h=a=>{Da(a,"Div",(o,n)=>`${o}/${n}`)},Rh=a=>{Da(a,"Equal",{scalar:(o,n)=>`u32(${o}==${n})`,vector:(o,n)=>`vec4<u32>(${o}==${n})`},void 0,void 0,9)},jh=a=>{Da(a,"Mul",(o,n)=>`${o}*${n}`)},Wh=a=>{let o=$e("input",a.inputs[0].dataType,a.inputs[0].dims).type.value;Da(a,"Pow",{scalar:(n,u)=>`pow_custom(${n},${u})`,vector:(n,u)=>`pow_vector_custom(${n},${u})`},`
    fn pow_custom(a : ${o}, b : ${o}) -> ${o} {
      if (b == ${o}(0.0)) {
        return ${o}(1.0);
      } else if (a < ${o}(0.0) && f32(b) != floor(f32(b))) {
        return ${o}(pow(f32(a), f32(b))); // NaN
      }
      return select(sign(a), ${o}(1.0), round(f32(abs(b) % ${o}(2.0))) != 1.0) * ${o}(${o==="i32"?"round":""}(pow(f32(abs(a)), f32(b))));
    }
    fn pow_vector_custom(a : vec4<${o}>, b : vec4<${o}>) -> vec4<${o}> {
      // TODO: implement vectorized pow
      return vec4<${o}>(pow_custom(a.x, b.x), pow_custom(a.y, b.y), pow_custom(a.z, b.z), pow_custom(a.w, b.w));
    }
      `)},Yh=a=>{Da(a,"Sub",(o,n)=>`${o}-${n}`)},Vh=a=>{Da(a,"Greater",{scalar:(o,n)=>`u32(${o}>${n})`,vector:(o,n)=>`vec4<u32>(${o}>${n})`},void 0,void 0,9)},Hh=a=>{Da(a,"Less",{scalar:(o,n)=>`u32(${o}<${n})`,vector:(o,n)=>`vec4<u32>(${o}<${n})`},void 0,void 0,9)},Uh=a=>{Da(a,"GreaterOrEqual",{scalar:(o,n)=>`u32(${o}>=${n})`,vector:(o,n)=>`vec4<u32>(${o}>=${n})`},void 0,void 0,9)},Kh=a=>{Da(a,"LessOrEqual",{scalar:(o,n)=>`u32(${o}<=${n})`,vector:(o,n)=>`vec4<u32>(${o}<=${n})`},void 0,void 0,9)}}),Cg,bg,Ig,wg,Xh,Zh,j6=hA(()=>{it(),ft(),Nr(),ht(),Cg=(a,o)=>{if(!a||a.length<1)throw new Error("too few inputs");let n=0,u=a[n],m=u.dataType,b=u.dims.length;a.forEach((C,w)=>{if(w!==n){if(C.dataType!==m)throw new Error("input tensors should be one type");if(C.dims.length!==b)throw new Error("input tensors should have the same shape");C.dims.forEach((E,B)=>{if(B!==o&&E!==u.dims[B])throw new Error("non concat dimensions must match")})}})},bg=(a,o)=>`
  fn calculateInputIndex(index: u32) -> u32 {
    let sizeInConcatAxis = array<u32, ${a}u>(${o});
    for (var i: u32 = 0u; i < ${a}; i += 1u ) {
      if (index < sizeInConcatAxis[i]) {
        return i;
      }
    }
    return ${a}u;
  }`,Ig=(a,o)=>{let n=a.length,u=[];for(let m=0;m<n;++m){let b=o.setByOffset("global_idx",a[m].getByIndices("indices"));n===1?u.push(b):m===0?u.push(`if (inputIndex == ${m}u) { ${b} }`):m===n-1?u.push(`else { ${b} }`):u.push(`else if (inputIndex == ${m}) { ${b} }`)}return u.join(`
`)},wg=(a,o,n,u)=>{let m=Ue.size(n),b=new Array(a.length),C=new Array(a.length),w=0,E=[],B=[],D=[{type:12,data:m}];for(let j=0;j<a.length;++j)w+=a[j].dims[o],b[j]=w,B.push(a[j].dims.length),C[j]=$e(`input${j}`,u,B[j]),E.push("rank"),D.push({type:12,data:b[j]});for(let j=0;j<a.length;++j)D.push(...XA(a[j].dims));D.push(...XA(n));let v=YA("output",u,n.length),x=v.indicesGet("indices",o),S=Array.from(Array(b.length).keys()).map(j=>`uniforms.sizeInConcatAxis${j}`).join(","),F=j=>`

  ${(()=>{j.registerUniform("outputSize","u32");for(let J=0;J<a.length;J++)j.registerUniform(`sizeInConcatAxis${J}`,"u32");return j.declareVariables(...C,v)})()}

  ${bg(b.length,S)}

  ${j.mainStart()}
    ${j.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}

    var indices = ${v.offsetToIndices("global_idx")};

    let inputIndex = calculateInputIndex(${x});
    if (inputIndex != 0u) {
      let sizeInConcatAxis = array<u32, ${b.length}u>(${S});
      ${x} -= sizeInConcatAxis[inputIndex - 1u];
    }

    ${Ig(C,v)}
  }`;return{name:"Concat",shaderCache:{hint:`${o}`,inputDependencies:E},getRunData:()=>({outputs:[{dims:n,dataType:u}],dispatchGroup:{x:Math.ceil(m/64)},programUniforms:D}),getShaderSource:F}},Xh=(a,o)=>{let n=a.inputs,u=n[0].dims,m=Ue.normalizeAxis(o.axis,u.length);Cg(n,m);let b=u.slice();b[m]=n.reduce((w,E)=>w+(E.dims.length>m?E.dims[m]:0),0);let C=n.filter(w=>Ue.size(w.dims)>0);a.compute(wg(C,m,b,n[0].dataType),{inputs:C})},Zh=a=>Nt({axis:a.axis})}),Ti,Pi,Gi,Gc,Fi=hA(()=>{it(),ft(),Ti=(a,o,n="f32")=>{switch(a.activation){case"Relu":return`value = max(value, ${o}(0.0));`;case"Sigmoid":return`value = (${o}(1.0) / (${o}(1.0) + exp(-value)));`;case"Clip":return`value = clamp(value, ${o}(${n}(uniforms.clip_min)), ${o}(${n}(uniforms.clip_max)));`;case"HardSigmoid":return`value = max(${o}(0.0), min(${o}(1.0), ${n}(uniforms.alpha) * value + ${n}(uniforms.beta)));`;case"LeakyRelu":return`value = select(${n}(uniforms.alpha) * value, value, value >= ${o}(0.0));`;case"Tanh":return`let e2x = exp(-2.0 * abs(value));
              value = sign(value) * (1.0 - e2x) / (1.0 + e2x);
        `;case"":return"";default:throw new Error(`Unsupported activation ${a.activation}`)}},Pi=(a,o)=>{a.activation==="Clip"?o.push({type:1,data:a.clipMax},{type:1,data:a.clipMin}):a.activation==="HardSigmoid"?o.push({type:1,data:a.alpha},{type:1,data:a.beta}):a.activation==="LeakyRelu"&&o.push({type:1,data:a.alpha})},Gi=(a,o)=>{a.activation==="Clip"?o.push({name:"clip_max",type:"f32"},{name:"clip_min",type:"f32"}):a.activation==="HardSigmoid"?o.push({name:"alpha",type:"f32"},{name:"beta",type:"f32"}):a.activation==="LeakyRelu"&&o.push({name:"alpha",type:"f32"})},Gc=a=>{let o=a?.activation||"";if(o==="HardSigmoid"){let[n,u]=a?.activation_params||[.2,.5];return{activation:o,alpha:n,beta:u}}else if(o==="Clip"){let[n,u]=a?.activation_params||[km,Em];return{activation:o,clipMax:u,clipMin:n}}else if(o==="LeakyRelu"){let[n]=a?.activation_params||[.01];return{activation:o,alpha:n}}return{activation:o}}}),bs,Jh,Qc=hA(()=>{bs=(a,o)=>{switch(a){case 1:return o;case 2:return`vec2<${o}>`;case 3:return`vec3<${o}>`;case 4:return`vec4<${o}>`;default:throw new Error(`${a}-component is not supported.`)}},Jh=a=>`
      ${a?"value = value + getBiasByOutputCoords(coords);":""}
      `}),qh,W6=hA(()=>{qh=a=>`
fn getIndexFromCoords4D(coords : vec4<i32>, shape : vec4<i32>) -> i32 {
  return dot(coords, vec4<i32>(
      shape.y * shape.z * shape.w, shape.z * shape.w, shape.w, 1));
}
fn getOutputIndexFromCoords(coords : vec4<i32>) -> i32 {
  return dot(coords, vec4<i32>(
    i32(${a}.x), i32(${a}.y), i32(${a}.z), 1));
}
`}),Uo,Fc,Sc=hA(()=>{it(),ft(),ht(),Fi(),Uo=(a,o,n,u,m)=>{let b=u-n;return`
      ${Array.from({length:n}).map((C,w)=>`
      if (${HA(o.shape,w,o.rank)} != 1) {
        ${o.indicesSet(a,w,HA(m,w+b,u))}
      } else {
        ${o.indicesSet(a,w,0)}
      }`).join("")}
`},Fc=(a,o,n,u,m=!1,b)=>{let C=a[0].dims,w=a[1].dims,E=C[C.length-2],B=w[w.length-1],D=C[C.length-1],v=Pr(B),x=Pr(D),S=Pr(E),F=Ue.size(n)/v/S,j=a.length>2,J=u?u.slice(0,-2):n.slice(0,-2),L=[Ue.size(J),E,B],N=[{type:12,data:F},{type:12,data:E},{type:12,data:B},{type:12,data:D}];Pi(o,N),N.push(...XA(J,C,w)),j&&N.push(...XA(a[2].dims)),N.push(...XA(L));let U=f=>{let k=yc("batch_dims",a[0].dataType,J.length),e=$e("a",a[0].dataType,C.length,x),d=$e("b",a[1].dataType,w.length,v),y=YA("output",a[0].dataType,L.length,v),ee=ds(y.type.tensor),T=Ti(o,y.type.value,ee),O=[e,d],we="";if(j){let Ce=m?v:1;O.push($e("bias",a[2].dataType,a[2].dims.length,Ce)),we=`${m?`value += bias[col / ${Ce}];`:`value += ${y.type.value}(bias[row + i]);`}`}let $=[{name:"output_size",type:"u32"},{name:"M",type:"u32"},{name:"N",type:"u32"},{name:"K",type:"u32"}];Gi(o,$);let be=()=>{let Ce=`var a_data: ${e.type.value};`;for(let Ee=0;Ee<x;Ee++)Ce+=`
              let b_data${Ee} = b[(b_offset + (k + ${Ee}) * uniforms.N + col) / ${v}];`;for(let Ee=0;Ee<S;Ee++){Ce+=`a_data = a[(a_offset + (row + ${Ee}) * uniforms.K + k) / ${x}];`;for(let Be=0;Be<x;Be++)Ce+=`
            values[${Ee}] = fma(${d.type.value}(a_data${x===1?"":`[${Be}]`}), b_data${Be}, values[${Ee}]);
`}return Ce};return`
  ${f.registerUniforms($).registerInternalVariables(k).declareVariables(...O,y)}
  ${f.mainStart()}
    ${f.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
    let col = (global_idx % (uniforms.N / ${v})) * ${v};
    var index1 = global_idx / (uniforms.N / ${v});
    let stride1 = uniforms.M / ${S};
    let row = (index1 % stride1) * ${S};
    let batch = index1 / stride1;

    ${n.length===2?"":`let batch_indices = ${k.offsetToIndices("batch")};`}

    var a_indices: ${e.type.indices};
    ${Uo("a_indices",e,e.rank-2,k.rank,"batch_indices")}
    ${e.indicesSet("a_indices",e.rank-2,0)}
    ${e.indicesSet("a_indices",e.rank-1,0)}
    let a_offset = ${e.indicesToOffset("a_indices")};

    var b_indices: ${d.type.indices};
    ${Uo("b_indices",d,d.rank-2,k.rank,"batch_indices")}
    ${d.indicesSet("b_indices",d.rank-2,0)}
    ${d.indicesSet("b_indices",d.rank-1,0)}
    let b_offset = ${d.indicesToOffset("b_indices")};
    var values: array<${y.type.value}, ${S}>;
    for (var k: u32 = 0u; k < uniforms.K; k = k + ${x}) {
      ${be()}
    }
    for (var i = 0u; i < ${S}u; i++) {
      var value = values[i];
      ${we}
      ${T}
      let cur_indices = ${y.type.indices}(batch, row + i, col);
      let offset = ${y.indicesToOffset("cur_indices")};
      ${y.setByOffset(`offset / ${v}`,"value")};
    }
  }
  `};return{name:"MatMulNaive",shaderCache:{hint:`${o.activation};${v};${x};${S};${m}`,inputDependencies:j?["rank","rank","rank"]:["rank","rank"]},getRunData:()=>({outputs:[{dims:b?b(n):n,dataType:a[0].dataType}],dispatchGroup:{x:Math.ceil(F/64)},programUniforms:N}),getShaderSource:U}}}),kg,Eg,sc,l2,Mg,ac,vg,U0,Oc=hA(()=>{it(),ft(),ht(),Fi(),Sc(),Qc(),kg=(a,o)=>a?`
        mm_Asub[inputRow][inputCol] = mm_readA(batch,
          kStart + inputRow,
          globalRowStart / innerElementSize + inputCol${o?", batchIndices":""});
        `:`
        mm_Asub[inputRow][inputCol] = mm_readA(batch,
          globalRow + innerRow,
          kStart / innerElementSize + inputCol${o?", batchIndices":""});
        `,Eg=(a,o)=>a?`
        let ACached0 = mm_Asub[k * innerElementSize][localRow];
        let ACached1 = mm_Asub[k * innerElementSize + 1][localRow];
        let ACached2 = mm_Asub[k * innerElementSize + 2][localRow];
        ${o===3?"":"let ACached3 = mm_Asub[k * innerElementSize + 3][localRow];"}
        for (var i = 0; i < rowPerThread; i = i + 1) {
          acc[i] = BCached0 * ACached0[i] + acc[i];
          acc[i] = BCached1 * ACached1[i] + acc[i];
          acc[i] = BCached2 * ACached2[i] + acc[i];
          ${o===3?"":"acc[i] = BCached3 * ACached3[i] + acc[i];"}
        }`:`
        for (var i = 0; i < rowPerThread; i = i + 1) {
          let ACached = mm_Asub[tileRow + i][k];
          acc[i] = BCached0 * ACached.x + acc[i];
          acc[i] = BCached1 * ACached.y + acc[i];
          acc[i] = BCached2 * ACached.z + acc[i];
          ${o===3?"":"acc[i] = BCached3 * ACached.w + acc[i];"}
        }`,sc=(a,o,n="f32",u,m=!1,b=32,C=!1,w=32)=>{let E=o[1]*a[1],B=o[0]*a[0],D=m?E:b,v=m?b:E,x=D/o[0],S=b/o[1];if(!((m&&x===4&&a[1]===4||!m&&(x===3||x===4))&&D%o[0]===0&&b%o[1]===0&&a[0]===4))throw new Error(`If transposeA ${m} is true, innerElementSize ${x} and workPerThread[1] ${a[1]} must be 4.
      Otherwise, innerElementSize ${x} must be 3 or 4.
  tileAWidth ${D} must be divisible by workgroupSize[0]${o[0]}. tileInner ${b} must be divisible by workgroupSize[1] ${o[1]}. colPerThread ${a[0]} must be 4.`);return`
var<workgroup> mm_Asub: array<array<vec${x}<${n}>, ${D/x}>, ${v}>;
var<workgroup> mm_Bsub: array<array<vec4<${n}>, ${B/a[0]}>, ${b}>;

const rowPerThread = ${a[1]};
const colPerThread = ${a[0]};
const innerElementSize = ${x};
const tileInner = ${b};

@compute @workgroup_size(${o[0]}, ${o[1]}, ${o[2]})
fn main(@builtin(local_invocation_id) localId : vec3<u32>,
        @builtin(global_invocation_id) globalId : vec3<u32>,
        @builtin(workgroup_id) workgroupId : vec3<u32>) {
  let localRow = i32(localId.y);
  let tileRow = localRow * rowPerThread;
  let tileCol = i32(localId.x);

  let globalRow =i32(globalId.y) * rowPerThread;
  let globalCol = i32(globalId.x);
  let batch = ${C?"0":"i32(globalId.z)"};
  ${u?`let batchIndices = ${u.offsetToIndices("u32(batch)")};`:""}
  let globalRowStart = i32(workgroupId.y) * ${E};

  let num_tiles = ${C?`${Math.ceil(w/b)}`:"(uniforms.dim_inner - 1) / tileInner + 1"};
  var kStart = ${C?`i32(globalId.z) * ${w}`:"0"};

  var acc: array<vec4<${n}>, rowPerThread>;

  // Loop over shared dimension.
  let tileRowB = localRow * ${S};
  for (var t = 0; t < num_tiles; t = t + 1) {
      // Load one tile of A into local memory.
      for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
          let inputRow = tileRow + innerRow;
          let inputCol = tileCol;
          ${kg(m,u)}
      }

      // Load one tile of B into local memory.
      for (var innerRow = 0; innerRow < ${S}; innerRow = innerRow + 1) {
          let inputRow = tileRowB + innerRow;
          let inputCol = tileCol;
          mm_Bsub[inputRow][inputCol] = mm_readB(batch, kStart + inputRow, globalCol${u?", batchIndices":""});
      }
      kStart = kStart + tileInner;
      workgroupBarrier();

      // Compute acc values for a single thread.
      for (var k = 0; k < tileInner / innerElementSize; k = k + 1) {
          let BCached0 = mm_Bsub[k * innerElementSize][tileCol];
          let BCached1 = mm_Bsub[k * innerElementSize + 1][tileCol];
          let BCached2 = mm_Bsub[k * innerElementSize + 2][tileCol];
          ${x===3?"":"let BCached3 = mm_Bsub[k * innerElementSize + 3][tileCol];"}

          ${Eg(m,x)}
      }

      workgroupBarrier();
  }

  for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
      mm_write(batch, globalRow + innerRow, globalCol, acc[innerRow]);
  }
}`},l2=(a,o)=>a?`
            mm_Asub[inputRow][inputCol] = mm_readA(batch,
              kStart + inputRow,
              globalRowStart + inputCol${o?", batchIndices":""});
            `:`
            mm_Asub[inputRow][inputCol] = mm_readA(batch,
              globalRowStart + inputRow,
              kStart + inputCol${o?", batchIndices":""});
            `,Mg=a=>a?"let ACached = mm_Asub[k][tileRow + innerRow];":"let ACached = mm_Asub[tileRow + innerRow][k];",ac=(a,o,n="f32",u,m=!1,b=32,C=!1,w=32,E=!1)=>{let B=a[1]*o[1],D=a[0]*o[0],v=m?B:b,x=m?b:B;if(!(x%o[1]===0&&v%o[0]===0&&b%o[1]===0))throw new Error(`tileAHight ${x} must be divisible by workgroupSize[1]${o[1]}, tileAWidth ${v} must be divisible by workgroupSize[0]${o[0]}, tileInner ${b} must be divisible by workgroupSize[1]${o[1]}`);let S=x/o[1],F=v/o[0],j=b/o[1],J=E?`
    let localRow = i32(localId.y);
    let localCol = i32(localId.x);
    let globalRowStart = i32(workgroupId.y) * ${B};
    let globalColStart = i32(workgroupId.x) * ${D};

    // Loop over shared dimension.
    for (var t = 0; t < num_tiles; t = t + 1) {
      // Load one tile of A into local memory.
      for (var inputRow = localRow; inputRow < ${x}; inputRow = inputRow + ${o[1]}) {
        for (var inputCol = localCol; inputCol < ${v}; inputCol = inputCol + ${o[0]}) {
          ${l2(m,u)}
        }
      }
      // Load one tile of B into local memory.
      for (var inputRow = localRow; inputRow < ${b}; inputRow = inputRow + ${o[1]}) {
            for (var inputCol = localCol; inputCol < ${D}; inputCol = inputCol + ${o[0]}) {
          mm_Bsub[inputRow][inputCol] = mm_readB(batch,
            kStart + inputRow,
            globalColStart + inputCol${u?", batchIndices":""});
        }
      }
      kStart = kStart + tileInner;
      workgroupBarrier();

      // Compute acc values for a single thread.
      var BCached : array<${n}, colPerThread>;
      for (var k = 0; k < tileInner; k = k + 1) {
        for (var inner = 0; inner < colPerThread; inner = inner + 1) {
          BCached[inner] = mm_Bsub[k][localCol + inner * ${o[0]}];
        }
        for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
          let ACached = ${m?`mm_Asub[k][localRow + innerRow * ${o[1]}];`:`mm_Asub[localRow + innerRow * ${o[1]}][k];`}
          for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
            acc[innerRow][innerCol] = acc[innerRow][innerCol] +
                ACached * BCached[innerCol];
          }
        }
      }
      workgroupBarrier();
    }
    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
      let gRow = globalRowStart + localRow + innerRow * ${o[1]};
      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
        let gCol = globalColStart + localCol + innerCol * ${o[0]};
        mm_write(batch, gRow, gCol, acc[innerRow][innerCol]);
      }
    }
    `:`
let tileRow = i32(localId.y) * rowPerThread;
let tileCol = i32(localId.x) * colPerThread;

let globalRow = i32(globalId.y) * rowPerThread;
let globalCol = i32(globalId.x) * colPerThread;
let globalRowStart = i32(workgroupId.y) * ${B};

let tileRowA = i32(localId.y) * ${S};
let tileColA = i32(localId.x) * ${F};
let tileRowB = i32(localId.y) * ${j};
// Loop over shared dimension.
for (var t = 0; t < num_tiles; t = t + 1) {
  // Load one tile of A into local memory.
  for (var innerRow = 0; innerRow < ${S}; innerRow = innerRow + 1) {
    for (var innerCol = 0; innerCol < ${F}; innerCol = innerCol + 1) {
      let inputRow = tileRowA + innerRow;
      let inputCol = tileColA + innerCol;
      ${l2(m,u)}
    }
  }

  // Load one tile of B into local memory.
  for (var innerRow = 0; innerRow < ${j}; innerRow = innerRow + 1) {
    for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
      let inputRow = tileRowB + innerRow;
      let inputCol = tileCol + innerCol;
      mm_Bsub[inputRow][inputCol] = mm_readB(batch,
        kStart + inputRow,
        globalCol + innerCol${u?", batchIndices":""});
    }
  }
  kStart = kStart + tileInner;
  workgroupBarrier();

  // Compute acc values for a single thread.
  var BCached : array<${n}, colPerThread>;
  for (var k = 0; k < tileInner; k = k + 1) {
    for (var inner = 0; inner < colPerThread; inner = inner + 1) {
      BCached[inner] = mm_Bsub[k][tileCol + inner];
    }

    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
      ${Mg(m)}
      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
        acc[innerRow][innerCol] = acc[innerRow][innerCol] + ACached * BCached[innerCol];
      }
    }
  }

  workgroupBarrier();
}

for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
  for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
    mm_write(batch, globalRow + innerRow, globalCol + innerCol,
        acc[innerRow][innerCol]);
  }
}
`;return`
  var<workgroup> mm_Asub : array<array<${n}, ${v}>, ${x}>;
  var<workgroup> mm_Bsub : array<array<${n}, ${D}>, ${b}>;
  const rowPerThread = ${a[1]};
  const colPerThread = ${a[0]};
  const tileInner = ${b};

@compute @workgroup_size(${o[0]}, ${o[1]}, ${o[2]})
fn main(@builtin(local_invocation_id) localId : vec3<u32>,
        @builtin(global_invocation_id) globalId : vec3<u32>,
        @builtin(workgroup_id) workgroupId : vec3<u32>) {
    let batch = ${C?"0":"i32(globalId.z)"};
    ${u?`let batchIndices = ${u.offsetToIndices("u32(batch)")};`:""}
    let num_tiles = ${C?`${Math.ceil(w/b)}`:"(uniforms.dim_inner - 1) / tileInner + 1"};
    var kStart = ${C?`i32(globalId.z) * ${w}`:"0"};

    var acc : array<array<${n}, colPerThread>, rowPerThread>;
    ${J}
  }
`},vg=(a,o,n,u,m=!1)=>{let[b,C,w,E]=u,B=ds(u[0].type.tensor);return`
    fn mm_readA(batch: i32, row: i32, colIn: i32, batchIndices: ${b.type.indices}) -> ${bs(a,B)} {
      var value = ${bs(a,B)}(0.0);
      let col = colIn * ${a};
      if(row < uniforms.dim_a_outer && col < uniforms.dim_inner)
      {
        var aIndices: ${C.type.indices};
        ${Uo("aIndices",C,C.rank-2,b.rank,"batchIndices")}
        ${C.indicesSet("aIndices",C.rank-2,"u32(row)")}
        ${C.indicesSet("aIndices",C.rank-1,"u32(colIn)")}
        value = ${C.getByIndices("aIndices")};
      }
      return value;
    }

    fn mm_readB(batch: i32, row: i32, colIn: i32, batchIndices: ${b.type.indices}) -> ${bs(a,B)} {
      var value = ${bs(a,B)}(0.0);
      let col = colIn * ${a};
      if(row < uniforms.dim_inner && col < uniforms.dim_b_outer)
      {
        var bIndices: ${w.type.indices};
        ${Uo("bIndices",w,w.rank-2,b.rank,"batchIndices")}
        ${w.indicesSet("bIndices",w.rank-2,"u32(row)")}
        ${w.indicesSet("bIndices",w.rank-1,"u32(colIn)")}
        value = ${w.getByIndices("bIndices")};
      }
      return value;
    }

    fn mm_write(batch: i32, row: i32, colIn: i32, valueIn: ${bs(a,B)}) {
      let col = colIn * ${a};
      if (row < uniforms.dim_a_outer && col < uniforms.dim_b_outer) {
        var value = valueIn;
        let coords = vec3<i32>(batch, row, colIn);
        ${o?`value = value + ${m?"bias[colIn]":`${bs(a,B)}(bias[row])`};`:""}
        ${n}
        ${E.setByIndices("vec3<u32>(coords)","value")}
      }
    }
    `},U0=(a,o,n,u,m=!1,b)=>{let C=a[0].dims,w=a[1].dims,E=C.slice(0,-2),B=w.slice(0,-2),D=u?u.slice(0,-2):n.slice(0,-2),v=Ue.size(D),x=C[C.length-2],S=C[C.length-1],F=w[w.length-1],j=S%4===0&&F%4===0,J=x<=8?[4,1,1]:[4,4,1],L=[8,8,1],N=[Math.ceil(F/L[0]/J[0]),Math.ceil(x/L[1]/J[1]),Math.ceil(v/L[2]/J[2])],U=j?4:1,f=[...E,x,S/U],k=f.length,e=[...B,S,F/U],d=e.length,y=[v,x,F/U],ee=[{type:6,data:x},{type:6,data:F},{type:6,data:S}];Pi(o,ee),ee.push(...XA(D,f,e));let T=["rank","rank"],O=a.length>2;O&&(ee.push(...XA(a[2].dims)),T.push("rank")),ee.push(...XA(y));let we=$=>{let be=D.length,Ce=yc("batchDims",a[0].dataType,be,1),Ee=ds(a[0].dataType),Be=$e("a",a[0].dataType,k,U),ve=$e("b",a[1].dataType,d,U),Ne=YA("result",a[0].dataType,y.length,U),Fe=[Be,ve];if(O){let Ge=m?U:1;Fe.push($e("bias",a[2].dataType,a[2].dims.length,Ge))}let le=[{name:"dim_a_outer",type:"i32"},{name:"dim_b_outer",type:"i32"},{name:"dim_inner",type:"i32"}];Gi(o,le);let Ae=ds(Ne.type.tensor),pe=Ti(o,Ne.type.value,Ae),oe=vg(U,O,pe,[Ce,Be,ve,Ne],m);return`
  ${$.registerUniforms(le).registerInternalVariables(Ce).declareVariables(...Fe,Ne)}
  ${oe}
  ${j?sc(J,L,Ee,Ce):ac(J,L,Ee,Ce)}
                   `};return{name:"MatMul",shaderCache:{hint:`${J};${o.activation};${j};${m}`,inputDependencies:T},getRunData:()=>({outputs:[{dims:b?b(n):n,dataType:a[0].dataType}],dispatchGroup:{x:N[0],y:N[1],z:N[2]},programUniforms:ee}),getShaderSource:we}}}),Bg,$h,Y6=hA(()=>{it(),Mn(),ht(),Fi(),Qc(),W6(),Oc(),Bg=(a,o,n,u,m=!1,b,C=4,w=4,E=4,B="f32")=>{let D=ee=>{switch(ee){case 1:return"resData = x[xIndex];";case 3:return`resData = vec3<${B}>(x[xIndex], x[xIndex + 1], x[xIndex + 2]);`;case 4:return"resData = x[xIndex / 4];";default:throw new Error(`innerElementSize ${ee} is not supported.`)}},v=ee=>{switch(ee){case 1:return"return w[row * i32(uniforms.w_shape[3]) + colIn];";case 4:return"return w[row * i32(uniforms.w_shape[3]) / 4 + colIn];";default:throw new Error(`innerElementSize ${ee} is not supported.`)}},x=a?`
    let coord = vec4<i32>(batch, xRow, xCol, xCh);
    `:`
    let coord = vec4<i32>(batch, xCh, xRow, xCol);
    `,S=a?`
    let coords = vec4<i32>(
      batch,
      row / outWidth,
      row % outWidth,
      col);
    `:`
    let coords = vec4<i32>(
      batch,
      row,
      col / outWidth,
      col % outWidth);
    `,F=a?"i32(uniforms.x_shape[1])":"i32(uniforms.x_shape[2])",j=a?"i32(uniforms.x_shape[2])":"i32(uniforms.x_shape[3])",J=a?"row":"col",L=a?"col":"row",N=`
    let inChannels = i32(uniforms.w_shape[2]);
    let outWidth = ${a?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};
    let outRow = ${J} / outWidth;
    let outCol = ${J} % outWidth;

    let WRow = ${L} / (i32(uniforms.w_shape[1]) * inChannels);
    let WCol = ${L} / inChannels % i32(uniforms.w_shape[1]);
    let xRow = outRow * uniforms.stride[0] + uniforms.dilation[0] * WRow - uniforms.pad[0];
    let xCol = outCol * uniforms.stride[1] + uniforms.dilation[1] * WCol - uniforms.pad[1];
    let xCh = ${L} % inChannels;
    var resData = ${bs(C,B)}(0.0);
    // The bounds checking is always needed since we use it to pad zero for
    // the 'same' padding type.
    if (xRow >= 0 && xRow < ${F} && xCol >= 0 && xCol < ${j}) {
      ${x}
      let xIndex = getIndexFromCoords4D(coord, vec4<i32>(uniforms.x_shape));
      ${D(C)}
    }
    return resData;`,U=a?o&&u?`
    let col = colIn * ${C};
    ${N}`:`
    let col = colIn * ${C};
    if (row < uniforms.dim_a_outer && col < uniforms.dim_inner) {
      ${N}
    }
    return ${bs(C,B)}(0.0);`:u&&n?`
    let col = colIn * ${C};
    ${N}`:`
    let col = colIn * ${C};
    if (row < uniforms.dim_inner && col < uniforms.dim_b_outer) {
      ${N}
    }
    return ${bs(C,B)}(0.0);`,f=a?u&&n?v(w):`
    let col = colIn * ${w};
    if (row < uniforms.dim_inner && col < uniforms.dim_b_outer) {
      ${v(w)}
    }
    return ${bs(w,B)}(0.0);`:`
    let col = colIn * ${w};
    if (row < uniforms.dim_inner && col < uniforms.dim_a_outer) {
      ${v(w)}
    }
    return ${bs(w,B)}(0.0);`,k=bs(E,B),e=bs(a?C:w,B),d=bs(a?w:C,B),y=Ti(b,k,B);return`
    fn mm_readA(batch: i32, row : i32, colIn : i32) -> ${e} {
      ${a?U:f}
    }

    fn mm_readB(batch: i32, row : i32, colIn : i32) -> ${d} {
      ${a?f:U}
    }

    fn mm_write(batch: i32, row : i32, colIn : i32, valueIn : ${k}) {
      let col = colIn * ${E};
      if (row < uniforms.dim_a_outer && col < uniforms.dim_b_outer)
      {
      var value = valueIn;
      let outWidth = ${a?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};
      ${S}
      ${Jh(m)}
      ${y}
      setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);
      }
    }`},$h=(a,o,n,u,m,b,C,w,E)=>{let B=o.format==="NHWC",D=B?a[0].dims[3]:a[0].dims[1],v=n[0],x=B?n[2]:n[3],S=B?n[1]:n[2],F=B?n[3]:n[1],j=B&&(D%4===0||D%3===0)&&F%4===0,J=B?F:x*S,L=B?x*S:F,N=[8,8,1],U=u<=8?[4,1,1]:[4,4,1],f=[Math.ceil(J/N[0]/U[0]),Math.ceil(L/N[1]/U[1]),Math.ceil(v/N[2]/U[2])];xt("verbose",()=>`[conv2d_mm_webgpu] dispatch = ${f}`);let k=j?B&&D%4!==0?3:4:1,e=N[1]*U[1],d=N[0]*U[0],y=Math.max(N[0]*k,N[1]),ee=u%e===0,T=m%d===0,O=b%y===0,we=j?[k,4,4]:[1,1,1],$=[{type:6,data:u},{type:6,data:m},{type:6,data:b},{type:6,data:[o.pads[0],o.pads[1]]},{type:6,data:o.strides},{type:6,data:o.dilations}];Pi(o,$),$.push(...XA(a[0].dims,a[1].dims));let be=["rank","rank"];C&&($.push(...XA(a[2].dims)),be.push("rank")),$.push(...XA(n));let Ce=Ee=>{let Be=[{name:"dim_a_outer",type:"i32"},{name:"dim_b_outer",type:"i32"},{name:"dim_inner",type:"i32"},{name:"pad",type:"i32",length:2},{name:"stride",type:"i32",length:2},{name:"dilation",type:"i32",length:2}];Gi(o,Be);let ve=j?4:1,Ne=ds(a[0].dataType),Fe=`
      fn setOutputAtIndex(flatIndex : i32, value : ${j?`vec4<${Ne}>`:Ne}) {
        result[flatIndex] = ${j?`vec4<${Ne}>`:Ne}(value);
      }
      fn setOutputAtCoords(d0 : i32, d1 : i32, d2 : i32, d3 : i32, value : ${j?`vec4<${Ne}>`:Ne}) {
        let flatIndex = getOutputIndexFromCoords(vec4<i32>(d0, d1, d2, d3));
        setOutputAtIndex(flatIndex ${j?"/ 4":""}, value);
      }`,le=$e("x",a[0].dataType,a[0].dims.length,k===3?1:k),Ae=$e("w",a[1].dataType,a[1].dims.length,ve),pe=[le,Ae],oe=YA("result",a[0].dataType,n.length,ve);if(C){let Ge=$e("bias",a[2].dataType,a[2].dims.length,ve);pe.push(Ge),Fe+=`
        fn getBiasByOutputCoords(coords : vec4<i32>) -> ${j?`vec4<${Ne}>`:Ne} {
          return bias[coords.${B?"w":"y"}${j?"/ 4":""}];
        }`}return`
        ${qh("uniforms.result_strides")}
        //struct Uniforms { xShape : vec4<i32>, wShape : vec4<i32>, outShape : vec4<i32>,
        //  outShapeStrides: vec3<i32>, filterDims : vec2<i32>, pad : vec2<i32>, stride : vec2<i32>,
        //  dilation : vec2<i32>, dimAOuter : i32, dimBOuter : i32, dimInner : i32 };
        ${Ee.registerUniforms(Be).declareVariables(...pe,oe)}
        ${Fe}
        ${Bg(B,ee,T,O,C,o,we[0],we[1],we[2],Ne)}
        ${j?sc(U,N,Ne,void 0,!B,y):ac(U,N,Ne,void 0,!B,y,!1,void 0,w)}`};return{name:"Conv2DMatMul",shaderCache:{hint:`${o.cacheKey};${k};${j};${ee};${T};${O};${e};${d};${y}`,inputDependencies:be},getRunData:()=>({outputs:[{dims:E?E(n):n,dataType:a[0].dataType}],dispatchGroup:{x:f[0],y:f[1],z:f[2]},programUniforms:$}),getShaderSource:Ce}}}),xg,c2,Oo,yg,u2,Dg,e3,A3,V6=hA(()=>{it(),Mn(),ft(),ht(),Fi(),Qc(),xg=a=>{let o=1;for(let n=0;n<a.length;n++)o*=a[n];return o},c2=a=>typeof a=="number"?[a,a,a]:a,Oo=(a,o)=>o<=1?a:a+(a-1)*(o-1),yg=(a,o,n,u=1)=>{let m=Oo(o,u);return Math.floor((a[0]*(n-1)-n+m)/2)},u2=(a,o,n,u,m)=>{m==null&&(m=yg(a,o[0],u[0]));let b=[0,0,0,n];for(let C=0;C<3;C++)a[C]+2*m>=o[C]&&(b[C]=Math.trunc((a[C]-o[C]+2*m)/u[C]+1));return b},Dg=(a,o,n,u,m,b,C,w,E,B)=>{let D,v,x,S;if(a==="VALID"&&(a=0),typeof a=="number"){D={top:a,bottom:a,left:a,right:a,front:a,back:a};let F=u2([o,n,u,1],[w,E,B],1,[m,b,C],a);v=F[0],x=F[1],S=F[2]}else if(Array.isArray(a)){if(!a.every((j,J,L)=>j===L[0]))throw Error(`Unsupported padding parameter: ${a}`);D={top:a[0],bottom:a[1],left:a[2],right:a[3],front:a[4],back:a[5]};let F=u2([o,n,u,1],[w,E,B],1,[m,b,C],a[0]);v=F[0],x=F[1],S=F[2]}else if(a==="SAME_UPPER"){v=Math.ceil(o/m),x=Math.ceil(n/b),S=Math.ceil(u/C);let F=(v-1)*m+w-o,j=(x-1)*b+E-n,J=(S-1)*C+B-u,L=Math.floor(F/2),N=F-L,U=Math.floor(j/2),f=j-U,k=Math.floor(J/2),e=J-k;D={top:U,bottom:f,left:k,right:e,front:L,back:N}}else throw Error(`Unknown padding parameter: ${a}`);return{padInfo:D,outDepth:v,outHeight:x,outWidth:S}},e3=(a,o,n,u,m,b=!1,C="channelsLast")=>{let w,E,B,D,v;if(C==="channelsLast")[w,E,B,D,v]=a;else if(C==="channelsFirst")[w,v,E,B,D]=a;else throw new Error(`Unknown dataFormat ${C}`);let[x,,S,F,j]=o,[J,L,N]=c2(n),[U,f,k]=c2(u),e=Oo(S,U),d=Oo(F,f),y=Oo(j,k),{padInfo:ee,outDepth:T,outHeight:O,outWidth:we}=Dg(m,E,B,D,J,L,N,e,d,y),$=b?x*v:x,be=[0,0,0,0,0];return C==="channelsFirst"?be=[w,$,T,O,we]:C==="channelsLast"&&(be=[w,T,O,we,$]),{batchSize:w,dataFormat:C,inDepth:E,inHeight:B,inWidth:D,inChannels:v,outDepth:T,outHeight:O,outWidth:we,outChannels:$,padInfo:ee,strideDepth:J,strideHeight:L,strideWidth:N,filterDepth:S,filterHeight:F,filterWidth:j,effectiveFilterDepth:e,effectiveFilterHeight:d,effectiveFilterWidth:y,dilationDepth:U,dilationHeight:f,dilationWidth:k,inShape:a,outShape:be,filterShape:o}},A3=(a,o,n,u,m,b)=>{let C=b==="channelsLast";C?a[0].dims[3]:a[0].dims[1];let w=[64,1,1],E={x:n.map((J,L)=>L)},B=[Math.ceil(xg(E.x.map(J=>n[J]))/w[0]),1,1];xt("verbose",()=>`[conv3d_naive_webgpu] dispatch = ${B}`);let D=1,v=Ue.size(n),x=[{type:12,data:v},{type:12,data:u},{type:12,data:m},{type:12,data:o.strides},{type:12,data:o.dilations}];Pi(o,x),x.push(...XA(a[0].dims,a[1].dims));let S=["rank","rank"],F=a.length===3;F&&(x.push(...XA(a[2].dims)),S.push("rank")),x.push(...XA(n));let j=J=>{let L=[{name:"output_size",type:"u32"},{name:"filter_dims",type:"u32",length:u.length},{name:"pads",type:"u32",length:m.length},{name:"strides",type:"u32",length:o.strides.length},{name:"dilations",type:"u32",length:o.dilations.length}];Gi(o,L);let N=1,U=ds(a[0].dataType),f=$e("x",a[0].dataType,a[0].dims.length,D),k=$e("W",a[1].dataType,a[1].dims.length,N),e=[f,k],d=YA("result",a[0].dataType,n.length,N),y="";if(F){let O=$e("bias",a[2].dataType,a[2].dims.length,N);e.push(O),y+=`
        fn getBiasByOutputCoords(coords : array<u32, 5>) -> ${U} {
          return bias[${C?HA("coords",4,5):HA("coords",1,5)}];
        }`}let ee=bs(D,U),T=Ti(o,ee,U);return`
            ${y}
            fn getX(d0 : u32, d1 : u32, d2 : u32, d3 : u32, d4 : u32) -> f32 {
              let aIndices = array<u32, 5>(d0, d1, d2, d3, d4);
              return ${f.getByIndices("aIndices")};
            }
            fn getW(d0 : u32, d1 : u32, d2 : u32, d3 : u32, d4 : u32) -> f32 {
              let aIndices = array<u32, 5>(d0, d1, d2, d3, d4);
              return ${k.getByIndices("aIndices")};
            }
          ${J.registerUniforms(L).declareVariables(...e,d)}
          ${J.mainStart()}
          ${J.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
              let coords = ${d.offsetToIndices("global_idx")};
              let batch = ${HA("coords",0,f.rank)};
              let d2 = ${C?HA("coords",f.rank-1,f.rank):HA("coords",1,f.rank)};
              let xFRCCorner = vec3<u32>(${C?HA("coords",1,f.rank):HA("coords",2,f.rank)},
              ${C?HA("coords",2,f.rank):HA("coords",3,f.rank)},
              ${C?HA("coords",3,f.rank):HA("coords",4,f.rank)}) * uniforms.strides - uniforms.pads;
              let xFCorner = xFRCCorner.x;
              let xRCorner = xFRCCorner.y;
              let xCCorner = xFRCCorner.z;
              let xShapeY = ${C?HA("uniforms.x_shape",1,f.rank):HA("uniforms.x_shape",2,f.rank)};
              let xShapeZ = ${C?HA("uniforms.x_shape",2,f.rank):HA("uniforms.x_shape",3,f.rank)};
              let xShapeW = ${C?HA("uniforms.x_shape",3,f.rank):HA("uniforms.x_shape",4,f.rank)};
              let xShapeU = ${C?HA("uniforms.x_shape",4,f.rank):HA("uniforms.x_shape",1,f.rank)};
              let inputDepthNearestVec4 = (xShapeU / 4) * 4;
              let inputDepthVec4Remainder = xShapeU % 4;

              var value = 0.0;
              for (var wF = 0u; wF < uniforms.filter_dims[0]; wF++) {
                let xF = xFCorner + wF * uniforms.dilations[0];
                if (xF < 0 || xF >= xShapeY) {
                  continue;
                }

                for (var wR = 0u; wR < uniforms.filter_dims[1]; wR++) {
                  let xR = xRCorner + wR * uniforms.dilations[1];
                  if (xR < 0 || xR >= xShapeZ) {
                    continue;
                  }

                  for (var wC = 0u; wC < uniforms.filter_dims[2]; wC++) {
                    let xC = xCCorner + wC * uniforms.dilations[2];
                    if (xC < 0 || xC >= xShapeW) {
                      continue;
                    }

                    for (var d1 = 0u; d1 < inputDepthNearestVec4; d1 += 4) {
                      ${C?`let xValues = vec4<f32>(
                               getX(batch, xF, xR, xC, d1),
                               getX(batch, xF, xR, xC, d1 + 1),
                               getX(batch, xF, xR, xC, d1 + 2),
                               getX(batch, xF, xR, xC, d1 + 3));
                            `:`let xValues = vec4<f32>(
                               getX(batch, d1, xF, xR, xC),
                               getX(batch, d1 + 1, xF, xR, xC),
                               getX(batch, d1 + 2, xF, xR, xC),
                               getX(batch, d1 + 3, xF, xR, xC));
                            `}
                            let wValues = vec4<f32>(
                              getW(d2, d1, wF, wR, wC),
                              getW(d2, d1 + 1, wF, wR, wC),
                              getW(d2, d1 + 2, wF, wR, wC),
                              getW(d2, d1 + 3, wF, wR, wC));
                      value += dot(xValues, wValues);
                    }
                    if (inputDepthVec4Remainder == 1) {
                        ${C?`value += getX(batch, xF, xR, xC, inputDepthNearestVec4)
                          * getW(d2, inputDepthNearestVec4, wF, wR, wC);`:`value += getX(batch, inputDepthNearestVec4, xF, xR, xC)
                          * getW(d2, inputDepthNearestVec4, wF, wR, wC);`}
                    } else if (inputDepthVec4Remainder == 2) {
                      ${C?`let xValues = vec2<f32>(
                        getX(batch, xF, xR, xC, inputDepthNearestVec4),
                        getX(batch, xF, xR, xC, inputDepthNearestVec4 + 1));
                      `:`let xValues = vec2<f32>(
                        getX(batch, inputDepthNearestVec4, xF, xR, xC),
                        getX(batch, inputDepthNearestVec4 + 1, xF, xR, xC));
                    `}
                    let wValues = vec2<f32>(
                      getW(d2, inputDepthNearestVec4, wF, wR, wC),
                      getW(d2, inputDepthNearestVec4 + 1, wF, wR, wC));
                      value += dot(xValues, wValues);
                    } else if (inputDepthVec4Remainder == 3) {
                      ${C?`let xValues = vec3<f32>(
                        getX(batch, xF, xR, xC, inputDepthNearestVec4),
                        getX(batch, xF, xR, xC, inputDepthNearestVec4 + 1),
                        getX(batch, xF, xR, xC, inputDepthNearestVec4 + 2));
                      `:`let xValues = vec3<f32>(
                        getX(batch, inputDepthNearestVec4, xF, xR, xC),
                        getX(batch, inputDepthNearestVec4 + 1, xF, xR, xC),
                        getX(batch, inputDepthNearestVec4 + 2, xF, xR, xC));
                    `}
                    let wValues = vec3<f32>(
                      getW(d2, inputDepthNearestVec4, wF, wR, wC),
                      getW(d2, inputDepthNearestVec4 + 1, wF, wR, wC),
                      getW(d2, inputDepthNearestVec4 + 2, wF, wR, wC));
                      value += dot(xValues, wValues);
                    }
                  }
                }
              }
              ${F?"value = value + getBiasByOutputCoords(coords)":""};
              ${T}
              result[global_idx] = f32(value);
          }`};return{name:"Conv3DNaive",shaderCache:{hint:`${o.cacheKey};${C};${D};${F}`,inputDependencies:S},getRunData:()=>({outputs:[{dims:n,dataType:a[0].dataType}],dispatchGroup:{x:B[0],y:B[1],z:B[2]},programUniforms:x}),getShaderSource:j}}}),t3,r3,H6=hA(()=>{it(),ft(),ht(),Fi(),t3=(a,o,n,u)=>{let m=a.length>2,b=m?"value += b[output_channel];":"",C=a[0].dims,w=a[1].dims,E=o.format==="NHWC",B=E?n[3]:n[1],D=B/o.group,v=E&&D>=4?Pr(B):1,x=Ue.size(n)/v,S=[{type:12,data:x},{type:12,data:o.dilations},{type:12,data:[o.strides[0],o.strides[1]]},{type:12,data:[o.pads[0],o.pads[1]]},{type:12,data:D}];Pi(o,S),S.push(...XA(C,[w[0],w[1],w[2],w[3]/v]));let F=m?["rank","rank","rank"]:["rank","rank"];S.push(...XA([n[0],n[1],n[2],n[3]/v]));let j=J=>{let L=YA("output",a[0].dataType,n.length,v),N=ds(L.type.tensor),U=Ti(o,L.type.value,N),f=$e("x",a[0].dataType,C.length),k=$e("w",a[1].dataType,w.length,v),e=[f,k];m&&e.push($e("b",a[2].dataType,a[2].dims,v));let d=[{name:"output_size",type:"u32"},{name:"dilations",type:"u32",length:o.dilations.length},{name:"strides",type:"u32",length:2},{name:"pads",type:"u32",length:2},{name:"output_channels_per_group",type:"u32"}];Gi(o,d);let y=E?`
      for (var wHeight: u32 = 0u; wHeight < uniforms.w_shape[0]; wHeight++) {
        let xHeight = xRCCorner.x + wHeight * uniforms.dilations[0];

        if (xHeight < 0u || xHeight >= uniforms.x_shape[1]) {
          continue;
        }

        for (var wWidth: u32 = 0u; wWidth < uniforms.w_shape[1]; wWidth++) {
          let xWidth = xRCCorner.y + wWidth * uniforms.dilations[1];
          if (xWidth < 0u || xWidth >= uniforms.x_shape[2]) {
            continue;
          }

          for (var wInChannel: u32 = 0u; wInChannel < uniforms.w_shape[2]; wInChannel++) {
            let input_channel = in_channel_offset + wInChannel;
            let xVal = ${f.get("batch","xHeight","xWidth","input_channel")};
            let wVal = ${k.get("wHeight","wWidth","wInChannel","output_channel")};
            value += xVal * wVal;
          }
        }
      }
      `:`
      for (var wInChannel: u32 = 0u; wInChannel < uniforms.w_shape[1]; wInChannel++) {
        let input_channel = in_channel_offset + wInChannel;
        for (var wHeight: u32 = 0u; wHeight < uniforms.w_shape[2]; wHeight++) {
          let xHeight = xRCCorner.x + wHeight * uniforms.dilations[0];

          if (xHeight < 0u || xHeight >= uniforms.x_shape[2]) {
            continue;
          }

          for (var wWidth: u32 = 0u; wWidth < uniforms.w_shape[3]; wWidth++) {
            let xWidth = xRCCorner.y + wWidth * uniforms.dilations[1];
            if (xWidth < 0u || xWidth >= uniforms.x_shape[3]) {
              continue;
            }

            let xVal = ${f.get("batch","input_channel","xHeight","xWidth")};
            let wVal = ${k.get("output_channel","wInChannel","wHeight","wWidth")};
            value += xVal * wVal;
          }
        }
      }
      `;return`
  ${J.registerUniforms(d).declareVariables(...e,L)}

  ${J.mainStart()}
    ${J.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}

    let outputIndices = ${L.offsetToIndices("global_idx")};
    let batch: u32 = outputIndices[0];
    let output_channel: u32 = outputIndices[${E?3:1}];
    let xRCCorner: vec2<u32> = vec2<u32>(outputIndices[${E?1:2}], outputIndices[${E?2:3}]) * uniforms.strides - uniforms.pads;
    let group_id: u32 = output_channel * ${v} / uniforms.output_channels_per_group;
    var in_channel_offset = group_id * uniforms.w_shape[${E?2:1}];

    var value: ${L.type.value} = ${L.type.value}(0);
    ${y}
    ${b}
    ${U}
    ${L.setByOffset("global_idx","value")}
  }`};return{name:"GroupedConv",shaderCache:{hint:`${o.cacheKey}_${v}`,inputDependencies:F},getRunData:()=>({outputs:[{dims:u?u(n):n,dataType:a[0].dataType}],dispatchGroup:{x:Math.ceil(x/64)},programUniforms:S}),getShaderSource:j}},r3=(a,o,n,u)=>{let m=a.length>2,b=Pr(n[3]),C=Pr(n[2]),w=Ue.size(n)/b/C,E=[a[0].dims[0],a[0].dims[1],a[0].dims[2],a[0].dims[3]/b],B=[a[1].dims[0],a[1].dims[1],a[1].dims[2],a[1].dims[3]/b],D=[n[0],n[1],n[2],n[3]/b],v=[{type:12,data:w},{type:6,data:[o.strides[0],o.strides[1]]},{type:6,data:[o.pads[0],o.pads[1]]}];Pi(o,v),v.push(...XA(E,B,D));let x=(C-1)*o.strides[1]+B[1],S=F=>{let j=YA("output",a[0].dataType,D.length,b),J=ds(j.type.tensor),L=Ti(o,j.type.value,J),N=$e("x",a[0].dataType,E.length,b),U=$e("w",a[1].dataType,B.length,b),f=[N,U];m&&f.push($e("b",a[2].dataType,a[2].dims,b));let k=m?"value += b[output_channel];":"",e=[{name:"output_size",type:"u32"},{name:"strides",type:"i32",length:2},{name:"pads",type:"i32",length:2}];return Gi(o,e),`
  ${F.registerUniforms(e).declareVariables(...f,j)}
  ${F.mainStart()}
    ${F.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
    let width0 = uniforms.output_shape[3];
    let output_channel = global_idx % width0;
    var index1 = global_idx / width0;
    let width1 = uniforms.output_shape[2] / ${C}u;
    let col = (index1 % width1) * ${C}u;
    index1 = index1 / width1;
    let row = index1 % uniforms.output_shape[1];
    let batch = index1 / uniforms.output_shape[1];

    let x_corner = vec2<i32>(i32(row), i32(col)) * uniforms.strides - uniforms.pads;

    var x_vals: array<${N.type.value}, ${x}>;
    var values: array<${j.type.value}, ${C}>;
    let input_channel = output_channel;
    // Use constant instead of uniform can give better performance for w's height/width.
    for (var w_height: u32 = 0u; w_height < ${B[0]}; w_height++) {
      let x_height = x_corner.x + i32(w_height);
      if (x_height >= 0 && u32(x_height) < uniforms.x_shape[1]) {
        for (var i = 0; i < ${x}; i++) {
          let x_width = x_corner.y + i;
          if (x_width >= 0 && u32(x_width) < uniforms.x_shape[2]) {
            x_vals[i] = ${N.get("batch","u32(x_height)","u32(x_width)","input_channel")};
          } else {
            x_vals[i] = ${N.type.value}(0);
          }
        }
        for (var w_width: u32 = 0u; w_width < ${B[1]}; w_width++) {
          let w_val = ${U.get("w_height","w_width","0","output_channel")};
          for (var i = 0u; i < ${C}u; i++) {
            values[i] = fma(x_vals[i * u32(uniforms.strides[1]) + w_width], w_val, values[i]);
          }
        }
      }
    }

    for (var i = 0u; i < ${C}u; i++) {
      var value = values[i];
      ${k}
      ${L}
      ${j.set("batch","row","col + i","output_channel","value")};
    }
  }`};return{name:"GroupedConv-Vectorize",shaderCache:{hint:`${o.cacheKey};${b};${C};${x};${B[0]};${B[1]}`,inputDependencies:m?["rank","rank","type"]:["rank","rank"]},getRunData:()=>({outputs:[{dims:u?u(n):n,dataType:a[0].dataType}],dispatchGroup:{x:Math.ceil(w/64)},programUniforms:v}),getShaderSource:S}}}),Tg,D0,Pg,T0,nc,d2,Gg,Qg,ic,U6=hA(()=>{ft(),Y6(),V6(),Oc(),H6(),Fi(),Sc(),qn(),Tg=(a,o,n,u,m,b)=>{let C=a[0],w=a.slice(b?1:2,b?3:4),E=w.length,B=o[0],D=o.slice(2).map((x,S)=>x+(x-1)*(n[S]-1)),v=w.map((x,S)=>x+u[S]+u[S+E]).map((x,S)=>Math.floor((x-D[S]+m[S])/m[S]));return v.splice(0,0,C),v.splice(b?3:1,0,B),v},D0=[2,3,1,0],Pg=(a,o)=>{if(!a||a.length!==2&&a.length!==3)throw new Error("Conv requires 2 or 3 inputs");if(a[0].dims.length>5)throw new Error("greater than 5D is not supported");if(a[0].dims.length!==a[1].dims.length)throw new Error("filter does not have same dimension as input");let n=a[0].dims[o.format==="NHWC"?a[0].dims.length-1:1],u=a[1].dims[1]*o.group;if(n!==u)throw new Error("FILTER_IN_CHANNEL should be equal to DATA_CHANNEL");if(a.length===3&&(a[2].dims.length!==1||a[1].dims[0]!==a[2].dims[0]))throw new Error("invalid bias");let m=a[0].dims.length-2;if(o.dilations.length!==m)throw new Error(`dilations should be ${m}D`);if(o.strides.length!==m)throw new Error(`strides should be ${m}D`);if(o.pads.length!==m*2)throw new Error(`pads should be ${m*2}D`);if(o.kernelShape.length!==0&&o.kernelShape.length!==a[1].dims.length-2)throw new Error("invalid kernel shape")},T0=(a,o)=>{let n=a.kernelShape.slice();n.length<o[1].dims.length-2&&n.push(...Array(o[1].dims.length-2-n.length).fill(0));for(let b=2;b<o[1].dims.length;++b)n[b-2]===0&&(n[b-2]=o[1].dims[b]);let u=a.pads.slice();V0.adjustPadsBasedOnAutoPad(o[0].dims,a.strides,a.dilations,n,u,a.format==="NHWC",a.autoPad);let m=Object.assign({},a);return Object.assign(m,{kernelShape:n,pads:u}),m},nc=a=>{let o=Gc(a),n=a.format,u=["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][a.auto_pad],m=a.dilations,b=a.group,C=a.kernel_shape,w=a.pads,E=a.strides,B=a.w_is_const();return{autoPad:u,format:n,dilations:m,group:b,kernelShape:C,pads:w,strides:E,wIsConst:B,...o,cacheKey:`${a.format};${o.activation};`}},d2=(a,o,n,u)=>{let m=n.format==="NHWC",b=Tg(o[0].dims,o[1].dims,n.dilations,n.pads,n.strides,m);if(n.group!==1){let e=[o[0]];if(m){let d=a.kernelCustomData.wT??a.compute(ia(o[1],D0),{inputs:[1],outputs:[n.wIsConst?-2:-1]})[0];n.wIsConst&&!a.kernelCustomData.wT&&(a.kernelCustomData.wT=d),e.push(d)}else e.push(o[1]);o.length===3&&e.push(o[2]),!a.adapterInfo.isArchitecture("ampere")&&m&&o[1].dims[0]===n.group&&o[1].dims[1]===1&&n.dilations[0]===1&&n.dilations[1]===1?a.compute(r3(e,n,b,u),{inputs:e}):a.compute(t3(e,n,b,u),{inputs:e});return}let C=o.length===3,w=o[0].dims[m?1:2],E=o[0].dims[m?2:3],B=o[0].dims[m?3:1],D=o[1].dims[2],v=o[1].dims[3],x=b[m?1:2],S=b[m?2:3],F=b[m?3:1],j=m&&D===w&&v===E&&n.pads[0]===0&&n.pads[1]===0;if(j||D===1&&v===1&&n.dilations[0]===1&&n.dilations[1]===1&&n.strides[0]===1&&n.strides[1]===1&&n.pads[0]===0&&n.pads[1]===0){let e=b[0],d,y,ee,T=[];if(m){let $=a.kernelCustomData.wT??a.compute(ia(o[1],D0),{inputs:[1],outputs:[n.wIsConst?-2:-1]})[0];if(n.wIsConst&&!a.kernelCustomData.wT&&(a.kernelCustomData.wT=$),j){let be=w*E*B;d=o[0].reshape([1,e,be]),y=$.reshape([1,be,F]),ee=[1,e,F]}else d=o[0].reshape([e,w*E,B]),y=$.reshape([1,B,F]),ee=[e,x*S,F];T.push(d),T.push(y)}else d=o[0].reshape([e,B,w*E]),y=o[1].reshape([1,F,B]),ee=[e,F,x*S],T.push(y),T.push(d);C&&T.push(o[2]);let O=ee[2],we=T[0].dims[T[0].dims.length-1];O<8&&we<8?a.compute(Fc(T,n,b,ee,m,u),{inputs:T}):a.compute(U0(T,n,b,ee,m,u),{inputs:T});return}let J=!0,L=a.kernelCustomData.wT??a.compute(ia(o[1],D0),{inputs:[1],outputs:[n.wIsConst?-2:-1]})[0];n.wIsConst&&!a.kernelCustomData.wT&&(a.kernelCustomData.wT=L);let N=[o[0],L];C&&N.push(o[2]);let U=m?x*S:F,f=m?F:x*S,k=D*v*B;a.compute($h(N,n,b,U,f,k,C,J,u),{inputs:N})},Gg=(a,o)=>{let n=o.format==="NHWC",u=[a.inputs[0].reshape(n?[a.inputs[0].dims[0],1,a.inputs[0].dims[1],a.inputs[0].dims[2]]:[a.inputs[0].dims[0],a.inputs[0].dims[1],1,a.inputs[0].dims[2]]),a.inputs[1].reshape([a.inputs[1].dims[0],a.inputs[1].dims[1],1,a.inputs[1].dims[2]])];a.inputs.length===3&&u.push(a.inputs[2]);let m=[0,o.pads[0],0,o.pads[1]],b=[1].concat(o.strides),C=[1].concat(o.dilations),w=[1].concat(o.kernelShape),E=T0({...o,pads:m,strides:b,dilations:C,kernelShape:w},u);d2(a,u,E,B=>n?[B[0],B[2],B[3]]:[B[0],B[1],B[3]])},Qg=(a,o,n)=>{let u=n.format==="NHWC"?"channelsLast":"channelsFirst",m=T0(n,o),b=n.autoPad==="NOTSET"?n.pads:n.autoPad,C=e3(o[0].dims,o[1].dims,n.strides,n.dilations,b,!1,u);a.compute(A3(o,m,C.outShape,[C.filterDepth,C.filterHeight,C.filterWidth],[C.padInfo.front,C.padInfo.top,C.padInfo.left],u))},ic=(a,o)=>{if(Pg(a.inputs,o),a.inputs[0].dims.length===3)Gg(a,o);else if(a.inputs[0].dims.length===5)Qg(a,a.inputs,o);else{let n=T0(o,a.inputs);d2(a,a.inputs,n)}}}),s3,K6=hA(()=>{it(),Mn(),ft(),ht(),s3=(a,o,n)=>{let u=a.length>2,m=o.outputShape,b=o.format==="NHWC",C=o.group,w=a[1].dims,E=w[2]/C,B=w[3],D=b?Pr(E):1,v=b&&B===1&&E>=4,x=v?Math.floor(E/4)*4:Math.floor(E/D)*D,S=E-x,F=b?Pr(B):1,j=b?B===1?D:F:1,J=Ue.size(m)/F,L=[Math.ceil(J/64),1,1];xt("verbose",()=>`[conv2d_backprop_webgpu] dispatch = ${L}`);let N=["rank","rank"],U=[o.strides[0],o.strides[1]],f=[o.kernelShape[b?1:2],o.kernelShape[b?2:3]],k=[o.dilations[0],o.dilations[1]],e=[f[0]+(o.dilations[0]<=1?0:(o.kernelShape[b?1:2]-1)*(o.dilations[0]-1)),f[1]+(o.dilations[1]<=1?0:(o.kernelShape[b?2:3]-1)*(o.dilations[1]-1))],d=[e[0]-1-Math.floor((o.pads[0]+o.pads[2])/2),e[1]-1-Math.floor((o.pads[1]+o.pads[3])/2)],y=[{type:12,data:J},{type:12,data:U},{type:12,data:f},{type:12,data:k},{type:12,data:e},{type:6,data:d},{type:12,data:x},{type:12,data:E},{type:12,data:B},...XA(a[0].dims,a[1].dims)];u&&(y.push(...XA(a[2].dims)),N.push("rank")),y.push(...XA(m));let ee=T=>{let O=[{name:"output_size",type:"u32"},{name:"strides",type:"u32",length:U.length},{name:"filter_dims",type:"u32",length:f.length},{name:"dilations",type:"u32",length:f.length},{name:"effective_filter_dims",type:"u32",length:e.length},{name:"pads",type:"i32",length:d.length},{name:"input_channels_per_group_int",type:"u32"},{name:"input_channels_per_group",type:"u32"},{name:"output_channels_per_group",type:"u32"}],we=ds(a[0].dataType),$=b?1:2,be=b?2:3,Ce=b?3:1,Ee=$e("W",a[1].dataType,a[1].dims.length,j),Be=$e("Dy",a[0].dataType,a[0].dims.length,D),ve=[Be,Ee];u&&ve.push($e("bias",a[2].dataType,[m[Ce]].length,F));let Ne=YA("result",a[0].dataType,m.length,F),Fe=()=>{let pe="";if(v)D===4?pe+=`
        let xValue = ${Be.getByOffset("x_offset")};
        let wValue = ${Ee.getByOffset("w_offset")};
        dotProd = dotProd + dot(xValue, wValue);
        x_offset += 1u;
        w_offset += 1u;`:D===2?pe+=`
          dotProd = dotProd + dot(vec4<${we}>(${Be.getByOffset("x_offset")}, ${Be.getByOffset("x_offset + 1u")}), vec4<${we}>(${Ee.getByOffset("w_offset")}, ${Ee.getByOffset("w_offset + 1u")}));
          x_offset += 2u;
          w_offset += 2u;`:D===1&&(pe+=`
          dotProd = dotProd + dot(vec4<${we}>(${Be.getByOffset("x_offset")}, ${Be.getByOffset("x_offset + 1u")}, ${Be.getByOffset("x_offset + 2u")}, ${Be.getByOffset("x_offset + 3u")}), vec4<${we}>(${Ee.getByOffset("w_offset")}, ${Ee.getByOffset("w_offset + 1u")}, ${Ee.getByOffset("w_offset + 2u")}, ${Ee.getByOffset("w_offset + 3u")}));
          x_offset += 4u;
          w_offset += 4u;`);else if(pe+=`
                  let xValue = ${b?Be.getByOffset(`${Be.indicesToOffset(`${Be.type.indices}(batch, idyR, idyC, inputChannel)`)} / ${D}`):Be.get("batch","inputChannel","idyR","idyC")};
        `,D===1)pe+=`
          let w_offset = ${Ee.indicesToOffset(`${Ee.type.indices}(u32(wRPerm), u32(wCPerm), inputChannel, wOutChannel)`)};
          let wValue = ${Ee.getByOffset(`w_offset / ${j}`)};
          dotProd = dotProd + xValue * wValue;`;else for(let oe=0;oe<D;oe++)pe+=`
            let wValue${oe} = ${Ee.getByOffset(`${Ee.indicesToOffset(`${Ee.type.indices}(u32(wRPerm), u32(wCPerm), inputChannel + ${oe}, wOutChannel)`)} / ${j}`)};
            dotProd = dotProd + xValue[${oe}] * wValue${oe};`;return pe},le=()=>{if(S===0)return"";if(!v)throw new Error(`packInputAs4 ${v} is not true.`);let pe="";if(D===1){pe+="dotProd = dotProd";for(let oe=0;oe<S;oe++)pe+=`
            + ${Be.getByOffset(`x_offset + ${oe}`)} * ${Ee.getByOffset(`w_offset + ${oe}`)}`;pe+=";"}else if(D===2){if(S!==2)throw new Error(`Invalid inputChannelsRemainder ${S}.`);pe+=`
          let xValue = ${Be.getByOffset("x_offset")};
          let wValue = ${Ee.getByOffset("w_offset")};
          dotProd = dotProd + dot(xValue, wValue);`}return pe},Ae=`
            let outputIndices = ${Ne.offsetToIndices(`global_idx * ${F}`)};
            let batch = ${Ne.indicesGet("outputIndices",0)};
            let d1 = ${Ne.indicesGet("outputIndices",Ce)};
            let r = ${Ne.indicesGet("outputIndices",$)};
            let c = ${Ne.indicesGet("outputIndices",be)};
            let dyCorner = vec2<i32>(i32(r), i32(c)) - uniforms.pads;
            let dyRCorner = dyCorner.x;
            let dyCCorner = dyCorner.y;
            let groupId = d1 / uniforms.output_channels_per_group;
            let wOutChannel = d1 - groupId * uniforms.output_channels_per_group;
            // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).
            // ? = to be determined. : = across all values in that axis.
            var dotProd = ${Ne.type.value}(0.0);
            var wR: u32 = 0;
            if (uniforms.dilations.x == 1) {
              // Minimum wR >= 0 that satisfies (dyRCorner + wR) % (uniforms.strides.x) == 0
              wR = u32(((dyRCorner + i32(uniforms.strides.x) - 1) / i32(uniforms.strides.x)) * i32(uniforms.strides.x) - dyRCorner);
            }
            for (; wR < uniforms.effective_filter_dims.x; wR = wR + 1) {
              if (wR % uniforms.dilations.x != 0) {
                continue;
              }
              let dyR = (${we}(dyRCorner) + ${we}(wR)) / ${we}(uniforms.strides[0]);
              let wRPerm = uniforms.filter_dims.x - 1 - wR / uniforms.dilations.x;
              if (dyR < 0.0 || dyR >= ${we}(uniforms.Dy_shape[${$}]) || fract(dyR) > 0.0 ||
                  wRPerm < 0) {
                continue;
              }
              let idyR: u32 = u32(dyR);
              var wC: u32 = 0;
              if (uniforms.dilations.y == 1) {
                // Minimum wC >= 0 that satisfies (dyCCorner + wC) % (uniforms.strides.y) == 0
                wC = u32(((dyCCorner + i32(uniforms.strides.y) - 1) / i32(uniforms.strides.y)) * i32(uniforms.strides.y) - dyCCorner);
              }
              for (; wC < uniforms.effective_filter_dims.y; wC = wC + 1) {
                if (wC % uniforms.dilations.y != 0) {
                  continue;
                }
                let dyC = (${we}(dyCCorner) + ${we}(wC)) / ${we}(uniforms.strides.y);
                let wCPerm = uniforms.filter_dims.y - 1 - wC / uniforms.dilations.y;
                if (dyC < 0.0 || dyC >= ${we}(uniforms.Dy_shape[${be}]) ||
                    fract(dyC) > 0.0 || wCPerm < 0) {
                  continue;
                }
                let idyC: u32 = u32(dyC);
                var inputChannel = groupId * uniforms.input_channels_per_group;
                ${v?`
                var x_offset = ${Be.indicesToOffset(`${Be.type.indices}(batch, idyR, idyC, inputChannel)`)} / ${D};
                var w_offset = ${Ee.indicesToOffset(`${Ee.type.indices}(wRPerm, wCPerm, inputChannel, wOutChannel)`)} / ${j};
                  `:""}
                for (var d2: u32 = 0; d2 < uniforms.input_channels_per_group_int; d2 = d2 + ${v?4:D}) {
                  ${Fe()}
                  inputChannel = inputChannel + ${v?4:D};
                }
                ${le()}
                wC = wC + uniforms.strides.y - 1;
              }
              wR = wR + uniforms.strides[0] - 1;
            }
            let value = dotProd${u?` + bias[d1 / ${F}]`:""};
            ${Ne.setByOffset("global_idx","value")};
          `;return`
    ${T.registerUniforms(O).declareVariables(...ve,Ne)}
      ${T.mainStart()}
      ${T.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")};
    ${Ae}}`};return{name:"ConvTranspose2D",shaderCache:{hint:`${o.cacheKey};${D}${j}${F}${v}${S}`,inputDependencies:N},getRunData:()=>({dispatchGroup:{x:L[0],y:L[1],z:L[2]},outputs:[{dims:n?n(m):m,dataType:a[0].dataType}],programUniforms:y}),getShaderSource:ee}}}),Fg,Sg,Og,f2,a3,zg,g2,Ng,n3,X6=hA(()=>{K6(),Fi(),qn(),Fg=(a,o,n,u,m,b)=>(a-1)*o+n+(u-1)*m+1-b,Sg=(a,o,n,u,m)=>{let b=Math.floor(a/2);o==="SAME_UPPER"?(n[u]=b,n[m]=a-b):o==="SAME_LOWER"&&(n[u]=a-b,n[m]=b)},Og=(a,o,n,u,m,b,C,w,E,B)=>{let D=a.length-2,v=B.length===0;E.length<D&&E.push(...Array(D-E.length).fill(0));let x=a[0],S=o[w?3:1]*m;for(let F=0,j=a.length-D-(w?1:0);F<D;++F,++j){let J=a[j],L=v?J*C[F]:B[F],N=Fg(J,C[F],b[F],o[j],n[F],L);Sg(N,u,b,F,F+D),v&&B.push(C[F]*(J-1)+E[F]+(o[j]-1)*n[F]+1-b[F]-b[F+D])}B.splice(0,0,x),B.splice(w?3:1,0,S)},f2=(a,o)=>{let n=a.kernelShape.slice();if(a.kernelShape.length===0||a.kernelShape.reduce((v,x)=>v*x,1)===0){n.length=0;for(let v=2;v<o[1].dims.length;++v)n.push(o[1].dims[v])}let u=a.format==="NHWC";n.splice(0,0,o[1].dims[0]),n.splice(u?3:1,0,o[1].dims[1]);let m=a.pads.slice(),b=a.outputShape.slice(),C=a.outputPadding.slice(),w=o[0].dims,E=a.dilations.slice();if(E.reduce((v,x)=>v+x,0)===0){let v=o[0].dims.length-2;E=new Array(v).fill(1)}let B=a.strides.slice();if(B.reduce((v,x)=>v+x,0)===0){let v=o[0].dims.length-2;B=new Array(v).fill(1)}Og(w,n,E,a.autoPad,a.group,m,B,u,C,b);let D=Object.assign({},a);return Object.assign(D,{kernelShape:n,pads:m,outputPadding:C,outputShape:b,dilations:E,strides:B}),D},a3=a=>{let o=Gc(a),n=a.format,u=["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][typeof a.autoPad>"u"?0:a.autoPad],m=a.dilations,b=a.group,C=a.kernelShape,w=a.pads,E=a.strides,B=a.wIsConst(),D=a.outputPadding,v=a.outputShape;return{autoPad:u,format:n,dilations:m,group:b,kernelShape:C,outputPadding:D,outputShape:v,pads:w,strides:E,wIsConst:B,...o,cacheKey:`${a.format};${o.activation};`}},zg=(a,o)=>{if(!a||a.length!==2&&a.length!==3)throw new Error("Conv requires 2 or 3 inputs");if(a[0].dims.length!==4&&a[0].dims.length!==3)throw new Error("currently only support 2-dimensional conv");if(a[0].dims.length!==a[1].dims.length)throw new Error("filter does not have same dimension as input");let n=a[0].dims[o.format==="NHWC"?a[0].dims.length-1:1],u=a[1].dims[0];if(n!==u)throw new Error("FILTER_IN_CHANNEL should be equal to DATA_CHANNEL");let m=a[1].dims[1]*o.group;if(a.length===3&&(a[2].dims.length!==1||a[2].dims[0]!==m))throw new Error("invalid bias");let b=a[0].dims.length-2;if(o.dilations.reduce((C,w)=>C+w,0)>0&&o.dilations.length!==b)throw new Error(`dilations should be ${b}D`);if(o.strides.reduce((C,w)=>C+w,0)>0&&o.strides.length!==b)throw new Error(`strides should be ${b}D`);if(o.pads.reduce((C,w)=>C+w,0)>0&&o.pads.length!==b*2)throw new Error(`pads should be ${b*2}D`);if(o.outputPadding.length!==b&&o.outputPadding.length!==0)throw new Error(`output_padding should be ${b}D`);if(o.kernelShape.reduce((C,w)=>C+w,0)>0&&o.kernelShape.length!==0&&o.kernelShape.length!==a[1].dims.length-2)throw new Error("invalid kernel shape");if(o.outputShape.length!==0&&o.outputShape.length!==a[0].dims.length-2)throw new Error("invalid output shape")},g2=(a,o,n,u)=>{let m=a.kernelCustomData.wT??a.compute(ia(o[1],[2,3,0,1]),{inputs:[1],outputs:[n.wIsConst?-2:-1]})[0];n.wIsConst&&!a.kernelCustomData.wT&&(a.kernelCustomData.wT=m);let b=[o[0],m];o.length===3&&b.push(o[2]),a.compute(s3(b,n,u),{inputs:b})},Ng=(a,o)=>{let n=o.format==="NHWC",u=[a.inputs[0].reshape(n?[a.inputs[0].dims[0],1,a.inputs[0].dims[1],a.inputs[0].dims[2]]:[a.inputs[0].dims[0],a.inputs[0].dims[1],1,a.inputs[0].dims[2]]),a.inputs[1].reshape([a.inputs[1].dims[0],a.inputs[1].dims[1],1,a.inputs[1].dims[2]])];a.inputs.length===3&&u.push(a.inputs[2]);let m=o.kernelShape;(m.length===0||m[0]===0)&&(m=[a.inputs[1].dims[2]]);let b=o.dilations;(b.length===0||b[0]===0)&&(b=[1]);let C=o.strides;(C.length===0||C[0]===0)&&(C=[1]);let w=o.pads;w.length===0&&(w=[0,0]),w=[0,w[0],0,w[1]],C=[1].concat(C),b=[1].concat(b),m=[1].concat(m);let E=o.outputPadding;E=[0].concat(E);let B=f2({...o,pads:w,strides:C,dilations:b,kernelShape:m,outputPadding:E},u);g2(a,u,B,D=>n?[D[0],D[2],D[3]]:[D[0],D[1],D[3]])},n3=(a,o)=>{if(zg(a.inputs,o),a.inputs[0].dims.length===3)Ng(a,o);else{let n=f2(o,a.inputs);g2(a,a.inputs,n)}}}),Lg,i3,o3,Z6=hA(()=>{it(),ft(),Nr(),ht(),Lg=(a,o,n,u)=>{let m=Ue.size(o),b=o.length,C=$e("input",a,b),w=YA("output",a,b),E=n.dataType===6?n.getInt32Array()[0]:Number(n.getBigInt64Array()[0]),B=Ue.normalizeAxis(E,b),D=v=>{let x=` i32(${C.indicesGet("inputIndices","uniforms.axis")}) `,S=HA("uniforms.input_shape","uniforms.axis",b),F=u.reverse?x+(u.exclusive?" + 1":""):"0",j=u.reverse?S:x+(u.exclusive?"":" + 1");return`
                ${v.registerUniform("outputSize","u32").registerUniform("axis","u32").declareVariables(C,w)}
                ${v.mainStart()}
                  ${v.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
                  var inputIndices = ${w.offsetToIndices("global_idx")};
                  var sum = ${w.type.value}(0);
                  let first : i32 = ${F};
                  let last : i32 = ${j};
                  for (var i : i32 = first; i < last; i++) {
                    ${C.indicesSet("inputIndices","uniforms.axis","u32(i)")};
                    sum = sum + ${C.getByIndices("inputIndices")};
                  }
                  ${w.setByOffset("global_idx","sum")};
                }`};return{name:"CumSum",shaderCache:{hint:u.cacheKey,inputDependencies:["rank"]},getRunData:()=>({outputs:[{dims:o,dataType:a}],dispatchGroup:{x:Math.ceil(m/64)},programUniforms:[{type:12,data:m},{type:12,data:B},...XA(o,o)]}),getShaderSource:D}},i3=(a,o)=>{let n=a.inputs[0].dims,u=a.inputs[0].dataType,m=a.inputs[1];a.compute(Lg(u,n,m,o),{inputs:[0]})},o3=a=>{let o=a.exclusive===1,n=a.reverse===1;return Nt({exclusive:o,reverse:n})}}),_g,Rg,jg,l3,c3,J6=hA(()=>{it(),ft(),Nr(),ht(),_g=a=>{if(!a||a.length!==1)throw new Error("DepthToSpace requires 1 input.");if(a[0].dims.length!==4)throw new Error("DepthToSpace requires 4D input.")},Rg=(a,o,n,u)=>{let m=[];m.push(`fn perm(i: ${u.type.indices}) -> ${n.type.indices} {
    var a: ${n.type.indices};`);for(let b=0;b<o;++b)m.push(n.indicesSet("a",a[b],`i[${b}]`));return m.push("return a;}"),m.join(`
`)},jg=(a,o)=>{let n,u,m,b,C,w,E=o.format==="NHWC",B=o.blocksize,D=o.mode==="DCR";E?([n,u,m,b]=a.dims,C=D?[n,u,m,B,B,b/B**2]:[n,u,m,b/B**2,B,B],w=D?[0,1,3,2,4,5]:[0,1,4,2,5,3]):([n,u,m,b]=[a.dims[0],a.dims[2],a.dims[3],a.dims[1]],C=D?[n,B,B,b/B**2,u,m]:[n,b/B**2,B,B,u,m],w=D?[0,3,4,1,5,2]:[0,1,4,2,5,3]);let v=a.reshape(C),x=v.dims.length,S=a.dataType,F=$e("a",S,x),j=YA("output",S,x),J=L=>`
  ${L.registerUniform("output_size","u32").declareVariables(F,j)}

  ${Rg(w,x,F,j)}

  ${L.mainStart()}
    ${L.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}

    let indices = ${j.offsetToIndices("global_idx")};
    let aIndices = perm(indices);

    ${j.setByOffset("global_idx",F.getByIndices("aIndices"))}
  }`;return{name:"DepthToSpace",shaderCache:{hint:`${a.dims};${o.blocksize};${o.mode}`,inputDependencies:["rank"]},getRunData:L=>{let N=E?[n,u*B,m*B,b/B**2]:[n,b/B**2,u*B,m*B],U=Ue.size(N),f=v.dims,k=Ue.sortBasedOnPerm(f,w);return{outputs:[{dims:N,dataType:L[0].dataType}],dispatchGroup:{x:Math.ceil(U/64)},programUniforms:[{type:12,data:U},...XA(f,k)]}},getShaderSource:J}},l3=(a,o)=>{_g(a.inputs),a.compute(jg(a.inputs[0],o))},c3=a=>Nt({blocksize:a.blocksize,mode:a.mode,format:a.format})}),P0,zo,p2,Wg,Yg,Vg,Hg,m2,Ug,u3,d3,q6=hA(()=>{it(),ft(),Nr(),ht(),P0="[a-zA-Z]|\\.\\.\\.",zo="("+P0+")+",p2="^"+zo+"$",Wg="("+zo+",)*"+zo,Yg="^"+Wg+"$",Vg=class{constructor(a=-1){this.symbolToIndices=new Map,this.inputIndex=a}addSymbol(a,o){let n=this.symbolToIndices.get(a);n===void 0?n=[o]:n.push(o),this.symbolToIndices.set(a,n)}},Hg=class{constructor(a,o){this.equation=o,this.hasEllipsis=!1,this.symbolToInfo=new Map,this.lhs=new Array,this.outputDims=[];let[n,u]=o.includes("->")?o.split("->",2):[o,""];if(!n.match(RegExp(Yg)))throw new Error("Invalid LHS term");if(n.split(",").forEach((m,b)=>{let C=a[b].dims.slice();if(!m.match(RegExp(p2)))throw new Error("Invalid LHS term");let w=this.processTerm(m,!0,C,b);this.lhs.push(w)}),u==="")u+=[...this.symbolToInfo.entries()].filter(([m,b])=>b.count===1||m==="...").map(([m])=>m).join("");else if(!u.match(RegExp(zo)))throw new Error("Invalid RHS");u.match(RegExp(P0,"g"))?.forEach(m=>{if(m==="...")this.outputDims=this.outputDims.concat(this.ellipsisDims);else{let b=this.symbolToInfo.get(m);if(b===void 0)throw new Error("Invalid RHS symbol");this.outputDims.push(b.dimValue)}}),this.rhs=this.processTerm(u,!1,this.outputDims)}addSymbol(a,o,n){let u=this.symbolToInfo.get(a);if(u!==void 0){if(u.dimValue!==o&&u.count!==1)throw new Error("Dimension mismatch");u.count++,u.inputIndices.push(n)}else u={count:1,dimValue:o,inputIndices:[n]};this.symbolToInfo.set(a,u)}processTerm(a,o,n,u=-1){let m=n.length,b=!1,C=[],w=0;if(!a.match(RegExp(p2))&&!o&&a!=="")throw new Error("Invalid LHS term");let E=a.match(RegExp(P0,"g")),B=new Vg(u);return E?.forEach((D,v)=>{if(D==="..."){if(b)throw new Error("Only one ellipsis is allowed per input term");b=!0;let x=m-E.length+1;if(x<0)throw new Error("Ellipsis out of bounds");if(C=n.slice(w,w+x),this.hasEllipsis){if(this.ellipsisDims.length!==C.length||this.ellipsisDims.toString()!==C.toString())throw new Error("Ellipsis dimensions mismatch")}else if(o)this.hasEllipsis=!0,this.ellipsisDims=C;else throw new Error("Ellipsis must be specified in the LHS");for(let S=0;S<C.length;S++){let F=String.fromCharCode(48+S);B.addSymbol(F,v+S),this.addSymbol(F,n[w++],u)}}else B.addSymbol(D,v+(this.hasEllipsis?this.ellipsisDims.length-1:0)),this.addSymbol(D,n[w++],u)}),B}},m2=a=>a+"_max",Ug=(a,o,n,u)=>{let m=a.map(B=>B.length).map((B,D)=>$e(`input${D}`,o,B)),b=Ue.size(u),C=YA("output",o,u.length),w=[...n.symbolToInfo.keys()].filter(B=>!n.rhs.symbolToIndices.has(B)),E=B=>{let D=[],v="var prod = 1.0;",x="var sum = 0.0;",S="sum += prod;",F=[],j=[],J=[],L=[],N=n.symbolToInfo.size===n.rhs.symbolToIndices.size;n.symbolToInfo.forEach((f,k)=>{if(n.rhs.symbolToIndices.has(k)){let e=n.rhs.symbolToIndices.get(k)?.[0];e!==void 0&&n.lhs.forEach((d,y)=>{if(f.inputIndices.includes(y)){let ee=d.symbolToIndices.get(k);if(ee===void 0)throw new Error("Invalid symbol error");ee.forEach(T=>{D.push(`${m[y].indicesSet(`input${y}Indices`,T,C.indicesGet("outputIndices",e))}`)})}})}else n.lhs.forEach((e,d)=>{if(f.inputIndices.includes(d)){let y=e.symbolToIndices.get(k);if(y===void 0)throw new Error("Invalid symbol error");y.forEach(ee=>{F.push(`${m[d].indicesSet(`input${d}Indices`,ee,`${k}`)}`)}),L.push(`prod *= ${m[d].getByIndices(`input${d}Indices`)};`)}}),j.push(`for(var ${k}: u32 = 0; ${k} < uniforms.${m2(k)}; ${k}++) {`),J.push("}")});let U=N?[...D,`let sum = ${m.map((f,k)=>f.getByIndices(`input${k}Indices`)).join(" * ")};`]:[...D,x,...j,...F,v,...L,S,...J];return`
            ${B.registerUniforms(w.map(f=>({name:`${m2(f)}`,type:"u32"}))).registerUniform("outputSize","u32").declareVariables(...m,C)}

            ${B.mainStart()}
            ${B.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
            var outputIndices = ${C.offsetToIndices("global_idx")};
            ${m.map((f,k)=>`var input${k}Indices: ${m[k].type.indices};`).join(`
`)}
            ${U.join(`
`)};
            ${C.setByOffset("global_idx","sum")};
          }`};return{name:"Einsum",shaderCache:{hint:n.equation,inputDependencies:a.map(()=>"rank")},getRunData:()=>{let B=w.filter(v=>n.symbolToInfo.has(v)).map(v=>({type:12,data:n.symbolToInfo.get(v)?.dimValue||0}));B.push({type:12,data:b});let D=a.map((v,x)=>[...XA(v)]).reduce((v,x)=>v.concat(x),B);return D.push(...XA(u)),{outputs:[{dims:u,dataType:o}],dispatchGroup:{x:Math.ceil(b/64)},programUniforms:D}},getShaderSource:E}},u3=(a,o)=>{let n=new Hg(a.inputs,o.equation),u=n.outputDims,m=a.inputs.map((b,C)=>b.dims);a.compute(Ug(m,a.inputs[0].dataType,n,u))},d3=a=>{let o=a.equation.replace(/\s+/g,"");return Nt({equation:o})}}),Kg,h2,Xg,Zg,f3,$6=hA(()=>{it(),ft(),ht(),Kg=a=>{if(!a||a.length!==2)throw new Error("Expand requires 2 input.");let o=a[0].dims,n=Array.from(a[1].getBigInt64Array(),Number),u=n.length<o.length?0:n.length-o.length,m=o.length<n.length?0:o.length-n.length;for(;u<n.length&&m<o.length;++u,++m)if(n[u]!==o[m]&&n[u]!==1&&o[m]!==1)throw new Error("Expand requires shape to be broadcastable to input")},h2=(a,o)=>{let n=a.length-o.length,u=[];for(let m=0;m<n;++m)u.push(a[m]);for(let m=0;m<o.length;++m)u.push(o[m]===1?a[m+n]:o[m]);return u},Xg=(a,o)=>a.length>o.length?h2(a,o):h2(o,a),Zg=a=>{let o=a[0].dims,n=Array.from(a[1].getBigInt64Array(),Number),u=Xg(o,n),m=a[0].dataType,b=m===9||Ue.size(o)===1,C=m===9||o.length>0&&o[o.length-1]%4===0?4:1,w=b||u.length>0&&u[u.length-1]%4===0?4:1,E=Math.ceil(Ue.size(u)/w),B=v=>{let x=$e("input",m,o.length,C),S=YA("output",m,u.length,w),F;if(m===9){let j=(J,L,N="")=>`
          let outputIndices${L} = ${S.offsetToIndices(`outputOffset + ${L}u`)};
          let offset${L} = ${x.broadcastedIndicesToOffset(`outputIndices${L}`,S)};
          let index${L} = offset${L} / 4u;
          let component${L} = offset${L} % 4u;
          ${J}[${L}] = ${N}(${x.getByOffset(`index${L}`)}[component${L}]);
        `;F=`
        let outputOffset = global_idx * ${w};
        var data = vec4<u32>(0);
        ${j("data",0,"u32")}
        ${j("data",1,"u32")}
        ${j("data",2,"u32")}
        ${j("data",3,"u32")}
        ${S.setByOffset("global_idx","data")}
      }`}else F=`
        let outputIndices = ${S.offsetToIndices(`global_idx * ${w}`)};
        let inputOffset = ${x.broadcastedIndicesToOffset("outputIndices",S)};
        let data = ${S.type.value}(${x.getByOffset(`inputOffset / ${C}`)});
        ${S.setByOffset("global_idx","data")}
      }`;return`
    ${v.registerUniform("vec_size","u32").declareVariables(x,S)}
    ${v.mainStart()}
    ${v.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}
    ${F}`},D=[{type:12,data:E},...XA(o,u)];return{name:"Expand",shaderCache:{hint:`${u.length};${C}${w}`,inputDependencies:["rank"]},getShaderSource:B,getRunData:()=>({outputs:[{dims:u,dataType:a[0].dataType}],dispatchGroup:{x:Math.ceil(E/64)},programUniforms:D})}},f3=a=>{Kg(a.inputs),a.compute(Zg(a.inputs),{inputs:[0]})}}),Jg,g3,eI=hA(()=>{it(),ft(),ht(),Pc(),Jg=a=>{let o=a[0].dataType,n=Ue.size(a[0].dims),u=Ue.size(a[1].dims),m=u%4===0,b=C=>{let w=$e("x",o,[1],4),E=$e("bias",o,[1],4),B=YA("y",o,[1],4),D=[{name:"output_vec_size",type:"u32"},{name:"bias_size",type:"u32"}],v=S=>`
      let bias${S}_offset: u32 = (global_idx * 4 + ${S}) % uniforms.bias_size;
      let bias${S} = ${E.getByOffset(`bias${S}_offset / 4`)}[bias${S}_offset % 4];`,x=m?`
      let bias = ${E.getByOffset("global_idx % (uniforms.bias_size / 4)")};`:`${v(0)}${v(1)}${v(2)}${v(3)}
      let bias = ${w.type.value}(bias0, bias1, bias2, bias3);`;return`${C.registerUniforms(D).declareVariables(w,E,B)}

    ${tc(ys(o))}

    ${C.mainStart(co)}
      ${C.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_vec_size")}

      let x = ${w.getByOffset("global_idx")};
      ${x}
      let x_in = x + bias;
      ${B.setByOffset("global_idx",rc("x_in"))}
    }`};return{name:"FastGeluWithBias",shaderCache:{hint:`${m}`,inputDependencies:["type","type"]},getShaderSource:b,getRunData:C=>({outputs:[{dims:C[0].dims,dataType:C[0].dataType}],programUniforms:[{type:12,data:Math.ceil(n/4)},{type:12,data:u}],dispatchGroup:{x:Math.ceil(n/co/4)}})}},g3=a=>{a.inputs.length<2||Ue.size(a.inputs[1].dims)===0?Fh(a):a.compute(Jg(a.inputs))}}),qg,$g,p3,m3,AI=hA(()=>{it(),ft(),Nr(),ht(),qg=a=>{if(!a||a.length!==2)throw new Error("Gather requires 2 inputs.")},$g=(a,o)=>{let n=a[0].dims,u=a[1].dims,m=n.length,b=Ue.normalizeAxis(o.axis,m),C=n.slice(0);C.splice(b,1,...u);let w=n[b],E=a[0].dataType===9?4:1,B=Math.ceil(Ue.size(C)/E),D=[{type:12,data:B},{type:6,data:w},{type:12,data:b},...XA(a[0].dims,a[1].dims,C)],v=x=>{let S=$e("data",a[0].dataType,a[0].dims.length,E),F=$e("inputIndices",a[1].dataType,a[1].dims.length),j=YA("output",a[0].dataType,C.length,E),J=N=>{let U=u.length,f=`var indicesIndices${N}  = ${F.type.indices}(0);`;for(let k=0;k<U;k++)f+=`${U>1?`indicesIndices${N}[${k}]`:`indicesIndices${N}`} = ${C.length>1?`outputIndices${N}[uniforms.axis + ${k}]`:`outputIndices${N}`};`;f+=`
          var idx${N} = ${F.getByIndices(`indicesIndices${N}`)};
          if (idx${N} < 0) {
            idx${N} = idx${N} + uniforms.axisDimLimit;
          }
          var dataIndices${N} : ${S.type.indices};
        `;for(let k=0,e=0;k<m;k++)k===b?(f+=`${m>1?`dataIndices${N}[${k}]`:`dataIndices${N}`} = u32(idx${N});`,e+=U):(f+=`${m>1?`dataIndices${N}[${k}]`:`dataIndices${N}`} = ${C.length>1?`outputIndices${N}[${e}]`:`outputIndices${N}`};`,e++);return f},L;if(a[0].dataType===9){let N=(U,f,k="")=>`
          let outputIndices${f} = ${j.offsetToIndices(`outputOffset + ${f}u`)};
          ${J(f)};
          let offset${f} = ${S.indicesToOffset(`dataIndices${f}`)};
          let index${f} = offset${f} / 4u;
          let component${f} = offset${f} % 4u;
          ${U}[${f}] = ${k}(${S.getByOffset(`index${f}`)}[component${f}]);
        `;L=`
        let outputOffset = global_idx * ${E};
        var value = vec4<u32>(0);
        ${N("value",0,"u32")}
        ${N("value",1,"u32")}
        ${N("value",2,"u32")}
        ${N("value",3,"u32")}
        ${j.setByOffset("global_idx","value")}
      `}else L=`
      let outputIndices = ${j.offsetToIndices("global_idx")};
      ${J("")};
      let value = ${S.getByIndices("dataIndices")};
      ${j.setByOffset("global_idx","value")};
      `;return`
      ${x.registerUniform("outputSize","u32").registerUniform("axisDimLimit","i32").registerUniform("axis","u32").declareVariables(S,F,j)}
      ${x.mainStart()}
        ${x.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
        ${L}
      }`};return{name:"Gather",shaderCache:{hint:o.cacheKey,inputDependencies:["rank","rank"]},getRunData:()=>({outputs:[{dims:C,dataType:a[0].dataType}],dispatchGroup:{x:Math.ceil(B/64)},programUniforms:D}),getShaderSource:v}},p3=a=>Nt({axis:a.axis}),m3=(a,o)=>{let n=a.inputs;qg(n),a.compute($g(a.inputs,o))}}),e4,h3,C3,tI=hA(()=>{it(),ft(),ht(),e4=(a,o,n,u,m,b,C,w,E)=>{let B=[{type:12,data:b},{type:12,data:u},{type:12,data:m},{type:12,data:n},{type:12,data:C},{type:12,data:w},{type:12,data:E}],D=[b];B.push(...XA(o.dims,D));let v=x=>{let S=$e("indices_data",o.dataType,o.dims.length),F=YA("input_slice_offsets_data",12,1,1),j=[S,F],J=[{name:"output_size",type:"u32"},{name:"batch_dims",type:"u32"},{name:"input_dims",type:"u32",length:m.length},{name:"sizes_from_slice_dims_data",type:"u32",length:n.length},{name:"num_slices_per_batch",type:"u32"},{name:"input_batch_stride",type:"u32"},{name:"num_slice_dims",type:"u32"}];return`
  ${x.registerUniforms(J).declareVariables(...j)}
  ${x.mainStart()}
    ${x.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
    let batch_idx = global_idx / uniforms.num_slices_per_batch;
    let base_offset = batch_idx * uniforms.input_batch_stride;

    let slice_indices_base_offset = global_idx * uniforms.num_slice_dims;
    var relative_slice_offset = 0;
    for (var dim_idx = 0u; dim_idx < uniforms.num_slice_dims; dim_idx ++) {
      var index = i32(indices_data[dim_idx + slice_indices_base_offset].x);
      let input_dim_idx = uniforms.batch_dims + dim_idx;
      if (index < 0) {
        ${m.length===1?"index += i32(uniforms.input_dims);":"index += i32(uniforms.input_dims[input_dim_idx]);"}
      }
      ${n.length===1?"relative_slice_offset += index * i32(uniforms.sizes_from_slice_dims_data);":"relative_slice_offset += index * i32(uniforms.sizes_from_slice_dims_data[dim_idx]);"}
    }

    input_slice_offsets_data[global_idx] =  base_offset + u32(relative_slice_offset);
  }`};return a.compute({name:"computeSliceOffsets",shaderCache:{hint:`${m.length}_${n.length}`,inputDependencies:["rank"]},getRunData:()=>({outputs:[{dims:D,dataType:a.inputs[1].dataType}],dispatchGroup:{x:Math.ceil(b/64)},programUniforms:B}),getShaderSource:v},{inputs:[o],outputs:[-1]})[0]},h3=(a,o)=>{let n=a.inputs,u=n[0].dims,m=n[0].dataType,b=n[1].dims,C=b[b.length-1],w=Ue.sizeToDimension(b,b.length-1),E=Ue.sizeFromDimension(u,o.batchDims+C),B=Ue.sizeToDimension(u,o.batchDims),D=Ue.sizeFromDimension(u,o.batchDims),v=w/B,x=new Array(C),S=E;for(let f=0;f<C;++f)x[C-1-f]=S,S*=u[o.batchDims+C-1-f];let F=e4(a,n[1],x,o.batchDims,u,w,v,D,C),j=o.batchDims+C;if(j>u.length)throw new Error("last dimension of indices must not be larger than rank of input tensor");let J=b.slice(0,-1).concat(u.slice(j)),L=Ue.size(J),N=[{type:12,data:L},{type:12,data:E},...XA(n[0].dims,F.dims,J)],U=f=>{let k=$e("data",n[0].dataType,n[0].dims.length),e=$e("slice_offsets",12,F.dims.length),d=YA("output",n[0].dataType,J.length);return`
          ${f.registerUniform("output_size","u32").registerUniform("slice_size","u32").declareVariables(k,e,d)}
            ${f.mainStart()}
            ${f.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
          let slice_offset = slice_offsets[global_idx / uniforms.slice_size];
          output[global_idx] = data[u32(slice_offset) + global_idx % uniforms.slice_size];
        }`};a.compute({name:"GatherND",shaderCache:{hint:o.cacheKey,inputDependencies:["rank","rank"]},getRunData:()=>({outputs:[{dims:J,dataType:m}],dispatchGroup:{x:Math.ceil(L/64)},programUniforms:N}),getShaderSource:U},{inputs:[n[0],F]})},C3=a=>({batchDims:a.batch_dims,cacheKey:""})}),A4,t4,b3,I3,rI=hA(()=>{it(),ft(),Nr(),ht(),A4=(a,o)=>{if(a.length<3||a.length>4)throw new Error("GatherBlockQuantized requires 3 or 4 inputs.");let n=Ue.normalizeAxis(o.quantizeAxis,a[0].dims.length),u=o.blockSize,m=a[0],b=a[2],C=a.length===4?a[3]:void 0;if(b.dims.length!==m.dims.length||!m.dims.map((w,E)=>E===n?Math.ceil(w/u)===b.dims[E]:w===b.dims[E]).reduce((w,E)=>w&&E,!0))throw new Error("Scales must have the same rank as the input tensor and the dims should match except on gatherAxis.");if(C){if(C.dataType!==m.dataType)throw new Error("Zero point must have the same data type as the input tensor.");if(C.dims.length!==b.dims.length||!C.dims.map((w,E)=>w===b.dims[E]).reduce((w,E)=>w&&E,!0))throw new Error("Zero point must have the same rank as the input tensor and the dims should match except on quantizeAxis.")}},t4=(a,o)=>{let n=a[0].dims,u=a[1].dims,m=n.length,b=Ue.normalizeAxis(o.gatherAxis,m),C=Ue.normalizeAxis(o.quantizeAxis,m),w=n.slice(0);w.splice(b,1,...u);let E=Ue.size(w),B=a[2].dataType,D=a[0].dataType===22,v=[{type:12,data:E},{type:12,data:C},{type:12,data:b},{type:12,data:o.blockSize},...XA(...a.map((S,F)=>S.dims),w)],x=S=>{let F=$e("data",a[0].dataType,a[0].dims.length),j=$e("inputIndices",a[1].dataType,a[1].dims.length),J=$e("scales",a[2].dataType,a[2].dims.length),L=a.length>3?$e("zeroPoint",a[3].dataType,a[3].dims.length):void 0,N=YA("output",B,w.length),U=[F,j,J];L&&U.push(L);let f=[{name:"output_size",type:"u32"},{name:"quantize_axis",type:"u32"},{name:"gather_axis",type:"u32"},{name:"block_size",type:"u32"}];return`
        ${S.registerUniforms(f).declareVariables(...U,N)}
        ${S.mainStart()}
        let output_indices = ${N.offsetToIndices("global_idx")};
        var indices_indices = ${j.type.indices}(0);
        ${u.length>1?`
          for (var i: u32 = 0; i < ${u.length}; i++) {
            let index = ${N.indicesGet("output_indices","uniforms.gather_axis + i")};
            ${j.indicesSet("indices_indices","i","index")};
          }`:`indices_indices = ${N.indicesGet("output_indices","uniforms.gather_axis")};`};
        var data_indices = ${F.type.indices}(0);
        for (var i: u32 = 0; i < uniforms.gather_axis; i++) {
          let index = ${N.indicesGet("output_indices","i")};
          ${F.indicesSet("data_indices","i","index")};
        }
        var index_from_indices = ${j.getByIndices("indices_indices")};
        if (index_from_indices < 0) {
          index_from_indices += ${n[b]};
        }
        ${F.indicesSet("data_indices","uniforms.gather_axis","u32(index_from_indices)")};
        for (var i = uniforms.gather_axis + 1; i < ${w.length}; i++) {
          let index = ${N.indicesGet("output_indices",`i + ${u.length} - 1`)};
          ${F.indicesSet("data_indices","i","index")};
        }
        let data_offset = ${F.indicesToOffset("data_indices")};
        let data_index = data_offset % 8;
        // Convert 4-bit packed data to 8-bit packed data.
        let packed_4bit_quantized_data = ${F.getByOffset("data_offset / 8")};
        let packed_8bit_quantized_data = (packed_4bit_quantized_data >> (4 * (data_index % 2))) & 0x0f0f0f0f;
        let quantized_data_vec = ${D?"unpack4xI8":"unpack4xU8"}(u32(packed_8bit_quantized_data));
        let quantized_data = quantized_data_vec[data_index / 2];
        var scale_indices = data_indices;
        let quantize_axis_index = ${J.indicesGet("data_indices","uniforms.quantize_axis")} / uniforms.block_size;
        ${J.indicesSet("scale_indices","uniforms.quantize_axis","quantize_axis_index")};
        var scale = ${J.getByIndices("scale_indices")};
        ${L?`
              let zero_point_indices = scale_indices;
              let zero_point_offset = ${L.indicesToOffset("zero_point_indices")};
              let zero_point_index = zero_point_offset % 8;
              let packed_4bit_zero_points = ${L.getByOffset("zero_point_offset / 8")};
              let packed_8bit_zero_points = (packed_4bit_zero_points >> (4 * (zero_point_index % 2))) & 0x0f0f0f0f;
              let zero_point_vec = ${D?"unpack4xI8":"unpack4xU8"}(u32(packed_8bit_zero_points));
              let zero_point = zero_point_vec[zero_point_index / 2];`:"var zero_point = 0"};
        let dequantized_data = ${ys(B)}(quantized_data - zero_point) * scale;
        ${N.setByOffset("global_idx","dequantized_data")};
    }`};return{name:"GatherBlockQuantized",shaderCache:{hint:`${o.cacheKey};${a.filter((S,F)=>F!==1).map(S=>S.dims.join("_")).join(";")}`,inputDependencies:Array.from({length:a.length},(S,F)=>"rank")},getRunData:()=>({outputs:[{dims:w,dataType:B}],dispatchGroup:{x:Math.ceil(E/64)},programUniforms:v}),getShaderSource:x}},b3=(a,o)=>{let n=a.inputs;A4(n,o),a.compute(t4(a.inputs,o))},I3=a=>Nt({blockSize:a.blockSize,gatherAxis:a.gatherAxis,quantizeAxis:a.quantizeAxis})}),r4,s4,w3,k3,sI=hA(()=>{it(),ft(),Nr(),ht(),r4=a=>{if(!a||a.length!==2)throw new Error("GatherElements requires 2 inputs.");if(a[0].dims.length<1)throw new Error("GatherElements requires that the data input be rank >= 1.");if(a[0].dims.length!==a[1].dims.length)throw new Error(`GatherElements requires that the data input and
                     indices input tensors be of same rank.`)},s4=(a,o)=>{let n=a[0].dims,u=a[0].dataType,m=n.length,b=a[1].dims,C=a[1].dataType,w=Ue.normalizeAxis(o.axis,m),E=n[w],B=b.slice(0),D=Ue.size(B),v=$e("input",u,m),x=$e("indicesInput",C,b.length),S=YA("output",u,B.length),F=[{type:12,data:D},{type:6,data:E},{type:12,data:w}];return F.push(...XA(n,b,B)),{name:"GatherElements",shaderCache:{inputDependencies:["rank","rank"]},getRunData:()=>({outputs:[{dims:B,dataType:a[0].dataType}],dispatchGroup:{x:Math.ceil(D/64)},programUniforms:F}),getShaderSource:j=>`
      ${j.registerUniform("outputSize","u32").registerUniform("axisDimLimit","i32").registerUniform("axis","u32").declareVariables(v,x,S)}
      ${j.mainStart()}
      ${j.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}

      let outputIndices = ${S.offsetToIndices("global_idx")};

      var idx = ${x.getByOffset("global_idx")};
      if (idx < 0) {
        idx = idx + uniforms.axisDimLimit;
      }
      var inputIndices = ${v.type.indices}(outputIndices);
      ${v.indicesSet("inputIndices","uniforms.axis","u32(idx)")};
      let value = ${v.getByIndices("inputIndices")};

      ${S.setByOffset("global_idx","value")};
  }`}},w3=a=>Nt({axis:a.axis}),k3=(a,o)=>{let n=a.inputs;r4(n),a.compute(s4(a.inputs,o))}}),a4,n4,E3,M3,aI=hA(()=>{it(),ft(),ht(),a4=a=>{if(!a)throw new Error("Input is missing");if(a.length<2||a.length>3)throw new Error("Invaid input number.");if(a.length===3&&a[2].dims.length>2)throw new Error("Invalid input shape of C");if(a[0].dataType!==a[1].dataType||a.length===3&&a[0].dataType!==a[2].dataType)throw new Error("Input types are mismatched")},n4=(a,o)=>{let n=a[0].dims.slice(),u=a[1].dims.slice(),[m,b,C]=wm.getShapeOfGemmResult(n,o.transA,u,o.transB,a.length===3?a[2].dims:void 0),w=[m,b];if(!w)throw new Error("Can't use gemm on the given tensors");let E=16,B=Math.ceil(b/E),D=Math.ceil(m/E),v=!0,x=Ue.size(w),S=[{type:12,data:v?B:x},{type:12,data:m},{type:12,data:b},{type:12,data:C},{type:1,data:o.alpha},{type:1,data:o.beta}],F=["type","type"];a.length===3&&(S.push(...XA(a[2].dims)),F.push("rank")),S.push(...XA(w));let j=L=>{let N="";o.transA&&o.transB?N="value += a[k * uniforms.M + m] * b[n * uniforms.K + k];":o.transA&&!o.transB?N="value += a[k * uniforms.M + m] * b[k * uniforms.N + n];":!o.transA&&o.transB?N="value += a[m * uniforms.K + k] * b[n * uniforms.K + k];":!o.transA&&!o.transB&&(N="value += a[m * uniforms.K + k] * b[k * uniforms.N + n];");let U=o.alpha===1?"":"value *= uniforms.alpha;",f=$e("a",a[0].dataType,a[0].dims),k=$e("b",a[1].dataType,a[1].dims),e=f.type.value,d=null,y=[f,k];a.length===3&&(d=$e("c",a[2].dataType,a[2].dims.length),y.push(d));let ee=YA("output",a[0].dataType,w.length);y.push(ee);let T=[{name:"output_size",type:"u32"},{name:"M",type:"u32"},{name:"N",type:"u32"},{name:"K",type:"u32"},{name:"alpha",type:"f32"},{name:"beta",type:"f32"}];return`
  ${L.registerUniforms(T).declareVariables(...y)}

  ${L.mainStart()}
    ${L.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}

    let m = global_idx / uniforms.N;
    let n = global_idx % uniforms.N;

    var value = ${e}(0);
    for (var k: u32 = 0u; k < uniforms.K; k++) {
      ${N}
    }

    ${U}
    ${d!=null?`let cOffset = ${d.broadcastedIndicesToOffset("vec2(m, n)",ee)}; value += ${e}(uniforms.beta) * ${d.getByOffset("cOffset")};`:""}
    output[global_idx] = value;
  }`},J=L=>{let N=$e("a",a[0].dataType,a[0].dims),U=$e("b",a[1].dataType,a[1].dims),f=null,k=[N,U];a.length===3&&(f=$e("c",a[2].dataType,a[2].dims.length),k.push(f));let e=YA("output",a[0].dataType,w.length);k.push(e);let d=[{name:"num_tile_n",type:"u32"},{name:"M",type:"u32"},{name:"N",type:"u32"},{name:"K",type:"u32"},{name:"alpha",type:"f32"},{name:"beta",type:"f32"}],y="",ee="";o.transA&&o.transB?(ee=`
      var col = tile_row_start + local_id.x;
      var row = k_start + local_id.y;
      if (col < uniforms.M && row < uniforms.K) {
        tile_a[local_id.y][local_id.x] = a[row * uniforms.M + col];
      } else {
        tile_a[local_id.y][local_id.x] = ${N.type.value}(0);
      }

      col = k_start + local_id.x;
      row = tile_col_start + local_id.y;
      if (col < uniforms.K && row < uniforms.N) {
        tile_b[local_id.y][local_id.x] = b[row * uniforms.K + col];
      } else {
        tile_b[local_id.y][local_id.x] = ${U.type.value}(0);
      }
      `,y="value += tile_a[k][local_id.y] * tile_b[local_id.x][k];"):o.transA&&!o.transB?(ee=`
      var col = tile_row_start + local_id.x;
      var row = k_start + local_id.y;
      if (col < uniforms.M && row < uniforms.K) {
        tile_a[local_id.y][local_id.x] = a[row * uniforms.M + col];
      } else {
        tile_a[local_id.y][local_id.x] = ${N.type.value}(0);
      }

      col = tile_col_start + local_id.x;
      row = k_start + local_id.y;
      if (col < uniforms.N && row < uniforms.K) {
        tile_b[local_id.y][local_id.x] = b[row * uniforms.N + col];
      } else {
        tile_b[local_id.y][local_id.x] = ${U.type.value}(0);
      }
      `,y="value += tile_a[k][local_id.y] * tile_b[k][local_id.x];"):!o.transA&&o.transB?(ee=`
      var col = k_start + local_id.x;
      var row = tile_row_start + local_id.y;
      if (col < uniforms.K && row < uniforms.M) {
        tile_a[local_id.y][local_id.x] = a[row * uniforms.K + col];
      } else {
        tile_a[local_id.y][local_id.x] = ${N.type.value}(0);
      }

      col = k_start + local_id.x;
      row = tile_col_start + local_id.y;
      if (col < uniforms.K && row < uniforms.N) {
        tile_b[local_id.y][local_id.x] = b[row * uniforms.K + col];
      } else {
        tile_b[local_id.y][local_id.x] = ${U.type.value}(0);
      }
      `,y="value += tile_a[local_id.y][k] * tile_b[local_id.x][k];"):!o.transA&&!o.transB&&(ee=`
      var col = k_start + local_id.x;
      var row = tile_row_start + local_id.y;
      if (col < uniforms.K && row < uniforms.M) {
        tile_a[local_id.y][local_id.x] = a[row * uniforms.K + col];
      } else {
        tile_a[local_id.y][local_id.x] = ${N.type.value}(0);
      }

      col = tile_col_start + local_id.x;
      row = k_start + local_id.y;
      if (col < uniforms.N && row < uniforms.K) {
        tile_b[local_id.y][local_id.x] = b[row * uniforms.N + col];
      } else {
        tile_b[local_id.y][local_id.x] = ${U.type.value}(0);
      }
      `,y="value += tile_a[local_id.y][k] * tile_b[k][local_id.x];");let T=o.alpha===1?"":"value *= uniforms.alpha;";return`
  ${L.registerUniforms(d).declareVariables(...k)}
  var<workgroup> tile_a: array<array<${N.type.storage}, ${E}>, ${E}>;
  var<workgroup> tile_b: array<array<${U.type.storage}, ${E}>, ${E}>;
  ${L.mainStart([E,E,1])}
    let tile_col_start = (workgroup_index % uniforms.num_tile_n) * ${E};
    let tile_row_start = (workgroup_index / uniforms.num_tile_n) * ${E};
    let num_tiles = (uniforms.K - 1) / ${E} + 1;
    var k_start = 0u;
    var value = ${e.type.value}(0);
    for (var t: u32 = 0u; t < num_tiles; t++) {
      ${ee}
      k_start = k_start + ${E};
      workgroupBarrier();

      for (var k: u32 = 0u; k < ${E}; k++) {
        ${y}
      }
      workgroupBarrier();
    }

    ${T}
    let m = tile_row_start + local_id.y;
    let n = tile_col_start + local_id.x;
    ${f!=null?`let cOffset = ${f.broadcastedIndicesToOffset("vec2(m, n)",e)}; value += ${e.type.value}(uniforms.beta) * ${f.getByOffset("cOffset")};`:""}
    if (m < uniforms.M && n < uniforms.N) {
      output[m * uniforms.N + n] = value;
    }
  }`};return v?{name:"GemmShared",shaderCache:{hint:`${o.cacheKey}`,inputDependencies:F},getRunData:()=>({outputs:[{dims:w,dataType:a[0].dataType}],dispatchGroup:{x:B*D},programUniforms:S}),getShaderSource:J}:{name:"Gemm",shaderCache:{hint:`${o.cacheKey}`,inputDependencies:F},getRunData:()=>({outputs:[{dims:w,dataType:a[0].dataType}],dispatchGroup:{x:Math.ceil(x/64)},programUniforms:S}),getShaderSource:j}},E3=a=>{let o=a.transA,n=a.transB,u=a.alpha,m=a.beta;return{transA:o,transB:n,alpha:u,beta:m,cacheKey:`${a.transA};${a.transB};${a.alpha===1}`}},M3=(a,o)=>{a4(a.inputs),a.compute(n4(a.inputs,o))}}),qa,bn,bi,Ii,i4,o4,l4,c4,u4,d4,f4,g4,v3,B3,nI=hA(()=>{it(),ft(),Nr(),ht(),[qa,bn,bi,Ii]=[0,1,2,3],i4=a=>{if(a[0].dims.length!==4)throw new Error("only 4-D tensor is supported.");if(a[0].dims.length!==a[1].dims.length)throw new Error("input dimensions must be equal to grid dimensions");if(a[0].dims.length-2!==a[1].dims[a[1].dims.length-1])throw new Error(`last dimension of grid must be equal to ${a[0].dims.length-2}`);if(a[0].dims[0]!==a[1].dims[0])throw new Error("grid batch size must match input batch size")},o4=`
  fn gs_get_cubic_coeffs(x: f32) -> vec4<f32> {
    let cubic_alpha = -0.75f;
    let x_abs = abs(x);
    var coeffs: vec4<f32>;
    coeffs[0] = (((cubic_alpha * (x_abs + 1) - 5 * cubic_alpha) * (x_abs + 1) + 8 * cubic_alpha) * (x_abs + 1) - 4 * cubic_alpha);
    coeffs[1] = (((cubic_alpha + 2) * x_abs - (cubic_alpha + 3)) * x_abs * x_abs + 1);
    coeffs[2] = (((cubic_alpha + 2) * (1 - x_abs) - (cubic_alpha + 3)) * (1 - x_abs) * (1 - x_abs) + 1);
    coeffs[3] = (((cubic_alpha * (2 - x_abs) - 5 * cubic_alpha) * (2 - x_abs) + 8 * cubic_alpha) * (2 - x_abs) - 4 * cubic_alpha);
    return coeffs;
  }
`,l4=a=>`
  fn gs_bicubic_interpolate(p: mat4x4<${a}>, x: f32, y: f32) -> ${a} {
    var v: vec4<f32>;
    var coeffs = gs_get_cubic_coeffs(x);
    for (var i = 0; i < 4; i++) {
      v[i] = coeffs[0] * p[i][0] + coeffs[1] * p[i][1] + coeffs[2] * p[i][2] + coeffs[3] * p[i][3];
    }
    coeffs = gs_get_cubic_coeffs(y);
    let pixel = ${a}(coeffs[0] * v[0] + coeffs[1] * v[1] + coeffs[2] * v[2] + coeffs[3] * v[3]);
    return pixel;
  }
`,c4=a=>`
  fn gs_denormalize(n: f32, length: i32) -> f32 {
    ${a.alignCorners===0?`
    // alignCorners: false => [-1, 1] to [-0.5, length - 0.5]
    return ((n + 1.0) * f32(length) - 1.0) / 2.0;
    `:`
    // alignCorners: true => [-1, 1] to [0, length - 1]
    return (n + 1.0) / 2.0 * (f32(length - 1));
    `}
  }
`,u4=a=>`
  ${a.paddingMode==="reflection"?`
      fn gs_reflect(x: i32, x_min: f32, x_max: f32) -> u32 {
        var dx = 0.0;
        var fx = f32(x);
        let range = x_max - x_min;
        if (fx < x_min) {
          dx = x_min - fx;
          let n = u32(dx / range);
          let r = dx - f32(n) * range;
          if (n % 2 == 0) {
            fx = x_min + r;
          } else {
            fx = x_max - r;
          }
        } else if (fx > x_max) {
          dx = fx - x_max;
          let n = u32(dx / range);
          let r = dx - f32(n) * range;
          if (n % 2 == 0) {
            fx = x_max - r;
          } else {
            fx = x_min + r;
          }
        }
        return u32(fx);
      }`:""}
`,d4=(a,o,n)=>`
  fn pixel_at_grid(r: i32, c: i32, H: i32, W: i32, batch: u32, channel: u32, border: vec4<f32>) -> ${o} {
     var pixel = ${o}(0);
     var indices = vec4<u32>(0);
     indices[${qa}] = batch;
     indices[${bn}] = channel;`+(()=>{switch(n.paddingMode){case"zeros":return`
          if (r >= 0 && r < H && c >=0 && c < W) {
            indices[${bi}] = u32(r);
            indices[${Ii}] = u32(c);
          } else {
            return ${o}(0);
          }
        `;case"border":return`
          indices[${bi}] = u32(clamp(r, 0, H - 1));
          indices[${Ii}] = u32(clamp(c, 0, W - 1));
        `;case"reflection":return`
          indices[${bi}] = gs_reflect(r, border[1], border[3]);
          indices[${Ii}] = gs_reflect(c, border[0], border[2]);
        `;default:throw new Error(`padding mode ${n.paddingMode} is not supported`)}})()+`
    return ${a.getByIndices("indices")};
  }
`,f4=(a,o,n)=>(()=>{switch(n.mode){case"nearest":return`
          let result = pixel_at_grid(i32(round(y)), i32(round(x)), H_in, W_in, indices[${qa}], indices[${bn}], border);
        `;case"bilinear":return`
          let x1 = i32(floor(x));
          let y1 = i32(floor(y));
          let x2 = x1 + 1;
          let y2 = y1 + 1;

          let p11 = pixel_at_grid(y1, x1, H_in, W_in, indices[${qa}], indices[${bn}], border);
          let p12 = pixel_at_grid(y1, x2, H_in, W_in, indices[${qa}], indices[${bn}], border);
          let p21 = pixel_at_grid(y2, x1, H_in, W_in, indices[${qa}], indices[${bn}], border);
          let p22 = pixel_at_grid(y2, x2, H_in, W_in, indices[${qa}], indices[${bn}], border);

          let dx2 = ${o}(f32(x2) - x);
          let dx1 = ${o}(x - f32(x1));
          let dy2 = ${o}(f32(y2) - y);
          let dy1 = ${o}(y - f32(y1));
          let result = dy2 * (dx2 * p11 + dx1 * p12) + dy1 * (dx2 * p21 + dx1 * p22);
        `;case"bicubic":return`
          let x0 = i32(floor(x)) - 1;
          let y0 = i32(floor(y)) - 1;
          var p: mat4x4<${o}>;
          for (var h = 0; h < 4; h++) {
            for (var w = 0; w < 4; w++) {
              p[h][w] = pixel_at_grid(h + y0, w + x0, H_in, W_in, indices[${qa}], indices[${bn}], border);
            }
          }

          let dx = x - f32(x0 + 1);
          let dy = y - f32(y0 + 1);
          let result = gs_bicubic_interpolate(p, dx, dy);
        `;default:throw new Error(`mode ${n.mode} is not supported`)}})()+`${a.setByOffset("global_idx","result")}`,g4=(a,o)=>{let n=$e("x",a[0].dataType,a[0].dims.length),u=[a[1].dims[0],a[1].dims[1],a[1].dims[2]],m=$e("grid",a[1].dataType,u.length,2),b=[a[0].dims[0],a[0].dims[1],a[1].dims[1],a[1].dims[2]];o.format==="NHWC"&&(b=[a[0].dims[0],a[1].dims[1],a[1].dims[2],a[0].dims[3]],[qa,bn,bi,Ii]=[0,3,1,2]);let C=YA("output",a[0].dataType,b.length),w=n.type.value,E=Ue.size(b),B=[{type:12,data:E},...XA(a[0].dims,u,b)],D=v=>`
  ${v.registerUniform("output_size","u32").declareVariables(n,m,C)}
  ${o4}
  ${l4(w)}
  ${c4(o)}
  ${u4(o)}
  ${d4(n,w,o)}

  ${v.mainStart()}
    ${v.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
      let H_in = i32(uniforms.x_shape[${bi}]);
      let W_in = i32(uniforms.x_shape[${Ii}]);

      ${o.alignCorners===0?`
      let x_min = -0.5;
      let x_max = f32(W_in) - 0.5;
      let y_min = -0.5;
      let y_max = f32(H_in) - 0.5;
      `:`
      let x_min = 0.0;
      let x_max = f32(W_in) - 1.0;
      let y_min = 0.0;
      let y_max = f32(H_in) - 1.0;
      `};
      let border = vec4<f32>(x_min, y_min, x_max, y_max);

      let indices = ${C.offsetToIndices("global_idx")};
      var grid_indices = vec3<u32>(indices[${qa}], indices[${bi}], indices[${Ii}]);
      let nxy = ${m.getByIndices("grid_indices")};
      var x = gs_denormalize(f32(nxy[0]), W_in);
      var y = gs_denormalize(f32(nxy[1]), H_in);

      ${f4(C,w,o)}
  }`;return{name:"GridSample",shaderCache:{hint:`${o.cacheKey}`,inputDependencies:["type","type"]},getRunData:v=>{let x=Ue.size(b);return{outputs:[{dims:b,dataType:v[0].dataType}],dispatchGroup:{x:Math.ceil(x/64)},programUniforms:B}},getShaderSource:D}},v3=(a,o)=>{i4(a.inputs),a.compute(g4(a.inputs,o))},B3=a=>Nt({alignCorners:a.align_corners,mode:a.mode,paddingMode:a.padding_mode,format:a.format})}),_s,p4,x3,C2,m4,Ho,y3,D3=hA(()=>{it(),ft(),Nr(),xc(),Tc(),ht(),qn(),_s=(a,o)=>a.length>o&&a[o].dims.length>0?a[o]:void 0,p4=(a,o)=>{let n=a[0],u=_s(a,1),m=_s(a,2),b=_s(a,3),C=_s(a,4),w=_s(a,5),E=_s(a,6),B=_s(a,7);if(n.dims.length!==3&&n.dims.length!==5)throw new Error("Input query is expected to have 3 or 5 dimensions");let D=n.dims[0],v=n.dims[1],x=n.dims.length===3?n.dims[2]:o.numHeads*n.dims[4],S=v,F=0,j=0,J=Math.floor(x/o.numHeads);if(E&&B&&Ue.size(E.dims)&&Ue.size(B.dims)){if(E.dims.length!==4)throw new Error('Input "past_key" is expected to have 4 dimensions');if(E.dims[0]!==D||E.dims[1]!==o.numHeads||E.dims[3]!==J)throw new Error('Input "past_key" shape (batch_size, num_heads, past_sequence_length, head_size)');if(B.dims[0]!==D||B.dims[1]!==o.numHeads||B.dims[3]!==J)throw new Error('Input "past_value" shape (batch_size, num_heads, past_sequence_length, head_size)');if(E.dims[2]!==B.dims[2])throw new Error('Input "past_key" and "past_value" shall have same dim 2 (past_sequence_length)');if(B.dims.length!==4)throw new Error('Input "past_value" is expected to have 4 dimensions');F=E.dims[2],j=E.dims[2]}else if(E&&Ue.size(E.dims)||B&&Ue.size(B.dims))throw new Error('Input "past_key" and "past_value" shall be both present or both absent');let L;if(u&&Ue.size(u.dims)>0){if(n.dims.length!==3)throw new Error('Input "query" is expected to have 3 dimensions when key is given');if(u.dims.length<3||u.dims.length>5)throw new Error('Input "key" is expected to have 3, 4, or 5 dimensions');if(n.dims[0]!==u.dims[0])throw new Error('Input "query" and "key" shall have same dim 0 (batch size)');if(u.dims.length===3){if(u.dims[2]!==n.dims[2])throw new Error('Input "query" and "key" shall have same dim 2 (hidden_size)');L=2,S=u.dims[1]}else if(u.dims.length===5){if(u.dims[2]!==o.numHeads||u.dims[3]!==2||u.dims[4]!==J)throw new Error('Expect "key" shape (batch_size, kv_sequence_length, num_heads, 2, head_size) for packed kv');if(m)throw new Error('Expect "value" be none when "key" has packed kv format.');L=5,S=u.dims[1]}else{if(u.dims[1]!==o.numHeads||u.dims[3]!==J)throw new Error('Expect "key" shape (batch_size, num_heads, kv_sequence_length, head_size) for past_key');L=0,S=u.dims[2]}}else{if(n.dims.length!==5)throw new Error('Input "query" is expected to have 5 dimensions when key is empty');if(n.dims[2]!==o.numHeads||n.dims[3]!==3)throw new Error('Expect "query" shape (batch_size, kv_sequence_length, num_heads, 3, head_size) for packed kv');L=3}if(b&&Ue.size(b.dims)>0){if(b.dims.length!==1)throw new Error('Input "bias" is expected to have 1 dimension');if(u&&u.dims.length===5&&u.dims[3]===2)throw new Error("bias is not allowed for packed kv.")}let N=F+S,U=0;if(C&&Ue.size(C.dims)>0){U=8;let d=C.dims;throw d.length===1?d[0]===D?U=1:d[0]===3*D+2&&(U=3):d.length===2&&d[0]===D&&d[1]===N&&(U=5),U===8?new Error('Input "key_padding_mask" shape shall be (batch_size) or (batch_size, total_sequence_length)'):new Error("Mask not supported")}let f=!1,k=x;if(m&&Ue.size(m.dims)>0){if(m.dims.length!==3&&m.dims.length!==4)throw new Error('Input "value" is expected to have 3 or 4 dimensions');if(n.dims[0]!==m.dims[0])throw new Error('Input "query" and "value" shall have same dim 0 (batch_size)');if(m.dims.length===3){if(S!==m.dims[1])throw new Error('Input "key" and "value" shall have the same dim 1 (kv_sequence_length)');k=m.dims[2]}else{if(S!==m.dims[2])throw new Error('Input "key" and "value" shall have the same dim 2 (kv_sequence_length)');k=m.dims[1]*m.dims[3],f=!0}}let e=!1;if(C&&Ue.size(C.dims)>0)throw new Error("Key padding mask is not supported");if(w&&Ue.size(w.dims)>0){if(w.dims.length!==4)throw new Error('Input "attention_bias" is expected to have 4 dimensions');if(w.dims[0]!==D||w.dims[1]!==o.numHeads||w.dims[2]!==v||w.dims[3]!==N)throw new Error('Expect "attention_bias" shape (batch_size, num_heads, sequence_length, total_sequence_length)')}return{batchSize:D,sequenceLength:v,pastSequenceLength:F,kvSequenceLength:S,totalSequenceLength:N,maxSequenceLength:j,inputHiddenSize:0,hiddenSize:x,vHiddenSize:k,headSize:J,vHeadSize:Math.floor(k/o.numHeads),numHeads:o.numHeads,isUnidirectional:!1,pastPresentShareBuffer:!1,maskFilterValue:o.maskFilterValue,maskType:U,scale:o.scale,broadcastResPosBias:e,passPastInKv:f,qkvFormat:L}},x3=a=>Nt({...a}),C2=Nt({perm:[0,2,1,3]}),m4=(a,o,n,u,m,b,C)=>{let w=[u,m,b],E=Ue.size(w),B=[{type:12,data:E},{type:12,data:C},{type:12,data:b}],D=v=>{let x=YA("qkv_with_bias",o.dataType,w),S=$e("qkv",o.dataType,w),F=$e("bias",n.dataType,w),j=[{name:"output_size",type:"u32"},{name:"bias_offset",type:"u32"},{name:"hidden_size",type:"u32"}];return`
  ${v.registerUniforms(j).declareVariables(S,F,x)}
  ${v.mainStart()}
    ${v.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
    let bias_offset_idx = (global_idx % uniforms.hidden_size) + uniforms.bias_offset;

    qkv_with_bias[global_idx] = qkv[global_idx] + bias[bias_offset_idx];
  }`};return a.compute({name:"MultiHeadAttentionAddBias",shaderCache:{inputDependencies:["type","type"]},getRunData:()=>({outputs:[{dims:w,dataType:o.dataType,gpuDataType:0}],dispatchGroup:{x:Math.ceil(E/64)},programUniforms:B}),getShaderSource:D},{inputs:[o,n],outputs:[-1]})[0]},Ho=(a,o,n,u,m,b,C,w)=>{let E=b;if(C&&Ue.size(C.dims)>0){if(u===1)throw new Error("AddBiasReshape is not implemented. Please export your model with packed QKV or KV");return E=m4(a,b,C,o,u,n*m,w),E=E.reshape([o,u,n,m]),n===1||u===1?E:a.compute(ia(E,C2.perm),{inputs:[E],outputs:[-1]})[0]}else return b.dims.length===3&&(E=b.reshape([o,u,n,m])),n===1||u===1?E:a.compute(ia(E,C2.perm),{inputs:[E],outputs:[-1]})[0]},y3=(a,o)=>{let n=p4(a.inputs,o),u=a.inputs[0],m=_s(a.inputs,1),b=_s(a.inputs,2),C=_s(a.inputs,3),w=_s(a.inputs,4),E=_s(a.inputs,5),B=_s(a.inputs,6),D=_s(a.inputs,7);if(u.dims.length===5)throw new Error("Packed QKV is not implemented");if(m?.dims.length===5)throw new Error("Packed KV is not implemented");let v=m&&b&&m.dims.length===4&&b.dims.length===4,x=Ho(a,n.batchSize,n.numHeads,n.sequenceLength,n.headSize,u,C,0);if(v)return A0(a,x,m,b,w,void 0,B,D,E,n);if(!m||!b)throw new Error("key and value must be provided");let S=Ho(a,n.batchSize,n.numHeads,n.kvSequenceLength,n.headSize,m,C,n.hiddenSize),F=Ho(a,n.batchSize,n.numHeads,n.kvSequenceLength,n.vHeadSize,b,C,2*n.hiddenSize);A0(a,x,S,F,w,void 0,B,D,E,n)}}),h4,C4,b4,I4,oc,T3,P3,G3=hA(()=>{it(),ft(),Nr(),ht(),h4=a=>{if(!a||a.length<1)throw new Error("too few inputs")},C4=(a,o)=>{let n=[],u=o.numOutputs;return a[1].dims[0]>0&&(a[1].getBigInt64Array().forEach(m=>n.push(Number(m))),u=n.length),Nt({numOutputs:u,axis:o.axis,splitSizes:n})},b4=a=>`
fn calculateOutputIndex(index: u32) -> u32 {
    for (var i: u32 = 0u; i < ${a}u; i += 1u ) {
    if (index < ${HA("uniforms.size_in_split_axis","i",a)}) {
        return i;
    }
    }
    return ${a}u;
}`,I4=a=>{let o=a.length,n=[];for(let u=0;u<o;++u){let m=a[u].setByIndices("indices","input[global_idx]");o===1?n.push(m):u===0?n.push(`if (output_number == ${u}u) { ${m} }`):u===o-1?n.push(`else { ${m} }`):n.push(`else if (output_number == ${u}) { ${m} }`)}return`
      fn writeBufferData(output_number: u32, indices: ${a[0].type.indices}, global_idx: u32) {
        ${n.join(`
`)}
      }`},oc=(a,o)=>{let n=a[0].dims,u=Ue.size(n),m=a[0].dataType,b=Ue.normalizeAxis(o.axis,n.length),C=new Array(o.numOutputs),w=$e("input",m,n.length),E=new Array(o.numOutputs),B=[],D=[],v=0,x=[{type:12,data:u}];for(let F=0;F<o.numOutputs;F++){v+=o.splitSizes[F],E[F]=v;let j=n.slice();j[b]=o.splitSizes[F],D.push(j),C[F]=YA(`output${F}`,m,j.length),B.push({dims:D[F],dataType:a[0].dataType})}x.push({type:12,data:E},...XA(n,...D));let S=F=>`
  ${F.registerUniform("input_size","u32").registerUniform("size_in_split_axis","u32",E.length).declareVariables(w,...C)}
  ${b4(E.length)}
  ${I4(C)}

  ${F.mainStart()}
    ${F.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.input_size")}

    var indices = ${w.offsetToIndices("global_idx")};
    var index = ${w.indicesGet("indices",b)};
    let output_number = calculateOutputIndex(index);
    if (output_number != 0) {
      index -= ${HA("uniforms.size_in_split_axis","output_number - 1u",E.length)};
      ${w.indicesSet("indices",b,"index")};
    }
    writeBufferData(output_number, indices, global_idx);
  }`;return{name:"Split",shaderCache:{hint:o.cacheKey,inputDependencies:["rank"]},getShaderSource:S,getRunData:()=>({outputs:B,dispatchGroup:{x:Math.ceil(u/64)},programUniforms:x})}},T3=(a,o)=>{h4(a.inputs);let n=a.inputs.length===1?o:C4(a.inputs,o);a.compute(oc(a.inputs,n),{inputs:[0]})},P3=a=>{let o=a.axis,n=a.splitSizes,u=a.numOutputs<0?n.length:a.numOutputs;if(u!==n.length)throw new Error("numOutputs and splitSizes lengh must be equal");return Nt({axis:o,numOutputs:u,splitSizes:n})}}),w4,K0,Q3,F3=hA(()=>{it(),ft(),Nr(),ht(),w4=(a,o)=>{let[n,u,m,b]=a,{numHeads:C,rotaryEmbeddingDim:w}=o;if(n.dims.length!==3&&n.dims.length!==4)throw new Error(`Input 'x' is expected to have 3 or 4 dimensions, got ${n.dims.length}`);if(!Ue.areEqual(u.dims,[])&&!Ue.areEqual(u.dims,[1])&&u.dims.length!==2)throw new Error(`Input 'position_ids' is expected to have 0, 1, or 2 dimensions, got ${u.dims.length}`);if(m.dims.length!==2)throw new Error(`Input 'cos_cache' is expected to have 2 dimensions, got ${m.dims.length}`);if(b.dims.length!==2)throw new Error(`Input 'sin_cache' is expected to have 2 dimensions, got ${b.dims.length}`);if(!Ue.areEqual(m.dims,b.dims))throw new Error("Inputs 'cos_cache' and 'sin_cache' are expected to have the same shape");if(w>0&&C===0)throw new Error("num_heads must be provided if rotary_embedding_dim is specified");let E=n.dims[0],B=n.dims[n.dims.length-2],D=m.dims[0],v=Ue.sizeFromDimension(n.dims,1)/B,x=w===0?m.dims[1]*2:v/C;if(w>x)throw new Error("rotary_embedding_dim must be less than or equal to head_size");if(u.dims.length===2){if(E!==u.dims[0])throw new Error(`Input 'position_ids' dimension 0 should be of size batch_size, got ${u.dims[0]}`);if(B!==u.dims[1])throw new Error(`Input 'position_ids' dimension 1 should be of size sequence_length, got ${u.dims[1]}`)}if(x/2!==m.dims[1]&&w/2!==m.dims[1])throw new Error(`Input 'cos_cache' dimension 1 should be same as head_size / 2 or rotary_embedding_dim / 2, got ${m.dims[1]}`);if(B>D)throw new Error("Updating cos_cache and sin_cache in RotaryEmbedding is not currently supported")},K0=(a,o)=>{let{interleaved:n,numHeads:u,rotaryEmbeddingDim:m,scale:b}=o,C=a[0].dims[0],w=Ue.sizeFromDimension(a[0].dims,1),E=a[0].dims[a[0].dims.length-2],B=w/E,D=a[2].dims[1],v=m===0?D*2:B/u,x=new Array(C,E,B/v,v-D),S=Ue.computeStrides(x),F=[{type:1,data:b},{type:12,data:x},{type:12,data:S},...a[0].dims.length===3?new Array({type:12,data:[w,B,v,1]}):[],...a[0].dims.length===4?new Array({type:12,data:[w,v,E*v,1]}):[],...XA(a[0].dims,a[1].dims,a[2].dims,a[3].dims,a[0].dims)],j=J=>{let L=$e("input",a[0].dataType,a[0].dims.length),N=$e("position_ids",a[1].dataType,a[1].dims.length),U=$e("cos_cache",a[2].dataType,a[2].dims.length),f=$e("sin_cache",a[3].dataType,a[3].dims.length),k=YA("output",a[0].dataType,a[0].dims.length);return J.registerUniforms([{name:"scale",type:"f32"},{name:"global_shape",type:"u32",length:x.length},{name:"global_strides",type:"u32",length:S.length},{name:"input_output_strides",type:"u32",length:S.length}]),`
        ${J.declareVariables(L,N,U,f,k)}

        ${J.mainStart(co)}
          let half_rotary_emb_dim = uniforms.${U.name}_shape[1];
          let bsnh = global_idx / uniforms.global_strides % uniforms.global_shape;
          let size = uniforms.global_shape[0] * uniforms.global_strides[0];
          ${J.guardAgainstOutOfBoundsWorkgroupSizes("size")}

          if (bsnh[3] < half_rotary_emb_dim) {
            let position_ids_idx =
                ${N.broadcastedIndicesToOffset("bsnh.xy",YA("",N.type.tensor,2))};
            let position_id =
                u32(${N.getByOffset("position_ids_idx")}) + select(0, bsnh[1], position_ids_idx == 0);
            let i = dot(bsnh, uniforms.input_output_strides) + select(0, bsnh[3], ${n});
            let j = i + select(half_rotary_emb_dim, 1, ${n});
            let re = ${L.getByOffset("i")} * ${U.get("position_id","bsnh[3]")} -
                ${L.getByOffset("j")} * ${f.get("position_id","bsnh[3]")};
            ${k.setByOffset("i","re")}
            let im = ${L.getByOffset("i")} * ${f.get("position_id","bsnh[3]")} +
                ${L.getByOffset("j")} * ${U.get("position_id","bsnh[3]")};
            ${k.setByOffset("j","im")}
          } else {
            let k = dot(bsnh, uniforms.input_output_strides) + half_rotary_emb_dim;
            ${k.setByOffset("k",L.getByOffset("k"))}
          }
        }`};return{name:"RotaryEmbedding",shaderCache:{hint:Nt({interleaved:n}).cacheKey,inputDependencies:["rank","rank","rank","rank"]},getShaderSource:j,getRunData:()=>({outputs:[{dims:a[0].dims,dataType:a[0].dataType}],dispatchGroup:{x:Math.ceil(Ue.size(x)/co)},programUniforms:F})}},Q3=(a,o)=>{w4(a.inputs,o),a.compute(K0(a.inputs,o))}}),k4,E4,b2,M4,S3,iI=hA(()=>{Nr(),it(),Tc(),D3(),G3(),qn(),F3(),ht(),k4=(a,o)=>{if(o.doRotary&&a.length<=7)throw new Error("cos_cache and sin_cache inputs are required if do_rotary is specified");let n=a[0],u=a[1],m=a[2],b=a[3],C=a[4];if(o.doRotary!==0&&a.length<=7)throw new Error("cos_cast and sin_cache are expected if do_rotary attribute is non-zero");if(o.localWindowSize!==-1)throw new Error("Local attention is not supported");if(o.softcap!==0)throw new Error("Softcap is not supported");if(o.rotaryInterleaved!==0)throw new Error("Rotary interleaved is not supported");if(o.smoothSoftmax)throw new Error("Smooth softmax is not supported");if(n.dims.length!==3&&n.dims.length!==5)throw new Error("Input query is expected to have 3 or 5 dimensions");let w=!1,E=n.dims[0],B=n.dims[1],D=n.dims.length===3?w?n.dims[2]/3:n.dims[2]:o.numHeads*n.dims[4],v=B,x=0,S=!u||u.dims.length===0,F=Math.floor(S?D/(o.numHeads+2*o.kvNumHeads):D/o.numHeads);S&&(D=F*o.numHeads);let j=b&&b.dims.length!==0,J=C&&C.dims.length!==0;if(j&&b.dims.length===4&&b.dims[0]===E&&b.dims[1]!==o.kvNumHeads&&b.dims[2]===o.kvNumHeads&&b.dims[3]===F)throw new Error("BSNH pastKey/pastValue is not supported");if(j&&J){if(b.dims.length!==4)throw new Error('Input "past_key" is expected to have 4 dimensions');if(C.dims.length!==4)throw new Error('Input "past_value" is expected to have 4 dimensions');x=b.dims[2]}else if(j||J)throw new Error('Input "past_key" and "past_value" shall be both present or both absent');let L=1;if(u&&u.dims.length>0){if(n.dims.length!==3)throw new Error('Input "query" is expected to have 3 dimensions when key is given');if(u.dims.length<3||u.dims.length>5)throw new Error('Input "key" is expected to have 3, 4, or 5 dimensions');if(n.dims[0]!==u.dims[0])throw new Error('Input "query" and "key" shall have same dim 0 (batch size)');if(u.dims.length===3){if(n.dims[2]%u.dims[2]!==0)throw new Error('Dimension 2 of "query" should be a multiple of "key"');v=u.dims[1]}else if(u.dims.length===5){if(u.dims[2]!==o.numHeads||u.dims[3]!==2||u.dims[4]!==F)throw new Error('Expect "key" shape (batch_size, kv_sequence_length, num_heads, 2, head_size) for packed kv');if(m)throw new Error('Expect "value" be none when "key" has packed kv format.');v=u.dims[1]}else{if(u.dims[1]!==o.numHeads||u.dims[3]!==F)throw new Error('Expect "key" shape (batch_size, num_heads, kv_sequence_length, head_size) for past_key');v=u.dims[2]}}else{if(n.dims.length!==3&&n.dims.length!==5)throw new Error('Input "query" is expected to have 3 or 5 dimensions when key is empty');if(n.dims.length===5&&(n.dims[2]!==o.numHeads||n.dims[3]!==3))throw new Error('Expect "query" shape (batch_size, kv_sequence_length, num_heads, 3, head_size) for packed kv');L=3}let N=0,U=!1,f=o.kvNumHeads?F*o.kvNumHeads:D;if(m&&m.dims.length>0){if(m.dims.length!==3&&m.dims.length!==4)throw new Error('Input "value" is expected to have 3 or 4 dimensions');if(n.dims[0]!==m.dims[0])throw new Error('Input "query" and "value" shall have same dim 0 (batch_size)');if(m.dims.length===3){if(v!==m.dims[1])throw new Error('Input "key" and "value" shall have the same dim 1 (kv_sequence_length)');f=m.dims[2]}else{if(v!==m.dims[2])throw new Error('Input "past_key" and "past_value" shall have the same dim 2 (kv_sequence_length)');f=m.dims[1]*m.dims[3],U=!0}}let k=a.length>4?a[5]:void 0;if(k&&k.dims.length!==1&&k.dims[0]!==E)throw new Error('Input "seqlens" is expected to have 1 dimension and the same dim 0 as batch_size');return{batchSize:E,sequenceLength:B,pastSequenceLength:x,kvSequenceLength:v,totalSequenceLength:-1,maxSequenceLength:-1,inputHiddenSize:0,hiddenSize:D,vHiddenSize:f,headSize:F,vHeadSize:Math.floor(f/o.kvNumHeads),numHeads:o.numHeads,kvNumHeads:o.kvNumHeads,nReps:o.numHeads/o.kvNumHeads,pastPresentShareBuffer:!1,maskType:N,scale:o.scale,broadcastResPosBias:!1,passPastInKv:U,qkvFormat:L}},E4=Nt({perm:[0,2,1,3]}),b2=(a,o,n)=>{let u=o,m=n.kvNumHeads;return o.dims.length===3&&n.kvSequenceLength!==0&&(u=o.reshape([n.batchSize,n.kvSequenceLength,m,n.headSize]),u=a.compute(ia(u,E4.perm),{inputs:[u],outputs:[-1]})[0]),u},M4=(a,o,n,u)=>{let m=7,b=["type","type"],C=[a*o],w=a*o,E=[{type:12,data:w},{type:12,data:o},{type:12,data:a}],B=D=>{let v=$e("seq_lens",n.dataType,n.dims),x=$e("total_seq_lens",u.dataType,u.dims),S=YA("pos_ids",m,C),F=[{name:"output_size",type:"u32"},{name:"sequence_length",type:"u32"},{name:"batch_size",type:"u32"}];return`
  ${D.registerUniforms(F).declareVariables(v,x,S)}
  ${D.mainStart()}
    ${D.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
    let total_sequence_length = u32(${x.getByOffset("0")});
    let is_subsequent_prompt = uniforms.sequence_length > 1 && uniforms.sequence_length != total_sequence_length;
    let is_first_prompt = !is_subsequent_prompt && uniforms.sequence_length == total_sequence_length;
    let batch_idx = global_idx / uniforms.sequence_length;
    let sequence_idx = i32(global_idx % uniforms.sequence_length);
    var pos_id: i32 = 0;
    let seqlen = ${v.getByOffset("batch_idx")};
    let total_seqlen = seqlen + 1;
    if (is_first_prompt) {
      if (sequence_idx < total_seqlen) {
        pos_id = sequence_idx;
      } else {
        pos_id = 1;
      }
      ${S.setByOffset("global_idx","pos_id")}
    } else if (is_subsequent_prompt) {
      let past_seqlen = total_seqlen - i32(uniforms.sequence_length);
      if (past_seqlen + sequence_idx < total_seqlen) {
        pos_id = past_seqlen + sequence_idx;
      } else {
        pos_id = 1;
      }
      ${S.setByOffset("global_idx","pos_id")}
    } else if (global_idx < uniforms.batch_size) {
      ${S.setByOffset("global_idx","seqlen")}
    };
  }
  `};return{name:"GeneratePositionIds",shaderCache:{hint:`${a};${o}`,inputDependencies:b},getRunData:()=>({outputs:[{dims:C,dataType:m}],dispatchGroup:{x:Math.ceil(w/64)},programUniforms:E}),getShaderSource:B}},S3=(a,o)=>{let n=k4(a.inputs,o);if(a.inputs[0].dims.length===5)throw new Error("Packed QKV is not implemented");if(a.inputs[1]?.dims.length===5)throw new Error("Packed KV is not implemented");let u=a.inputs[0],m=a.inputs[1]&&a.inputs[1].dims.length>0?a.inputs[1]:void 0,b=a.inputs[2]&&a.inputs[2].dims.length>0?a.inputs[2]:void 0,C=a.inputs[3]&&a.inputs[3].dims.length!==0?a.inputs[3]:void 0,w=a.inputs[4]&&a.inputs[4].dims.length!==0?a.inputs[4]:void 0,E=a.inputs.length>4?a.inputs[5]:void 0,B=a.inputs.length>5?a.inputs[6]:void 0,D=n.kvNumHeads?n.kvNumHeads:n.numHeads,v=Nt({axis:2,numOutputs:3,splitSizes:[n.numHeads*n.headSize,D*n.headSize,D*n.headSize]}),[x,S,F]=!m&&!b?a.compute(oc([u],v),{inputs:[u],outputs:[-1,-1,-1]}):[u,m,b],j,J;if(o.doRotary){let f=a.compute(M4(n.batchSize,n.sequenceLength,E,B),{inputs:[E,B],outputs:[-1]})[0],k=a.inputs[7],e=a.inputs[8],d=Nt({interleaved:o.rotaryInterleaved!==0,numHeads:n.numHeads,rotaryEmbeddingDim:0,scale:o.scale}),y=[x,f,k,e],ee=[-1];j=a.compute(K0(y,d),{inputs:y,outputs:ee})[0],y.splice(0,1,S);let T=Nt({interleaved:o.rotaryInterleaved!==0,numHeads:n.kvNumHeads,rotaryEmbeddingDim:0,scale:o.scale});J=a.compute(K0(y,T),{inputs:y,outputs:ee})[0]}let L=Ho(a,n.batchSize,n.numHeads,n.sequenceLength,n.headSize,o.doRotary?j:x,void 0,0),N=b2(a,o.doRotary?J:S,n),U=b2(a,F,n);A0(a,L,N,U,void 0,void 0,C,w,void 0,n,E,B)}}),I2,v4,B4,O3,oI=hA(()=>{it(),ft(),qn(),ht(),I2=(a,o,n,u,m,b,C,w)=>{let E=Pr(b),B=E===1?"f32":`vec${E}f`,D=E===1?"vec2f":`mat2x${E}f`,v=m*C,x=64;v===1&&(x=256);let S=[m,C,b/E],F=[m,C,2],j=["rank","type","type"],J=[];J.push(...XA(S,F));let L=N=>{let U=$e("x",o.dataType,3,E),f=$e("scale",n.dataType,n.dims),k=$e("bias",u.dataType,u.dims),e=YA("output",1,3,2),d=[U,f,k,e];return`
  var<workgroup> workgroup_shared : array<${D}, ${x}>;
  const workgroup_size = ${x}u;
  ${N.declareVariables(...d)}
  ${N.mainStart(x)}
    let batch = workgroup_index / uniforms.x_shape[1];
    let channel = workgroup_index % uniforms.x_shape[1];
    let hight = uniforms.x_shape[2];
    // initialize workgroup memory
    var sum = ${B}(0);
    var squared_sum = ${B}(0);
    for (var h = local_idx; h < hight; h += workgroup_size) {
      let value = ${B}(${U.get("batch","channel","h")});
      sum += value;
      squared_sum += value * value;
    }
    workgroup_shared[local_idx] = ${D}(sum, squared_sum);
    workgroupBarrier();

    for (var currSize = workgroup_size >> 1;  currSize > 0; currSize = currSize >> 1) {
      if (local_idx < currSize) {
        workgroup_shared[local_idx] = workgroup_shared[local_idx] + workgroup_shared[local_idx + currSize];
      }
      workgroupBarrier();
    }
    if (local_idx == 0) {
      let sum_final = ${Jn("workgroup_shared[0][0]",E)} / f32(hight * ${E});
      let squared_sum_final = ${Jn("workgroup_shared[0][1]",E)} / f32(hight * ${E});

      let inv_std_dev = inverseSqrt(squared_sum_final - sum_final * sum_final + f32(${w}));
      let channel_scale = inv_std_dev * f32(scale[channel]);
      let channel_shift = f32(bias[channel]) - sum_final * channel_scale;
      output[workgroup_index] = vec2f(channel_scale, channel_shift);
    }
  }`};return a.compute({name:"InstanceNormComputeChannelScaleShift",shaderCache:{hint:`${E};${w};${x}`,inputDependencies:j},getRunData:()=>({outputs:[{dims:F,dataType:1}],dispatchGroup:{x:v},programUniforms:J}),getShaderSource:L},{inputs:[o,n,u],outputs:[-1]})[0]},v4=(a,o,n)=>{let u=o[0].dims,m=u,b=2,C=u[0],w=u[1],E=Ue.sizeFromDimension(u,b),B=Pr(E),D=Ue.size(m)/B,v=I2(a,o[0],o[1],o[2],C,E,w,n.epsilon),x=[C,w,E/B],S=[C,w],F=["type","none"],j=J=>{let L=$e("x",o[0].dataType,x.length,B),N=$e("scale_shift",1,S.length,2),U=YA("output",o[0].dataType,x.length,B),f=[L,N,U];return`
  ${J.registerUniform("output_size","u32").declareVariables(...f)}
  ${J.mainStart()}
  ${J.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
      let outputIndices = ${U.offsetToIndices("global_idx")};
      let batch = outputIndices[0];
      let channel = outputIndices[1];
      let scale_shift = ${N.getByIndices("vec2<u32>(batch, channel)")};
      let value = ${L.getByOffset("global_idx")} * ${U.type.value}(scale_shift.x) + ${U.type.value}(scale_shift.y);
      ${U.setByOffset("global_idx","value")};
  }`};a.compute({name:"InstanceNormalization",shaderCache:{hint:`${B}`,inputDependencies:F},getRunData:()=>({outputs:[{dims:m,dataType:o[0].dataType}],dispatchGroup:{x:Math.ceil(D/64)},programUniforms:[{type:12,data:D},...XA(x,S,x)]}),getShaderSource:j},{inputs:[o[0],v]})},B4=(a,o,n)=>{let u=o[0].dims,m=u,b=u[0],C=u[u.length-1],w=Ue.sizeFromDimension(u,1)/C,E=Pr(C),B=Ue.size(m)/E,D=[{type:12,data:w},{type:12,data:Math.floor(C/E)}],v=["type","type"],x=!1,S=[0,u.length-1];for(let L=0;L<u.length-2;L++)x=x||u[L+1]!==1,S.push(L+1);x=x&&u[u.length-1]!==1;let F=x?a.compute(ia(a.inputs[0],S),{inputs:[a.inputs[0]],outputs:[-1]})[0]:a.inputs[0].reshape(Array.from({length:u.length},(L,N)=>u[S[N]])),j=I2(a,F,o[1],o[2],b,w,C,n.epsilon),J=L=>{let N=ds(o[0].dataType),U=E===1?"vec2f":`mat${E}x2f`,f=d=>{let y=d===0?"x":"y",ee=E===1?"f32":`vec${E}f`;switch(E){case 1:return`${N}(${ee}(scale.${y}))`;case 2:return`vec2<${N}>(${ee}(scale[0].${y}, scale[1].${y}))`;case 4:return`vec4<${N}>(${ee}(scale[0].${y}, scale[1].${y}, scale[2].${y}, scale[3].${y}))`;default:throw new Error(`Not supported compoents ${E}`)}},k=$e("input",o[0].dataType,o[0].dims,E),e=YA("output",o[0].dataType,m,E);return`
  @group(0) @binding(0) var<storage, read> input : array<${k.type.storage}>;
  @group(0) @binding(1) var<storage, read> scale_input : array<${U}>;
  @group(0) @binding(2) var<storage, read_write> output : array<${e.type.storage}>;
  struct Uniforms {H: u32, C : u32};
  @group(0) @binding(3) var<uniform> uniforms: Uniforms;

  ${L.mainStart()}
    let current_image_number = global_idx / (uniforms.C * uniforms.H);
    let current_channel_number = global_idx % uniforms.C;

    let scale_offset = current_image_number * uniforms.C + current_channel_number;
    let scale = scale_input[scale_offset];
    output[global_idx] = fma(input[global_idx], ${f(0)}, ${f(1)});
  }`};a.compute({name:"InstanceNormalizationNHWC",shaderCache:{hint:`${E}`,inputDependencies:v},getRunData:()=>({outputs:[{dims:m,dataType:o[0].dataType}],dispatchGroup:{x:Math.ceil(B/64)},programUniforms:D}),getShaderSource:J},{inputs:[o[0],j]})},O3=(a,o)=>{o.format==="NHWC"?B4(a,a.inputs,o):v4(a,a.inputs,o)}}),x4,y4,z3,lI=hA(()=>{it(),ft(),ht(),x4=a=>{if(!a||a.length<2)throw new Error("layerNorm requires at least 2 inputs.")},y4=(a,o,n)=>{let u=o.simplified,m=a[0].dims,b=a[1],C=!u&&a[2],w=m,E=Ue.normalizeAxis(o.axis,m.length),B=Ue.sizeToDimension(m,E),D=Ue.sizeFromDimension(m,E),v=Ue.size(b.dims),x=C?Ue.size(C.dims):0;if(v!==D||C&&x!==D)throw new Error(`Size of X.shape()[axis:] == ${D}.
       Size of scale and bias (if provided) must match this.
       Got scale size of ${v} and bias size of ${x}`);let S=[];for(let k=0;k<m.length;++k)k<E?S.push(m[k]):S.push(1);let F=Pr(D),j=["type","type"],J=[{type:12,data:B},{type:1,data:D},{type:12,data:Math.floor(D/F)},{type:1,data:o.epsilon}];C&&j.push("type");let L=n>1,N=n>2,U=k=>{let e=ds(a[0].dataType),d=[$e("x",a[0].dataType,a[0].dims,F),$e("scale",b.dataType,b.dims,F)];C&&d.push($e("bias",C.dataType,C.dims,F)),d.push(YA("output",a[0].dataType,w,F)),L&&d.push(YA("mean_data_output",1,S)),N&&d.push(YA("inv_std_output",1,S));let y=[{name:"norm_count",type:"u32"},{name:"norm_size",type:"f32"},{name:"norm_size_vectorized",type:"u32"},{name:"epsilon",type:"f32"}];return`
  ${k.registerUniforms(y).declareVariables(...d)}
  ${k.mainStart()}
    ${k.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.norm_count")}
    let offset = global_idx * uniforms.norm_size_vectorized;
    var mean_vector = ${$2("f32",F)};
    var mean_square_vector = ${$2("f32",F)};

    for (var h: u32 = 0u; h < uniforms.norm_size_vectorized; h++) {
      let value = ${ro(e,F,"x[h + offset]")};
      mean_vector += value;
      mean_square_vector += value * value;
    }
    let mean = ${Jn("mean_vector",F)} / uniforms.norm_size;
    let inv_std_dev = inverseSqrt(${Jn("mean_square_vector",F)} / uniforms.norm_size ${u?"":"- mean * mean"} + uniforms.epsilon);

    for (var j: u32 = 0; j < uniforms.norm_size_vectorized; j++) {
      let f32input = ${ro(e,F,"x[j + offset]")};
      let f32scale = ${ro(e,F,"scale[j]")};
      output[j + offset] = ${d[0].type.value}((f32input ${u?"":"- mean"}) * inv_std_dev * f32scale
        ${C?`+ ${ro(e,F,"bias[j]")}`:""}
      );
    }

    ${L?"mean_data_output[global_idx] = mean":""};
    ${N?"inv_std_output[global_idx] = inv_std_dev":""};
  }`},f=[{dims:w,dataType:a[0].dataType}];return L&&f.push({dims:S,dataType:1}),N&&f.push({dims:S,dataType:1}),{name:"LayerNormalization",shaderCache:{hint:`${F};${n};${u}`,inputDependencies:j},getRunData:()=>({outputs:f,dispatchGroup:{x:Math.ceil(B/64)},programUniforms:J}),getShaderSource:U}},z3=(a,o)=>{x4(a.inputs),a.compute(y4(a.inputs,o,a.outputCount))}}),D4,N3,cI=hA(()=>{ft(),Sc(),Oc(),D4=a=>{if(!a||a.length!==2)throw new Error("MatMul requires 2 inputs.");if(a[0].dims[a[0].dims.length-1]!==a[1].dims[a[1].dims.length-2])throw new Error("shared dimension does not match.")},N3=a=>{D4(a.inputs);let o=lo.calcShape(a.inputs[0].dims,a.inputs[1].dims,!0);if(!o)throw new Error("Can't use matmul on the given tensors");let n=o[o.length-1],u=a.inputs[0].dims[a.inputs[0].dims.length-1];if(n<8&&u<8)a.compute(Fc(a.inputs,{activation:""},o));else{let m=o[o.length-2],b=Ue.size(a.inputs[0].dims.slice(0,-2)),C=Ue.size(a.inputs[1].dims.slice(0,-2));if(b!==1&&m===1&&C===1){let w=a.inputs[0].reshape([1,b,u]),E=a.inputs[1].reshape([1,u,n]),B=[1,b,n],D=[w,E];a.compute(U0(D,{activation:""},o,B),{inputs:D})}else a.compute(U0(a.inputs,{activation:""},o))}}}),T4,P4,G4,L3,_3,uI=hA(()=>{it(),ft(),Nr(),ht(),T4=(a,o)=>{if(a.length<3||a.length>4)throw new Error("MatMulNBits requires 3 or 4 inputs");let n=a[0],u=n.dims.length;if(n.dims[u-1]!==o.k)throw new Error("The last dim of input shape does not match the k value");let m=Math.floor((o.k+o.blockSize-1)/o.blockSize),b=o.blockSize/8*o.bits,C=a[1];if(!Ue.areEqual(C.dims,[o.n,m,b]))throw new Error("The second inputs must be 3D tensor with shape N X nBlocksPerCol X blobSize");let w=a[2].dims;if(Ue.size(w)!==o.n*m)throw new Error("scales input size error.");if(a.length===4){let E=a[3].dims,B=o.bits>4?o.n*m:o.n*Math.floor((m+1)/2);if(Ue.size(E)!==B)throw new Error("zeroPoints input size error.")}},P4=(a,o)=>{let n=a[0].dims,u=n.length,m=n[u-2],b=o.k,C=o.n,w=n.slice(0,u-2),E=Ue.size(w),B=a[1].dims[2]/4,D=a[0].dataType,v=Pr(o.k),x=Pr(B),S=Pr(C),F=w.concat([m,C]),j=m>1&&C/S%2===0?2:1,J=Ue.size(F)/S/j,L=64,N=[],U=[E,m,b/v],f=Ue.convertShape(a[1].dims).slice();f.splice(-1,1,B/x),N.push(...XA(U)),N.push(...XA(f)),N.push(...XA(a[2].dims)),a.length===4&&N.push(...XA(Ue.convertShape(a[3].dims)));let k=[E,m,C/S];N.push(...XA(k));let e=d=>{let y=U.length,ee=$e("a",a[0].dataType,y,v),T=$e("b",12,f.length,x),O=$e("scales",a[2].dataType,a[2].dims.length),we=[ee,T,O],$=a.length===4?$e("zero_points",12,a[3].dims.length):void 0;$&&we.push($);let be=k.length,Ce=YA("output",a[0].dataType,be,S),Ee=ds(a[0].dataType),Be=(()=>{switch(v){case 1:return`array<${Ee}, 8>`;case 2:return`mat4x2<${Ee}>`;case 4:return`mat2x4<${Ee}>`;default:throw new Error(`${v}-component is not supported.`)}})(),ve=()=>{let le=`
          // reuse a data
            var input_offset = ${ee.indicesToOffset(`${ee.type.indices}(batch, row, word_offset)`)};
            var a_data: ${Be};
            for (var j: u32 = 0; j < ${8/v}; j++) {
              a_data[j] = ${ee.getByOffset("input_offset")};
              input_offset++;
            }
          `;for(let Ae=0;Ae<S*j;Ae++)le+=`
            b_value = ${x===1?`b${Ae}_data`:`b${Ae}_data[i]`};
            b_value_lower = unpack4xU8(b_value & b_mask);
            b_value_upper = unpack4xU8((b_value >> 4) & b_mask);
            b_quantized_values = ${Be}(${Array.from({length:4},(pe,oe)=>`${Ee}(b_value_lower[${oe}]), ${Ee}(b_value_upper[${oe}])`).join(", ")});
            b_dequantized_values = ${v===1?`${Be}(${Array.from({length:8},(pe,oe)=>`(b_quantized_values[${oe}] - ${$?`zero_point${Ae}`:"zero_point"}) * scale${Ae}`).join(", ")});`:`(b_quantized_values - ${Be}(${Array(8).fill(`${$?`zero_point${Ae}`:"zero_point"}`).join(",")})) * scale${Ae};`};
            workgroup_shared[local_id.x * ${j} + ${Math.floor(Ae/S)}]${S>1?`[${Ae%S}]`:""} += ${Array.from({length:8/v},(pe,oe)=>`${v===1?`a_data[${oe}] * b_dequantized_values[${oe}]`:`dot(a_data[${oe}], b_dequantized_values[${oe}])`}`).join(" + ")};
          `;return le},Ne=()=>{let le=`
            var col_index = col * ${S};
            ${$?`
            let zero_point_bytes_per_col = (nBlocksPerCol + 1) / 2;
            var zero_point_byte_count: u32;
            var zero_point_word_index: u32;
            var zero_point_byte_offset: u32;
            let zero_point_nibble_offset: u32 = block & 0x1u;
            var zero_point_bits_offset: u32;
            var zero_point_word: u32;`:`
            // The default zero point is 8 for unsigned 4-bit quantization.
            let zero_point = ${Ee}(8);`}
            `;for(let Ae=0;Ae<S*j;Ae++)le+=`
            let scale${Ae} = ${O.getByOffset("col_index * nBlocksPerCol + block")};
            ${$?`
            zero_point_byte_count = col_index * zero_point_bytes_per_col + (block >> 0x1u);
            zero_point_word_index = zero_point_byte_count >> 0x2u;
            zero_point_byte_offset = zero_point_byte_count & 0x3u;
            zero_point_bits_offset = (zero_point_byte_offset << 3) + (zero_point_nibble_offset << 2);
            zero_point_word = ${$.getByOffset("zero_point_word_index")} >> zero_point_bits_offset;
            let zero_point${Ae} = ${Ee}((zero_point_word) & 0xFu);`:""}
            col_index += 1;`;return le},Fe=()=>{let le=`col_index = col * ${S};`;for(let Ae=0;Ae<S*j;Ae++)le+=`
            let b${Ae}_data = ${T.getByIndices(`${T.type.indices}(col_index, block, word)`)};
            col_index += 1;`;return le+=`
            var b_value: u32;
            let b_mask: u32 = 0x0F0F0F0Fu;
            var b_value_lower: vec4<u32>;
            var b_value_upper: vec4<u32>;
            var b_quantized_values: ${Be};
            var b_dequantized_values: ${Be};`,le};return`
        var<workgroup> workgroup_shared: array<${Ce.type.value}, ${j*L}>;
        ${d.declareVariables(...we,Ce)}
        ${d.mainStart([L,1,1])}
          let output_indices = ${Ce.offsetToIndices(`(global_idx / ${L}) * ${j}`)};
          let col = output_indices[2];
          let row = output_indices[1];
          let batch = output_indices[0];
          let nBlocksPerCol = uniforms.b_shape[1];

          for (var block = local_id.x; block < nBlocksPerCol; block += ${L}) {
            //process one block
            var word_offset: u32 = block * ${o.blockSize/v};
            ${Ne()}
            for (var word: u32 = 0; word < ${B}; word += ${x}) {
              ${Fe()}
              for (var i: u32 = 0; i < ${x}; i++) {
                ${ve()}
                word_offset += ${8/v};
              }
            }
          }
          workgroupBarrier();

          if (local_id.x < ${j}) {
            var output_value: ${Ce.type.value} = ${Ce.type.value}(0);
            var workgroup_shared_offset: u32 = local_id.x;
            for (var b: u32 = 0u; b < ${L}u; b++) {
              output_value += workgroup_shared[workgroup_shared_offset];
              workgroup_shared_offset += ${j};
            }
            ${Ce.setByIndices(`${Ce.type.indices}(batch, row, col + local_id.x)`,"output_value")};
          }
        }`};return{name:"MatMulNBits",shaderCache:{hint:`${o.blockSize};${o.bits};${v};${x};${S};${j};${L}`,inputDependencies:Array(a.length).fill("rank")},getRunData:()=>({outputs:[{dims:F,dataType:D}],dispatchGroup:{x:J},programUniforms:N}),getShaderSource:e}},G4=(a,o)=>{let n=a[0].dims,u=n.length,m=n[u-2],b=o.k,C=o.n,w=n.slice(0,u-2),E=Ue.size(w),B=a[1].dims[2]/4,D=a[0].dataType,v=Pr(o.k),x=Pr(B),S=w.concat([m,C]),F=128,j=C%8===0?8:C%4===0?4:1,J=F/j,L=J*x*8,N=L/v,U=L/o.blockSize,f=Ue.size(S)/j,k=[],e=[E,m,b/v],d=Ue.convertShape(a[1].dims).slice();d.splice(-1,1,B/x),k.push(...XA(e)),k.push(...XA(d)),k.push(...XA(a[2].dims)),a.length===4&&k.push(...XA(Ue.convertShape(a[3].dims)));let y=[E,m,C];k.push(...XA(y));let ee=T=>{let O=e.length,we=$e("a",a[0].dataType,O,v),$=$e("b",12,d.length,x),be=$e("scales",a[2].dataType,a[2].dims.length),Ce=[we,$,be],Ee=a.length===4?$e("zero_points",12,a[3].dims.length):void 0;Ee&&Ce.push(Ee);let Be=y.length,ve=YA("output",a[0].dataType,Be),Ne=ds(a[0].dataType),Fe=()=>{switch(v){case 1:return`
          let a_data0 = vec4<${Ne}>(sub_a[word_offset], sub_a[word_offset + 1], sub_a[word_offset + 2], sub_a[word_offset + 3]);
          let a_data1 = vec4<${Ne}>(sub_a[word_offset + 4], sub_a[word_offset + 5], sub_a[word_offset + 6], sub_a[word_offset + 7]);`;case 2:return`
          let a_data0 = vec4<${Ne}>(sub_a[word_offset], sub_a[word_offset + 1]);
          let a_data1 = vec4<${Ne}>(sub_a[word_offset + 2], sub_a[word_offset + 3]);`;case 4:return`
          let a_data0 = sub_a[word_offset];
          let a_data1 = sub_a[word_offset + 1];`;default:throw new Error(`${v}-component is not supported.`)}};return`
        var<workgroup> sub_a: array<${we.type.value}, ${N}>;
        var<workgroup> inter_results: array<array<${ve.type.value}, ${J}>, ${j}>;
        ${T.declareVariables(...Ce,ve)}
        ${T.mainStart([J,j,1])}
          let output_indices = ${ve.offsetToIndices(`workgroup_index * ${j}`)};
          let col = output_indices[2];
          let row = output_indices[1];
          let batch = output_indices[0];
          let n_blocks_per_col = uniforms.b_shape[1];
          let num_tiles =  (n_blocks_per_col - 1) / ${U} + 1;

          // Loop over shared dimension.
          for (var tile: u32 = 0; tile < num_tiles; tile += 1) {
            let a_col_start = tile * ${N};
            // load one tile A data into shared memory.
            for (var a_offset = local_idx; a_offset < ${N}; a_offset += ${F})
            {
              let a_col = a_col_start + a_offset;
              if (a_col < uniforms.a_shape[2])
              {
                sub_a[a_offset] = ${we.getByIndices(`${we.type.indices}(batch, row, a_col)`)};
              } else {
                sub_a[a_offset] = ${we.type.value}(0);
              }
            }
            workgroupBarrier();

            // each thread process one block
            let b_row = col + local_id.y;
            let block = tile * ${U} + local_id.x;
            ${Ee?`
            let zero_point_bytes_per_col = (n_blocks_per_col + 1) / 2;
            let zero_point_byte_count = b_row * zero_point_bytes_per_col + (block >> 0x1u);
            let zero_point_word_index = zero_point_byte_count >> 0x2u;
            let zero_point_byte_offset = zero_point_byte_count & 0x3u;
            let zero_point_nibble_offset: u32 = block & 0x1u;
            let zero_point_bits_offset = (zero_point_byte_offset << 3) + (zero_point_nibble_offset << 2);
            let zero_point_word = ${Ee.getByOffset("zero_point_word_index")} >> zero_point_bits_offset;
            let zero_point = ${Ne}((zero_point_word) & 0xFu);`:`
            // The default zero point is 8 for unsigned 4-bit quantization.
            let zero_point = ${Ne}(8);`}
            let scale = ${be.getByOffset("b_row * n_blocks_per_col + block")};
            let b_data = ${$.getByIndices(`${$.type.indices}(b_row, block, 0)`)};
            var word_offset = local_id.x * ${o.blockSize/v};
            for (var i: u32 = 0; i < ${x}; i++) {
              ${Fe()}
              let b_value = ${x===1?"b_data":"b_data[i]"};
              let b_value_lower = unpack4xU8(b_value & 0x0F0F0F0Fu);
              let b_value_upper = unpack4xU8((b_value >> 4) & 0x0F0F0F0Fu);
              let b_quantized_values = mat2x4<${Ne}>(${Array.from({length:4},(le,Ae)=>`${Ne}(b_value_lower[${Ae}]), ${Ne}(b_value_upper[${Ae}])`).join(", ")});
              let b_dequantized_values = (b_quantized_values - mat2x4<${Ne}>(${Array(8).fill("zero_point").join(",")})) * scale;
              inter_results[local_id.y][local_id.x] += ${Array.from({length:2},(le,Ae)=>`${`dot(a_data${Ae}, b_dequantized_values[${Ae}])`}`).join(" + ")};
              word_offset += ${8/v};
            }
            workgroupBarrier();
          }

          if (local_idx < ${j}) {
            var output_value: ${ve.type.value} = ${ve.type.value}(0);
            for (var b = 0u; b < ${J}; b++) {
              output_value += inter_results[local_idx][b];
            }
            if (col + local_idx < uniforms.output_shape[2])
            {
              ${ve.setByIndices(`${ve.type.indices}(batch, row, col + local_idx)`,"output_value")}
            }
          }
        }`};return{name:"BlockwiseMatMulNBits32",shaderCache:{hint:`${o.blockSize};${v};${x};${J};${j}`,inputDependencies:Array(a.length).fill("rank")},getRunData:()=>({outputs:[{dims:S,dataType:D}],dispatchGroup:{x:f},programUniforms:k}),getShaderSource:ee}},L3=(a,o)=>{T4(a.inputs,o),o.blockSize===32&&a.adapterInfo.isVendor("intel")&&a.adapterInfo.isArchitecture("gen-12lp")?a.compute(G4(a.inputs,o)):a.compute(P4(a.inputs,o))},_3=a=>Nt(a)}),Q4,F4,S4,O4,z4,N4,L4,_4,R3,dI=hA(()=>{it(),ft(),ht(),Q4=a=>{if(!a||a.length<1)throw new Error("Too few inputs");if(a[0].dataType!==1&&a[0].dataType!==10)throw new Error("Input type must be float or float16.");if(a.length>=2){let o=a[0].dims.length*2===a[1].dims[0];if(a.length===4&&(o=a[3].dims[0]*2===a[1].dims[0]),!o)throw new Error("The pads should be a 1D tensor of shape [2 * input_rank] or [2 * num_axes].")}},F4=(a,o,n)=>{let u="";for(let m=o-1;m>=0;--m)u+=`
            k = i32(${a.indicesGet("indices",m)}) - ${HA("uniforms.pads",m,n)};
            if (k < 0) {
              break;
            }
            if (k >= i32(${HA("uniforms.x_shape",m,o)})) {
              break;
            }
            offset += k * i32(${HA("uniforms.x_strides",m,o)});
        `;return`
          value = ${a.type.value}(uniforms.constant_value);
          for (var i = 0; i < 1; i++) {
            var offset = 0;
            var k = 0;
            ${u}
            value = x[offset];
          }
      `},S4=(a,o,n)=>{let u="";for(let m=o-1;m>=0;--m)u+=`
                k = i32(${a.indicesGet("indices",m)}) - ${HA("uniforms.pads",m,n)};
                if (k < 0) {
                  k = -k;
                }
                {
                  let _2n_1 = 2 * (i32(${HA("uniforms.x_shape",m,o)}) - 1);
                  k = k % _2n_1;
                  if(k >= i32(${HA("uniforms.x_shape",m,o)})) {
                    k = _2n_1 - k;
                  }
                }
                offset += k * i32(${HA("uniforms.x_strides",m,o)});
            `;return`
              var offset = 0;
              var k = 0;
              ${u}
              value = x[offset];
          `},O4=(a,o,n)=>{let u="";for(let m=o-1;m>=0;--m)u+=`
                k = i32(${a.indicesGet("indices",m)}) - ${HA("uniforms.pads",m,n)};
                if (k < 0) {
                  k = 0;
                }
                if (k >= i32(${HA("uniforms.x_shape",m,o)})) {
                  k = i32(${HA("uniforms.x_shape",m,o)}) - 1;
                }
                offset += k * i32(${HA("uniforms.x_strides",m,o)});
            `;return`
              var offset = 0;
              var k = 0;
              ${u}
              value = x[offset];
          `},z4=(a,o,n)=>{let u="";for(let m=o-1;m>=0;--m)u+=`
                k = i32(${a.indicesGet("indices",m)}) - ${HA("uniforms.pads",m,n)};
                if (k < 0)  {
                  k += i32(${HA("uniforms.x_shape",m,o)}]);
                }
                if (k >= i32(${HA("uniforms.x_shape",m,o)})) {
                  k -= i32(${HA("uniforms.x_shape",m,o)});
                }
                offset += k * i32(${HA("uniforms.x_strides",m,o)});
            `;return`
              var offset = 0;
              var k = 0;
              ${u}
              value = x[offset];
          `},N4=(a,o,n)=>{switch(n.mode){case 0:return F4(a,o,n.pads.length);case 1:return S4(a,o,n.pads.length);case 2:return O4(a,o,n.pads.length);case 3:return z4(a,o,n.pads.length);default:throw new Error("Invalid mode")}},L4=(a,o)=>{let n=Ue.padShape(a[0].dims.slice(),o.pads),u=a[0].dims,m=Ue.size(n),b=[{type:12,data:m},{type:6,data:o.pads}],C=a.length>=3&&a[2].data;o.mode===0&&b.push({type:C?a[2].dataType:1,data:o.value}),b.push(...XA(a[0].dims,n));let w=["rank"],E=B=>{let D=YA("output",a[0].dataType,n.length),v=$e("x",a[0].dataType,u.length),x=v.type.value,S=N4(D,u.length,o),F=[{name:"output_size",type:"u32"},{name:"pads",type:"i32",length:o.pads.length}];return o.mode===0&&F.push({name:"constant_value",type:C?x:"f32"}),`
            ${B.registerUniforms(F).declareVariables(v,D)}
            ${B.mainStart()}
            ${B.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}

            let indices = ${D.offsetToIndices("global_idx")};

            var value = ${x}(0);
            ${S}
            output[global_idx] = value;
        }`};return{name:"Pad",shaderCache:{hint:`${o.mode}${C}`,inputDependencies:w},getRunData:()=>({outputs:[{dims:n,dataType:a[0].dataType}],dispatchGroup:{x:Math.ceil(Ue.size(n)/64)},programUniforms:b}),getShaderSource:E}},_4=(a,o)=>{if(a.length>1){let n=a[1].getBigInt64Array(),u=a.length>=3&&a[2].data?a[2].dataType===10?a[2].getUint16Array()[0]:a[2].getFloat32Array()[0]:0,m=a[0].dims.length,b=new Int32Array(2*m).fill(0);if(a.length>=4){let w=a[3].getBigInt64Array();for(let E=0;E<w.length;E++)b[Number(w[E])]=Number(n[E]),b[Number(w[E])+m]=Number(n[E+w.length])}else n.forEach((w,E)=>b[Number(E)]=Number(w));let C=[];return b.forEach(w=>C.push(w)),{mode:o.mode,value:u,pads:C}}else return o},R3=(a,o)=>{Q4(a.inputs);let n=_4(a.inputs,o);a.compute(L4(a.inputs,n),{inputs:[0]})}}),No,w2,k2,E2,M2,R4,j4,v2,B2,j3,W3,x2,Y3,V3,y2,H3,U3,K3,X3,fI=hA(()=>{Fa(),it(),ft(),ht(),No=a=>{if(gr.webgpu.validateInputContent&&(!a||a.length!==1))throw new Error("Pool ops requires 1 input.")},w2=(a,o,n)=>{let u=o.format==="NHWC",m=a.dims.slice();u&&m.splice(1,0,m.pop());let b=Object.hasOwnProperty.call(o,"dilations"),C=o.kernelShape.slice(),w=o.strides.slice(),E=b?o.dilations.slice():[],B=o.pads.slice();V0.adjustPoolAttributes(n,m,C,w,E,B);let D=V0.computePoolOutputShape(n,m,w,E,C,B,o.autoPad),v=Object.assign({},o);b?Object.assign(v,{kernelShape:C,strides:w,pads:B,dilations:E,cacheKey:o.cacheKey}):Object.assign(v,{kernelShape:C,strides:w,pads:B,cacheKey:o.cacheKey});let x=D.slice();return x.push(x.splice(1,1)[0]),[v,u?x:D]},k2=(a,o)=>{let n=o.format==="NHWC",u=Ue.size(a),m=Ue.size(o.kernelShape),b=[{type:12,data:u},{type:12,data:m}],C=[{name:"outputSize",type:"u32"},{name:"kernelSize",type:"u32"}];if(o.kernelShape.length<=2){let w=o.kernelShape[o.kernelShape.length-1],E=o.strides[o.strides.length-1],B=o.pads[o.pads.length/2-1],D=o.pads[o.pads.length-1],v=!!(B+D);b.push({type:12,data:w},{type:12,data:E},{type:12,data:B},{type:12,data:D}),C.push({name:"kw",type:"u32"},{name:"sw",type:"u32"},{name:"pwStart",type:"u32"},{name:"pwEnd",type:"u32"});let x=!1;if(o.kernelShape.length===2){let S=o.kernelShape[o.kernelShape.length-2],F=o.strides[o.strides.length-2],j=o.pads[o.pads.length/2-2],J=o.pads[o.pads.length-2];x=!!(j+J),b.push({type:12,data:S},{type:12,data:F},{type:12,data:j},{type:12,data:J}),C.push({name:"kh",type:"u32"},{name:"sh",type:"u32"},{name:"phStart",type:"u32"},{name:"phEnd",type:"u32"})}return[b,C,!0,v,x]}else{if(n)throw new Error("Pooling with kernelShape.length > 2 is not supported for NHWC format.");let w=Ue.computeStrides(o.kernelShape);b.push({type:12,data:w},{type:12,data:o.pads},{type:12,data:o.strides}),C.push({name:"kernelStrides",type:"u32",length:w.length},{name:"pads",type:"u32",length:o.pads.length},{name:"strides",type:"u32",length:o.strides.length});let E=o.pads.reduce((B,D)=>B+D);return[b,C,!!E,!1,!1]}},E2=(a,o,n,u,m,b,C,w,E,B,D,v)=>{let x=m.format==="NHWC",S=o.type.value,F=YA("output",o.type.tensor,u);if(m.kernelShape.length<=2){let j="",J="",L="",N=n-(x?2:1);if(D?j=`
                for (var i: u32 = 0u; i < uniforms.kw; i++) {
                  xIndices[${N}] = indices[${N}] * uniforms.sw - uniforms.pwStart + i;
                  if (xIndices[${N}] < 0 || xIndices[${N}]
                      >= uniforms.x_shape[${N}]) {
                    pad++;
                    continue;
                  }
                  let x_val = x[${o.indicesToOffset("xIndices")}];
                  ${b}
                }`:j=`
                for (var i: u32 = 0u; i < uniforms.kw; i++) {
                  xIndices[${N}] = indices[${N}] * uniforms.sw - uniforms.pwStart + i;
                  let x_val = x[${o.indicesToOffset("xIndices")}];
                  ${b}
                }`,m.kernelShape.length===2){let U=n-(x?3:2);v?J=`
                for (var j: u32 = 0u; j < uniforms.kh; j++) {
                  xIndices[${U}] = indices[${U}] * uniforms.sh - uniforms.phStart + j;
                  if (xIndices[${U}] < 0 || xIndices[${U}] >= uniforms.x_shape[${U}]) {
                    pad += i32(uniforms.kw);
                    continue;
                  }
              `:J=`
                for (var j: u32 = 0u; j < uniforms.kh; j++) {
                  xIndices[${U}] = indices[${U}] * uniforms.sh - uniforms.phStart + j;
                `,L=`
              }
            `}return`
            ${a.registerUniforms(E).declareVariables(o,F)}

            ${a.mainStart()}
              ${a.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}

              let indices = ${F.offsetToIndices("global_idx")};
              var xIndices = ${F.offsetToIndices("global_idx")};

              var value = ${S}(${w});
              var pad = 0;
              ${J}
              ${j}
              ${L}
              ${C}

              output[global_idx] = value;
            }`}else{if(x)throw new Error("Pooling with kernelShape.length > 2 is not supported for NHWC format.");let j=m.kernelShape.length,J=m.pads.length,L="";return B?L=`
                if (xIndices[j] >= uniforms.x_shape[j]) {
                  pad++;
                  isPad = true;
                  break;
                }
              }
              if (!isPad) {
                let x_val = x[${o.indicesToOffset("xIndices")}];
                ${b}
              }`:L=`
              }
              let x_val = x[${o.indicesToOffset("xIndices")}];
              ${b}
            `,`
            ${a.registerUniforms(E).declareVariables(o,F)}

            ${a.mainStart()}
              ${a.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
              let indices = ${F.offsetToIndices("global_idx")};
              var xIndices = ${F.offsetToIndices("global_idx")};

              var offsets: array<u32, ${j}>;

              var value = ${S}(${w});
              var pad = 0;
              var isPad = false;

              for (var i: u32 = 0u; i < uniforms.kernelSize; i++) {
                var offset = i;
                for (var j = 0u; j < ${j-1}u; j++) {
                  offsets[j] = offset / ${HA("uniforms.kernelStrides","j",j)};
                  offset -= offsets[j] * ${HA("uniforms.kernelStrides","j",j)};
                }
                offsets[${j-1}] = offset;

                isPad = false;
                for (var j = ${n-j}u; j < ${n}u; j++) {
                  xIndices[j] = indices[j] * ${HA("uniforms.strides",`j - ${n-j}u`,j)}
                    + offsets[j - ${n-j}u] - ${HA("uniforms.pads","j - 2u",J)};
                  ${L}
              }
              ${C}

              output[global_idx] = value;
            }`}},M2=a=>`${a.format};${a.ceilMode};${a.autoPad};${a.kernelShape.length}`,R4=a=>`${M2(a)};${a.countIncludePad}`,j4=a=>`${M2(a)};${a.storageOrder};${a.dilations}`,v2=a=>({format:a.format,autoPad:["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][a.auto_pad],ceilMode:a.ceil_mode,kernelShape:a.kernel_shape,strides:a.strides,pads:a.pads}),B2=(a,o,n,u)=>{let[m,b]=w2(o,u,n),C=$e("x",o.dataType,o.dims.length),w=C.type.value,E="value += x_val;",B="";m.countIncludePad?B+=`value /= ${w}(uniforms.kernelSize);`:B+=`value /= ${w}(i32(uniforms.kernelSize) - pad);`;let[D,v,x,S,F]=k2(b,m);D.push(...XA(o.dims,b));let j=["rank"];return{name:a,shaderCache:{hint:`${u.cacheKey};${x};${S};${F}`,inputDependencies:j},getRunData:()=>({outputs:[{dims:b,dataType:o.dataType}],dispatchGroup:{x:Math.ceil(Ue.size(b)/64)},programUniforms:D}),getShaderSource:J=>E2(J,C,o.dims.length,b.length,m,E,B,0,v,x,S,F)}},j3=a=>{let o=a.count_include_pad!==0,n=v2(a);if(n.ceilMode!==0)throw new Error("using ceil() in shape computation is not yet supported for AveragePool");let u={countIncludePad:o,...n,cacheKey:""};return{...u,cacheKey:R4(u)}},W3=(a,o)=>{No(a.inputs),a.compute(B2("AveragePool",a.inputs[0],!1,o))},x2={autoPad:"",ceilMode:0,countIncludePad:!1,kernelShape:[],strides:[],pads:[],storageOrder:0,dilations:[]},Y3=a=>{let o=a.format;return{format:o,...x2,cacheKey:o}},V3=(a,o)=>{No(a.inputs),a.compute(B2("GlobalAveragePool",a.inputs[0],!0,o))},y2=(a,o,n,u)=>{let[m,b]=w2(o,u,n),C=`
      value = max(x_val, value);
    `,w="",E=$e("x",o.dataType,o.dims.length),B=["rank"],[D,v,x,S,F]=k2(b,m);return D.push(...XA(o.dims,b)),{name:a,shaderCache:{hint:`${u.cacheKey};${x};${S};${F}`,inputDependencies:B},getRunData:()=>({outputs:[{dims:b,dataType:o.dataType}],dispatchGroup:{x:Math.ceil(Ue.size(b)/64)},programUniforms:D}),getShaderSource:j=>E2(j,E,o.dims.length,b.length,m,C,w,o.dataType===10?-65504:-1e5,v,x,S,F)}},H3=(a,o)=>{No(a.inputs),a.compute(y2("MaxPool",a.inputs[0],!1,o))},U3=a=>{let o=a.storage_order,n=a.dilations,u=v2(a);if(o!==0)throw new Error("column major storage order is not yet supported for MaxPool");if(u.ceilMode!==0)throw new Error("using ceil() in shape computation is not yet supported for MaxPool");let m={storageOrder:o,dilations:n,...u,cacheKey:""};return{...m,cacheKey:j4(m)}},K3=a=>{let o=a.format;return{format:o,...x2,cacheKey:o}},X3=(a,o)=>{No(a.inputs),a.compute(y2("GlobalMaxPool",a.inputs[0],!0,o))}}),W4,Y4,Z3,J3,gI=hA(()=>{it(),ft(),Nr(),ht(),W4=(a,o)=>{if(a.length<2||a.length>3)throw new Error("DequantizeLinear requires 2 or 3 inputs.");if(a.length===3&&a[1].dims===a[2].dims)throw new Error("x-scale and x-zero-point must have the same shape.");if(a.length===3&&a[0].dataType!==a[2].dataType)throw new Error("x and x-zero-point must have the same data type.");if(a[0].dataType===6&&a.length>2)throw new Error("In the case of dequantizing int32 there is no zero point.");if(a[1].dims.length!==0&&a[1].dims.length!==1&&a[1].dims.length!==a[0].dims.length)throw new Error("scale input must be a scalar, a 1D tensor, or have the same rank as the input tensor.");if(a.length>2){if(a[0].dataType!==a[2].dataType)throw new Error("x and x-zero-point must have the same data type.");if(a[1].dims.length!==a[2].dims.length)throw new Error("scale and zero-point inputs must have the same rank.");if(!a[1].dims.map((n,u)=>n===a[2].dims[u]).reduce((n,u)=>n&&u,!0))throw new Error("scale and zero-point inputs must have the same shape.")}if(o.blockSize>0){if(a[1].dims.length===0||a[1].dims.length===1&&a[1].dims[0]===1)throw new Error("blockSize must be set only for block quantization.");if(!a[1].dims.map((m,b)=>b===o.axis||m===a[0].dims[b]).reduce((m,b)=>m&&b,!0))throw new Error("For block qunatization, scale input shape to match the input shape except for the axis");if(a[1].dims.length!==a[0].dims.length)throw new Error("For block qunatization the scale input rank must be the same as the x rank.");let n=a[0].dims[o.axis],u=a[1].dims[o.axis];if(o.blockSize<Math.ceil(n/u)||o.blockSize>Math.ceil(n/(u-1)-1))throw new Error("blockSize must be with in the range [ceil(dI / Si), ceil(dI / (Si - 1) - 1)].")}},Y4=(a,o)=>{let n=Ue.normalizeAxis(o.axis,a[0].dims.length),u=a[0].dataType,m=u===3,b=a[0].dims,C=a[1].dataType,w=Ue.size(b),E=u===3||u===2,B=E?[Math.ceil(Ue.size(a[0].dims)/4)]:a[0].dims,D=a[1].dims,v=a.length>2?a[2]:void 0,x=v?E?[Math.ceil(Ue.size(v.dims)/4)]:v.dims:void 0,S=D.length===0||D.length===1&&D[0]===1,F=S===!1&&D.length===1,j=Pr(w),J=S&&(!E||j===4),L=J?j:1,N=J&&!E?j:1,U=$e("input",E?12:u,B.length,N),f=$e("scale",C,D.length),k=v?$e("zero_point",E?12:u,x.length):void 0,e=YA("output",C,b.length,L),d=[U,f];k&&d.push(k);let y=[B,D];v&&y.push(x);let ee=[{type:12,data:w/L},{type:12,data:n},{type:12,data:o.blockSize},...XA(...y,b)],T=O=>{let we=[{name:"output_size",type:"u32"},{name:"axis",type:"u32"},{name:"block_size",type:"u32"}];return`
      ${O.registerUniforms(we).declareVariables(...d,e)}
      ${O.mainStart()}
          ${O.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
          let output_indices = ${e.offsetToIndices("global_idx")};

          // Set input x
          ${E?`
            let input = ${U.getByOffset("global_idx / 4")};
            let x_vec = ${m?"unpack4xI8(input)":"unpack4xU8(input)"};
            let x_value = ${L===1?"x_vec[global_idx % 4]":"x_vec"};`:`let x_value = ${U.getByOffset("global_idx")};`};

          // Set scale input
          ${S?`let scale_value= ${f.getByOffset("0")}`:F?`
            let scale_index = ${e.indicesGet("output_indices","uniforms.axis")};
            let scale_value= ${f.getByOffset("scale_index")};`:`
            var scale_indices: ${f.type.indices} = output_indices;
            let index = ${f.indicesGet("scale_indices","uniforms.axis")} / uniforms.block_size;
            ${f.indicesSet("scale_indices","uniforms.axis","index")};
            let scale_value= ${f.getByIndices("scale_indices")};`};

          // Set zero-point input
          ${k?S?E?`
                let zero_point_input = ${k.getByOffset("0")};
                let zero_point_vec =  ${m?"unpack4xI8(zero_point_input)":"unpack4xU8(zero_point_input)"};
                let zero_point_value= zero_point_vec[0]`:`let zero_point_value = ${k.getByOffset("0")}`:F?E?`
                let zero_point_index = ${e.indicesGet("output_indices","uniforms.axis")};
                let zero_point_input = ${k.getByOffset("zero_point_index / 4")};
                let zero_point_vec =  ${m?"unpack4xI8(zero_point_input)":"unpack4xU8(zero_point_input)"};
                let zero_point_value = zero_point_vec[zero_point_index % 4]`:`
                let zero_point_index = ${e.indicesGet("output_indices","uniforms.axis")};
                let zero_point_value = ${k.getByOffset("zero_point_index")};`:E?`
                let zero_point_offset = ${f.indicesToOffset("scale_indices")};
                let zero_point_input = ${k.getByOffset("zero_point_offset / 4")};
                let zero_point_vec = ${m?"unpack4xI8(zero_point_input)":"unpack4xU8(zero_point_input)"};
                let zero_point_value = zero_point_vec[zero_point_offset % 4];`:`let zero_point_value = ${k.getByIndices("scale_indices")};`:`let zero_point_value = ${E?m?"i32":"u32":U.type.value}(0);`};
      // Compute and write output
      ${e.setByOffset("global_idx",`${e.type.value}(x_value - zero_point_value) * scale_value`)};
      }`};return{name:"DequantizeLinear",shaderCache:{hint:o.cacheKey,inputDependencies:k?["rank","rank","rank"]:["rank","rank"]},getShaderSource:T,getRunData:()=>({outputs:[{dims:b,dataType:C}],dispatchGroup:{x:Math.ceil(w/L/64),y:1,z:1},programUniforms:ee})}},Z3=(a,o)=>{W4(a.inputs,o),a.compute(Y4(a.inputs,o))},J3=a=>Nt({axis:a.axis,blockSize:a.blockSize})}),V4,H4,q3,pI=hA(()=>{Fa(),it(),ht(),V4=(a,o,n)=>{let u=a===o,m=a<o&&n<0,b=a>o&&n>0;if(u||m||b)throw new Error("Range these inputs' contents are invalid.")},H4=(a,o,n,u)=>{let m=Math.abs(Math.ceil((o-a)/n)),b=[m],C=m,w=[{type:12,data:C},{type:u,data:a},{type:u,data:n},...XA(b)],E=B=>{let D=YA("output",u,b.length),v=D.type.value,x=[{name:"outputSize",type:"u32"},{name:"start",type:v},{name:"delta",type:v}];return`
        ${B.registerUniforms(x).declareVariables(D)}
        ${B.mainStart()}
        ${B.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
        output[global_idx] = uniforms.start + ${v}(global_idx) * uniforms.delta;
      }`};return{name:"Range",shaderCache:{hint:`${u}`},getShaderSource:E,getRunData:()=>({outputs:[{dims:b,dataType:u}],dispatchGroup:{x:Math.ceil(C/64)},programUniforms:w})}},q3=a=>{let o=0,n=0,u=0;a.inputs[0].dataType===6?(o=a.inputs[0].getInt32Array()[0],n=a.inputs[1].getInt32Array()[0],u=a.inputs[2].getInt32Array()[0]):a.inputs[0].dataType===1&&(o=a.inputs[0].getFloat32Array()[0],n=a.inputs[1].getFloat32Array()[0],u=a.inputs[2].getFloat32Array()[0]),gr.webgpu.validateInputContent&&V4(o,n,u),a.compute(H4(o,n,u,a.inputs[0].dataType),{inputs:[]})}}),U4,D2,T2,K4,$3,eC,mI=hA(()=>{it(),ft(),Nr(),ht(),U4=(a,o,n,u)=>{if(a!=="none"&&u!=="i32"&&u!=="u32"&&u!=="f32")throw new Error(`Input ${u} is not supported with reduction ${a}.`);let m=`{
                var oldValue = 0;
                loop {
                  let newValueF32 =`,b=`;
                  let newValue = bitcast<i32>(newValueF32);
                  let res = atomicCompareExchangeWeak(&${o}, oldValue, newValue);
                  if res.exchanged {
                    break;
                  }
                  oldValue = res.old_value;
                }
              }`;switch(a){case"none":return`${o}=${n};`;case"add":return u==="i32"||u==="u32"?`atomicAdd(&${o}, bitcast<${u}>(${n}));`:`
              ${m}bitcast<${u}>(oldValue) + (${n})${b}`;case"max":return u==="i32"||u==="u32"?`atomicMax(&${o}, bitcast<${u}>(${n}));`:`
                ${m}max(bitcast<f32>(oldValue), (${n}))${b}`;case"min":return u==="i32"||u==="u32"?`atomicMin(&${o}, bitcast<${u}>(${n}));`:`${m}min(bitcast<${u}>(oldValue), (${n}))${b}`;case"mul":return`${m}(bitcast<${u}>(oldValue) * (${n}))${b}`;default:throw new Error(`Reduction ${a} is not supported.`)}},D2=(a,o)=>`${a===1?`
    let element_count_dim = uniforms.output_strides;
    let dim_value = uniforms.output_shape;`:`
    let element_count_dim = uniforms.output_strides[${o?"i - indices_start":"i"}];
    let dim_value = uniforms.output_shape[${o?"i - indices_start":"i"} + uniforms.last_index_dimension];`}
    
    if (index >= 0) {
      if (index >= i32(dim_value)) {
        index = i32(dim_value - 1);
      }
    } else {
      if (index < -i32(dim_value)) {
        index = 0;
      } else {
        index += i32(dim_value);
      }
    }
    data_offset += u32((u32(index) * element_count_dim));`,T2=(a,o,n)=>`for (var i = 0u; i < uniforms.num_updates_elements; i++) {
        let value = updates[uniforms.num_updates_elements * ${n?"global_idx":"idx"} + i];
        ${U4(a.reduction,"output[data_offset + i]","value",o)}
      }`,K4=(a,o)=>{let n=a[0].dims,u=a[1].dims,m=n,b=1,C=Math.ceil(Ue.size(u)/b),w=u[u.length-1],E=Ue.sizeFromDimension(n,w),B=Ue.sizeFromDimension(u,0)/w,D=[{type:12,data:C},{type:12,data:w},{type:12,data:E},...XA(a[1].dims,a[2].dims,m)],v=x=>{let S=$e("indices",a[1].dataType,a[1].dims.length),F=$e("updates",a[2].dataType,a[2].dims.length,b),j=o.reduction!=="none"&&o.reduction!==""?ym("output",a[0].dataType,m.length):YA("output",a[0].dataType,m.length,b);return`
      ${x.registerUniform("output_size","u32").registerUniform("last_index_dimension","u32").registerUniform("num_updates_elements","u32").declareVariables(S,F,j)}
      ${x.mainStart()}
        ${x.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
  var hasDuplicates = false;
  if (${o.reduction==="none"}) {
    for (var i = 0; i < ${B}; i = i + 1) {
      for (var j = i + 1; j < ${B}; j = j + 1) {
        var index_i = i32(indices[i].x);
        var index_j = i32(indices[j].x);
        if (index_i == index_j) {
          hasDuplicates = true;
          break;
        }
      }
      if (hasDuplicates) {
        break;
      }
    }
  }

  if (${o.reduction==="none"} && hasDuplicates) {
    if (global_idx != 0u) {
      return;
    }
    // Process each index-update pair individually when duplicates exist
    for (var idx = 0u; idx < ${B}u; idx++) {
      var data_offset = 0u;
      for (var i = 0u; i < uniforms.last_index_dimension; i++) {
        var index = i32(indices[idx * uniforms.last_index_dimension + i].x);
        ${D2(n.length,!1)}
      }
      ${T2(o,j.type.value,!1)}
    }
    return;
  }

  var data_offset = 0u;
  var indices_start = uniforms.last_index_dimension * global_idx;
  var indices_end = indices_start + uniforms.last_index_dimension;
  for (var i = indices_start; i < indices_end; i++) {
    var index = i32(indices[i].x);
    ${D2(n.length,!0)}
  }
  ${T2(o,j.type.value,!0)}
  }`};return{name:"ScatterND",shaderCache:{hint:`${o.cacheKey}_${o.reduction}`,inputDependencies:["rank","rank"]},getRunData:()=>({outputs:[{dims:m,dataType:a[0].dataType}],dispatchGroup:{x:Math.ceil(C/64)},programUniforms:D}),getShaderSource:v}},$3=a=>Nt({reduction:a.reduction}),eC=(a,o)=>{a.compute(K4(a.inputs,o),{inputs:[a.inputs[1],a.inputs[2]],outputs:[]})}}),X4,Z4,J4,P2,q4,$4,ep,Ap,tp,rp,sp,ap,G2,np,ip,op,lp,cp,AC,tC,hI=hA(()=>{it(),ft(),Nr(),ht(),X4=(a,o)=>{if(a.every(n=>n>0||(()=>{throw new Error("Resize requires scales input values to be positive")})),a.length>0){if(o.mode==="linear"){if(!(a.length===2||a.length===3||a.length===4&&a[0]===1&&a[1]===1||a.length===4&&a[0]===1&&a[3]===1||a.length===5&&a[0]===1&&a[1]===1))throw new Error(`For linear mode, Resize requires scales to be 2D, 3D, 4D with either two outermost or one innermost and
            one outermost scale values equal to 1, or 5D with two outermost scale values equal to 1`)}else if(o.mode==="cubic"&&!(a.length===2||a.length===4&&a[0]===1&&a[1]===1||a.length===4&&a[0]===1&&a[3]===1))throw new Error("Resize requires scales input size to be 2 or 4 for cubic mode")}},Z4=(a,o,n)=>{o.every(m=>m>=0&&m<n||(()=>{throw new Error("Resize requires axes input values to be positive and less than rank")}));let u=new Array(n).fill(1);return o.forEach((m,b)=>u[m]=a[b]),u},J4=(a,o,n,u,m,b)=>{let[C,w,E]=n>10?[1,2,3]:[-1,a.length>1?1:-1,-1],B=a[0].dims.length;if(C>0&&a.length>C&&a[C].dims.length>0)a[C].getFloat32Array().forEach(D=>b.push(D));else if(o.coordinateTransformMode==="tf_crop_and_resize")throw new Error("Resize requires RoI input to be specified when coordinateTransformMode is tfCropAndResize");if(w>0&&a.length>w&&a[w].dims.length===1&&a[w].dims[0]>0){if(a[w].getFloat32Array().forEach(D=>u.push(D)),u.length!==0&&u.length!==B&&n>=18&&u.length!==o.axes.length)throw new Error("Resize requires scales input size to be same as input rank or axes size for opset 18 and up");X4(u,o),o.axes.length>0&&Z4(u,o.axes,B).forEach((D,v)=>u[v]=D)}if(E>0&&a.length>E&&a[E].dims.length===1&&a[E].dims[0]>0&&(a[E].getBigInt64Array().forEach(D=>m.push(Number(D))),m.length!==0&&m.length!==B&&n>=18&&m.length!==o.axes.length))throw new Error("Resize requires sizes input size to be same as input rank or axes size for opset 18 and up");if(o.axes.length>0){if(u.length!==0&&u.length!==o.axes.length)throw new Error('Resize requires "scales" input size to be of axes rank when axes attributes is specified');if(m.length!==0&&m.length!==o.axes.length)throw new Error('Resize requires "sizes" input size to be of rank axes rank when axes attributes is specified')}if(typeof u<"u"&&typeof m<"u"&&u.length>0&&m.length>B)throw new Error("Resize requires only of scales or sizes to be specified")},P2=(a,o,n,u)=>`
  // The whole part and the fractional part are calculated separately due to inaccuracy of floating
  // point division. As an example, f32(21) / f32(7) may evaluate to 2.99... instead of 3, causing an
  // offset-by-one error later in floor().
  let big = (${a}) * (${o});
  let whole = ${u}(big / (${n}));
  let fract = ${u}(big % (${n})) / ${u}(${n});
  return whole + fract;
`,q4=(a,o)=>`fn getOriginalCoordinateFromResizedCoordinate(xResized: u32, xScale: f32, lengthResized: u32,
     lengthOriginal: u32, roiStart: f32, roiEnd: f32) -> ${o} { `+(()=>{switch(a){case"asymmetric":return`
          if (xScale < 1.0 || floor(xScale) != xScale) {
            return ${o}(xResized) / ${o}(xScale);
          } else {
            ${P2("xResized","lengthOriginal","lengthResized",o)}
          }
        `;case"pytorch_half_pixel":return`if (lengthResized > 1) {
                    return (${o}(xResized) + 0.5) / ${o}(xScale) - 0.5;
                  } else {
                    return 0.0;
                  }`;case"tf_half_pixel_for_nn":return`return (${o}(xResized) + 0.5) / ${o}(xScale);`;case"align_corners":return`if (lengthResized == 1) {
                    return 0.0;
                  } else {
                    ${P2("xResized","lengthOriginal - 1","lengthResized - 1",o)}
                  }`;case"tf_crop_and_resize":return`if (lengthResized > 1) {
                    return ${o}(roiStart) * ${o}(lengthOriginal - 1) +
                        (${o}(xResized) * ${o}(roiEnd - roiStart) * ${o}(lengthOriginal - 1)) /
                        ${o}(lengthResized - 1);
                  } else {
                    return 0.5 * ${o}(roiStart + roiEnd) * ${o}(lengthOriginal - 1);
                  }`;case"half_pixel_symmetric":return`const outputWidth = ${o}xScale * ${o}(lengthResized);
                  const adjustment = ${o}(lengthResized) / outputWidth;
                  const center = ${o}(lengthOriginal) / 2;
                  const offset = center * (1 - adjustment);
                  return offset + ((${o}(xResized) + 0.5) / ${o}(xScale)) - 0.5;`;case"half_pixel":return`return ((${o}(xResized) + 0.5) / ${o}(xScale)) - 0.5;`;default:throw new Error(`Coordinate transform mode ${a} is not supported`)}})()+"}",$4=(a,o,n)=>`fn getNearestPixelFromOriginal(xOriginal: ${n}, isDownSample: bool) -> ${n} {`+(()=>{switch(a){case"round_prefer_ceil":return"if (fract(xOriginal) == 0.5) {             return ceil(xOriginal);           } else {             return round(xOriginal);           }";case"floor":return"return floor(xOriginal);";case"ceil":return"return ceil(xOriginal);";case"round_prefer_floor":return"if (fract(xOriginal) == 0.5) {                     return floor(xOriginal);                   } else {                     return round(xOriginal);                   }";case"simple":default:if(o<11)return"if (isDownSample)                     {                       return ceil(xOriginal);                     } else {                       return xOriginal;                     }";throw new Error(`Nearest mode ${a} is not supported`)}})()+"}",ep=(a,o,n)=>{let u=new Array(n).fill(0).concat(new Array(n).fill(1)),m=a.length===0?u:a.slice();return o.length>0?(o.forEach((b,C)=>{u[b]=m[C],u[C+n]=m[o.length+C]}),u):m},Ap=(a,o,n,u)=>{let m=[];if(n.length>0)if(u.length>0){if(a.forEach(b=>m.push(b)),Math.max(...u)>a.length)throw new Error("axes is out of bound");u.forEach((b,C)=>m[b]=n[C])}else n.forEach(b=>m.push(b));else{if(o.length===0)throw new Error("Resize requires either scales or sizes.");m=a.map((b,C)=>Math.round(b*o[C]))}return m},tp=(a,o,n)=>{let u=(()=>{switch(n.keepAspectRatioPolicy){case"not_larger":return n.axes.length>0?Math.min(...n.axes.map(b=>o[b]),Number.MAX_VALUE):Math.min(...o,Number.MAX_VALUE);case"not_smaller":return n.axes.length>0?Math.max(...n.axes.map(b=>o[b]),Number.MIN_VALUE):Math.max(...o,Number.MIN_VALUE);default:throw new Error(`Keep aspect ratio policy ${n.keepAspectRatioPolicy} is not supported`)}})();o.fill(1,0,o.length);let m=a.slice();return n.axes.length>0?(n.axes.forEach(b=>o[b]=u),n.axes.forEach(b=>m[b]=Math.round(a[b]*o[b]))):(o.fill(u,0,o.length),m.forEach((b,C)=>m[C]=Math.round(b*o[C]))),m},rp=(a,o,n,u,m)=>`
    fn calculateOriginalIndicesFromOutputIndices(output_indices: ${a.type.indices}) -> array<${a.type.value}, ${n.length}> {
      var original_indices: array<${a.type.value}, ${n.length}>;
      for (var i:u32 = 0; i < ${n.length}; i++) {
        var output_index = ${a.indicesGet("output_indices","i")};
        var scale = ${HA("uniforms.scales","i",u)};
        var roi_low = ${HA("uniforms.roi","i",m)};
        var roi_hi = ${HA("uniforms.roi",`i + ${o.length}`,m)};
        if (scale == 1.0) {
          original_indices[i] = ${a.type.value}(output_index);
        } else {
          var input_shape_i = ${HA("uniforms.input_shape","i",o.length)};
          var output_shape_i = ${HA("uniforms.output_shape","i",n.length)};
          original_indices[i] = getOriginalCoordinateFromResizedCoordinate(output_index, scale, output_shape_i,
                                                                           input_shape_i, roi_low, roi_hi);
        }
      }
      return original_indices;
    }`,sp=(a,o,n,u,m,b,C)=>`
    fn calculateInputIndicesFromOutputIndices(output_indices: ${o.type.indices}) -> ${a.type.indices} {
      var input_indices: ${a.type.indices};
      for (var i:u32 = 0; i < ${u.length}; i++) {
        var output_index = ${o.indicesGet("output_indices","i")};
        var input_index: u32;
        var scale = ${HA("uniforms.scales","i",m)};
        if (scale == 1.0) {
          input_index = output_index;
        } else {
          var roi_low = ${HA("uniforms.roi","i",b)};
          var roi_hi = ${HA("uniforms.roi",`i + ${n.length}`,b)};
          var input_shape_i = ${HA("uniforms.input_shape","i",n.length)};
          var output_shape_i = ${HA("uniforms.output_shape","i",u.length)};
          var original_idx = getOriginalCoordinateFromResizedCoordinate(output_index, scale, output_shape_i,
                                                                        input_shape_i, roi_low, roi_hi);
          if (!${C} || (original_idx >= 0 && original_idx < ${o.type.value}(input_shape_i))) {
            if (original_idx < 0) {
              input_index = 0;
            } else if (original_idx > ${o.type.value}(input_shape_i - 1)) {
              input_index = input_shape_i - 1;
            } else {
              input_index = u32(getNearestPixelFromOriginal(original_idx, scale < 1));
            }
          } else {
            input_index = u32(original_idx);
          }
        }
        ${a.indicesSet("input_indices","i","input_index")}
      }
      return input_indices;
    }`,ap=(a,o)=>`
    fn checkInputIndices(input_indices: ${a.type.indices}) -> bool {
      for (var i:u32 = 0; i < ${o.length}; i++) {
        var input_index = ${a.indicesGet("input_indices","i")};
        if (input_index < 0 || input_index >= ${HA("uniforms.input_shape","i",o.length)}) {
          return false;
        }
      }
      return true;
    }`,G2=(a,o,n,u)=>a.rank>u?`
    ${a.indicesSet("input_indices",o,"channel")};
    ${a.indicesSet("input_indices",n,"batch")};
`:"",np=(a,o,n,u,m)=>{let[b,C,w,E]=n.length===2?[-1,0,1,-1]:[0,2,3,1],B=a.type.value;return`
    fn getInputValue(batch: u32, channel: u32, row: u32, col: u32) -> ${B} {
      var input_indices: ${a.type.indices};
      ${a.indicesSet("input_indices",C,`max(0, min(row, ${n[C]} - 1))`)};
      ${a.indicesSet("input_indices",w,`max(0, min(col, ${n[w]} - 1))`)};
      ${G2(a,E,b,2)}
      return ${a.getByIndices("input_indices")};
    }

    fn bilinearInterpolation(output_indices: ${o.type.indices}) -> ${B} {
      var originalIndices = calculateOriginalIndicesFromOutputIndices(output_indices);
      var row:${B} = originalIndices[${C}];
      var col:${B} = originalIndices[${w}];
      ${u?`if (row < 0 || row > (${n[C]} - 1) || col < 0 || col > (${n[w]} - 1)) {
        return ${m};
      }`:""};
      row = max(0, min(row, ${n[C]} - 1));
      col = max(0, min(col, ${n[w]} - 1));
      var row1: u32 = u32(row);
      var col1: u32 = u32(col);
      var row2: u32 = u32(row + 1);
      var col2: u32 = u32(col + 1);
      var channel: u32 = ${n.length>2?`u32(originalIndices[${E}])`:"0"};
      var batch: u32 =  ${n.length>2?`u32(originalIndices[${b}])`:"0"};
      var x11: ${B} = getInputValue(batch, channel, row1, col1);
      var x12: ${B} = getInputValue(batch, channel, row1, col2);
      var x21: ${B} = getInputValue(batch, channel, row2, col1);
      var x22: ${B} = getInputValue(batch, channel, row2, col2);
      var dx1: ${B} = abs(row - ${B}(row1));
      var dx2: ${B} = abs(${B}(row2) - row);
      var dy1: ${B} = abs(col - ${B}(col1));
      var dy2: ${B} = abs(${B}(col2) - col);
      if (row1 == row2) {
        dx1 = 0.5;
        dx2 = 0.5;
      }
      if (col1 == col2) {
        dy1 = 0.5;
        dy2 = 0.5;
      }
      return (x11 * dx2 * dy2 + x12 * dx2 * dy1 + x21 * dx1 * dy2 + x22 * dx1 * dy1);
    }`},ip=(a,o,n,u,m,b,C,w,E,B)=>{let D=n.length===2,[v,x]=D?[0,1]:[2,3],S=a.type.value,F=j=>{let J=j===v?"row":"col";return`
      fn ${J}CubicInterpolation(input_indices: ${a.type.indices}, output_indices: ${o.type.indices}) -> ${S} {
        var output_index = ${o.indicesGet("output_indices",j)};
        var originalIdx: ${S} = getOriginalCoordinateFromResizedCoordinate(output_index, ${m[j]},
        ${u[j]}, ${n[j]}, ${b[j]}, ${b[j]} + ${n.length});
        var fractOriginalIdx: ${S} = originalIdx - floor(originalIdx);
        var coefs = getCubicInterpolationCoefs(fractOriginalIdx);

        if (${w} && (originalIdx < 0 || originalIdx > (${n[j]} - 1))) {
          return ${E};
        }
        var data: array<${S}, 4> = array<${S}, 4>(0.0, 0.0, 0.0, 0.0);
        for (var i: i32 = -1; i < 3; i++) {
          var ${J}: ${S} = originalIdx + ${S}(i);
          if (${J} < 0 || ${J} >= ${n[j]}) {
            ${B?`coefs[i + 1] = 0.0;
                        continue;`:w?`return ${E};`:`${J} = max(0, min(${J}, ${n[j]} - 1));`};
          }
        var input_indices_copy: ${a.type.indices} = input_indices;
          ${a.indicesSet("input_indices_copy",j,`u32(${J})`)};
          data[i + 1] = ${j===v?a.getByIndices("input_indices_copy"):"rowCubicInterpolation(input_indices_copy, output_indices)"};
        }
        return cubicInterpolation1D(data, coefs);
      }`};return`
    ${F(v)};
    ${F(x)};
  fn getCubicInterpolationCoefs(s: ${S}) -> array<${S}, 4> {
    var absS = abs(s);
    var coeffs: array<${S}, 4> = array<${S}, 4>(0.0, 0.0, 0.0, 0.0);
    var oneMinusAbsS: ${S} = 1.0 - absS;
    var twoMinusAbsS: ${S} = 2.0 - absS;
    var onePlusAbsS: ${S} = 1.0 + absS;
    coeffs[0] = ((${C} * onePlusAbsS - 5 * ${C}) * onePlusAbsS + 8 * ${C}) * onePlusAbsS - 4 * ${C};
    coeffs[1] = ((${C} + 2) * absS - (${C} + 3)) * absS * absS + 1;
    coeffs[2] = ((${C} + 2) * oneMinusAbsS - (${C} + 3)) * oneMinusAbsS * oneMinusAbsS + 1;
    coeffs[3] = ((${C} * twoMinusAbsS - 5 * ${C}) * twoMinusAbsS + 8 * ${C}) * twoMinusAbsS - 4 * ${C};
    return coeffs;
  }

  fn cubicInterpolation1D(x: array<${S}, 4>, coefs: array<${S}, 4>) -> ${S} {
    var coefsSum: ${S} = coefs[0] + coefs[1] + coefs[2] + coefs[3];
    return (x[0] * coefs[0] + x[1] * coefs[1]+ x[2] * coefs[2]+ x[3] * coefs[3]) / coefsSum;
  }

  fn bicubicInterpolation(output_indices: ${o.type.indices}) -> ${S} {
    var input_indices: ${a.type.indices} = output_indices;
    return colCubicInterpolation(input_indices, output_indices);
  }
    `},op=(a,o,n,u,m)=>{let[b,C,w,E,B]=n.length===3?[-1,0,1,2,-1]:[0,2,3,4,1],D=a.type.value;return`
    fn getInputValue(batch: u32, channel: u32, depth:u32, height: u32, width: u32) -> ${D} {
      var input_indices: ${a.type.indices};
      ${a.indicesSet("input_indices",C,`max(0, min(depth, ${n[C]} - 1))`)};
      ${a.indicesSet("input_indices",w,`max(0, min(height, ${n[w]} - 1))`)};
      ${a.indicesSet("input_indices",E,`max(0, min(width, ${n[E]} - 1))`)};
      ${G2(a,B,b,3)}
      return ${a.getByIndices("input_indices")};
    }

    fn trilinearInterpolation(output_indices: ${o.type.indices}) -> ${D} {
      var originalIndices = calculateOriginalIndicesFromOutputIndices(output_indices);
      var depth:${D} = originalIndices[${C}];
      var height:${D} = originalIndices[${w}];
      var width:${D} = originalIndices[${E}];
      ${u?`if (depth < 0 || depth > (${n[C]} - 1) || height < 0 || height > (${n[w]} - 1) || width < 0 || (width > ${n[E]} - 1)) {
      return ${m};
        }`:""};

    depth = max(0, min(depth, ${n[C]} - 1));
      height = max(0, min(height, ${n[w]} - 1));
      width = max(0, min(width, ${n[E]} - 1));
      var depth1: u32 = u32(depth);
      var height1: u32 = u32(height);
      var width1: u32 = u32(width);
      var depth2: u32 = u32(depth + 1);
      var height2: u32 = u32(height + 1);
      var width2: u32 = u32(width + 1);
      var channel: u32 = ${n.length>3?`u32(originalIndices[${B}])`:"0"};
      var batch: u32 =  ${n.length>3?`u32(originalIndices[${b}])`:"0"};

      var x111: ${D} = getInputValue(batch, channel, depth1, height1, width1);
      var x112: ${D} = getInputValue(batch, channel, depth1, height1, width2);
      var x121: ${D} = getInputValue(batch, channel, depth1, height2, width1);
      var x122: ${D} = getInputValue(batch, channel, depth1, height2, width2);
      var x211: ${D} = getInputValue(batch, channel, depth2, height1, width1);
      var x212: ${D} = getInputValue(batch, channel, depth2, height1, width2);
      var x221: ${D} = getInputValue(batch, channel, depth2, height2, width1);
      var x222: ${D} = getInputValue(batch, channel, depth2, height2, width2);
      var dx1: ${D} = abs(depth - ${D}(depth1));
      var dx2: ${D} = abs(${D}(depth2) - depth);
      var dy1: ${D} = abs(height - ${D}(height1));
      var dy2: ${D} = abs(${D}(height2) - height);
      var dz1: ${D} = abs(width - ${D}(width1));
      var dz2: ${D} = abs(${D}(width2) - width);
      if (depth1 == depth2) {
        dx1 = 0.5;
        dx2 = 0.5;
      }
      if (height1 == height2) {
        dy1 = 0.5;
        dy2 = 0.5;
      }
      if (width1 == width2) {
        dz1 = 0.5;
        dz2 = 0.5;
      }
      return (x111 * dx2 * dy2 * dz2 + x112 * dx2 * dy2 * dz1 + x121 * dx2 * dy1 *dz2 + x122 * dx2 * dy1 * dz1 +
              x211 * dx1 * dy2 * dz2 + x212 * dx1 * dy2 * dz1 + x221 * dx1 * dy1 *dz2 + x222 * dx1 * dy1 * dz1);
    }`},lp=(a,o,n,u,m,b)=>{let C=a.dims,w=ep(b,o.axes,C.length),E=Ap(C,u,m,o.axes),B=u.slice();u.length===0&&(B=C.map((N,U)=>N===0?1:E[U]/N),o.keepAspectRatioPolicy!=="stretch"&&(E=tp(C,B,o)));let D=YA("output",a.dataType,E.length),v=$e("input",a.dataType,C.length),x=Ue.size(E),S=C.length===E.length&&C.every((N,U)=>N===E[U]),F=o.coordinateTransformMode==="tf_crop_and_resize",j=o.extrapolationValue,J=v.type.value,L=N=>`
      ${S?"":`
      ${q4(o.coordinateTransformMode,J)};
      ${(()=>{switch(o.mode){case"nearest":return`
              ${ap(v,C)};
              ${$4(o.nearestMode,n,J)};
              ${sp(v,D,C,E,B.length,w.length,F)};
              `;case"linear":return`
              ${rp(D,C,E,B.length,w.length)};
              ${(()=>{if(C.length===2||C.length===4)return`${np(v,D,C,F,j)}`;if(C.length===3||C.length===5)return`${op(v,D,C,F,j)}`;throw Error("Linear mode only supports input dims 2, 3, 4 and 5 are supported in linear mode.")})()};
            `;case"cubic":return`
            ${(()=>{if(C.length===2||C.length===4)return`${ip(v,D,C,E,B,w,o.cubicCoeffA,F,o.extrapolationValue,o.excludeOutside)}`;throw Error("Cubic mode only supports input dims 2 and 4 are supported in linear mode.")})()};
            `;default:throw Error("Invalid resize mode")}})()};
      `}
      ${N.registerUniform("output_size","u32").registerUniform("scales","f32",B.length).registerUniform("roi","f32",w.length).declareVariables(v,D)}
      ${N.mainStart()}
        ${N.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
        ${S?"output[global_idx] = input[global_idx];":`
        let output_indices = ${D.offsetToIndices("global_idx")};
        var input_indices: ${v.type.indices};
        ${(()=>{switch(o.mode){case"nearest":return`input_indices = calculateInputIndicesFromOutputIndices(output_indices);
                if (checkInputIndices(input_indices)) {
                  output[global_idx] = ${v.getByIndices("input_indices")};
                } else {
                  output[global_idx] = ${o.extrapolationValue};
                }`;case"linear":return`output[global_idx] = ${C.length===2||C.length===4?"bilinearInterpolation":"trilinearInterpolation"}(output_indices);`;case"cubic":return"output[global_idx] = bicubicInterpolation(output_indices);";default:throw Error(`Unsupported resize mode: ${o.mode}`)}})()};
`}
      }`;return{name:"Resize",shaderCache:{hint:`${o.cacheKey}|${n}|${B.length>0?o.mode==="cubic"?B:B.length:""}|${m.length>0?m:""}|${w.length>0?w:""}|${S}|${o.mode==="nearest"?C.length:C}`,inputDependencies:["rank"]},getShaderSource:L,getRunData:()=>({outputs:[{dims:E,dataType:a.dataType}],dispatchGroup:{x:Math.ceil(x/64)},programUniforms:[{type:12,data:x},{type:1,data:B},{type:1,data:w},...XA(C,E)]})}},cp=a=>{let o=a.customDataBuffer;return new Uint32Array(o,o.byteOffset,1)[0]},AC=(a,o)=>{let n=[],u=[],m=[],b=cp(a);if(o.antialias!==0)throw Error("Only default value (0) for Antialias attribute is supported");J4(a.inputs,o,b,n,u,m),a.compute(lp(a.inputs[0],o,b,n,u,m),{inputs:[0]})},tC=a=>{let o=a.antialias,n=a.axes,u=a.coordinateTransformMode,m=a.cubicCoeffA,b=a.excludeOutside!==0,C=a.extrapolationValue,w=a.keepAspectRatioPolicy,E=a.mode,B=a.nearestMode===""?"simple":a.nearestMode;return Nt({antialias:o,axes:n,coordinateTransformMode:u,cubicCoeffA:m,excludeOutside:b,extrapolationValue:C,keepAspectRatioPolicy:w,mode:E,nearestMode:B})}}),up,dp,rC,CI=hA(()=>{it(),ft(),ht(),up=a=>{if(!a||a.length<3)throw new Error("layerNorm requires at least 3 inputs.");let o=a[0],n=a[1],u=a[2];if(o.dataType!==n.dataType||o.dataType!==u.dataType)throw new Error("All inputs must have the same data type");if(o.dims.length!==3&&o.dims.length!==2)throw new Error("Input must be 2D or 3D");if(n.dims.length!==3&&n.dims.length!==2)throw new Error("Skip must be 2D or 3D");let m=o.dims[o.dims.length-1],b=o.dims[o.dims.length-2];if(n.dims[n.dims.length-1]!==m)throw new Error("Skip must have the same hidden size as input");if(n.dims[n.dims.length-2]!==b)throw new Error("Skip must have the same sequence length as input");if(u.dims.length!==1)throw new Error("Gamma must be 1D");if(u.dims[u.dims.length-1]!==m)throw new Error("Gamma must have the same hidden size as input");if(a.length>3){let C=a[3];if(C.dims.length!==1)throw new Error("Beta must be 1D");if(C.dims[C.dims.length-1]!==m)throw new Error("Beta must have the same hidden size as input")}if(a.length>4){let C=a[4];if(C.dims.length!==1)throw new Error("Bias must be 1D");if(C.dims[C.dims.length-1]!==m)throw new Error("Bias must have the same hidden size as input")}},dp=(a,o,n,u)=>{let m=o.simplified,b=a[0].dims,C=Ue.size(b),w=b,E=C,B=b.slice(-1)[0],D=u?b.slice(0,-1).concat(1):[],v=!m&&a.length>3,x=a.length>4,S=u&&n>1,F=u&&n>2,j=n>3,J=64,L=Pr(B),N=[{type:12,data:E},{type:12,data:L},{type:12,data:B},{type:1,data:o.epsilon}],U=k=>{let e=[{name:"output_size",type:"u32"},{name:"components",type:"u32"},{name:"hidden_size",type:"u32"},{name:"epsilon",type:"f32"}],d=[$e("x",a[0].dataType,a[0].dims,L),$e("skip",a[1].dataType,a[1].dims,L),$e("gamma",a[2].dataType,a[2].dims,L)];v&&d.push($e("beta",a[3].dataType,a[3].dims,L)),x&&d.push($e("bias",a[4].dataType,a[4].dims,L)),d.push(YA("output",a[0].dataType,w,L)),S&&d.push(YA("mean_output",1,D)),F&&d.push(YA("inv_std_output",1,D)),j&&d.push(YA("input_skip_bias_sum",a[0].dataType,w,L));let y=ds(a[0].dataType),ee=ds(1,L);return`

      ${k.registerUniforms(e).declareVariables(...d)}
      var<workgroup> sum_shared : array<${ee}, ${J}>;
      var<workgroup> sum_squared_shared : array<${ee}, ${J}>;

      ${k.mainStart([J,1,1])}
        let ix = local_id.x;
        let iy = global_id.x / ${J};

        let hidden_size_vectorized: u32 = uniforms.hidden_size / uniforms.components;
        var stride = hidden_size_vectorized / ${J};
        let offset = ix * stride + iy * hidden_size_vectorized;
        let offset1d = stride * ix;
        if (ix == ${J-1}) {
          stride = hidden_size_vectorized - stride * ix;
        }
        for (var i: u32 = 0; i < stride; i++) {
          let skip_value = skip[offset + i];
          let bias_value = ${x?"bias[offset1d + i]":y+"(0.0)"};
          let input_value = x[offset + i];
          let value = input_value + skip_value + bias_value;
          ${j?"input_skip_bias_sum[offset + i] = value;":""}
          output[offset + i] = value;
          let f32_value = ${ro(y,L,"value")};
          sum_shared[ix] += f32_value;
          sum_squared_shared[ix] += f32_value * f32_value;
        }
        workgroupBarrier();

        var reduce_size : u32 = ${J};
        for (var curr_size = reduce_size >> 1;  curr_size > 0; curr_size = reduce_size >> 1) {
          reduce_size = curr_size + (reduce_size & 1);
          if (ix < curr_size) {
            sum_shared[ix] += sum_shared[ix + reduce_size];
            sum_squared_shared[ix] += sum_squared_shared[ix + reduce_size];
          }
          workgroupBarrier();
        }

        let sum = sum_shared[0];
        let square_sum = sum_squared_shared[0];
        let mean = ${Jn("sum",L)} / f32(uniforms.hidden_size);
        let inv_std_dev = inverseSqrt(${Jn("square_sum",L)} / f32(uniforms.hidden_size) ${m?"":"- mean * mean"} + uniforms.epsilon);
        ${S?"mean_output[global_idx] = mean;":""}
        ${F?"inv_std_output[global_idx] = inv_std_dev;":""}

        for (var i: u32 = 0; i < stride; i++) {
          output[offset + i] = (output[offset + i] ${m?"":`- ${y}(mean)`}) *
            ${y}(inv_std_dev) * gamma[offset1d + i]
            ${v?"+ beta[offset1d + i]":""};
        }
      }`},f=[{dims:w,dataType:a[0].dataType}];return n>1&&f.push({dims:D,dataType:1}),n>2&&f.push({dims:D,dataType:1}),n>3&&f.push({dims:b,dataType:a[0].dataType}),{name:"SkipLayerNormalization",shaderCache:{hint:`${L};${S};${F};${j}`,inputDependencies:a.map((k,e)=>"type")},getShaderSource:U,getRunData:()=>({outputs:f,dispatchGroup:{x:Math.ceil(E/B)},programUniforms:N})}},rC=(a,o)=>{up(a.inputs);let n=[0];a.outputCount>1&&n.push(-3),a.outputCount>2&&n.push(-3),a.outputCount>3&&n.push(3),a.compute(dp(a.inputs,o,a.outputCount,!1),{outputs:n})}}),fp,Lo,gp,Q2,pp,mp,sC,aC,bI=hA(()=>{it(),ft(),Nr(),ht(),fp=(a,o)=>{if(!a||a.length<1)throw new Error("too few inputs");if(o.axes.length!==0){if(o.axes.length!==o.starts.length||o.axes.length!==o.ends.length)throw new Error("axes, starts and ends must have the same length")}else if(o.starts.length!==o.ends.length)throw new Error("starts and ends must have the same length");a.slice(1).forEach((n,u)=>{if(a[u+1].dataType!==6&&a[u+1].dataType!==7)throw new Error(`Input ${u} must be an array of int32 or int64`)})},Lo=(a,o)=>{let n=[];if(a.length>o)if(a[o].dataType===7)a[o].getBigInt64Array().forEach(u=>n.push(Number(u)));else if(a[o].dataType===6)a[o].getInt32Array().forEach(u=>n.push(Number(u)));else throw new Error(`Input ${o} must be an array of int32 or int64`);return n},gp=(a,o)=>{if(a.length>1){let n=Lo(a,1),u=Lo(a,2),m=Lo(a,3);return m.length===0&&(m=[...Array(a[0].dims.length).keys()]),Nt({starts:n,ends:u,axes:m})}else return o},Q2=(a,o,n,u,m)=>{let b=a;return a<0&&(b+=n[u[o]]),m[o]<0?Math.max(0,Math.min(b,n[u[o]]-1)):Math.max(0,Math.min(b,n[u[o]]))},pp=(a,o,n)=>`fn calculateInputIndices(output_indices: ${o.type.indices}) -> ${a.type.indices} {
          var input_indices: ${a.type.indices};
          var carry = 0u;
          for (var i = ${n.length}; i >= 0; i--) {
            let input_shape_i = ${HA("uniforms.input_shape","i",n.length)};
            let steps_i = ${HA("uniforms.steps","i",n.length)};
            let signs_i = ${HA("uniforms.signs","i",n.length)};
            let starts_i = ${HA("uniforms.starts","i",n.length)};
            var output_index = ${o.indicesGet("output_indices","i")};
            var input_index = output_index * steps_i + starts_i + carry;
            carry = input_index / input_shape_i;
            input_index = input_index % input_shape_i;
            if (signs_i < 0) {
              input_index = input_shape_i - input_index - 1u + starts_i;
            }
            ${a.indicesSet("input_indices","i","input_index")};
          }
          return input_indices;
      }`,mp=(a,o)=>{let n=a[0].dims,u=Ue.size(n),m=o.axes.length>0?Ue.normalizeAxes(o.axes,n.length):[...Array(n.length).keys()],b=Lo(a,4);b.forEach(L=>L!==0||(()=>{throw new Error("step cannot be 0")})),b.length===0&&(b=Array(m.length).fill(1));let C=o.starts.map((L,N)=>Q2(L,N,n,m,b)),w=o.ends.map((L,N)=>Q2(L,N,n,m,b));if(m.length!==C.length||m.length!==w.length)throw new Error("start, ends and axes should have the same number of elements");if(m.length!==n.length)for(let L=0;L<n.length;++L)m.includes(L)||(C.splice(L,0,0),w.splice(L,0,n[L]),b.splice(L,0,1));let E=b.map(L=>Math.sign(L));b.forEach((L,N,U)=>{if(L<0){let f=(w[N]-C[N])/L,k=C[N],e=k+f*b[N];C[N]=e,w[N]=k,U[N]=-L}});let B=n.slice(0);m.forEach((L,N)=>{B[L]=Math.ceil((w[L]-C[L])/b[L])});let D={dims:B,dataType:a[0].dataType},v=YA("output",a[0].dataType,B.length),x=$e("input",a[0].dataType,a[0].dims.length),S=Ue.size(B),F=[{name:"outputSize",type:"u32"},{name:"starts",type:"u32",length:C.length},{name:"signs",type:"i32",length:E.length},{name:"steps",type:"u32",length:b.length}],j=[{type:12,data:S},{type:12,data:C},{type:6,data:E},{type:12,data:b},...XA(a[0].dims,B)],J=L=>`
      ${L.registerUniforms(F).declareVariables(x,v)}
        ${pp(x,v,n)}
        ${L.mainStart()}
          ${L.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
          let output_indices = ${v.offsetToIndices("global_idx")};
          let input_indices = calculateInputIndices(output_indices);
          ${v.setByOffset("global_idx",x.getByIndices("input_indices"))}
      }`;return{name:"Slice",shaderCache:{hint:`${E.length}_${C.length}_${b.length}`,inputDependencies:["rank"]},getShaderSource:J,getRunData:()=>({outputs:[D],dispatchGroup:{x:Math.ceil(u/64)},programUniforms:j})}},sC=(a,o)=>{fp(a.inputs,o);let n=gp(a.inputs,o);a.compute(mp(a.inputs,n),{inputs:[0]})},aC=a=>{let o=a.starts,n=a.ends,u=a.axes;return Nt({starts:o,ends:n,axes:u})}}),hp,Cp,nC,iC,II=hA(()=>{it(),ft(),Nr(),qn(),ht(),hp=a=>{if(!a||a.length!==1)throw new Error("Softmax op requires 1 input.")},Cp=(a,o)=>{let n=a.inputs[0],u=n.dims,m=Ue.size(u),b=u.length,C=Ue.normalizeAxis(o.axis,b),w=C<u.length-1,E,B=[];w?(B=Array.from({length:b},(d,y)=>y),B[C]=b-1,B[b-1]=C,E=a.compute(ia(n,B),{inputs:[n],outputs:[-1]})[0]):E=n;let D=E.dims,v=D[b-1],x=m/v,S=Pr(v),F=v/S,j=64;x===1&&(j=256);let J=(d,y)=>y===4?`max(max(${d}.x, ${d}.y), max(${d}.z, ${d}.w))`:y===2?`max(${d}.x, ${d}.y)`:y===3?`max(max(${d}.x, ${d}.y), ${d}.z)`:d,L=$e("x",E.dataType,E.dims,S),N=YA("result",E.dataType,E.dims,S),U=L.type.value,f=ds(E.dataType)==="f32"?`var threadMax = ${U}(-3.402823e+38f);`:`var threadMax = ${U}(-65504.0h);`,k=d=>`
      var<workgroup> rowMaxShared : ${U};
      var<workgroup> rowSumShared : ${U};
      var<workgroup> threadShared : array<${U}, ${j}>;

      fn getValue(row: i32, col: i32, row_stride: i32) -> ${U} {
        let index = row * row_stride + col;
        return x[index];
      }

      fn setValue(row: i32, col: i32, row_stride: i32, value: ${U}) {
        let index = row * row_stride + col;
        result[index] = value;
      }
      ${d.registerUniform("packedCols","i32").declareVariables(L,N)}
      ${d.mainStart(j)}
        let gindex = i32(global_idx);
        let lindex = i32(local_idx);
        const wg = ${j};
        let row = gindex / wg;
        let cols = uniforms.packedCols;
        let row_stride : i32 = uniforms.packedCols;

        // find the rows max
        ${f}
        for (var col = lindex; col < cols; col += wg) {
          let value = getValue(row, col, row_stride);
          threadMax = max(threadMax, value);
        }
        if (lindex < cols) {
          threadShared[lindex] = threadMax;
        }
        workgroupBarrier();

        var reduceSize = min(cols, wg);
        for (var currSize = reduceSize >> 1;  currSize > 0; currSize = reduceSize >> 1) {
          reduceSize = currSize + (reduceSize & 1);
          if (lindex < currSize) {
            threadShared[lindex] = max(threadShared[lindex], threadShared[lindex + reduceSize]);
          }
          workgroupBarrier();
        }
        if (lindex == 0) {
          rowMaxShared = ${U}(${J("threadShared[0]",S)});
        }
        workgroupBarrier();

        // find the rows sum
        var threadSum = ${U}(0.0);
        for (var col = lindex; col < cols; col += wg) {
          let subExp = exp(getValue(row, col, row_stride) - rowMaxShared);
          threadSum += subExp;
        }
        threadShared[lindex] = threadSum;
        workgroupBarrier();

        for (var currSize = wg >> 1;  currSize > 0; currSize = currSize >> 1) {
          if (lindex < currSize) {
            threadShared[lindex] = threadShared[lindex] + threadShared[lindex + currSize];
          }
          workgroupBarrier();
        }
        if (lindex == 0) {
          rowSumShared = ${U}(${Jn("threadShared[0]",S)});
        }
        workgroupBarrier();

        // calculate final value for each element in the row
        for (var col = lindex; col < cols; col += wg) {
          let value = exp(getValue(row, col, row_stride) - rowMaxShared) / rowSumShared;
          setValue(row, col, row_stride, value);
        }
      }`,e=a.compute({name:"Softmax",shaderCache:{hint:`${S};${j}`,inputDependencies:["type"]},getRunData:()=>({outputs:[{dims:D,dataType:E.dataType}],dispatchGroup:{x},programUniforms:[{type:6,data:F}]}),getShaderSource:k},{inputs:[E],outputs:[w?-1:0]})[0];w&&a.compute(ia(e,B),{inputs:[e]})},nC=(a,o)=>{hp(a.inputs),Cp(a,o)},iC=a=>Nt({axis:a.axis})}),F2,bp,Ip,wp,oC,wI=hA(()=>{it(),ft(),ht(),F2=a=>Array.from(a.getBigInt64Array(),Number),bp=a=>{if(!a||a.length!==2)throw new Error("Tile requires 2 inputs.");if(a[0].dataType!==1&&a[0].dataType!==10&&a[0].dataType!==6&&a[0].dataType!==12)throw new Error("Tile only support float, float16, int32, and uint32 data types");if(a[1].dataType!==7)throw new Error("Tile `repeats` input should be of int64 data type");if(a[1].dims.length!==1)throw new Error("Tile `repeats` input should be 1-D");if(F2(a[1]).length!==a[0].dims.length)throw new Error("Tile `repeats` input should have same number of elements as rank of input data tensor")},Ip=(a,o)=>{let n=[];for(let u=0;u<a.length;++u)n.push(a[u]*o[u]);return n},wp=(a,o)=>{let n=a[0].dims,u=o??F2(a[1]),m=Ip(n,u),b=Ue.size(m),C=a[0].dataType,w=$e("input",C,n.length),E=YA("output",C,m.length),B=D=>`
      const inputShape = ${w.indices(...n)};
      ${D.registerUniform("output_size","u32").declareVariables(w,E)}
      ${D.mainStart()}
      ${D.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
      let output_indices = ${E.offsetToIndices("global_idx")};
      var input_indices: ${w.type.indices};
      for (var i = 0; i < ${n.length}; i++) {
        let input_dim_i = ${w.indicesGet("uniforms.input_shape","i")};
        let input_dim_value = ${E.indicesGet("output_indices","i")}  % input_dim_i;

        ${w.indicesSet("input_indices","i","input_dim_value")}
      }
      ${E.setByOffset("global_idx",w.getByIndices("input_indices"))}
    }`;return{name:"Tile",shaderCache:{hint:`${u}`,inputDependencies:["rank"]},getRunData:()=>({outputs:[{dims:m,dataType:a[0].dataType}],dispatchGroup:{x:Math.ceil(b/64)},programUniforms:[{type:12,data:b},...XA(a[0].dims,m)]}),getShaderSource:B}},oC=a=>{bp(a.inputs),a.compute(wp(a.inputs),{inputs:[0]})}}),kp,Ep,lC,kI=hA(()=>{it(),ft(),ht(),kp=(a,o,n,u,m)=>{let b=YA("output_data",m,n.length,4),C=$e("a_data",o[1].dataType,o[1].dims.length,4),w=$e("b_data",o[2].dataType,o[2].dims.length,4),E=$e("c_data",o[0].dataType,o[0].dims.length,4),B,D=(v,x,S)=>`select(${x}, ${v}, ${S})`;if(!u)B=b.setByOffset("global_idx",D(C.getByOffset("global_idx"),w.getByOffset("global_idx"),E.getByOffset("global_idx")));else{let v=(x,S,F="")=>{let j=`a_data[index_a${S}][component_a${S}]`,J=`b_data[index_b${S}][component_b${S}]`,L=`bool(c_data[index_c${S}] & (0xffu << (component_c${S} * 8)))`;return`
            let output_indices${S} = ${b.offsetToIndices(`global_idx * 4u + ${S}u`)};
            let offset_a${S} = ${C.broadcastedIndicesToOffset(`output_indices${S}`,b)};
            let offset_b${S} = ${w.broadcastedIndicesToOffset(`output_indices${S}`,b)};
            let offset_c${S} = ${E.broadcastedIndicesToOffset(`output_indices${S}`,b)};
            let index_a${S} = offset_a${S} / 4u;
            let index_b${S} = offset_b${S} / 4u;
            let index_c${S} = offset_c${S} / 4u;
            let component_a${S} = offset_a${S} % 4u;
            let component_b${S} = offset_b${S} % 4u;
            let component_c${S} = offset_c${S} % 4u;
            ${x}[${S}] = ${F}(${D(j,J,L)});
          `};m===9?B=`
            var data = vec4<u32>(0);
            ${v("data",0,"u32")}
            ${v("data",1,"u32")}
            ${v("data",2,"u32")}
            ${v("data",3,"u32")}
            output_data[global_idx] = dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(data));`:B=`
            ${v("output_data[global_idx]",0)}
            ${v("output_data[global_idx]",1)}
            ${v("output_data[global_idx]",2)}
            ${v("output_data[global_idx]",3)}
          `}return`
        ${a.registerUniform("vec_size","u32").declareVariables(E,C,w,b)}
        ${a.mainStart()}
        ${a.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}
        ${B}
      }`},Ep=a=>{let o=a[1].dims,n=a[2].dims,u=a[0].dims,m=a[1].dataType,b=!(Ue.areEqual(o,n)&&Ue.areEqual(n,u)),C=o,w=Ue.size(o);if(b){let B=lo.calcShape(lo.calcShape(o,n,!1),u,!1);if(!B)throw new Error("Can't perform where op on the given tensors");C=B,w=Ue.size(C)}let E=Math.ceil(w/4);return{name:"Where",shaderCache:{inputDependencies:["rank","rank","rank"]},getShaderSource:B=>kp(B,a,C,b,m),getRunData:()=>({outputs:[{dims:C,dataType:m}],dispatchGroup:{x:Math.ceil(w/64/4)},programUniforms:[{type:12,data:E},...XA(u,o,n,C)]})}},lC=a=>{a.compute(Ep(a.inputs))}}),cC,EI=hA(()=>{z6(),Tc(),N6(),L6(),_6(),R6(),j6(),U6(),X6(),Z6(),J6(),q6(),$6(),eI(),AI(),tI(),rI(),sI(),aI(),nI(),iI(),oI(),lI(),cI(),uI(),D3(),dI(),fI(),gI(),pI(),mI(),Dc(),hI(),F3(),CI(),bI(),II(),G3(),wI(),qn(),Pc(),kI(),cC=new Map([["Abs",[rh]],["Acos",[sh]],["Acosh",[ah]],["Add",[Lh]],["ArgMax",[$m,Ac]],["ArgMin",[qm,Ac]],["Asin",[nh]],["Asinh",[ih]],["Atan",[oh]],["Atanh",[lh]],["Attention",[eh]],["AveragePool",[W3,j3]],["BatchNormalization",[Ah]],["BiasAdd",[th]],["BiasSplitGelu",[Nh]],["Cast",[uh,ch]],["Ceil",[fh]],["Clip",[dh]],["Concat",[Xh,Zh]],["Conv",[ic,nc]],["ConvTranspose",[n3,a3]],["Cos",[gh]],["Cosh",[ph]],["CumSum",[i3,o3]],["DepthToSpace",[l3,c3]],["DequantizeLinear",[Z3,J3]],["Div",[_h]],["Einsum",[u3,d3]],["Elu",[mh,Vo]],["Equal",[Rh]],["Erf",[hh]],["Exp",[Ch]],["Expand",[f3]],["FastGelu",[g3]],["Floor",[bh]],["FusedConv",[ic,nc]],["Gather",[m3,p3]],["GatherElements",[k3,w3]],["GatherBlockQuantized",[b3,I3]],["GatherND",[h3,C3]],["Gelu",[Ih]],["Gemm",[M3,E3]],["GlobalAveragePool",[V3,Y3]],["GlobalMaxPool",[X3,K3]],["Greater",[Vh]],["GreaterOrEqual",[Uh]],["GridSample",[v3,B3]],["GroupQueryAttention",[S3]],["HardSigmoid",[yh,xh]],["InstanceNormalization",[O3]],["LayerNormalization",[z3]],["LeakyRelu",[wh,Vo]],["Less",[Hh]],["LessOrEqual",[Kh]],["Log",[Oh]],["MatMul",[N3]],["MatMulNBits",[L3,_3]],["MaxPool",[H3,U3]],["Mul",[jh]],["MultiHeadAttention",[y3,x3]],["Neg",[Eh]],["Not",[kh]],["Pad",[R3]],["Pow",[Wh]],["QuickGelu",[zh,Vo]],["Range",[q3]],["Reciprocal",[Mh]],["ReduceMin",[Um]],["ReduceMean",[jm]],["ReduceMax",[Hm]],["ReduceSum",[Xm]],["ReduceProd",[Km]],["ReduceL1",[Wm]],["ReduceL2",[Ym]],["ReduceLogSum",[Jm]],["ReduceLogSumExp",[Vm]],["ReduceSumSquare",[Zm]],["Relu",[vh]],["Resize",[AC,tC]],["RotaryEmbedding",[Q3]],["ScatterND",[eC,$3]],["Sigmoid",[Bh]],["Sin",[Dh]],["Sinh",[Th]],["Slice",[sC,aC]],["SkipLayerNormalization",[rC]],["Split",[T3,P3]],["Sqrt",[Ph]],["Softmax",[nC,iC]],["Sub",[Yh]],["Tan",[Gh]],["Tanh",[Qh]],["ThresholdedRelu",[Sh,Vo]],["Tile",[oC]],["Transpose",[Tm,Pm]],["Where",[lC]]])}),uC,MI=hA(()=>{Fa(),Mn(),ht(),uC=class{constructor(a){this.backend=a,this.repo=new Map,this.attributesBound=!1}getArtifact(a){return this.repo.get(a)}setArtifact(a,o){this.repo.set(a,o)}run(a,o,n,u,m){Qa(a.programInfo.name);let b=this.backend.device,C=this.backend.getComputePassEncoder();this.backend.writeTimestamp(this.backend.pendingDispatchNumber*2);let w=[];for(let B of o)w.push({binding:w.length,resource:{buffer:B.buffer}});for(let B of n)w.push({binding:w.length,resource:{buffer:B.buffer}});m&&w.push({binding:w.length,resource:m});let E=b.createBindGroup({layout:a.computePipeline.getBindGroupLayout(0),entries:w,label:a.programInfo.name});if(this.backend.sessionStatus==="capturing"){let B={kernelId:this.backend.currentKernelId,computePipeline:a.computePipeline,bindGroup:E,dispatchGroup:u};this.backend.capturedCommandList.get(this.backend.currentSessionId).push(B)}C.setPipeline(a.computePipeline),C.setBindGroup(0,E),C.dispatchWorkgroups(...u),this.backend.writeTimestamp(this.backend.pendingDispatchNumber*2+1),this.backend.pendingDispatchNumber++,(this.backend.pendingDispatchNumber>=this.backend.maxDispatchNumber||this.backend.queryType==="at-passes")&&this.backend.endComputePass(),this.backend.pendingDispatchNumber>=this.backend.maxDispatchNumber&&this.backend.flush(),ha(a.programInfo.name)}dispose(){}build(a,o){Qa(a.name);let n=this.backend.device,u=[];[{feature:"shader-f16",extension:"f16"},{feature:"subgroups",extension:"subgroups"}].forEach(B=>{n.features.has(B.feature)&&u.push(`enable ${B.extension};`)});let m=Dm(o,this.backend.device.limits),b=a.getShaderSource(m),C=`${u.join(`
`)}
${m.additionalImplementations}
${b}`,w=n.createShaderModule({code:C,label:a.name});xt("verbose",()=>`[WebGPU] ${a.name} shader code: ${C}`);let E=n.createComputePipeline({compute:{module:w,entryPoint:"main"},layout:"auto",label:a.name});return ha(a.name),{programInfo:a,computePipeline:E,uniformVariablesInfo:m.variablesInfo}}normalizeDispatchGroupSize(a){let o=typeof a=="number"?a:a.x,n=typeof a=="number"?1:a.y||1,u=typeof a=="number"?1:a.z||1,m=this.backend.device.limits.maxComputeWorkgroupsPerDimension;if(o<=m&&n<=m&&u<=m)return[o,n,u];let b=o*n*u,C=Math.ceil(Math.sqrt(b));if(C>m){if(C=Math.ceil(Math.cbrt(b)),C>m)throw new Error("Total dispatch size exceeds WebGPU maximum.");return[C,C,C]}else return[C,C,1]}}}),dC={};go(dC,{WebGpuBackend:()=>fC});var Mp,vp,Bp,fC,vI=hA(()=>{Fa(),it(),Mn(),Mm(),S6(),EI(),MI(),Mp=(a,o)=>{if(o.length!==a.length)throw new Error(`inputDependencies length ${o.length} is not equal to inputTensors length ${a.length}.`);let n=[];for(let u=0;u<a.length;++u){let m=a[u].dataType;switch(o[u]){case"none":{n.push("");break}case"type":{n.push(`${m}`);break}case"rank":{let b=a[u].dims.length;n.push(`${m};${b}`);break}case"dims":{let b=a[u].dims.join(",");n.push(`${m};${b}`);break}default:throw new Error(`unsupported input dependency: ${o[u]}`)}}return n.join("|")},vp=(a,o,n)=>{let u=a.name;return a.shaderCache?.hint&&(u+="["+a.shaderCache.hint+"]"),u+=":"+n+`:${Mp(o,a.shaderCache?.inputDependencies??new Array(o.length).fill("dims"))}`,u},Bp=class{constructor(a){a&&(this.architecture=a.architecture,this.vendor=a.vendor)}isArchitecture(a){return this.architecture===a}isVendor(a){return this.vendor===a}},fC=class{constructor(){this.currentSessionId=null,this.currentKernelId=null,this.commandEncoder=null,this.computePassEncoder=null,this.maxDispatchNumber=16,this.pendingDispatchNumber=0,this.pendingKernels=[],this.pendingQueries=new Map,this.sessionStatus="default",this.capturedCommandList=new Map,this.capturedPendingKernels=new Map,this.sessionExternalDataMapping=new Map}get currentKernelCustomData(){if(this.currentKernelId===null)throw new Error("currentKernelCustomData(): currentKernelId is null. (should not happen)");let a=this.kernelCustomData.get(this.currentKernelId);return a||(a={},this.kernelCustomData.set(this.currentKernelId,a)),a}async initialize(a,o){this.env=a;let n=[],u={requiredLimits:{maxComputeWorkgroupStorageSize:o.limits.maxComputeWorkgroupStorageSize,maxComputeWorkgroupsPerDimension:o.limits.maxComputeWorkgroupsPerDimension,maxStorageBufferBindingSize:o.limits.maxStorageBufferBindingSize,maxBufferSize:o.limits.maxBufferSize,maxComputeInvocationsPerWorkgroup:o.limits.maxComputeInvocationsPerWorkgroup,maxComputeWorkgroupSizeX:o.limits.maxComputeWorkgroupSizeX,maxComputeWorkgroupSizeY:o.limits.maxComputeWorkgroupSizeY,maxComputeWorkgroupSizeZ:o.limits.maxComputeWorkgroupSizeZ},requiredFeatures:n},m=b=>o.features.has(b)&&n.push(b)&&!0;m("chromium-experimental-timestamp-query-inside-passes")||m("timestamp-query"),m("shader-f16"),m("subgroups"),this.device=await o.requestDevice(u),this.adapterInfo=new Bp(o.info||await o.requestAdapterInfo()),this.gpuDataManager=xm(this),this.programManager=new uC(this),this.kernels=new Map,this.kernelPersistentData=new Map,this.kernelCustomData=new Map,vc(a.logLevel,!!a.debug),this.device.onuncapturederror=b=>{b.error instanceof GPUValidationError&&console.error(`An uncaught WebGPU validation error was raised: ${b.error.message}`)},Object.defineProperty(this.env.webgpu,"device",{value:this.device,writable:!1,enumerable:!0,configurable:!1}),Object.defineProperty(this.env.webgpu,"adapter",{value:o,writable:!1,enumerable:!0,configurable:!1}),this.setQueryType()}dispose(){typeof this.querySet<"u"&&this.querySet.destroy(),this.gpuDataManager.dispose()}getCommandEncoder(){return this.commandEncoder||(this.commandEncoder=this.device.createCommandEncoder()),this.commandEncoder}getComputePassEncoder(){if(!this.computePassEncoder){let a=this.getCommandEncoder(),o={};this.queryType==="at-passes"&&(o.timestampWrites={querySet:this.querySet,beginningOfPassWriteIndex:this.pendingDispatchNumber*2,endOfPassWriteIndex:this.pendingDispatchNumber*2+1}),this.computePassEncoder=a.beginComputePass(o)}return this.computePassEncoder}endComputePass(){this.computePassEncoder&&(this.computePassEncoder.end(),this.computePassEncoder=null)}flush(){if(!this.commandEncoder)return;Qa(),this.endComputePass();let a;this.queryType!=="none"&&(this.commandEncoder.resolveQuerySet(this.querySet,0,this.pendingDispatchNumber*2,this.queryResolveBuffer,0),a=this.device.createBuffer({size:this.pendingDispatchNumber*2*8,usage:GPUBufferUsage.MAP_READ|GPUBufferUsage.COPY_DST}),this.pendingQueries.set(a,this.pendingKernels),this.pendingKernels=[],this.commandEncoder.copyBufferToBuffer(this.queryResolveBuffer,0,a,0,this.pendingDispatchNumber*2*8)),this.device.queue.submit([this.commandEncoder.finish()]),this.gpuDataManager.refreshPendingBuffers(),this.commandEncoder=null,this.pendingDispatchNumber=0,this.queryType!=="none"&&a.mapAsync(GPUMapMode.READ).then(()=>{let o=new BigUint64Array(a.getMappedRange()),n=this.pendingQueries.get(a);for(let u=0;u<o.length/2;u++){let m=n[u],b=m.kernelId,C=this.kernels.get(b),w=C.kernelType,E=C.kernelName,B=m.programName,D=m.inputTensorViews,v=m.outputTensorViews,x=o[u*2],S=o[u*2+1];typeof this.queryTimeBase>"u"&&(this.queryTimeBase=x);let F=Number(x-this.queryTimeBase),j=Number(S-this.queryTimeBase);if(!Number.isSafeInteger(F)||!Number.isSafeInteger(j))throw new RangeError("incorrect timestamp range");if(this.env.webgpu.profiling?.ondata)this.env.webgpu.profiling.ondata({version:1,inputsMetadata:D.map(J=>({dims:J.dims,dataType:kn(J.dataType)})),outputsMetadata:v.map(J=>({dims:J.dims,dataType:kn(J.dataType)})),kernelId:b,kernelType:w,kernelName:E,programName:B,startTime:F,endTime:j});else{let J="";D.forEach((N,U)=>{J+=`input[${U}]: [${N.dims}] | ${kn(N.dataType)}, `});let L="";v.forEach((N,U)=>{L+=`output[${U}]: [${N.dims}] | ${kn(N.dataType)}, `}),console.log(`[profiling] kernel "${b}|${w}|${E}|${B}" ${J}${L}execution time: ${j-F} ns`)}e0("GPU",`${B}::${x}::${S}`)}a.unmap(),this.pendingQueries.delete(a)}),ha()}run(a,o,n,u,m,b){Qa(a.name);let C=[];for(let N=0;N<o.length;++N){let U=o[N].data;if(U===0)continue;let f=this.gpuDataManager.get(U);if(!f)throw new Error(`no GPU data for input: ${U}`);C.push(f)}let{outputs:w,dispatchGroup:E,programUniforms:B}=a.getRunData(o),D=n.length===0?w.map((N,U)=>U):n;if(D.length!==w.length)throw new Error(`Output size ${D.length} must be equal to ${w.length}.`);let v=[],x=[];for(let N=0;N<w.length;++N){if(!Number.isInteger(D[N])||D[N]<-3||D[N]>=b)throw new Error(`Invalid output index: ${D[N]}`);if(D[N]===-3)continue;let U=D[N]===-1,f=D[N]===-2,k=U||f?m(w[N].dataType,w[N].dims):u(D[N],w[N].dataType,w[N].dims);if(v.push(k),k.data===0)continue;let e=this.gpuDataManager.get(k.data);if(!e)throw new Error(`no GPU data for output: ${k.data}`);if(U&&this.temporaryData.push(e),f){let d=this.kernelPersistentData.get(this.currentKernelId);d||(d=[],this.kernelPersistentData.set(this.currentKernelId,d)),d.push(e)}x.push(e)}if(C.length!==o.length||x.length!==v.length){if(x.length===0)return ha(a.name),v;throw new Error(`Program ${a.name} has zero-sized tensor(s) in inputs or outputs. This is not supported now.`)}let S;if(B){let N=0,U=[];B.forEach(d=>{let y=typeof d.data=="number"?[d.data]:d.data;if(y.length===0)return;let ee=d.type===10?2:4,T,O;d.type===10?(O=y.length>4?16:y.length>2?8:y.length*ee,T=y.length>4?16:ee*y.length):(O=y.length<=2?y.length*ee:16,T=16),N=Math.ceil(N/O)*O,U.push(N);let we=d.type===10?8:4;N+=y.length>4?Math.ceil(y.length/we)*T:y.length*ee});let f=16;N=Math.ceil(N/f)*f;let k=new ArrayBuffer(N);B.forEach((d,y)=>{let ee=U[y],T=typeof d.data=="number"?[d.data]:d.data;if(d.type===6)new Int32Array(k,ee,T.length).set(T);else if(d.type===12)new Uint32Array(k,ee,T.length).set(T);else if(d.type===10)new Uint16Array(k,ee,T.length).set(T);else if(d.type===1)new Float32Array(k,ee,T.length).set(T);else throw new Error(`Unsupported uniform type: ${kn(d.type)}`)});let e=this.gpuDataManager.create(N,GPUBufferUsage.COPY_DST|GPUBufferUsage.UNIFORM);this.device.queue.writeBuffer(e.buffer,0,k,0,N),this.gpuDataManager.release(e.id),S={offset:0,size:N,buffer:e.buffer}}let F=this.programManager.normalizeDispatchGroupSize(E),j=F[1]===1&&F[2]===1,J=vp(a,o,j),L=this.programManager.getArtifact(J);if(L||(L=this.programManager.build(a,F),this.programManager.setArtifact(J,L),xt("info",()=>`[artifact] key: ${J}, programName: ${a.name}`)),B&&L.uniformVariablesInfo){if(B.length!==L.uniformVariablesInfo.length)throw new Error(`Uniform variables count mismatch: expect ${L.uniformVariablesInfo.length}, got ${B.length} in program "${L.programInfo.name}".`);for(let N=0;N<B.length;N++){let U=B[N],f=U.type,k=typeof U.data=="number"?1:U.data.length,[e,d]=L.uniformVariablesInfo[N];if(f!==e||k!==d)throw new Error(`Uniform variable ${N} mismatch: expect type ${e} with size ${d}, got type ${f} with size ${k} in program "${L.programInfo.name}".`)}}if(xt("info",()=>`[ProgramManager] run "${a.name}" (key=${J}) with ${F[0]}x${F[1]}x${F[2]}`),this.queryType!=="none"||this.sessionStatus==="capturing"){let N={kernelId:this.currentKernelId,programName:L.programInfo.name,inputTensorViews:o,outputTensorViews:v};this.pendingKernels.push(N),this.sessionStatus==="capturing"&&this.capturedPendingKernels.get(this.currentSessionId).push(N)}return this.programManager.run(L,C,x,F,S),ha(a.name),v}upload(a,o){this.gpuDataManager.upload(a,o)}memcpy(a,o){this.gpuDataManager.memcpy(a,o)}async download(a,o){await this.gpuDataManager.download(a,o)}alloc(a){return this.gpuDataManager.create(a).id}free(a){return this.gpuDataManager.release(a)}createKernel(a,o,n,u){let m=cC.get(a);if(!m)throw new Error(`kernel not implemented: ${a}`);let b={kernelType:a,kernelName:u,kernelEntry:m[0],attributes:[m[1],n]};this.kernels.set(o,b)}releaseKernel(a){let o=this.kernelPersistentData.get(a);if(o){for(let n of o)this.gpuDataManager.release(n.id);this.kernelPersistentData.delete(a)}this.kernelCustomData.delete(a),this.kernels.delete(a)}computeKernel(a,o,n){let u=this.kernels.get(a);if(!u)throw new Error(`kernel not created: ${a}`);let m=u.kernelType,b=u.kernelName,C=u.kernelEntry,w=u.attributes;if(this.currentKernelId!==null)throw new Error(`kernel "[${m}] ${b}" is not allowed to be called recursively`);this.currentKernelId=a,w[0]&&(w[1]=w[0](w[1]),w[0]=void 0),xt("info",()=>`[WebGPU] Start to run kernel "[${m}] ${b}"...`);let E=this.env.debug;this.temporaryData=[];try{return E&&this.device.pushErrorScope("validation"),C(o,w[1]),0}catch(B){return n.push(Promise.resolve(`[WebGPU] Kernel "[${m}] ${b}" failed. ${B}`)),1}finally{E&&n.push(this.device.popErrorScope().then(B=>B?`GPU validation error for kernel "[${m}] ${b}": ${B.message}`:null));for(let B of this.temporaryData)this.gpuDataManager.release(B.id);this.temporaryData=[],this.currentKernelId=null}}registerBuffer(a,o,n,u){let m=this.sessionExternalDataMapping.get(a);m||(m=new Map,this.sessionExternalDataMapping.set(a,m));let b=m.get(o),C=this.gpuDataManager.registerExternalBuffer(n,u,b);return m.set(o,[C,n]),C}unregisterBuffers(a){let o=this.sessionExternalDataMapping.get(a);o&&(o.forEach(n=>this.gpuDataManager.unregisterExternalBuffer(n[0])),this.sessionExternalDataMapping.delete(a))}getBuffer(a){let o=this.gpuDataManager.get(a);if(!o)throw new Error(`no GPU data for buffer: ${a}`);return o.buffer}createDownloader(a,o,n){return async()=>{let u=await q2(this,a,o);return Bc(u.buffer,n)}}writeTimestamp(a){this.queryType==="inside-passes"&&this.computePassEncoder.writeTimestamp(this.querySet,a)}setQueryType(){this.queryType="none",(this.env.webgpu.profiling?.mode==="default"||(typeof this.env.trace>"u"?this.env.wasm.trace:this.env.trace))&&(this.device.features.has("chromium-experimental-timestamp-query-inside-passes")?this.queryType="inside-passes":this.device.features.has("timestamp-query")&&(this.queryType="at-passes"),this.queryType!=="none"&&typeof this.querySet>"u"&&(this.querySet=this.device.createQuerySet({type:"timestamp",count:this.maxDispatchNumber*2}),this.queryResolveBuffer=this.device.createBuffer({size:this.maxDispatchNumber*2*8,usage:GPUBufferUsage.COPY_SRC|GPUBufferUsage.QUERY_RESOLVE})))}captureBegin(){xt("info","captureBegin"),this.capturedCommandList.get(this.currentSessionId)||this.capturedCommandList.set(this.currentSessionId,[]),this.capturedPendingKernels.get(this.currentSessionId)||this.capturedPendingKernels.set(this.currentSessionId,[]),this.flush(),this.sessionStatus="capturing"}captureEnd(){xt("info","captureEnd"),this.flush(),this.sessionStatus="default"}replay(){xt("info","replay"),this.sessionStatus="replaying";let a=this.capturedCommandList.get(this.currentSessionId),o=this.capturedPendingKernels.get(this.currentSessionId),n=a.length;this.pendingKernels=[];for(let u=0;u<n;u++){let m=this.getComputePassEncoder(),b=a[u];this.writeTimestamp(this.pendingDispatchNumber*2),m.setPipeline(b.computePipeline),m.setBindGroup(0,b.bindGroup),m.dispatchWorkgroups(...b.dispatchGroup),this.writeTimestamp(this.pendingDispatchNumber*2+1),this.pendingDispatchNumber++,this.queryType!=="none"&&this.pendingKernels.push(o[u]),(this.pendingDispatchNumber>=this.maxDispatchNumber||this.queryType==="at-passes")&&this.endComputePass(),this.pendingDispatchNumber>=this.maxDispatchNumber&&this.flush()}this.flush(),this.sessionStatus="default"}onCreateSession(){this.gpuDataManager.onCreateSession()}onReleaseSession(a){this.unregisterBuffers(a),this.capturedCommandList.has(a)&&this.capturedCommandList.delete(a),this.capturedPendingKernels.has(a)&&this.capturedPendingKernels.delete(a),this.gpuDataManager.onReleaseSession(a)}onRunStart(a){this.currentSessionId=a,this.setQueryType()}}}),gC={};go(gC,{init:()=>pC});var G0,xp,pC,BI=hA(()=>{it(),Mn(),ft(),F6(),G0=class mC{constructor(o,n,u,m){this.module=o,this.dataType=n,this.data=u,this.dims=m}getFloat32Array(){if(this.dataType!==1)throw new Error("Invalid data type");let o=Ue.size(this.dims);return o===0?new Float32Array:new Float32Array(this.module.HEAP8.buffer,this.data,o)}getBigInt64Array(){if(this.dataType!==7)throw new Error("Invalid data type");let o=Ue.size(this.dims);return o===0?new BigInt64Array:new BigInt64Array(this.module.HEAP8.buffer,this.data,o)}getInt32Array(){if(this.dataType!==6)throw new Error("Invalid data type");let o=Ue.size(this.dims);return o===0?new Int32Array:new Int32Array(this.module.HEAP8.buffer,this.data,o)}getUint16Array(){if(this.dataType!==10&&this.dataType!==4)throw new Error("Invalid data type");let o=Ue.size(this.dims);return o===0?new Uint16Array:new Uint16Array(this.module.HEAP8.buffer,this.data,o)}reshape(o){if(Ue.size(o)!==Ue.size(this.dims))throw new Error("Invalid new shape");return new mC(this.module,this.dataType,this.data,o)}},xp=class{constructor(a,o,n){this.module=a,this.backend=o,this.customDataOffset=0,this.customDataSize=0,this.adapterInfo=o.adapterInfo;let u=a.PTR_SIZE,m=n/a.PTR_SIZE,b=u===4?"i32":"i64";this.opKernelContext=Number(a.getValue(u*m++,b));let C=Number(a.getValue(u*m++,b));this.outputCount=Number(a.getValue(u*m++,b)),this.customDataOffset=Number(a.getValue(u*m++,"*")),this.customDataSize=Number(a.getValue(u*m++,b));let w=[];for(let E=0;E<C;E++){let B=Number(a.getValue(u*m++,b)),D=Number(a.getValue(u*m++,"*")),v=Number(a.getValue(u*m++,b)),x=[];for(let S=0;S<v;S++)x.push(Number(a.getValue(u*m++,b)));w.push(new G0(a,B,D,x))}this.inputs=w}get kernelCustomData(){return this.backend.currentKernelCustomData}get customDataBuffer(){return this.module.HEAPU8.subarray(this.customDataOffset,this.customDataOffset+this.customDataSize)}compute(a,o){let n=o?.inputs?.map(C=>typeof C=="number"?this.inputs[C]:C)??this.inputs,u=o?.outputs??[],m=(C,w,E)=>new G0(this.module,w,this.output(C,E),E),b=(C,w)=>{let E=Bi(C,w);if(!E)throw new Error(`Unsupported data type: ${C}`);let B=E>0?this.backend.gpuDataManager.create(E).id:0;return new G0(this.module,C,B,w)};return this.backend.run(a,n,u,m,b,this.outputCount)}output(a,o){let n=this.module.stackSave();try{let u=this.module.PTR_SIZE,m=u===4?"i32":"i64",b=this.module.stackAlloc((1+o.length)*u);this.module.setValue(b,o.length,m);for(let C=0;C<o.length;C++)this.module.setValue(b+u*(C+1),o[C],m);return this.module._JsepOutput(this.opKernelContext,a,b)}catch(u){throw new Error(`Failed to generate kernel's output[${a}] with dims [${o}]. If you are running with pre-allocated output, please make sure the output type/dims are correct. Error: ${u}`)}finally{this.module.stackRestore(n)}}},pC=async(a,o,n,u)=>{let m=o.jsepInit;if(!m)throw new Error("Failed to initialize JSEP. The WebAssembly module is not built with JSEP support.");if(a==="webgpu"){let b=(vI(),$o(dC)).WebGpuBackend,C=new b;await C.initialize(n,u),m("webgpu",[C,w=>C.alloc(Number(w)),w=>C.free(w),(w,E,B,D=!1)=>{if(D)xt("verbose",()=>`[WebGPU] jsepCopyGpuToGpu: src=${Number(w)}, dst=${Number(E)}, size=${Number(B)}`),C.memcpy(Number(w),Number(E));else{xt("verbose",()=>`[WebGPU] jsepCopyCpuToGpu: dataOffset=${Number(w)}, gpuDataId=${Number(E)}, size=${Number(B)}`);let v=o.HEAPU8.subarray(Number(w>>>0),Number(w>>>0)+Number(B));C.upload(Number(E),v)}},async(w,E,B)=>{xt("verbose",()=>`[WebGPU] jsepCopyGpuToCpu: gpuDataId=${w}, dataOffset=${E}, size=${B}`),await C.download(Number(w),()=>o.HEAPU8.subarray(Number(E)>>>0,Number(E+B)>>>0))},(w,E,B)=>C.createKernel(w,Number(E),B,o.UTF8ToString(o._JsepGetNodeName(Number(E)))),w=>C.releaseKernel(w),(w,E,B,D)=>{xt("verbose",()=>`[WebGPU] jsepRun: sessionHandle=${B}, kernel=${w}, contextDataOffset=${E}`);let v=new xp(o,C,Number(E));return C.computeKernel(Number(w),v,D)},()=>C.captureBegin(),()=>C.captureEnd(),()=>C.replay()])}else{let b=new Bm(n);m("webnn",[b,()=>b.reserveTensorId(),C=>b.releaseTensorId(C),async(C,w,E,B,D)=>b.ensureTensor(C,w,E,B,D),(C,w)=>{b.uploadTensor(C,w)},async(C,w)=>b.downloadTensor(C,w)])}}}),yp,zc,Nc,Un,Dp,S2,X0,Lc,_c,O2,Rc,jc,Wc,hC=hA(()=>{P6(),G6(),it(),Qi(),Ic(),Im(),yp=(a,o)=>{ir()._OrtInit(a,o)!==0&&Xt("Can't initialize onnxruntime.")},zc=async a=>{yp(a.wasm.numThreads,Y0(a.logLevel))},Nc=async(a,o)=>{ir().asyncInit?.();{let n=(BI(),$o(gC)).init;if(o==="webgpu"){if(typeof navigator>"u"||!navigator.gpu)throw new Error("WebGPU is not supported in current environment");let u=a.webgpu.adapter;if(u){if(typeof u.limits!="object"||typeof u.features!="object"||typeof u.requestDevice!="function")throw new Error("Invalid GPU adapter set in `env.webgpu.adapter`. It must be a GPUAdapter object.")}else{let m=a.webgpu.powerPreference;if(m!==void 0&&m!=="low-power"&&m!=="high-performance")throw new Error(`Invalid powerPreference setting: "${m}"`);let b=a.webgpu.forceFallbackAdapter;if(b!==void 0&&typeof b!="boolean")throw new Error(`Invalid forceFallbackAdapter setting: "${b}"`);if(u=await navigator.gpu.requestAdapter({powerPreference:m,forceFallbackAdapter:b}),!u)throw new Error('Failed to get GPU adapter. You may need to enable flag "--enable-unsafe-webgpu" if you are using Chrome.')}await n("webgpu",ir(),a,u)}if(o==="webnn"){if(typeof navigator>"u"||!navigator.ml)throw new Error("WebNN is not supported in current environment");await n("webnn",ir(),a)}}},Un=new Map,Dp=a=>{let o=ir(),n=o.stackSave();try{let u=o.PTR_SIZE,m=o.stackAlloc(2*u);o._OrtGetInputOutputCount(a,m,m+u)!==0&&Xt("Can't get session input/output count.");let b=u===4?"i32":"i64";return[Number(o.getValue(m,b)),Number(o.getValue(m+u,b))]}finally{o.stackRestore(n)}},S2=(a,o)=>{let n=ir(),u=n.stackSave(),m=0;try{let b=n.PTR_SIZE,C=n.stackAlloc(2*b);n._OrtGetInputOutputMetadata(a,o,C,C+b)!==0&&Xt("Can't get session input/output metadata.");let w=Number(n.getValue(C,"*"));m=Number(n.getValue(C+b,"*"));let E=n.HEAP32[m/4];if(E===0)return[w,0];let B=n.HEAPU32[m/4+1],D=[];for(let v=0;v<B;v++){let x=Number(n.getValue(m+8+v*b,"*"));D.push(x!==0?n.UTF8ToString(x):Number(n.getValue(m+8+(v+B)*b,"*")))}return[w,E,D]}finally{n.stackRestore(u),m!==0&&n._OrtFree(m)}},X0=a=>{let o=ir(),n=o._malloc(a.byteLength);if(n===0)throw new Error(`Can't create a session. failed to allocate a buffer of size ${a.byteLength}.`);return o.HEAPU8.set(a,n),[n,a.byteLength]},Lc=async(a,o)=>{let n,u,m=ir();Array.isArray(a)?[n,u]=a:a.buffer===m.HEAPU8.buffer?[n,u]=[a.byteOffset,a.byteLength]:[n,u]=X0(a);let b=0,C=0,w=0,E=[],B=[],D=[];try{if([C,E]=await bm(o),o?.externalData&&m.mountExternalData){let f=[];for(let k of o.externalData){let e=typeof k=="string"?k:k.path;f.push(Mc(typeof k=="string"?k:k.data).then(d=>{m.mountExternalData(e,d)}))}await Promise.all(f)}for(let f of o?.executionProviders??[])if((typeof f=="string"?f:f.name)==="webnn"){if(m.shouldTransferToMLTensor=!1,typeof f!="string"){let k=f,e=k?.context,d=k?.gpuDevice,y=k?.deviceType,ee=k?.powerPreference;e?m.currentContext=e:d?m.currentContext=await m.webnnCreateMLContext(d):m.currentContext=await m.webnnCreateMLContext({deviceType:y,powerPreference:ee})}else m.currentContext=await m.webnnCreateMLContext();break}b=await m._OrtCreateSession(n,u,C),m.webgpuOnCreateSession?.(b),b===0&&Xt("Can't create a session."),m.jsepOnCreateSession?.(),m.currentContext&&(m.webnnRegisterMLContext(b,m.currentContext),m.currentContext=void 0,m.shouldTransferToMLTensor=!0);let[v,x]=Dp(b),S=!!o?.enableGraphCapture,F=[],j=[],J=[],L=[],N=[];for(let f=0;f<v;f++){let[k,e,d]=S2(b,f);k===0&&Xt("Can't get an input name."),B.push(k);let y=m.UTF8ToString(k);F.push(y),J.push(e===0?{name:y,isTensor:!1}:{name:y,isTensor:!0,type:kn(e),shape:d})}for(let f=0;f<x;f++){let[k,e,d]=S2(b,f+v);k===0&&Xt("Can't get an output name."),D.push(k);let y=m.UTF8ToString(k);j.push(y),L.push(e===0?{name:y,isTensor:!1}:{name:y,isTensor:!0,type:kn(e),shape:d});{if(S&&o?.preferredOutputLocation===void 0){N.push("gpu-buffer");continue}let ee=typeof o?.preferredOutputLocation=="string"?o.preferredOutputLocation:o?.preferredOutputLocation?.[y]??"cpu";if(ee!=="cpu"&&ee!=="cpu-pinned"&&ee!=="gpu-buffer"&&ee!=="ml-tensor")throw new Error(`Not supported preferred output location: ${ee}.`);if(S&&ee!=="gpu-buffer")throw new Error(`Not supported preferred output location: ${ee}. Only 'gpu-buffer' location is supported when enableGraphCapture is true.`);N.push(ee)}}let U=null;return N.some(f=>f==="gpu-buffer"||f==="ml-tensor")&&(w=m._OrtCreateBinding(b),w===0&&Xt("Can't create IO binding."),U={handle:w,outputPreferredLocations:N,outputPreferredLocationsEncoded:N.map(f=>Z2(f))}),Un.set(b,[b,B,D,U,S,!1]),[b,F,j,J,L]}catch(v){throw B.forEach(x=>m._OrtFree(x)),D.forEach(x=>m._OrtFree(x)),w!==0&&m._OrtReleaseBinding(w)!==0&&Xt("Can't release IO binding."),b!==0&&m._OrtReleaseSession(b)!==0&&Xt("Can't release session."),v}finally{m._free(n),C!==0&&m._OrtReleaseSessionOptions(C)!==0&&Xt("Can't release session options."),E.forEach(v=>m._free(v)),m.unmountExternalData?.()}},_c=a=>{let o=ir(),n=Un.get(a);if(!n)throw new Error(`cannot release session. invalid session id: ${a}`);let[u,m,b,C,w]=n;C&&(w&&o._OrtClearBoundOutputs(C.handle)!==0&&Xt("Can't clear bound outputs."),o._OrtReleaseBinding(C.handle)!==0&&Xt("Can't release IO binding.")),o.jsepOnReleaseSession?.(a),o.webnnOnReleaseSession?.(a),o.webgpuOnReleaseSession?.(a),m.forEach(E=>o._OrtFree(E)),b.forEach(E=>o._OrtFree(E)),o._OrtReleaseSession(u)!==0&&Xt("Can't release session."),Un.delete(a)},O2=async(a,o,n,u,m,b,C=!1)=>{if(!a){o.push(0);return}let w=ir(),E=w.PTR_SIZE,B=a[0],D=a[1],v=a[3],x=v,S,F;if(B==="string"&&(v==="gpu-buffer"||v==="ml-tensor"))throw new Error("String tensor is not supported on GPU.");if(C&&v!=="gpu-buffer")throw new Error(`External buffer must be provided for input/output index ${b} when enableGraphCapture is true.`);if(v==="gpu-buffer"){let L=a[2].gpuBuffer;F=Bi(Ao(B),D);{let N=w.jsepRegisterBuffer;if(!N)throw new Error('Tensor location "gpu-buffer" is not supported without using WebGPU.');S=N(u,b,L,F)}}else if(v==="ml-tensor"){let L=a[2].mlTensor;F=Bi(Ao(B),D);let N=w.webnnRegisterMLTensor;if(!N)throw new Error('Tensor location "ml-tensor" is not supported without using WebNN.');S=N(u,L,Ao(B),D)}else{let L=a[2];if(Array.isArray(L)){F=E*L.length,S=w._malloc(F),n.push(S);for(let N=0;N<L.length;N++){if(typeof L[N]!="string")throw new TypeError(`tensor data at index ${N} is not a string`);w.setValue(S+N*E,Ta(L[N],n),"*")}}else{let N=w.webnnIsGraphInput;if(B!=="string"&&N){let U=w.UTF8ToString(m);if(N(u,U)){let f=Ao(B);F=Bi(f,D),x="ml-tensor";let k=w.webnnCreateTemporaryTensor,e=w.webnnUploadTensor;if(!k||!e)throw new Error('Tensor location "ml-tensor" is not supported without using WebNN.');let d=await k(u,f,D);e(d,new Uint8Array(L.buffer,L.byteOffset,L.byteLength)),S=d}else F=L.byteLength,S=w._malloc(F),n.push(S),w.HEAPU8.set(new Uint8Array(L.buffer,L.byteOffset,F),S)}else F=L.byteLength,S=w._malloc(F),n.push(S),w.HEAPU8.set(new Uint8Array(L.buffer,L.byteOffset,F),S)}}let j=w.stackSave(),J=w.stackAlloc(4*D.length);try{D.forEach((N,U)=>w.setValue(J+U*E,N,E===4?"i32":"i64"));let L=w._OrtCreateTensor(Ao(B),S,F,J,D.length,Z2(x));L===0&&Xt(`Can't create tensor for input/output. session=${u}, index=${b}.`),o.push(L)}finally{w.stackRestore(j)}},Rc=async(a,o,n,u,m,b)=>{let C=ir(),w=C.PTR_SIZE,E=Un.get(a);if(!E)throw new Error(`cannot run inference. invalid session id: ${a}`);let B=E[0],D=E[1],v=E[2],x=E[3],S=E[4],F=E[5],j=o.length,J=u.length,L=0,N=[],U=[],f=[],k=[],e=C.stackSave(),d=C.stackAlloc(j*w),y=C.stackAlloc(j*w),ee=C.stackAlloc(J*w),T=C.stackAlloc(J*w);try{[L,N]=Cm(b);for(let $=0;$<j;$++)await O2(n[$],U,k,a,D[o[$]],o[$],S);for(let $=0;$<J;$++)await O2(m[$],f,k,a,v[u[$]],j+u[$],S);for(let $=0;$<j;$++)C.setValue(d+$*w,U[$],"*"),C.setValue(y+$*w,D[o[$]],"*");for(let $=0;$<J;$++)C.setValue(ee+$*w,f[$],"*"),C.setValue(T+$*w,v[u[$]],"*");if(x&&!F){let{handle:$,outputPreferredLocations:be,outputPreferredLocationsEncoded:Ce}=x;if(D.length!==j)throw new Error(`input count from feeds (${j}) is expected to be always equal to model's input count (${D.length}).`);for(let Ee=0;Ee<j;Ee++){let Be=o[Ee];await C._OrtBindInput($,D[Be],U[Ee])!==0&&Xt(`Can't bind input[${Ee}] for session=${a}.`)}for(let Ee=0;Ee<J;Ee++){let Be=u[Ee];m[Ee]?.[3]?C._OrtBindOutput($,v[Be],f[Ee],0)!==0&&Xt(`Can't bind pre-allocated output[${Ee}] for session=${a}.`):C._OrtBindOutput($,v[Be],0,Ce[Be])!==0&&Xt(`Can't bind output[${Ee}] to ${be[Ee]} for session=${a}.`)}Un.set(a,[B,D,v,x,S,!0])}C.jsepOnRunStart?.(B),C.webnnOnRunStart?.(B);let O;x?O=await C._OrtRunWithBinding(B,x.handle,J,ee,L):O=await C._OrtRun(B,y,d,j,T,J,ee,L),O!==0&&Xt("failed to call OrtRun().");let we=[];for(let $=0;$<J;$++){let be=Number(C.getValue(ee+$*w,"*"));if(be===f[$]){we.push(m[$]);continue}let Ce=C.stackSave(),Ee=C.stackAlloc(4*w),Be=!1,ve,Ne=0;try{C._OrtGetTensorData(be,Ee,Ee+w,Ee+2*w,Ee+3*w)!==0&&Xt(`Can't access output tensor data on index ${$}.`);let Fe=w===4?"i32":"i64",le=Number(C.getValue(Ee,Fe));Ne=C.getValue(Ee+w,"*");let Ae=C.getValue(Ee+w*2,"*"),pe=Number(C.getValue(Ee+w*3,Fe)),oe=[];for(let Je=0;Je<pe;Je++)oe.push(Number(C.getValue(Ae+Je*w,Fe)));C._OrtFree(Ae)!==0&&Xt("Can't free memory for tensor dims.");let Ge=oe.reduce((Je,aA)=>Je*aA,1);ve=kn(le);let nA=x?.outputPreferredLocations[u[$]];if(ve==="string"){if(nA==="gpu-buffer"||nA==="ml-tensor")throw new Error("String tensor is not supported on GPU.");let Je=[];for(let aA=0;aA<Ge;aA++){let kA=C.getValue(Ne+aA*w,"*"),ze=C.getValue(Ne+(aA+1)*w,"*"),de=aA===Ge-1?void 0:ze-kA;Je.push(C.UTF8ToString(kA,de))}we.push([ve,oe,Je,"cpu"])}else if(nA==="gpu-buffer"&&Ge>0){let Je=C.jsepGetBuffer;if(!Je)throw new Error('preferredLocation "gpu-buffer" is not supported without using WebGPU.');let aA=Je(Ne),kA=Bi(le,Ge);if(kA===void 0||!kc(ve))throw new Error(`Unsupported data type: ${ve}`);Be=!0,we.push([ve,oe,{gpuBuffer:aA,download:C.jsepCreateDownloader(aA,kA,ve),dispose:()=>{C._OrtReleaseTensor(be)!==0&&Xt("Can't release tensor.")}},"gpu-buffer"])}else if(nA==="ml-tensor"&&Ge>0){let Je=C.webnnEnsureTensor,aA=C.webnnIsInt64Supported;if(!Je||!aA)throw new Error('preferredLocation "ml-tensor" is not supported without using WebNN.');if(Bi(le,Ge)===void 0||!Ec(ve))throw new Error(`Unsupported data type: ${ve}`);if(ve==="int64"&&!aA(a))throw new Error('preferredLocation "ml-tensor" for int64 output is not supported by current WebNN Context.');let kA=await Je(a,Ne,le,oe,!1);Be=!0,we.push([ve,oe,{mlTensor:kA,download:C.webnnCreateMLTensorDownloader(Ne,ve),dispose:()=>{C.webnnReleaseTensorId(Ne),C._OrtReleaseTensor(be)}},"ml-tensor"])}else{let Je=wc(ve),aA=new Je(Ge);new Uint8Array(aA.buffer,aA.byteOffset,aA.byteLength).set(C.HEAPU8.subarray(Ne,Ne+aA.byteLength)),we.push([ve,oe,aA,"cpu"])}}finally{C.stackRestore(Ce),ve==="string"&&Ne&&C._free(Ne),Be||C._OrtReleaseTensor(be),C.webnnOnRunEnd?.(B)}}return x&&!S&&(C._OrtClearBoundOutputs(x.handle)!==0&&Xt("Can't clear bound outputs."),Un.set(a,[B,D,v,x,S,!1])),we}finally{C.stackRestore(e),U.forEach(O=>C._OrtReleaseTensor(O)),f.forEach(O=>C._OrtReleaseTensor(O)),k.forEach(O=>C._free(O)),L!==0&&C._OrtReleaseRunOptions(L),N.forEach(O=>C._free(O))}},jc=a=>{let o=ir(),n=Un.get(a);if(!n)throw new Error("invalid session id");let u=n[0],m=o._OrtEndProfiling(u);m===0&&Xt("Can't get an profile file name."),o._OrtFree(m)},Wc=a=>{let o=[];for(let n of a){let u=n[2];!Array.isArray(u)&&"buffer"in u&&o.push(u.buffer)}return o}}),Kn,ga,$i,_o,Ro,Q0,z2,F0,wi,ki,Tp,CC,bC,IC,wC,kC,EC,MC,vC=hA(()=>{Fa(),hC(),Qi(),Cc(),Kn=()=>!!gr.wasm.proxy&&typeof document<"u",$i=!1,_o=!1,Ro=!1,F0=new Map,wi=(a,o)=>{let n=F0.get(a);n?n.push(o):F0.set(a,[o])},ki=()=>{if($i||!_o||Ro||!ga)throw new Error("worker not ready")},Tp=a=>{switch(a.data.type){case"init-wasm":$i=!1,a.data.err?(Ro=!0,z2[1](a.data.err)):(_o=!0,z2[0]()),Q0&&(URL.revokeObjectURL(Q0),Q0=void 0);break;case"init-ep":case"copy-from":case"create":case"release":case"run":case"end-profiling":{let o=F0.get(a.data.type);a.data.err?o.shift()[1](a.data.err):o.shift()[0](a.data.out);break}}},CC=async()=>{if(!_o){if($i)throw new Error("multiple calls to 'initWasm()' detected.");if(Ro)throw new Error("previous call to 'initWasm()' failed.");if($i=!0,Kn())return new Promise((a,o)=>{ga?.terminate(),mm().then(([n,u])=>{try{ga=u,ga.onerror=b=>o(b),ga.onmessage=Tp,z2=[a,o];let m={type:"init-wasm",in:gr};!m.in.wasm.wasmPaths&&(n||X2)&&(m.in.wasm.wasmPaths={wasm:new URL("/zerovoice/assets/ort-wasm-simd-threaded.jsep-B0T3yYHD.wasm",import.meta.url).href}),ga.postMessage(m),Q0=n}catch(m){o(m)}},o)});try{await bc(gr.wasm),await zc(gr),_o=!0}catch(a){throw Ro=!0,a}finally{$i=!1}}},bC=async a=>{if(Kn())return ki(),new Promise((o,n)=>{wi("init-ep",[o,n]);let u={type:"init-ep",in:{epName:a,env:gr}};ga.postMessage(u)});await Nc(gr,a)},IC=async a=>Kn()?(ki(),new Promise((o,n)=>{wi("copy-from",[o,n]);let u={type:"copy-from",in:{buffer:a}};ga.postMessage(u,[a.buffer])})):X0(a),wC=async(a,o)=>{if(Kn()){if(o?.preferredOutputLocation)throw new Error('session option "preferredOutputLocation" is not supported for proxy.');return ki(),new Promise((n,u)=>{wi("create",[n,u]);let m={type:"create",in:{model:a,options:{...o}}},b=[];a instanceof Uint8Array&&b.push(a.buffer),ga.postMessage(m,b)})}else return Lc(a,o)},kC=async a=>{if(Kn())return ki(),new Promise((o,n)=>{wi("release",[o,n]);let u={type:"release",in:a};ga.postMessage(u)});_c(a)},EC=async(a,o,n,u,m,b)=>{if(Kn()){if(n.some(C=>C[3]!=="cpu"))throw new Error("input tensor on GPU is not supported for proxy.");if(m.some(C=>C))throw new Error("pre-allocated output tensor is not supported for proxy.");return ki(),new Promise((C,w)=>{wi("run",[C,w]);let E=n,B={type:"run",in:{sessionId:a,inputIndices:o,inputs:E,outputIndices:u,options:b}};ga.postMessage(B,Wc(E))})}else return Rc(a,o,n,u,m,b)},MC=async a=>{if(Kn())return ki(),new Promise((o,n)=>{wi("end-profiling",[o,n]);let u={type:"end-profiling",in:a};ga.postMessage(u)});jc(a)}}),N2,Pp,BC,xI=hA(()=>{Fa(),vC(),it(),hc(),Im(),N2=(a,o)=>{switch(a.location){case"cpu":return[a.type,a.dims,a.data,"cpu"];case"gpu-buffer":return[a.type,a.dims,{gpuBuffer:a.gpuBuffer},"gpu-buffer"];case"ml-tensor":return[a.type,a.dims,{mlTensor:a.mlTensor},"ml-tensor"];default:throw new Error(`invalid data location: ${a.location} for ${o()}`)}},Pp=a=>{switch(a[3]){case"cpu":return new Pa(a[0],a[2],a[1]);case"gpu-buffer":{let o=a[0];if(!kc(o))throw new Error(`not supported data type: ${o} for deserializing GPU tensor`);let{gpuBuffer:n,download:u,dispose:m}=a[2];return Pa.fromGpuBuffer(n,{dataType:o,dims:a[1],download:u,dispose:m})}case"ml-tensor":{let o=a[0];if(!Ec(o))throw new Error(`not supported data type: ${o} for deserializing MLTensor tensor`);let{mlTensor:n,download:u,dispose:m}=a[2];return Pa.fromMLTensor(n,{dataType:o,dims:a[1],download:u,dispose:m})}default:throw new Error(`invalid data location: ${a[3]}`)}},BC=class{async fetchModelAndCopyToWasmMemory(a){return IC(await Mc(a))}async loadModel(a,o){Qa();let n;typeof a=="string"?n=await this.fetchModelAndCopyToWasmMemory(a):n=a,[this.sessionId,this.inputNames,this.outputNames,this.inputMetadata,this.outputMetadata]=await wC(n,o),ha()}async dispose(){return kC(this.sessionId)}async run(a,o,n){Qa();let u=[],m=[];Object.entries(a).forEach(v=>{let x=v[0],S=v[1],F=this.inputNames.indexOf(x);if(F===-1)throw new Error(`invalid input '${x}'`);u.push(S),m.push(F)});let b=[],C=[];Object.entries(o).forEach(v=>{let x=v[0],S=v[1],F=this.outputNames.indexOf(x);if(F===-1)throw new Error(`invalid output '${x}'`);b.push(S),C.push(F)});let w=u.map((v,x)=>N2(v,()=>`input "${this.inputNames[m[x]]}"`)),E=b.map((v,x)=>v?N2(v,()=>`output "${this.outputNames[C[x]]}"`):null),B=await EC(this.sessionId,m,w,C,E,n),D={};for(let v=0;v<B.length;v++)D[this.outputNames[C[v]]]=b[v]??Pp(B[v]);return ha(),D}startProfiling(){}endProfiling(){MC(this.sessionId)}}}),xC={};go(xC,{OnnxruntimeWebAssemblyBackend:()=>cc,initializeFlags:()=>lc,wasmBackend:()=>yC});var lc,cc,yC,yI=hA(()=>{Fa(),vC(),xI(),lc=()=>{(typeof gr.wasm.initTimeout!="number"||gr.wasm.initTimeout<0)&&(gr.wasm.initTimeout=0);let a=gr.wasm.simd;if(typeof a!="boolean"&&a!==void 0&&a!=="fixed"&&a!=="relaxed"&&(console.warn(`Property "env.wasm.simd" is set to unknown value "${a}". Reset it to \`false\` and ignore SIMD feature checking.`),gr.wasm.simd=!1),typeof gr.wasm.proxy!="boolean"&&(gr.wasm.proxy=!1),typeof gr.wasm.trace!="boolean"&&(gr.wasm.trace=!1),typeof gr.wasm.numThreads!="number"||!Number.isInteger(gr.wasm.numThreads)||gr.wasm.numThreads<=0)if(typeof self<"u"&&!self.crossOriginIsolated)gr.wasm.numThreads=1;else{let o=typeof navigator>"u"?g6("node:os").cpus().length:navigator.hardwareConcurrency;gr.wasm.numThreads=Math.min(4,Math.ceil((o||1)/2))}},cc=class{async init(a){lc(),await CC(),await bC(a)}async createInferenceSessionHandler(a,o){let n=new BC;return await n.loadModel(a,o),n}},yC=new cc});Fa();Fa();Fa();var DI="1.22.0-dev.20250409-89f8206ba4",TI=cm;{let a=(yI(),$o(xC)).wasmBackend;xi("webgpu",a,5),xi("webnn",a,5),xi("cpu",a,10),xi("wasm",a,10)}Object.defineProperty(gr.versions,"web",{value:DI,enumerable:!0});/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*//**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 *//**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var PI=Object.freeze({__proto__:null,get InferenceSession(){return mc},get TRACE(){return e0},get TRACE_FUNC_BEGIN(){return Qa},get TRACE_FUNC_END(){return ha},get Tensor(){return Pa},default:TI,get env(){return gr},get registerBackend(){return xi}}),L2={},GI={"onnxruntime-common":a=>{a.exports=c6},"onnxruntime-web":a=>{a.exports=PI},"?2ce3":()=>{},"?7a2c":()=>{},"?a42a":()=>{},"?2b25":()=>{},"?569f":()=>{},"?3f59":()=>{},"?154a":()=>{},"./node_modules/@huggingface/jinja/dist/index.js":(a,o,n)=>{n.r(o),n.d(o,{Environment:()=>fA,Interpreter:()=>he,Template:()=>Ts,parse:()=>pe,tokenize:()=>v});var u=Object.freeze({Text:"Text",NumericLiteral:"NumericLiteral",BooleanLiteral:"BooleanLiteral",NullLiteral:"NullLiteral",StringLiteral:"StringLiteral",Identifier:"Identifier",Equals:"Equals",OpenParen:"OpenParen",CloseParen:"CloseParen",OpenStatement:"OpenStatement",CloseStatement:"CloseStatement",OpenExpression:"OpenExpression",CloseExpression:"CloseExpression",OpenSquareBracket:"OpenSquareBracket",CloseSquareBracket:"CloseSquareBracket",OpenCurlyBracket:"OpenCurlyBracket",CloseCurlyBracket:"CloseCurlyBracket",Comma:"Comma",Dot:"Dot",Colon:"Colon",Pipe:"Pipe",CallOperator:"CallOperator",AdditiveBinaryOperator:"AdditiveBinaryOperator",MultiplicativeBinaryOperator:"MultiplicativeBinaryOperator",ComparisonBinaryOperator:"ComparisonBinaryOperator",UnaryOperator:"UnaryOperator",Set:"Set",If:"If",For:"For",In:"In",Is:"Is",NotIn:"NotIn",Else:"Else",EndSet:"EndSet",EndIf:"EndIf",ElseIf:"ElseIf",EndFor:"EndFor",And:"And",Or:"Or",Not:"UnaryOperator",Macro:"Macro",EndMacro:"EndMacro",Break:"Break",Continue:"Continue"}),m=Object.freeze({set:u.Set,for:u.For,in:u.In,is:u.Is,if:u.If,else:u.Else,endset:u.EndSet,endif:u.EndIf,elif:u.ElseIf,endfor:u.EndFor,and:u.And,or:u.Or,not:u.Not,"not in":u.NotIn,macro:u.Macro,endmacro:u.EndMacro,break:u.Break,continue:u.Continue,true:u.BooleanLiteral,false:u.BooleanLiteral,none:u.NullLiteral,True:u.BooleanLiteral,False:u.BooleanLiteral,None:u.NullLiteral}),b=class{constructor(re,De){this.value=re,this.type=De}};function C(re){return/\w/.test(re)}function w(re){return/[0-9]/.test(re)}var E=[["{%",u.OpenStatement],["%}",u.CloseStatement],["{{",u.OpenExpression],["}}",u.CloseExpression],["(",u.OpenParen],[")",u.CloseParen],["{",u.OpenCurlyBracket],["}",u.CloseCurlyBracket],["[",u.OpenSquareBracket],["]",u.CloseSquareBracket],[",",u.Comma],[".",u.Dot],[":",u.Colon],["|",u.Pipe],["<=",u.ComparisonBinaryOperator],[">=",u.ComparisonBinaryOperator],["==",u.ComparisonBinaryOperator],["!=",u.ComparisonBinaryOperator],["<",u.ComparisonBinaryOperator],[">",u.ComparisonBinaryOperator],["+",u.AdditiveBinaryOperator],["-",u.AdditiveBinaryOperator],["*",u.MultiplicativeBinaryOperator],["/",u.MultiplicativeBinaryOperator],["%",u.MultiplicativeBinaryOperator],["=",u.Equals]],B=new Map([["n",`
`],["t","	"],["r","\r"],["b","\b"],["f","\f"],["v","\v"],["'","'"],['"','"'],["\\","\\"]]);function D(re,De={}){return re.endsWith(`
`)&&(re=re.slice(0,-1)),re=re.replace(/{#.*?#}/gs,"{##}"),De.lstrip_blocks&&(re=re.replace(/^[ \t]*({[#%])/gm,"$1")),De.trim_blocks&&(re=re.replace(/([#%]})\n/g,"$1")),re.replace(/{##}/g,"").replace(/-%}\s*/g,"%}").replace(/\s*{%-/g,"{%").replace(/-}}\s*/g,"}}").replace(/\s*{{-/g,"{{")}function v(re,De={}){const ie=[],xe=D(re,De);let Re=0;const oA=Le=>{let LA="";for(;Le(xe[Re]);){if(xe[Re]==="\\"){if(++Re,Re>=xe.length)throw new SyntaxError("Unexpected end of input");const QA=xe[Re++],SA=B.get(QA);if(SA===void 0)throw new SyntaxError(`Unexpected escaped character: ${QA}`);LA+=SA;continue}if(LA+=xe[Re++],Re>=xe.length)throw new SyntaxError("Unexpected end of input")}return LA};e:for(;Re<xe.length;){const Le=ie.at(-1)?.type;if(Le===void 0||Le===u.CloseStatement||Le===u.CloseExpression){let QA="";for(;Re<xe.length&&!(xe[Re]==="{"&&(xe[Re+1]==="%"||xe[Re+1]==="{"));)QA+=xe[Re++];if(QA.length>0){ie.push(new b(QA,u.Text));continue}}oA(QA=>/\s/.test(QA));const LA=xe[Re];if(LA==="-"||LA==="+"){const QA=ie.at(-1)?.type;if(QA===u.Text||QA===void 0)throw new SyntaxError(`Unexpected character: ${LA}`);switch(QA){case u.Identifier:case u.NumericLiteral:case u.BooleanLiteral:case u.NullLiteral:case u.StringLiteral:case u.CloseParen:case u.CloseSquareBracket:break;default:{++Re;const SA=oA(w);ie.push(new b(`${LA}${SA}`,SA.length>0?u.NumericLiteral:u.UnaryOperator));continue}}}for(const[QA,SA]of E)if(xe.slice(Re,Re+QA.length)===QA){ie.push(new b(QA,SA)),Re+=QA.length;continue e}if(LA==="'"||LA==='"'){++Re;const QA=oA(SA=>SA!==LA);ie.push(new b(QA,u.StringLiteral)),++Re;continue}if(w(LA)){const QA=oA(w);ie.push(new b(QA,u.NumericLiteral));continue}if(C(LA)){const QA=oA(C),SA=Object.hasOwn(m,QA)?m[QA]:u.Identifier;SA===u.In&&ie.at(-1)?.type===u.Not?(ie.pop(),ie.push(new b("not in",u.NotIn))):ie.push(new b(QA,SA));continue}throw new SyntaxError(`Unexpected character: ${LA}`)}return ie}var x=class{type="Statement"},S=class extends x{constructor(re){super(),this.body=re}type="Program"},F=class extends x{constructor(re,De,ie){super(),this.test=re,this.body=De,this.alternate=ie}type="If"},j=class extends x{constructor(re,De,ie,xe){super(),this.loopvar=re,this.iterable=De,this.body=ie,this.defaultBlock=xe}type="For"},J=class extends x{type="Break"},L=class extends x{type="Continue"},N=class extends x{constructor(re,De,ie){super(),this.assignee=re,this.value=De,this.body=ie}type="Set"},U=class extends x{constructor(re,De,ie){super(),this.name=re,this.args=De,this.body=ie}type="Macro"},f=class extends x{type="Expression"},k=class extends f{constructor(re,De,ie){super(),this.object=re,this.property=De,this.computed=ie}type="MemberExpression"},e=class extends f{constructor(re,De){super(),this.callee=re,this.args=De}type="CallExpression"},d=class extends f{constructor(re){super(),this.value=re}type="Identifier"},y=class extends f{constructor(re){super(),this.value=re}type="Literal"},ee=class extends y{type="NumericLiteral"},T=class extends y{type="StringLiteral"},O=class extends y{type="BooleanLiteral"},we=class extends y{type="NullLiteral"},$=class extends y{type="ArrayLiteral"},be=class extends y{type="TupleLiteral"},Ce=class extends y{type="ObjectLiteral"},Ee=class extends f{constructor(re,De,ie){super(),this.operator=re,this.left=De,this.right=ie}type="BinaryExpression"},Be=class extends f{constructor(re,De){super(),this.operand=re,this.filter=De}type="FilterExpression"},ve=class extends f{constructor(re,De){super(),this.iterable=re,this.test=De}type="SelectExpression"},Ne=class extends f{constructor(re,De,ie){super(),this.operand=re,this.negate=De,this.test=ie}type="TestExpression"},Fe=class extends f{constructor(re,De){super(),this.operator=re,this.argument=De}type="UnaryExpression"},le=class extends f{constructor(re=void 0,De=void 0,ie=void 0){super(),this.start=re,this.stop=De,this.step=ie}type="SliceExpression"},Ae=class extends f{constructor(re,De){super(),this.key=re,this.value=De}type="KeywordArgumentExpression"};function pe(re){const De=new S([]);let ie=0;function xe(uA,gA){const WA=re[ie++];if(!WA||WA.type!==uA)throw new Error(`Parser Error: ${gA}. ${WA.type} !== ${uA}.`);return WA}function Re(){switch(re[ie].type){case u.Text:return LA();case u.OpenStatement:return QA();case u.OpenExpression:return SA();default:throw new SyntaxError(`Unexpected token type: ${re[ie].type}`)}}function oA(...uA){return ie+uA.length<=re.length&&uA.some((gA,WA)=>gA!==re[ie+WA].type)}function Le(...uA){return ie+uA.length<=re.length&&uA.every((gA,WA)=>gA===re[ie+WA].type)}function LA(){return new T(xe(u.Text,"Expected text token").value)}function QA(){xe(u.OpenStatement,"Expected opening statement token");let uA;switch(re[ie].type){case u.Set:++ie,uA=tr(),xe(u.CloseStatement,"Expected closing statement token");break;case u.If:++ie,uA=bt(),xe(u.OpenStatement,"Expected {% token"),xe(u.EndIf,"Expected endif token"),xe(u.CloseStatement,"Expected %} token");break;case u.Macro:++ie,uA=or(),xe(u.OpenStatement,"Expected {% token"),xe(u.EndMacro,"Expected endmacro token"),xe(u.CloseStatement,"Expected %} token");break;case u.For:++ie,uA=Rt(),xe(u.OpenStatement,"Expected {% token"),xe(u.EndFor,"Expected endfor token"),xe(u.CloseStatement,"Expected %} token");break;case u.Break:++ie,xe(u.CloseStatement,"Expected closing statement token"),uA=new J;break;case u.Continue:++ie,xe(u.CloseStatement,"Expected closing statement token"),uA=new L;break;default:throw new SyntaxError(`Unknown statement type: ${re[ie].type}`)}return uA}function SA(){xe(u.OpenExpression,"Expected opening expression token");const uA=zA();return xe(u.CloseExpression,"Expected closing expression token"),uA}function tr(){const uA=zA();if(Le(u.Equals)){++ie;const gA=zA();return new N(uA,gA,[])}else{const gA=[];for(xe(u.CloseStatement,"Expected %} token");!(re[ie]?.type===u.OpenStatement&&re[ie+1]?.type===u.EndSet);){const WA=Re();gA.push(WA)}return xe(u.OpenStatement,"Expected {% token"),xe(u.EndSet,"Expected endset token"),new N(uA,null,gA)}}function bt(){const uA=zA();xe(u.CloseStatement,"Expected closing statement token");const gA=[],WA=[];for(;!(re[ie]?.type===u.OpenStatement&&(re[ie+1]?.type===u.ElseIf||re[ie+1]?.type===u.Else||re[ie+1]?.type===u.EndIf));)gA.push(Re());if(re[ie]?.type===u.OpenStatement&&re[ie+1]?.type!==u.EndIf)if(++ie,Le(u.ElseIf))xe(u.ElseIf,"Expected elseif token"),WA.push(bt());else for(xe(u.Else,"Expected else token"),xe(u.CloseStatement,"Expected closing statement token");!(re[ie]?.type===u.OpenStatement&&re[ie+1]?.type===u.EndIf);)WA.push(Re());return new F(uA,gA,WA)}function or(){const uA=Lr();if(uA.type!=="Identifier")throw new SyntaxError("Expected identifier following macro statement");const gA=Gs();xe(u.CloseStatement,"Expected closing statement token");const WA=[];for(;oA(u.OpenStatement,u.EndMacro);)WA.push(Re());return new U(uA,gA,WA)}function _t(uA=!1){const gA=uA?Lr:zA,WA=[gA()],Mr=Le(u.Comma);for(;Mr&&(++ie,WA.push(gA()),!!Le(u.Comma)););return Mr?new be(WA):WA[0]}function Rt(){const uA=_t(!0);if(!(uA instanceof d||uA instanceof be))throw new SyntaxError(`Expected identifier/tuple for the loop variable, got ${uA.type} instead`);xe(u.In,"Expected `in` keyword following loop variable");const gA=zA();xe(u.CloseStatement,"Expected closing statement token");const WA=[];for(;oA(u.OpenStatement,u.EndFor)&&oA(u.OpenStatement,u.Else);)WA.push(Re());const Mr=[];if(Le(u.OpenStatement,u.Else))for(++ie,++ie,xe(u.CloseStatement,"Expected closing statement token");oA(u.OpenStatement,u.EndFor);)Mr.push(Re());return new j(uA,gA,WA,Mr)}function zA(){return rr()}function rr(){const uA=Ps();if(Le(u.If)){++ie;const gA=Ps();if(Le(u.Else)){++ie;const WA=Ps();return new F(gA,[uA],[WA])}else return new ve(uA,gA)}return uA}function Ps(){let uA=Rs();for(;Le(u.Or);){const gA=re[ie];++ie;const WA=Rs();uA=new Ee(gA,uA,WA)}return uA}function Rs(){let uA=Is();for(;Le(u.And);){const gA=re[ie];++ie;const WA=Is();uA=new Ee(gA,uA,WA)}return uA}function Is(){let uA;for(;Le(u.Not);){const gA=re[ie];++ie;const WA=Is();uA=new Fe(gA,WA)}return uA??ea()}function ea(){let uA=fs();for(;Le(u.ComparisonBinaryOperator)||Le(u.In)||Le(u.NotIn);){const gA=re[ie];++ie;const WA=fs();uA=new Ee(gA,uA,WA)}return uA}function fs(){let uA=Qs();for(;Le(u.AdditiveBinaryOperator);){const gA=re[ie];++ie;const WA=Qs();uA=new Ee(gA,uA,WA)}return uA}function ws(){const uA=Tt(Lr());return Le(u.OpenParen)?ks(uA):uA}function ks(uA){let gA=new e(uA,Gs());return gA=Tt(gA),Le(u.OpenParen)&&(gA=ks(gA)),gA}function Gs(){xe(u.OpenParen,"Expected opening parenthesis for arguments list");const uA=Jr();return xe(u.CloseParen,"Expected closing parenthesis for arguments list"),uA}function Jr(){const uA=[];for(;!Le(u.CloseParen);){let gA=zA();if(Le(u.Equals)){if(++ie,!(gA instanceof d))throw new SyntaxError("Expected identifier for keyword argument");const WA=zA();gA=new Ae(gA,WA)}uA.push(gA),Le(u.Comma)&&++ie}return uA}function oa(){const uA=[];let gA=!1;for(;!Le(u.CloseSquareBracket);)Le(u.Colon)?(uA.push(void 0),++ie,gA=!0):(uA.push(zA()),Le(u.Colon)&&(++ie,gA=!0));if(uA.length===0)throw new SyntaxError("Expected at least one argument for member/slice expression");if(gA){if(uA.length>3)throw new SyntaxError("Expected 0-3 arguments for slice expression");return new le(...uA)}return uA[0]}function Tt(uA){for(;Le(u.Dot)||Le(u.OpenSquareBracket);){const gA=re[ie];++ie;let WA;const Mr=gA.type!==u.Dot;if(Mr)WA=oa(),xe(u.CloseSquareBracket,"Expected closing square bracket");else if(WA=Lr(),WA.type!=="Identifier")throw new SyntaxError("Expected identifier following dot operator");uA=new k(uA,WA,Mr)}return uA}function Qs(){let uA=Fs();for(;Le(u.MultiplicativeBinaryOperator);){const gA=re[ie];++ie;const WA=Fs();uA=new Ee(gA,uA,WA)}return uA}function Fs(){let uA=qr();for(;Le(u.Is);){++ie;const gA=Le(u.Not);gA&&++ie;let WA=Lr();if(WA instanceof O?WA=new d(WA.value.toString()):WA instanceof we&&(WA=new d("none")),!(WA instanceof d))throw new SyntaxError("Expected identifier for the test");uA=new Ne(uA,gA,WA)}return uA}function qr(){let uA=ws();for(;Le(u.Pipe);){++ie;let gA=Lr();if(!(gA instanceof d))throw new SyntaxError("Expected identifier for the filter");Le(u.OpenParen)&&(gA=ks(gA)),uA=new Be(uA,gA)}return uA}function Lr(){const uA=re[ie];switch(uA.type){case u.NumericLiteral:return++ie,new ee(Number(uA.value));case u.StringLiteral:return++ie,new T(uA.value);case u.BooleanLiteral:return++ie,new O(uA.value.toLowerCase()==="true");case u.NullLiteral:return++ie,new we(null);case u.Identifier:return++ie,new d(uA.value);case u.OpenParen:{++ie;const gA=_t();if(re[ie].type!==u.CloseParen)throw new SyntaxError(`Expected closing parenthesis, got ${re[ie].type} instead`);return++ie,gA}case u.OpenSquareBracket:{++ie;const gA=[];for(;!Le(u.CloseSquareBracket);)gA.push(zA()),Le(u.Comma)&&++ie;return++ie,new $(gA)}case u.OpenCurlyBracket:{++ie;const gA=new Map;for(;!Le(u.CloseCurlyBracket);){const WA=zA();xe(u.Colon,"Expected colon between key and value in object literal");const Mr=zA();gA.set(WA,Mr),Le(u.Comma)&&++ie}return++ie,new Ce(gA)}default:throw new SyntaxError(`Unexpected token: ${uA.type}`)}}for(;ie<re.length;)De.body.push(Re());return De}function oe(re,De,ie=1){De===void 0&&(De=re,re=0);const xe=[];for(let Re=re;Re<De;Re+=ie)xe.push(Re);return xe}function Ge(re,De,ie,xe=1){const Re=Math.sign(xe);Re>=0?(De=(De??=0)<0?Math.max(re.length+De,0):Math.min(De,re.length),ie=(ie??=re.length)<0?Math.max(re.length+ie,0):Math.min(ie,re.length)):(De=(De??=re.length-1)<0?Math.max(re.length+De,-1):Math.min(De,re.length-1),ie=(ie??=-1)<-1?Math.max(re.length+ie,-1):Math.min(ie,re.length-1));const oA=[];for(let Le=De;Re*Le<Re*ie;Le+=xe)oA.push(re[Le]);return oA}function nA(re){return re.replace(/\b\w/g,De=>De.toUpperCase())}var Je=class extends Error{},aA=class extends Error{},kA=class{type="RuntimeValue";value;builtins=new Map;constructor(re=void 0){this.value=re}__bool__(){return new Se(!!this.value)}},ze=class extends kA{type="NumericValue"},de=class extends kA{type="StringValue";builtins=new Map([["upper",new qe(()=>new de(this.value.toUpperCase()))],["lower",new qe(()=>new de(this.value.toLowerCase()))],["strip",new qe(()=>new de(this.value.trim()))],["title",new qe(()=>new de(nA(this.value)))],["length",new ze(this.value.length)],["rstrip",new qe(()=>new de(this.value.trimEnd()))],["lstrip",new qe(()=>new de(this.value.trimStart()))],["startswith",new qe(re=>{if(re.length===0)throw new Error("startswith() requires at least one argument");const De=re[0];if(!(De instanceof de))throw new Error("startswith() argument must be a string");return new Se(this.value.startsWith(De.value))})],["endswith",new qe(re=>{if(re.length===0)throw new Error("endswith() requires at least one argument");const De=re[0];if(!(De instanceof de))throw new Error("endswith() argument must be a string");return new Se(this.value.endsWith(De.value))})],["split",new qe(re=>{const De=re[0]??new H;if(!(De instanceof de||De instanceof H))throw new Error("sep argument must be a string or null");const ie=re[1]??new ze(-1);if(!(ie instanceof ze))throw new Error("maxsplit argument must be a number");let xe=[];if(De instanceof H){const Re=this.value.trimStart();for(const{0:oA,index:Le}of Re.matchAll(/\S+/g)){if(ie.value!==-1&&xe.length>=ie.value&&Le!==void 0){xe.push(oA+Re.slice(Le+oA.length));break}xe.push(oA)}}else{if(De.value==="")throw new Error("empty separator");xe=this.value.split(De.value),ie.value!==-1&&xe.length>ie.value&&xe.push(xe.splice(ie.value).join(De.value))}return new Xe(xe.map(Re=>new de(Re)))})]])},Se=class extends kA{type="BooleanValue"},ge=class extends kA{type="ObjectValue";__bool__(){return new Se(this.value.size>0)}builtins=new Map([["get",new qe(([re,De])=>{if(!(re instanceof de))throw new Error(`Object key must be a string: got ${re.type}`);return this.value.get(re.value)??De??new H})],["items",new qe(()=>new Xe(Array.from(this.value.entries()).map(([re,De])=>new Xe([new de(re),De]))))]])},He=class extends ge{type="KeywordArgumentsValue"},Xe=class extends kA{type="ArrayValue";builtins=new Map([["length",new ze(this.value.length)]]);__bool__(){return new Se(this.value.length>0)}},AA=class extends Xe{type="TupleValue"},qe=class extends kA{type="FunctionValue"},H=class extends kA{type="NullValue"},cA=class extends kA{type="UndefinedValue"},fA=class{constructor(re){this.parent=re}variables=new Map([["namespace",new qe(re=>{if(re.length===0)return new ge(new Map);if(re.length!==1||!(re[0]instanceof ge))throw new Error("`namespace` expects either zero arguments or a single object argument");return re[0]})]]);tests=new Map([["boolean",re=>re.type==="BooleanValue"],["callable",re=>re instanceof qe],["odd",re=>{if(re.type!=="NumericValue")throw new Error(`Cannot apply test "odd" to type: ${re.type}`);return re.value%2!==0}],["even",re=>{if(re.type!=="NumericValue")throw new Error(`Cannot apply test "even" to type: ${re.type}`);return re.value%2===0}],["false",re=>re.type==="BooleanValue"&&!re.value],["true",re=>re.type==="BooleanValue"&&re.value],["none",re=>re.type==="NullValue"],["string",re=>re.type==="StringValue"],["number",re=>re.type==="NumericValue"],["integer",re=>re.type==="NumericValue"&&Number.isInteger(re.value)],["iterable",re=>re.type==="ArrayValue"||re.type==="StringValue"],["mapping",re=>re.type==="ObjectValue"],["lower",re=>{const De=re.value;return re.type==="StringValue"&&De===De.toLowerCase()}],["upper",re=>{const De=re.value;return re.type==="StringValue"&&De===De.toUpperCase()}],["none",re=>re.type==="NullValue"],["defined",re=>re.type!=="UndefinedValue"],["undefined",re=>re.type==="UndefinedValue"],["equalto",(re,De)=>re.value===De.value],["eq",(re,De)=>re.value===De.value]]);set(re,De){return this.declareVariable(re,bA(De))}declareVariable(re,De){if(this.variables.has(re))throw new SyntaxError(`Variable already declared: ${re}`);return this.variables.set(re,De),De}setVariable(re,De){return this.variables.set(re,De),De}resolve(re){if(this.variables.has(re))return this;if(this.parent)return this.parent.resolve(re);throw new Error(`Unknown variable: ${re}`)}lookupVariable(re){try{return this.resolve(re).variables.get(re)??new cA}catch{return new cA}}},he=class{global;constructor(re){this.global=re??new fA}run(re){return this.evaluate(re,this.global)}evaluateBinaryExpression(re,De){const ie=this.evaluate(re.left,De);switch(re.operator.value){case"and":return ie.__bool__().value?this.evaluate(re.right,De):ie;case"or":return ie.__bool__().value?ie:this.evaluate(re.right,De)}const xe=this.evaluate(re.right,De);switch(re.operator.value){case"==":return new Se(ie.value==xe.value);case"!=":return new Se(ie.value!=xe.value)}if(ie instanceof cA||xe instanceof cA)throw new Error("Cannot perform operation on undefined values");if(ie instanceof H||xe instanceof H)throw new Error("Cannot perform operation on null values");if(ie instanceof ze&&xe instanceof ze)switch(re.operator.value){case"+":return new ze(ie.value+xe.value);case"-":return new ze(ie.value-xe.value);case"*":return new ze(ie.value*xe.value);case"/":return new ze(ie.value/xe.value);case"%":return new ze(ie.value%xe.value);case"<":return new Se(ie.value<xe.value);case">":return new Se(ie.value>xe.value);case">=":return new Se(ie.value>=xe.value);case"<=":return new Se(ie.value<=xe.value)}else if(ie instanceof Xe&&xe instanceof Xe)switch(re.operator.value){case"+":return new Xe(ie.value.concat(xe.value))}else if(xe instanceof Xe){const Re=xe.value.find(oA=>oA.value===ie.value)!==void 0;switch(re.operator.value){case"in":return new Se(Re);case"not in":return new Se(!Re)}}if(ie instanceof de||xe instanceof de)switch(re.operator.value){case"+":return new de(ie.value.toString()+xe.value.toString())}if(ie instanceof de&&xe instanceof de)switch(re.operator.value){case"in":return new Se(xe.value.includes(ie.value));case"not in":return new Se(!xe.value.includes(ie.value))}if(ie instanceof de&&xe instanceof ge)switch(re.operator.value){case"in":return new Se(xe.value.has(ie.value));case"not in":return new Se(!xe.value.has(ie.value))}throw new SyntaxError(`Unknown operator "${re.operator.value}" between ${ie.type} and ${xe.type}`)}evaluateArguments(re,De){const ie=[],xe=new Map;for(const Re of re)if(Re.type==="KeywordArgumentExpression"){const oA=Re;xe.set(oA.key.value,this.evaluate(oA.value,De))}else{if(xe.size>0)throw new Error("Positional arguments must come before keyword arguments");ie.push(this.evaluate(Re,De))}return[ie,xe]}evaluateFilterExpression(re,De){const ie=this.evaluate(re.operand,De);if(re.filter.type==="Identifier"){const xe=re.filter;if(xe.value==="tojson")return new de(rA(ie));if(ie instanceof Xe)switch(xe.value){case"list":return ie;case"first":return ie.value[0];case"last":return ie.value[ie.value.length-1];case"length":return new ze(ie.value.length);case"reverse":return new Xe(ie.value.reverse());case"sort":return new Xe(ie.value.sort((Re,oA)=>{if(Re.type!==oA.type)throw new Error(`Cannot compare different types: ${Re.type} and ${oA.type}`);switch(Re.type){case"NumericValue":return Re.value-oA.value;case"StringValue":return Re.value.localeCompare(oA.value);default:throw new Error(`Cannot compare type: ${Re.type}`)}}));case"join":return new de(ie.value.map(Re=>Re.value).join(""));case"string":return new de(rA(ie));default:throw new Error(`Unknown ArrayValue filter: ${xe.value}`)}else if(ie instanceof de)switch(xe.value){case"length":return new ze(ie.value.length);case"upper":return new de(ie.value.toUpperCase());case"lower":return new de(ie.value.toLowerCase());case"title":return new de(nA(ie.value));case"capitalize":return new de(ie.value.charAt(0).toUpperCase()+ie.value.slice(1));case"trim":return new de(ie.value.trim());case"indent":return new de(ie.value.split(`
`).map((Re,oA)=>oA===0||Re.length===0?Re:"    "+Re).join(`
`));case"join":case"string":return ie;default:throw new Error(`Unknown StringValue filter: ${xe.value}`)}else if(ie instanceof ze)switch(xe.value){case"abs":return new ze(Math.abs(ie.value));default:throw new Error(`Unknown NumericValue filter: ${xe.value}`)}else if(ie instanceof ge)switch(xe.value){case"items":return new Xe(Array.from(ie.value.entries()).map(([Re,oA])=>new Xe([new de(Re),oA])));case"length":return new ze(ie.value.size);default:throw new Error(`Unknown ObjectValue filter: ${xe.value}`)}throw new Error(`Cannot apply filter "${xe.value}" to type: ${ie.type}`)}else if(re.filter.type==="CallExpression"){const xe=re.filter;if(xe.callee.type!=="Identifier")throw new Error(`Unknown filter: ${xe.callee.type}`);const Re=xe.callee.value;if(Re==="tojson"){const[,oA]=this.evaluateArguments(xe.args,De),Le=oA.get("indent")??new H;if(!(Le instanceof ze||Le instanceof H))throw new Error("If set, indent must be a number");return new de(rA(ie,Le.value))}else if(Re==="join"){let oA;if(ie instanceof de)oA=Array.from(ie.value);else if(ie instanceof Xe)oA=ie.value.map(SA=>SA.value);else throw new Error(`Cannot apply filter "${Re}" to type: ${ie.type}`);const[Le,LA]=this.evaluateArguments(xe.args,De),QA=Le.at(0)??LA.get("separator")??new de("");if(!(QA instanceof de))throw new Error("separator must be a string");return new de(oA.join(QA.value))}if(ie instanceof Xe){switch(Re){case"selectattr":case"rejectattr":{const oA=Re==="selectattr";if(ie.value.some(bt=>!(bt instanceof ge)))throw new Error(`\`${Re}\` can only be applied to array of objects`);if(xe.args.some(bt=>bt.type!=="StringLiteral"))throw new Error(`arguments of \`${Re}\` must be strings`);const[Le,LA,QA]=xe.args.map(bt=>this.evaluate(bt,De));let SA;if(LA){const bt=De.tests.get(LA.value);if(!bt)throw new Error(`Unknown test: ${LA.value}`);SA=bt}else SA=(...bt)=>bt[0].__bool__().value;const tr=ie.value.filter(bt=>{const or=bt.value.get(Le.value),_t=or?SA(or,QA):!1;return oA?_t:!_t});return new Xe(tr)}case"map":{const[,oA]=this.evaluateArguments(xe.args,De);if(oA.has("attribute")){const Le=oA.get("attribute");if(!(Le instanceof de))throw new Error("attribute must be a string");const LA=oA.get("default"),QA=ie.value.map(SA=>{if(!(SA instanceof ge))throw new Error("items in map must be an object");return SA.value.get(Le.value)??LA??new cA});return new Xe(QA)}else throw new Error("`map` expressions without `attribute` set are not currently supported.")}}throw new Error(`Unknown ArrayValue filter: ${Re}`)}else if(ie instanceof de){switch(Re){case"indent":{const[oA,Le]=this.evaluateArguments(xe.args,De),LA=oA.at(0)??Le.get("width")??new ze(4);if(!(LA instanceof ze))throw new Error("width must be a number");const QA=oA.at(1)??Le.get("first")??new Se(!1),SA=oA.at(2)??Le.get("blank")??new Se(!1),tr=ie.value.split(`
`),bt=" ".repeat(LA.value),or=tr.map((_t,Rt)=>!QA.value&&Rt===0||!SA.value&&_t.length===0?_t:bt+_t);return new de(or.join(`
`))}}throw new Error(`Unknown StringValue filter: ${Re}`)}else throw new Error(`Cannot apply filter "${Re}" to type: ${ie.type}`)}throw new Error(`Unknown filter: ${re.filter.type}`)}evaluateTestExpression(re,De){const ie=this.evaluate(re.operand,De),xe=De.tests.get(re.test.value);if(!xe)throw new Error(`Unknown test: ${re.test.value}`);const Re=xe(ie);return new Se(re.negate?!Re:Re)}evaluateUnaryExpression(re,De){const ie=this.evaluate(re.argument,De);switch(re.operator.value){case"not":return new Se(!ie.value);default:throw new SyntaxError(`Unknown operator: ${re.operator.value}`)}}evalProgram(re,De){return this.evaluateBlock(re.body,De)}evaluateBlock(re,De){let ie="";for(const xe of re){const Re=this.evaluate(xe,De);Re.type!=="NullValue"&&Re.type!=="UndefinedValue"&&(ie+=Re.value)}return new de(ie)}evaluateIdentifier(re,De){return De.lookupVariable(re.value)}evaluateCallExpression(re,De){const[ie,xe]=this.evaluateArguments(re.args,De);xe.size>0&&ie.push(new He(xe));const Re=this.evaluate(re.callee,De);if(Re.type!=="FunctionValue")throw new Error(`Cannot call something that is not a function: got ${Re.type}`);return Re.value(ie,De)}evaluateSliceExpression(re,De,ie){if(!(re instanceof Xe||re instanceof de))throw new Error("Slice object must be an array or string");const xe=this.evaluate(De.start,ie),Re=this.evaluate(De.stop,ie),oA=this.evaluate(De.step,ie);if(!(xe instanceof ze||xe instanceof cA))throw new Error("Slice start must be numeric or undefined");if(!(Re instanceof ze||Re instanceof cA))throw new Error("Slice stop must be numeric or undefined");if(!(oA instanceof ze||oA instanceof cA))throw new Error("Slice step must be numeric or undefined");return re instanceof Xe?new Xe(Ge(re.value,xe.value,Re.value,oA.value)):new de(Ge(Array.from(re.value),xe.value,Re.value,oA.value).join(""))}evaluateMemberExpression(re,De){const ie=this.evaluate(re.object,De);let xe;if(re.computed){if(re.property.type==="SliceExpression")return this.evaluateSliceExpression(ie,re.property,De);xe=this.evaluate(re.property,De)}else xe=new de(re.property.value);let Re;if(ie instanceof ge){if(!(xe instanceof de))throw new Error(`Cannot access property with non-string: got ${xe.type}`);Re=ie.value.get(xe.value)??ie.builtins.get(xe.value)}else if(ie instanceof Xe||ie instanceof de)if(xe instanceof ze)Re=ie.value.at(xe.value),ie instanceof de&&(Re=new de(ie.value.at(xe.value)));else if(xe instanceof de)Re=ie.builtins.get(xe.value);else throw new Error(`Cannot access property with non-string/non-number: got ${xe.type}`);else{if(!(xe instanceof de))throw new Error(`Cannot access property with non-string: got ${xe.type}`);Re=ie.builtins.get(xe.value)}return Re instanceof kA?Re:new cA}evaluateSet(re,De){const ie=re.value?this.evaluate(re.value,De):this.evaluateBlock(re.body,De);if(re.assignee.type==="Identifier"){const xe=re.assignee.value;De.setVariable(xe,ie)}else if(re.assignee.type==="MemberExpression"){const xe=re.assignee,Re=this.evaluate(xe.object,De);if(!(Re instanceof ge))throw new Error("Cannot assign to member of non-object");if(xe.property.type!=="Identifier")throw new Error("Cannot assign to member with non-identifier property");Re.value.set(xe.property.value,ie)}else throw new Error(`Invalid LHS inside assignment expression: ${JSON.stringify(re.assignee)}`);return new H}evaluateIf(re,De){const ie=this.evaluate(re.test,De);return this.evaluateBlock(ie.__bool__().value?re.body:re.alternate,De)}evaluateFor(re,De){const ie=new fA(De);let xe,Re;if(re.iterable.type==="SelectExpression"){const SA=re.iterable;Re=this.evaluate(SA.iterable,ie),xe=SA.test}else Re=this.evaluate(re.iterable,ie);if(!(Re instanceof Xe))throw new Error(`Expected iterable type in for loop: got ${Re.type}`);const oA=[],Le=[];for(let SA=0;SA<Re.value.length;++SA){const tr=new fA(ie),bt=Re.value[SA];let or;if(re.loopvar.type==="Identifier")or=_t=>_t.setVariable(re.loopvar.value,bt);else if(re.loopvar.type==="TupleLiteral"){const _t=re.loopvar;if(bt.type!=="ArrayValue")throw new Error(`Cannot unpack non-iterable type: ${bt.type}`);const Rt=bt;if(_t.value.length!==Rt.value.length)throw new Error(`Too ${_t.value.length>Rt.value.length?"few":"many"} items to unpack`);or=zA=>{for(let rr=0;rr<_t.value.length;++rr){if(_t.value[rr].type!=="Identifier")throw new Error(`Cannot unpack non-identifier type: ${_t.value[rr].type}`);zA.setVariable(_t.value[rr].value,Rt.value[rr])}}}else throw new Error(`Invalid loop variable(s): ${re.loopvar.type}`);xe&&(or(tr),!this.evaluate(xe,tr).__bool__().value)||(oA.push(bt),Le.push(or))}let LA="",QA=!0;for(let SA=0;SA<oA.length;++SA){const tr=new Map([["index",new ze(SA+1)],["index0",new ze(SA)],["revindex",new ze(oA.length-SA)],["revindex0",new ze(oA.length-SA-1)],["first",new Se(SA===0)],["last",new Se(SA===oA.length-1)],["length",new ze(oA.length)],["previtem",SA>0?oA[SA-1]:new cA],["nextitem",SA<oA.length-1?oA[SA+1]:new cA]]);ie.setVariable("loop",new ge(tr)),Le[SA](ie);try{const bt=this.evaluateBlock(re.body,ie);LA+=bt.value}catch(bt){if(bt instanceof aA)continue;if(bt instanceof Je)break;throw bt}QA=!1}if(QA){const SA=this.evaluateBlock(re.defaultBlock,ie);LA+=SA.value}return new de(LA)}evaluateMacro(re,De){return De.setVariable(re.name.value,new qe((ie,xe)=>{const Re=new fA(xe);ie=ie.slice();let oA;ie.at(-1)?.type==="KeywordArgumentsValue"&&(oA=ie.pop());for(let Le=0;Le<re.args.length;++Le){const LA=re.args[Le],QA=ie[Le];if(LA.type==="Identifier"){const SA=LA;if(!QA)throw new Error(`Missing positional argument: ${SA.value}`);Re.setVariable(SA.value,QA)}else if(LA.type==="KeywordArgumentExpression"){const SA=LA,tr=QA??oA?.value.get(SA.key.value)??this.evaluate(SA.value,Re);Re.setVariable(SA.key.value,tr)}else throw new Error(`Unknown argument type: ${LA.type}`)}return this.evaluateBlock(re.body,Re)})),new H}evaluate(re,De){if(re===void 0)return new cA;switch(re.type){case"Program":return this.evalProgram(re,De);case"Set":return this.evaluateSet(re,De);case"If":return this.evaluateIf(re,De);case"For":return this.evaluateFor(re,De);case"Macro":return this.evaluateMacro(re,De);case"Break":throw new Je;case"Continue":throw new aA;case"NumericLiteral":return new ze(Number(re.value));case"StringLiteral":return new de(re.value);case"BooleanLiteral":return new Se(re.value);case"NullLiteral":return new H(re.value);case"ArrayLiteral":return new Xe(re.value.map(ie=>this.evaluate(ie,De)));case"TupleLiteral":return new AA(re.value.map(ie=>this.evaluate(ie,De)));case"ObjectLiteral":{const ie=new Map;for(const[xe,Re]of re.value){const oA=this.evaluate(xe,De);if(!(oA instanceof de))throw new Error(`Object keys must be strings: got ${oA.type}`);ie.set(oA.value,this.evaluate(Re,De))}return new ge(ie)}case"Identifier":return this.evaluateIdentifier(re,De);case"CallExpression":return this.evaluateCallExpression(re,De);case"MemberExpression":return this.evaluateMemberExpression(re,De);case"UnaryExpression":return this.evaluateUnaryExpression(re,De);case"BinaryExpression":return this.evaluateBinaryExpression(re,De);case"FilterExpression":return this.evaluateFilterExpression(re,De);case"TestExpression":return this.evaluateTestExpression(re,De);default:throw new SyntaxError(`Unknown node type: ${re.type}`)}}};function bA(re){switch(typeof re){case"number":return new ze(re);case"string":return new de(re);case"boolean":return new Se(re);case"undefined":return new cA;case"object":return re===null?new H:Array.isArray(re)?new Xe(re.map(bA)):new ge(new Map(Object.entries(re).map(([De,ie])=>[De,bA(ie)])));case"function":return new qe((De,ie)=>{const xe=re(...De.map(Re=>Re.value))??null;return bA(xe)});default:throw new Error(`Cannot convert to runtime value: ${re}`)}}function rA(re,De,ie){const xe=ie??0;switch(re.type){case"NullValue":case"UndefinedValue":return"null";case"NumericValue":case"StringValue":case"BooleanValue":return JSON.stringify(re.value);case"ArrayValue":case"ObjectValue":{const Re=De?" ".repeat(De):"",oA=`
`+Re.repeat(xe),Le=oA+Re;if(re.type==="ArrayValue"){const LA=re.value.map(QA=>rA(QA,De,xe+1));return De?`[${Le}${LA.join(`,${Le}`)}${oA}]`:`[${LA.join(", ")}]`}else{const LA=Array.from(re.value.entries()).map(([QA,SA])=>{const tr=`"${QA}": ${rA(SA,De,xe+1)}`;return De?`${Le}${tr}`:tr});return De?`{${LA.join(",")}${oA}}`:`{${LA.join(", ")}}`}}default:throw new Error(`Cannot convert to JSON: ${re.type}`)}}var EA=`
`,PA="{%- ",wA=" -%}",ZA={MultiplicativeBinaryOperator:2,AdditiveBinaryOperator:1,ComparisonBinaryOperator:0};function TA(re,De="	"){const ie=typeof De=="number"?" ".repeat(De):De;return OA(re.body,0,ie).replace(/\n$/,"")}function tA(...re){return PA+re.join(" ")+wA}function OA(re,De,ie){return re.map(xe=>ot(xe,De,ie)).join(EA)}function ot(re,De,ie){const xe=ie.repeat(De);switch(re.type){case"Program":return OA(re.body,De,ie);case"If":return $A(re,De,ie);case"For":return tt(re,De,ie);case"Set":return Lt(re,De,ie);case"Macro":return Wr(re,De,ie);case"Break":return xe+tA("break");case"Continue":return xe+tA("continue");default:return xe+"{{- "+VA(re)+" -}}"}}function $A(re,De,ie){const xe=ie.repeat(De),Re=[];let oA=re;for(;oA&&(Re.push({test:oA.test,body:oA.body}),oA.alternate.length===1&&oA.alternate[0].type==="If");)oA=oA.alternate[0];let Le=xe+tA("if",VA(Re[0].test))+EA+OA(Re[0].body,De+1,ie);for(let LA=1;LA<Re.length;LA++)Le+=EA+xe+tA("elif",VA(Re[LA].test))+EA+OA(Re[LA].body,De+1,ie);return oA&&oA.alternate.length>0&&(Le+=EA+xe+tA("else")+EA+OA(oA.alternate,De+1,ie)),Le+=EA+xe+tA("endif"),Le}function tt(re,De,ie){const xe=ie.repeat(De);let Re="";if(re.iterable.type==="SelectExpression"){const Le=re.iterable;Re=`${VA(Le.iterable)} if ${VA(Le.test)}`}else Re=VA(re.iterable);let oA=xe+tA("for",VA(re.loopvar),"in",Re)+EA+OA(re.body,De+1,ie);return re.defaultBlock.length>0&&(oA+=EA+xe+tA("else")+EA+OA(re.defaultBlock,De+1,ie)),oA+=EA+xe+tA("endfor"),oA}function Lt(re,De,ie){const xe=ie.repeat(De),Re=VA(re.assignee),oA=re.value?VA(re.value):"",Le=xe+tA("set",`${Re}${re.value?" = "+oA:""}`);return re.body.length===0?Le:Le+EA+OA(re.body,De+1,ie)+EA+xe+tA("endset")}function Wr(re,De,ie){const xe=ie.repeat(De),Re=re.args.map(VA).join(", ");return xe+tA("macro",`${re.name.value}(${Re})`)+EA+OA(re.body,De+1,ie)+EA+xe+tA("endmacro")}function VA(re,De=-1){switch(re.type){case"Identifier":return re.value;case"NullLiteral":return"none";case"NumericLiteral":case"BooleanLiteral":return`${re.value}`;case"StringLiteral":return JSON.stringify(re.value);case"BinaryExpression":{const ie=re,xe=ZA[ie.operator.type]??0,Re=VA(ie.left,xe),oA=VA(ie.right,xe+1),Le=`${Re} ${ie.operator.value} ${oA}`;return xe<De?`(${Le})`:Le}case"UnaryExpression":{const ie=re;return ie.operator.value+(ie.operator.value==="not"?" ":"")+VA(ie.argument,1/0)}case"LogicalNegationExpression":return`not ${VA(re.argument,1/0)}`;case"CallExpression":{const ie=re,xe=ie.args.map(Re=>VA(Re,-1)).join(", ");return`${VA(ie.callee,-1)}(${xe})`}case"MemberExpression":{const ie=re;let xe=VA(ie.object,-1);ie.object.type!=="Identifier"&&(xe=`(${xe})`);let Re=VA(ie.property,-1);return!ie.computed&&ie.property.type!=="Identifier"&&(Re=`(${Re})`),ie.computed?`${xe}[${Re}]`:`${xe}.${Re}`}case"FilterExpression":{const ie=re,xe=VA(ie.operand,1/0);return ie.filter.type==="CallExpression"?`${xe} | ${VA(ie.filter,-1)}`:`${xe} | ${ie.filter.value}`}case"SelectExpression":{const ie=re;return`${VA(ie.iterable,-1)} | select(${VA(ie.test,-1)})`}case"TestExpression":{const ie=re;return`${VA(ie.operand,-1)} is${ie.negate?" not":""} ${ie.test.value}`}case"ArrayLiteral":case"TupleLiteral":{const ie=re.value.map(Re=>VA(Re,-1)),xe=re.type==="ArrayLiteral"?"[]":"()";return`${xe[0]}${ie.join(", ")}${xe[1]}`}case"ObjectLiteral":return`{ ${Array.from(re.value.entries()).map(([xe,Re])=>`${VA(xe,-1)}: ${VA(Re,-1)}`).join(", ")} }`;case"SliceExpression":{const ie=re,xe=ie.start?VA(ie.start,-1):"",Re=ie.stop?VA(ie.stop,-1):"",oA=ie.step?`:${VA(ie.step,-1)}`:"";return`${xe}:${Re}${oA}`}case"KeywordArgumentExpression":{const ie=re;return`${ie.key.value}=${VA(ie.value,-1)}`}case"If":{const ie=re,xe=VA(ie.test,-1),Re=VA(ie.body[0],0),oA=VA(ie.alternate[0],-1);return`${Re} if ${xe} else ${oA}`}default:throw new Error(`Unknown expression type: ${re.type}`)}}var Ts=class{parsed;constructor(re){const De=v(re,{lstrip_blocks:!0,trim_blocks:!0});this.parsed=pe(De)}render(re){const De=new fA;if(De.set("false",!1),De.set("true",!0),De.set("raise_exception",Re=>{throw new Error(Re)}),De.set("range",oe),re)for(const[Re,oA]of Object.entries(re))De.set(Re,oA);return new he(De).run(this.parsed).value}format(re){return TA(this.parsed,re?.indent||"	")}}},"./src/backends/onnx.js":(a,o,n)=>{var u;n.r(o),n.d(o,{Tensor:()=>w.Tensor,createInferenceSession:()=>J,deviceToExecutionProviders:()=>F,isONNXProxy:()=>U,isONNXTensor:()=>L});var m=n("./src/env.js"),b=n("?2ce3"),C=n("onnxruntime-web"),w=n("onnxruntime-common");const E=Object.freeze({auto:null,gpu:null,cpu:"cpu",wasm:"wasm",webgpu:"webgpu",cuda:"cuda",dml:"dml",webnn:{name:"webnn",deviceType:"cpu"},"webnn-npu":{name:"webnn",deviceType:"npu"},"webnn-gpu":{name:"webnn",deviceType:"gpu"},"webnn-cpu":{name:"webnn",deviceType:"cpu"}}),B=[];let D,v;const x=Symbol.for("onnxruntime");if(x in globalThis)v=globalThis[x];else if(m.apis.IS_NODE_ENV){switch(v=b??(u||(u=n.t(b,2))),process.platform){case"win32":B.push("dml");break;case"linux":process.arch==="x64"&&B.push("cuda");break}B.push("cpu"),D=["cpu"]}else v=C,m.apis.IS_WEBNN_AVAILABLE&&B.push("webnn-npu","webnn-gpu","webnn-cpu","webnn"),m.apis.IS_WEBGPU_AVAILABLE&&B.push("webgpu"),B.push("wasm"),D=["wasm"];const S=v.InferenceSession;function F(f=null){if(!f)return D;switch(f){case"auto":return B;case"gpu":return B.filter(k=>["webgpu","cuda","dml","webnn-gpu"].includes(k))}if(B.includes(f))return[E[f]??f];throw new Error(`Unsupported device: "${f}". Should be one of: ${B.join(", ")}.`)}let j=null;async function J(f,k,e){j&&await j;const d=S.create(f,k);j??=d;const y=await d;return y.config=e,y}function L(f){return f instanceof v.Tensor}const N=v?.env;N?.wasm&&(!(typeof ServiceWorkerGlobalScope<"u"&&self instanceof ServiceWorkerGlobalScope)&&!N.wasm.wasmPaths&&(N.wasm.wasmPaths=`https://cdn.jsdelivr.net/npm/@huggingface/transformers@${m.env.version}/dist/`),N.wasm.proxy=!1),N?.webgpu&&(N.webgpu.powerPreference="high-performance");function U(){return N?.wasm?.proxy}m.env.backends.onnx=N},"./src/base/feature_extraction_utils.js":(a,o,n)=>{n.r(o),n.d(o,{FeatureExtractor:()=>C,validate_audio_inputs:()=>w});var u=n("./src/utils/constants.js"),m=n("./src/utils/generic.js"),b=n("./src/utils/hub.js");class C extends m.Callable{constructor(B){super(),this.config=B}static async from_pretrained(B,D){const v=await(0,b.getModelJSON)(B,u.FEATURE_EXTRACTOR_NAME,!0,D);return new this(v)}}function w(E,B){if(!(E instanceof Float32Array||E instanceof Float64Array))throw new Error(`${B} expects input to be a Float32Array or a Float64Array, but got ${E?.constructor?.name??typeof E} instead. If using the feature extractor directly, remember to use \`read_audio(url, sampling_rate)\` to obtain the raw audio data of the file/url.`)}},"./src/base/image_processors_utils.js":(a,o,n)=>{n.r(o),n.d(o,{ImageProcessor:()=>f,center_to_corners_format:()=>v,post_process_instance_segmentation:()=>U,post_process_object_detection:()=>x,post_process_panoptic_segmentation:()=>N,post_process_semantic_segmentation:()=>S});var u=n("./src/utils/generic.js"),m=n("./src/utils/tensor.js"),b=n("./src/utils/maths.js");n("./src/utils/image.js");var C=n("./src/utils/core.js"),w=n("./src/utils/hub.js"),E=n("./src/utils/constants.js");function B(k,e,d=0,y=null){const ee=k/e;let T=(0,b.bankers_round)(ee)*e;return y!==null&&T>y&&(T=Math.floor(ee)*e),T<d&&(T=Math.ceil(ee)*e),T}function D([k,e],d){return[Math.max(Math.floor(k/d),1)*d,Math.max(Math.floor(e/d),1)*d]}function v([k,e,d,y]){return[k-d/2,e-y/2,k+d/2,e+y/2]}function x(k,e=.5,d=null,y=!1){const ee=k.logits,T=k.pred_boxes,[O,we,$]=ee.dims;if(d!==null&&d.length!==O)throw Error("Make sure that you pass in as many target sizes as the batch dimension of the logits");let be=[];for(let Ce=0;Ce<O;++Ce){let Ee=d!==null?d[Ce]:null,Be={boxes:[],classes:[],scores:[]},ve=ee[Ce],Ne=T[Ce];for(let Fe=0;Fe<we;++Fe){let le=ve[Fe],Ae=[],pe;if(y){pe=le.sigmoid().data;for(let oe=0;oe<pe.length;++oe)pe[oe]>e&&Ae.push(oe)}else{let oe=(0,b.max)(le.data)[1];if(oe===$-1||(pe=(0,b.softmax)(le.data),pe[oe]<e))continue;Ae.push(oe)}for(const oe of Ae){let Ge=Ne[Fe].data;Ge=v(Ge),Ee!==null&&(Ge=Ge.map((nA,Je)=>nA*Ee[(Je+1)%2])),Be.boxes.push(Ge),Be.classes.push(oe),Be.scores.push(pe[oe])}}be.push(Be)}return be}function S(k,e=null){const d=k.logits,y=d.dims[0];if(e!==null&&e.length!==y)throw Error("Make sure that you pass in as many target sizes as the batch dimension of the logits");const ee=[];for(let T=0;T<y;++T){const O=e!==null?e[T]:null;let we=d[T];O!==null&&(we=(0,m.interpolate)(we,O,"bilinear",!1));const[$,be]=O??we.dims.slice(-2),Ce=new m.Tensor("int32",new Int32Array($*be),[$,be]),Ee=we[0].data,Be=Ce.data;for(let Fe=1;Fe<we.dims[0];++Fe){const le=we[Fe].data;for(let Ae=0;Ae<le.length;++Ae)le[Ae]>Ee[Ae]&&(Ee[Ae]=le[Ae],Be[Ae]=Fe)}const ve=new Array(we.dims[0]);for(let Fe=0;Fe<Be.length;++Fe){const le=Be[Fe];ve[le]=le}const Ne=ve.filter(Fe=>Fe!==void 0);ee.push({segmentation:Ce,labels:Ne})}return ee}function F(k,e,d,y){const ee=[],T=[],O=[];for(let we=0;we<k.dims[0];++we){const $=k[we],be=e[we],Ce=(0,b.max)($.data)[1];if(Ce===y)continue;const Be=(0,b.softmax)($.data)[Ce];Be>d&&(ee.push(be),T.push(Be),O.push(Ce))}return[ee,T,O]}function j(k,e,d,y=.5,ee=.8){const T=[];let O=0,we=0;const $=e[d].data;for(let Ce=0;Ce<k.length;++Ce)k[Ce]===d&&(T.push(Ce),++O),$[Ce]>=y&&++we;let be=O>0&&we>0;return be&&(be=O/we>ee),[be,T]}function J(k,e,d,y,ee,T=null,O=null){const[we,$]=O??k[0].dims,be=new m.Tensor("int32",new Int32Array(we*$),[we,$]),Ce=[];if(O!==null)for(let Fe=0;Fe<k.length;++Fe)k[Fe]=(0,m.interpolate)(k[Fe],O,"bilinear",!1);const Ee=new Int32Array(k[0].data.length),Be=new Float32Array(k[0].data.length);for(let Fe=0;Fe<k.length;++Fe){let le=e[Fe];const Ae=k[Fe].data;for(let pe=0;pe<Ae.length;++pe)Ae[pe]*=le,Ae[pe]>Be[pe]&&(Ee[pe]=Fe,Be[pe]=Ae[pe])}let ve=0;const Ne=be.data;for(let Fe=0;Fe<d.length;++Fe){const le=d[Fe],[Ae,pe]=j(Ee,k,Fe,y,ee);if(Ae){++ve;for(const oe of pe)Ne[oe]=ve;Ce.push({id:ve,label_id:le,score:e[Fe]})}}return[be,Ce]}function L(k,e,d=28,y=56*56,ee=14*14*4*1280){if(k<d||e<d)throw new Error(`height:${k} or width:${e} must be larger than factor:${d}`);if(Math.max(k,e)/Math.min(k,e)>200)throw new Error(`absolute aspect ratio must be smaller than 200, got ${Math.max(k,e)/Math.min(k,e)}`);let T=Math.round(k/d)*d,O=Math.round(e/d)*d;if(T*O>ee){const we=Math.sqrt(k*e/ee);T=Math.floor(k/we/d)*d,O=Math.floor(e/we/d)*d}else if(T*O<y){const we=Math.sqrt(y/(k*e));T=Math.ceil(k*we/d)*d,O=Math.ceil(e*we/d)*d}return[T,O]}function N(k,e=.5,d=.5,y=.8,ee=null,T=null){ee===null&&(console.warn("`label_ids_to_fuse` unset. No instance will be fused."),ee=new Set);const O=k.class_queries_logits??k.logits,$=(k.masks_queries_logits??k.pred_masks).sigmoid();let[be,Ce,Ee]=O.dims;if(Ee-=1,T!==null&&T.length!==be)throw Error("Make sure that you pass in as many target sizes as the batch dimension of the logits");let Be=[];for(let ve=0;ve<be;++ve){let Ne=T!==null?T[ve]:null,Fe=O[ve],le=$[ve],[Ae,pe,oe]=F(Fe,le,e,Ee);if(oe.length===0){let[Je,aA]=Ne??le.dims.slice(-2),kA=new m.Tensor("int32",new Int32Array(Je*aA).fill(-1),[Je,aA]);Be.push({segmentation:kA,segments_info:[]});continue}let[Ge,nA]=J(Ae,pe,oe,d,y,ee,Ne);Be.push({segmentation:Ge,segments_info:nA})}return Be}function U(k,e=.5,d=null){throw new Error("`post_process_instance_segmentation` is not yet implemented.")}class f extends u.Callable{constructor(e){super(),this.image_mean=e.image_mean??e.mean,this.image_std=e.image_std??e.std,this.resample=e.resample??2,this.do_rescale=e.do_rescale??!0,this.rescale_factor=e.rescale_factor??1/255,this.do_normalize=e.do_normalize,this.do_thumbnail=e.do_thumbnail,this.size=e.size??e.image_size,this.do_resize=e.do_resize??this.size!==void 0,this.size_divisibility=e.size_divisibility??e.size_divisor,this.do_center_crop=e.do_center_crop,this.crop_size=e.crop_size,this.do_convert_rgb=e.do_convert_rgb??!0,this.do_crop_margin=e.do_crop_margin,this.pad_size=e.pad_size,this.do_pad=e.do_pad,this.min_pixels=e.min_pixels,this.max_pixels=e.max_pixels,this.do_pad&&!this.pad_size&&this.size&&this.size.width!==void 0&&this.size.height!==void 0&&(this.pad_size=this.size),this.do_flip_channel_order=e.do_flip_channel_order??!1,this.config=e}async thumbnail(e,d,y=2){const ee=e.height,T=e.width,O=d.height,we=d.width;let $=Math.min(ee,O),be=Math.min(T,we);return $===ee&&be===T?e:(ee>T?be=Math.floor(T*$/ee):T>ee&&($=Math.floor(ee*be/T)),await e.resize(be,$,{resample:y}))}async crop_margin(e,d=200){const y=e.clone().grayscale(),ee=(0,b.min)(y.data)[0],O=(0,b.max)(y.data)[0]-ee;if(O===0)return e;const we=d/255;let $=y.width,be=y.height,Ce=0,Ee=0;const Be=y.data;for(let ve=0;ve<y.height;++ve){const Ne=ve*y.width;for(let Fe=0;Fe<y.width;++Fe)(Be[Ne+Fe]-ee)/O<we&&($=Math.min($,Fe),be=Math.min(be,ve),Ce=Math.max(Ce,Fe),Ee=Math.max(Ee,ve))}return e=await e.crop([$,be,Ce,Ee]),e}pad_image(e,d,y,{mode:ee="constant",center:T=!1,constant_values:O=0}={}){const[we,$,be]=d;let Ce,Ee;if(typeof y=="number"?(Ce=y,Ee=y):y==="square"?Ce=Ee=Math.max(we,$):(Ce=y.width,Ee=y.height),Ce!==$||Ee!==we){const Be=new Float32Array(Ce*Ee*be);if(Array.isArray(O))for(let Fe=0;Fe<Be.length;++Fe)Be[Fe]=O[Fe%be];else O!==0&&Be.fill(O);const[ve,Ne]=T?[Math.floor((Ce-$)/2),Math.floor((Ee-we)/2)]:[0,0];for(let Fe=0;Fe<we;++Fe){const le=(Fe+Ne)*Ce,Ae=Fe*$;for(let pe=0;pe<$;++pe){const oe=(le+pe+ve)*be,Ge=(Ae+pe)*be;for(let nA=0;nA<be;++nA)Be[oe+nA]=e[Ge+nA]}}if(ee==="symmetric"){if(T)throw new Error("`center` padding is not supported when `mode` is set to `symmetric`.");const Fe=we-1,le=$-1;for(let Ae=0;Ae<Ee;++Ae){const pe=Ae*Ce,oe=(0,C.calculateReflectOffset)(Ae,Fe)*$;for(let Ge=0;Ge<Ce;++Ge){if(Ae<we&&Ge<$)continue;const nA=(pe+Ge)*be,Je=(oe+(0,C.calculateReflectOffset)(Ge,le))*be;for(let aA=0;aA<be;++aA)Be[nA+aA]=e[Je+aA]}}}e=Be,d=[Ee,Ce,be]}return[e,d]}rescale(e){for(let d=0;d<e.length;++d)e[d]=this.rescale_factor*e[d]}get_resize_output_image_size(e,d){const[y,ee]=e.size;let T,O;if(this.do_thumbnail){const{height:we,width:$}=d;T=Math.min(we,$)}else Number.isInteger(d)?(T=d,O=this.config.max_size??T):d!==void 0&&(T=d.shortest_edge,O=d.longest_edge);if(T!==void 0||O!==void 0){const we=T===void 0?1:Math.max(T/y,T/ee),$=y*we,be=ee*we,Ce=O===void 0?1:Math.min(O/$,O/be);let Ee=Math.floor(Number(($*Ce).toFixed(2))),Be=Math.floor(Number((be*Ce).toFixed(2)));return this.size_divisibility!==void 0&&([Ee,Be]=D([Ee,Be],this.size_divisibility)),[Ee,Be]}else if(d!==void 0&&d.width!==void 0&&d.height!==void 0){let we=d.width,$=d.height;if(this.config.keep_aspect_ratio&&this.config.ensure_multiple_of){let be=$/ee,Ce=we/y;Math.abs(1-Ce)<Math.abs(1-be)?be=Ce:Ce=be,$=B(be*ee,this.config.ensure_multiple_of),we=B(Ce*y,this.config.ensure_multiple_of)}return[we,$]}else{if(this.size_divisibility!==void 0)return D([y,ee],this.size_divisibility);if(this.min_pixels!==void 0&&this.max_pixels!==void 0){const we=this.config.patch_size*this.config.merge_size;return L(ee,y,we,this.min_pixels,this.max_pixels)}else throw new Error(`Could not resize image due to unsupported \`this.size\` option in config: ${JSON.stringify(d)}`)}}async resize(e){const[d,y]=this.get_resize_output_image_size(e,this.size);return await e.resize(d,y,{resample:this.resample})}async preprocess(e,{do_normalize:d=null,do_pad:y=null,do_convert_rgb:ee=null,do_convert_grayscale:T=null,do_flip_channel_order:O=null}={}){this.do_crop_margin&&(e=await this.crop_margin(e));const[we,$]=e.size;if(ee??this.do_convert_rgb?e=e.rgb():T&&(e=e.grayscale()),this.do_resize&&(e=await this.resize(e)),this.do_thumbnail&&(e=await this.thumbnail(e,this.size,this.resample)),this.do_center_crop){let ve,Ne;Number.isInteger(this.crop_size)?(ve=this.crop_size,Ne=this.crop_size):(ve=this.crop_size.width,Ne=this.crop_size.height),e=await e.center_crop(ve,Ne)}const be=[e.height,e.width];let Ce=Float32Array.from(e.data),Ee=[e.height,e.width,e.channels];if(this.do_rescale&&this.rescale(Ce),d??this.do_normalize){let ve=this.image_mean;Array.isArray(this.image_mean)||(ve=new Array(e.channels).fill(ve));let Ne=this.image_std;if(Array.isArray(this.image_std)||(Ne=new Array(e.channels).fill(ve)),ve.length!==e.channels||Ne.length!==e.channels)throw new Error(`When set to arrays, the length of \`image_mean\` (${ve.length}) and \`image_std\` (${Ne.length}) must match the number of channels in the image (${e.channels}).`);for(let Fe=0;Fe<Ce.length;Fe+=e.channels)for(let le=0;le<e.channels;++le)Ce[Fe+le]=(Ce[Fe+le]-ve[le])/Ne[le]}if(y??this.do_pad){if(this.pad_size)[Ce,Ee]=this.pad_image(Ce,[e.height,e.width,e.channels],this.pad_size);else if(this.size_divisibility){const[ve,Ne]=D([Ee[1],Ee[0]],this.size_divisibility);[Ce,Ee]=this.pad_image(Ce,Ee,{width:ve,height:Ne})}}if(O??this.do_flip_channel_order){if(Ee[2]!==3)throw new Error("Flipping channel order is only supported for RGB images.");for(let ve=0;ve<Ce.length;ve+=3){const Ne=Ce[ve];Ce[ve]=Ce[ve+2],Ce[ve+2]=Ne}}const Be=new m.Tensor("float32",Ce,Ee).permute(2,0,1);return{original_size:[$,we],reshaped_input_size:be,pixel_values:Be}}async _call(e,...d){Array.isArray(e)||(e=[e]);const y=await Promise.all(e.map(T=>this.preprocess(T)));return{pixel_values:(0,m.stack)(y.map(T=>T.pixel_values),0),original_sizes:y.map(T=>T.original_size),reshaped_input_sizes:y.map(T=>T.reshaped_input_size)}}static async from_pretrained(e,d){const y=await(0,w.getModelJSON)(e,E.IMAGE_PROCESSOR_NAME,!0,d);return new this(y)}}},"./src/base/processing_utils.js":(a,o,n)=>{n.r(o),n.d(o,{Processor:()=>C});var u=n("./src/utils/constants.js"),m=n("./src/utils/generic.js"),b=n("./src/utils/hub.js");class C extends m.Callable{static classes=["image_processor_class","tokenizer_class","feature_extractor_class"];static uses_processor_config=!1;constructor(E,B){super(),this.config=E,this.components=B}get image_processor(){return this.components.image_processor}get tokenizer(){return this.components.tokenizer}get feature_extractor(){return this.components.feature_extractor}apply_chat_template(E,B={}){if(!this.tokenizer)throw new Error("Unable to apply chat template without a tokenizer.");return this.tokenizer.apply_chat_template(E,{tokenize:!1,...B})}batch_decode(...E){if(!this.tokenizer)throw new Error("Unable to decode without a tokenizer.");return this.tokenizer.batch_decode(...E)}decode(...E){if(!this.tokenizer)throw new Error("Unable to decode without a tokenizer.");return this.tokenizer.decode(...E)}async _call(E,...B){for(const D of[this.image_processor,this.feature_extractor,this.tokenizer])if(D)return D(E,...B);throw new Error("No image processor, feature extractor, or tokenizer found.")}static async from_pretrained(E,B){const[D,v]=await Promise.all([this.uses_processor_config?(0,b.getModelJSON)(E,u.PROCESSOR_NAME,!0,B):{},Promise.all(this.classes.filter(x=>x in this).map(async x=>{const S=await this[x].from_pretrained(E,B);return[x.replace(/_class$/,""),S]})).then(Object.fromEntries)]);return new this(D,v)}}},"./src/configs.js":(a,o,n)=>{n.r(o),n.d(o,{AutoConfig:()=>B,PretrainedConfig:()=>E,getKeyValueShapes:()=>w});var u=n("./src/utils/core.js"),m=n("./src/utils/hub.js");async function b(D,v){return await(0,m.getModelJSON)(D,"config.json",!0,v)}function C(D){const v={};let x={};switch(D.model_type){case"llava":case"paligemma":case"gemma3":case"florence2":case"llava_onevision":case"idefics3":case"ultravox":case"smolvlm":x=C(D.text_config);break;case"moondream1":x=C(D.phi_config);break;case"musicgen":x=C(D.decoder);break;case"multi_modality":x=C(D.language_config);break;case"gpt2":case"gptj":case"jais":case"codegen":case"gpt_bigcode":v.num_heads="n_head",v.num_layers="n_layer",v.hidden_size="n_embd";break;case"gpt_neox":case"stablelm":case"opt":case"falcon":v.num_heads="num_attention_heads",v.num_layers="num_hidden_layers",v.hidden_size="hidden_size";break;case"llama":case"olmo":case"olmo2":case"mobilellm":case"granite":case"cohere":case"mistral":case"starcoder2":case"qwen2":case"qwen2_vl":case"phi":case"phi3":case"phi3_v":v.num_heads="num_key_value_heads",v.num_layers="num_hidden_layers",v.hidden_size="hidden_size",v.num_attention_heads="num_attention_heads";break;case"qwen3":case"gemma":case"gemma2":case"gemma3_text":case"glm":case"helium":v.num_heads="num_key_value_heads",v.num_layers="num_hidden_layers",v.dim_kv="head_dim";break;case"openelm":v.num_heads="num_kv_heads",v.num_layers="num_transformer_layers",v.dim_kv="head_dim";break;case"gpt_neo":case"donut-swin":v.num_heads="num_heads",v.num_layers="num_layers",v.hidden_size="hidden_size";break;case"bloom":v.num_heads="n_head",v.num_layers="n_layer",v.hidden_size="hidden_size";break;case"mpt":v.num_heads="n_heads",v.num_layers="n_layers",v.hidden_size="d_model";break;case"exaone":v.num_heads="num_key_value_heads",v.num_layers="num_layers",v.dim_kv="head_dim",v.num_attention_heads="num_attention_heads";break;case"t5":case"mt5":case"longt5":v.num_decoder_layers="num_decoder_layers",v.num_decoder_heads="num_heads",v.decoder_dim_kv="d_kv",v.num_encoder_layers="num_layers",v.num_encoder_heads="num_heads",v.encoder_dim_kv="d_kv";break;case"bart":case"mbart":case"marian":case"whisper":case"lite-whisper":case"m2m_100":case"blenderbot":case"blenderbot-small":case"florence2_language":v.num_decoder_layers="decoder_layers",v.num_decoder_heads="decoder_attention_heads",v.decoder_hidden_size="d_model",v.num_encoder_layers="encoder_layers",v.num_encoder_heads="encoder_attention_heads",v.encoder_hidden_size="d_model";break;case"speecht5":v.num_decoder_layers="decoder_layers",v.num_decoder_heads="decoder_attention_heads",v.decoder_hidden_size="hidden_size",v.num_encoder_layers="encoder_layers",v.num_encoder_heads="encoder_attention_heads",v.encoder_hidden_size="hidden_size";break;case"trocr":v.num_encoder_layers=v.num_decoder_layers="decoder_layers",v.num_encoder_heads=v.num_decoder_heads="decoder_attention_heads",v.encoder_hidden_size=v.decoder_hidden_size="d_model";break;case"musicgen_decoder":v.num_encoder_layers=v.num_decoder_layers="num_hidden_layers",v.num_encoder_heads=v.num_decoder_heads="num_attention_heads",v.encoder_hidden_size=v.decoder_hidden_size="hidden_size";break;case"moonshine":v.num_decoder_layers="decoder_num_hidden_layers",v.num_decoder_heads="decoder_num_key_value_heads",v.num_encoder_layers="encoder_num_hidden_layers",v.num_encoder_heads="encoder_num_key_value_heads",v.encoder_hidden_size=v.decoder_hidden_size="hidden_size";break;case"vision-encoder-decoder":const F=C(D.decoder),j="num_decoder_layers"in F,J=(0,u.pick)(D,["model_type","is_encoder_decoder"]);return j?(J.num_decoder_layers=F.num_decoder_layers,J.num_decoder_heads=F.num_decoder_heads,J.decoder_hidden_size=F.decoder_hidden_size,J.num_encoder_layers=F.num_encoder_layers,J.num_encoder_heads=F.num_encoder_heads,J.encoder_hidden_size=F.encoder_hidden_size):(J.num_layers=F.num_layers,J.num_heads=F.num_heads,J.hidden_size=F.hidden_size),J}const S={...x,...(0,u.pick)(D,["model_type","multi_query","is_encoder_decoder"])};for(const F in v)S[F]=D[v[F]];return S}function w(D,{prefix:v="past_key_values",batch_size:x=1}={}){const S={},F=D.normalized_config;if(F.is_encoder_decoder&&"num_encoder_heads"in F&&"num_decoder_heads"in F){const j=F.encoder_dim_kv??F.encoder_hidden_size/F.num_encoder_heads,J=F.decoder_dim_kv??F.decoder_hidden_size/F.num_decoder_heads,L=[x,F.num_encoder_heads,0,j],N=[x,F.num_decoder_heads,0,J];for(let U=0;U<F.num_decoder_layers;++U)S[`${v}.${U}.encoder.key`]=L,S[`${v}.${U}.encoder.value`]=L,S[`${v}.${U}.decoder.key`]=N,S[`${v}.${U}.decoder.value`]=N}else{const j=F.num_heads,J=F.num_layers,L=F.dim_kv??F.hidden_size/(F.num_attention_heads??j);if(F.model_type==="falcon"){const N=[x*j,0,L];for(let U=0;U<J;++U)S[`${v}.${U}.key`]=N,S[`${v}.${U}.value`]=N}else if(F.multi_query){const N=[x*j,0,2*L];for(let U=0;U<J;++U)S[`${v}.${U}.key_value`]=N}else if(F.model_type==="bloom"){const N=[x*j,L,0],U=[x*j,0,L];for(let f=0;f<J;++f)S[`${v}.${f}.key`]=N,S[`${v}.${f}.value`]=U}else if(F.model_type==="openelm")for(let N=0;N<J;++N){const U=[x,j[N],0,L];S[`${v}.${N}.key`]=U,S[`${v}.${N}.value`]=U}else{const N=[x,j,0,L];for(let U=0;U<J;++U)S[`${v}.${U}.key`]=N,S[`${v}.${U}.value`]=N}}return S}class E{model_type=null;is_encoder_decoder=!1;max_position_embeddings;"transformers.js_config";constructor(v){Object.assign(this,v),this.normalized_config=C(this)}static async from_pretrained(v,{progress_callback:x=null,config:S=null,cache_dir:F=null,local_files_only:j=!1,revision:J="main"}={}){S&&!(S instanceof E)&&(S=new E(S));const L=S??await b(v,{progress_callback:x,config:S,cache_dir:F,local_files_only:j,revision:J});return new this(L)}}class B{static async from_pretrained(...v){return E.from_pretrained(...v)}}},"./src/env.js":(a,o,n)=>{n.r(o),n.d(o,{apis:()=>J,env:()=>e});var u=n("?569f"),m=n("?3f59"),b=n("?154a");const C="3.5.2",w=typeof window<"u"&&typeof window.document<"u",E=typeof self<"u"&&self.constructor?.name==="DedicatedWorkerGlobalScope",B=typeof self<"u"&&"caches"in self,D=typeof navigator<"u"&&"gpu"in navigator,v=typeof navigator<"u"&&"ml"in navigator,x=typeof process<"u",S=x&&process?.release?.name==="node",F=!d(u),j=!d(m),J=Object.freeze({IS_BROWSER_ENV:w,IS_WEBWORKER_ENV:E,IS_WEB_CACHE_AVAILABLE:B,IS_WEBGPU_AVAILABLE:D,IS_WEBNN_AVAILABLE:v,IS_PROCESS_AVAILABLE:x,IS_NODE_ENV:S,IS_FS_AVAILABLE:F,IS_PATH_AVAILABLE:j}),L=F&&j;let N="./";if(L){const y=Object(import.meta).url;y?N=m.dirname(m.dirname(b.fileURLToPath(y))):typeof __dirname<"u"&&(N=m.dirname(__dirname))}const U=L?m.join(N,"/.cache/"):null,f="/models/",k=L?m.join(N,f):f,e={version:C,backends:{onnx:{}},allowRemoteModels:!0,remoteHost:"https://huggingface.co/",remotePathTemplate:"{model}/resolve/{revision}/",allowLocalModels:!(w||E),localModelPath:k,useFS:F,useBrowserCache:B,useFSCache:F,cacheDir:U,useCustomCache:!1,customCache:null};function d(y){return Object.keys(y).length===0}},"./src/generation/configuration_utils.js":(a,o,n)=>{n.r(o),n.d(o,{GenerationConfig:()=>m});var u=n("./src/utils/core.js");class m{max_length=20;max_new_tokens=null;min_length=0;min_new_tokens=null;early_stopping=!1;max_time=null;do_sample=!1;num_beams=1;num_beam_groups=1;penalty_alpha=null;use_cache=!0;temperature=1;top_k=50;top_p=1;typical_p=1;epsilon_cutoff=0;eta_cutoff=0;diversity_penalty=0;repetition_penalty=1;encoder_repetition_penalty=1;length_penalty=1;no_repeat_ngram_size=0;bad_words_ids=null;force_words_ids=null;renormalize_logits=!1;constraints=null;forced_bos_token_id=null;forced_eos_token_id=null;remove_invalid_values=!1;exponential_decay_length_penalty=null;suppress_tokens=null;streamer=null;begin_suppress_tokens=null;forced_decoder_ids=null;guidance_scale=null;num_return_sequences=1;output_attentions=!1;output_hidden_states=!1;output_scores=!1;return_dict_in_generate=!1;pad_token_id=null;bos_token_id=null;eos_token_id=null;encoder_no_repeat_ngram_size=0;decoder_start_token_id=null;generation_kwargs={};constructor(C){Object.assign(this,(0,u.pick)(C,Object.getOwnPropertyNames(this)))}}},"./src/generation/logits_process.js":(a,o,n)=>{n.r(o),n.d(o,{ClassifierFreeGuidanceLogitsProcessor:()=>L,ForcedBOSTokenLogitsProcessor:()=>E,ForcedEOSTokenLogitsProcessor:()=>B,LogitsProcessor:()=>b,LogitsProcessorList:()=>w,LogitsWarper:()=>C,MinLengthLogitsProcessor:()=>F,MinNewTokensLengthLogitsProcessor:()=>j,NoBadWordsLogitsProcessor:()=>J,NoRepeatNGramLogitsProcessor:()=>x,RepetitionPenaltyLogitsProcessor:()=>S,SuppressTokensAtBeginLogitsProcessor:()=>D,TemperatureLogitsWarper:()=>N,TopKLogitsWarper:()=>f,TopPLogitsWarper:()=>U,WhisperTimeStampLogitsProcessor:()=>v});var u=n("./src/utils/generic.js");n("./src/utils/tensor.js");var m=n("./src/utils/maths.js");class b extends u.Callable{_call(e,d){throw Error("`_call` should be implemented in a subclass")}}class C extends u.Callable{_call(e,d){throw Error("`_call` should be implemented in a subclass")}}class w extends u.Callable{constructor(){super(),this.processors=[]}push(e){this.processors.push(e)}extend(e){this.processors.push(...e)}_call(e,d){let y=d;for(const ee of this.processors)y=ee(e,y);return y}[Symbol.iterator](){return this.processors.values()}}class E extends b{constructor(e){super(),this.bos_token_id=e}_call(e,d){for(let y=0;y<e.length;++y)if(e[y].length===1){const ee=d[y].data;ee.fill(-1/0),ee[this.bos_token_id]=0}return d}}class B extends b{constructor(e,d){super(),this.max_length=e,this.eos_token_id=Array.isArray(d)?d:[d]}_call(e,d){for(let y=0;y<e.length;++y)if(e[y].length===this.max_length-1){const ee=d[y].data;ee.fill(-1/0);for(const T of this.eos_token_id)ee[T]=0}return d}}class D extends b{constructor(e,d){super(),this.begin_suppress_tokens=e,this.begin_index=d}_call(e,d){for(let y=0;y<e.length;++y)if(e[y].length===this.begin_index){const ee=d[y].data;for(const T of this.begin_suppress_tokens)ee[T]=-1/0}return d}}class v extends b{constructor(e,d){super(),this.eos_token_id=Array.isArray(e.eos_token_id)?e.eos_token_id[0]:e.eos_token_id,this.no_timestamps_token_id=e.no_timestamps_token_id,this.timestamp_begin=this.no_timestamps_token_id+1,this.begin_index=d.length,d.at(-1)===this.no_timestamps_token_id&&(this.begin_index-=1),this.max_initial_timestamp_index=e.max_initial_timestamp_index}_call(e,d){for(let y=0;y<e.length;++y){const ee=d[y].data;if(ee[this.no_timestamps_token_id]=-1/0,e[y].length===this.begin_index-1){ee.fill(-1/0),ee[this.timestamp_begin]=0;continue}const T=e[y].slice(this.begin_index),O=T.length>=1&&T[T.length-1]>=this.timestamp_begin,we=T.length<2||T[T.length-2]>=this.timestamp_begin;if(O&&(we?ee.subarray(this.timestamp_begin).fill(-1/0):ee.subarray(0,this.eos_token_id).fill(-1/0)),e[y].length===this.begin_index&&this.max_initial_timestamp_index!==null){const Ee=this.timestamp_begin+this.max_initial_timestamp_index;ee.subarray(Ee+1).fill(-1/0)}const $=(0,m.log_softmax)(ee),be=Math.log($.subarray(this.timestamp_begin).map(Math.exp).reduce((Ee,Be)=>Ee+Be)),Ce=(0,m.max)($.subarray(0,this.timestamp_begin))[0];be>Ce&&ee.subarray(0,this.timestamp_begin).fill(-1/0)}return d}}class x extends b{constructor(e){super(),this.no_repeat_ngram_size=e}getNgrams(e){const d=e.length,y=[];for(let T=0;T<d+1-this.no_repeat_ngram_size;++T){const O=[];for(let we=0;we<this.no_repeat_ngram_size;++we)O.push(e[T+we]);y.push(O.map(Number))}const ee=new Map;for(const T of y){const O=T.slice(0,T.length-1),we=JSON.stringify(O),$=ee.get(we)??[];$.push(T[T.length-1]),ee.set(we,$)}return ee}getGeneratedNgrams(e,d){const y=d.slice(d.length+1-this.no_repeat_ngram_size,d.length);return e.get(JSON.stringify(y.map(Number)))??[]}calcBannedNgramTokens(e){const d=[];if(e.length+1<this.no_repeat_ngram_size)return d;{const y=this.getNgrams(e);return this.getGeneratedNgrams(y,e)}}_call(e,d){for(let y=0;y<e.length;++y){const ee=d[y].data,T=this.calcBannedNgramTokens(e[y]);for(const O of T)ee[O]=-1/0}return d}}class S extends b{constructor(e){super(),this.penalty=e}_call(e,d){for(let y=0;y<e.length;++y){const ee=d[y].data;for(const T of new Set(e[y])){const O=Number(T);ee[O]<0?ee[O]*=this.penalty:ee[O]/=this.penalty}}return d}}class F extends b{constructor(e,d){super(),this.min_length=e,this.eos_token_id=Array.isArray(d)?d:[d]}_call(e,d){for(let y=0;y<e.length;++y)if(e[y].length<this.min_length){const ee=d[y].data;for(const T of this.eos_token_id)ee[T]=-1/0}return d}}class j extends b{constructor(e,d,y){super(),this.prompt_length_to_skip=e,this.min_new_tokens=d,this.eos_token_id=Array.isArray(y)?y:[y]}_call(e,d){for(let y=0;y<e.length;++y)if(e[y].length-this.prompt_length_to_skip<this.min_new_tokens){const T=d[y].data;for(const O of this.eos_token_id)T[O]=-1/0}return d}}class J extends b{constructor(e,d){super(),this.bad_words_ids=e,this.eos_token_id=Array.isArray(d)?d:[d]}_call(e,d){for(let y=0;y<e.length;++y){const ee=d[y].data,T=e[y];for(const O of this.bad_words_ids){if(T.length<O.length-1)continue;let we=!0;for(let $=1;$<=O.length-1;++$)if(O.at(-$-1)!=T.at(-$)){we=!1;break}we&&(ee[O.at(-1)]=-1/0)}}return d}}class L extends b{constructor(e){if(super(),e<=1)throw new Error(`Require guidance scale >1 to use the classifier free guidance processor, got guidance scale ${e}.`);this.guidance_scale=e}_call(e,d){if(d.dims[0]!==2*e.length)throw new Error(`Logits should have twice the batch size of the input ids, the first half of batches corresponding to the conditional inputs, and the second half of batches corresponding to the unconditional inputs. Got batch size ${d.dims[0]} for the logits and ${e.length} for the input ids.`);const y=e.length,ee=d.slice([0,y],null),T=d.slice([y,d.dims[0]],null);for(let O=0;O<T.data.length;++O)T.data[O]+=(ee.data[O]-T.data[O])*this.guidance_scale;return T}}class N extends C{constructor(e){super(),this.temperature=e}_call(e,d){const y=d.data;for(let ee=0;ee<y.length;++ee)y[ee]/=this.temperature;return d}}class U extends C{constructor(e,{filter_value:d=-1/0,min_tokens_to_keep:y=1}={}){if(super(),e<0||e>1)throw new Error(`\`top_p\` must be a float > 0 and < 1, but is ${e}`);if(!Number.isInteger(y)||y<1)throw new Error(`\`min_tokens_to_keep\` must be a positive integer, but is ${y}`);this.top_p=e,this.filter_value=d,this.min_tokens_to_keep=y}}class f extends C{constructor(e,{filter_value:d=-1/0,min_tokens_to_keep:y=1}={}){if(super(),!Number.isInteger(e)||e<0)throw new Error(`\`top_k\` must be a positive integer, but is ${e}`);this.top_k=Math.max(e,y),this.filter_value=d}}},"./src/generation/logits_sampler.js":(a,o,n)=>{n.r(o),n.d(o,{LogitsSampler:()=>C});var u=n("./src/utils/generic.js"),m=n("./src/utils/tensor.js"),b=n("./src/utils/maths.js");n("./src/generation/configuration_utils.js");class C extends u.Callable{constructor(v){super(),this.generation_config=v}async _call(v){return this.sample(v)}async sample(v){throw Error("sample should be implemented in subclasses.")}getLogits(v,x){let S=v.dims.at(-1),F=v.data;if(x===-1)F=F.slice(-S);else{let j=x*S;F=F.slice(j,j+S)}return F}randomSelect(v){let x=0;for(let F=0;F<v.length;++F)x+=v[F];let S=Math.random()*x;for(let F=0;F<v.length;++F)if(S-=v[F],S<=0)return F;return 0}static getSampler(v){if(v.do_sample)return new E(v);if(v.num_beams>1)return new B(v);if(v.num_return_sequences>1)throw Error(`num_return_sequences has to be 1 when doing greedy search, but is ${v.num_return_sequences}.`);return new w(v)}}class w extends C{async sample(v){const x=(0,b.max)(v.data)[1];return[[BigInt(x),0]]}}class E extends C{async sample(v){let x=v.dims.at(-1);this.generation_config.top_k>0&&(x=Math.min(this.generation_config.top_k,x));const[S,F]=await(0,m.topk)(v,x),j=(0,b.softmax)(S.data);return Array.from({length:this.generation_config.num_beams},()=>{const J=this.randomSelect(j);return[F.data[J],Math.log(j[J])]})}}class B extends C{async sample(v){let x=v.dims.at(-1);this.generation_config.top_k>0&&(x=Math.min(this.generation_config.top_k,x));const[S,F]=await(0,m.topk)(v,x),j=(0,b.softmax)(S.data);return Array.from({length:this.generation_config.num_beams},(J,L)=>[F.data[L],Math.log(j[L])])}}},"./src/generation/stopping_criteria.js":(a,o,n)=>{n.r(o),n.d(o,{EosTokenCriteria:()=>w,InterruptableStoppingCriteria:()=>E,MaxLengthCriteria:()=>C,StoppingCriteria:()=>m,StoppingCriteriaList:()=>b});var u=n("./src/utils/generic.js");class m extends u.Callable{_call(D,v){throw Error("StoppingCriteria needs to be subclassed")}}class b extends u.Callable{constructor(){super(),this.criteria=[]}push(D){this.criteria.push(D)}extend(D){D instanceof b?D=D.criteria:D instanceof m&&(D=[D]),this.criteria.push(...D)}_call(D,v){const x=new Array(D.length).fill(!1);for(const S of this.criteria){const F=S(D,v);for(let j=0;j<x.length;++j)x[j]||=F[j]}return x}[Symbol.iterator](){return this.criteria.values()}}class C extends m{constructor(D,v=null){super(),this.max_length=D,this.max_position_embeddings=v}_call(D){return D.map(v=>v.length>=this.max_length)}}class w extends m{constructor(D){super(),Array.isArray(D)||(D=[D]),this.eos_token_id=D}_call(D,v){return D.map(x=>{const S=x.at(-1);return this.eos_token_id.some(F=>S==F)})}}class E extends m{constructor(){super(),this.interrupted=!1}interrupt(){this.interrupted=!0}reset(){this.interrupted=!1}_call(D,v){return new Array(D.length).fill(this.interrupted)}}},"./src/generation/streamers.js":(a,o,n)=>{n.r(o),n.d(o,{BaseStreamer:()=>C,TextStreamer:()=>E,WhisperTextStreamer:()=>B});var u=n("./src/utils/core.js"),m=n("./src/tokenizers.js"),b=n("./src/env.js");class C{put(v){throw Error("Not implemented")}end(){throw Error("Not implemented")}}const w=b.apis.IS_PROCESS_AVAILABLE?D=>process.stdout.write(D):D=>console.log(D);class E extends C{constructor(v,{skip_prompt:x=!1,callback_function:S=null,token_callback_function:F=null,skip_special_tokens:j=!0,decode_kwargs:J={},...L}={}){super(),this.tokenizer=v,this.skip_prompt=x,this.callback_function=S??w,this.token_callback_function=F,this.decode_kwargs={skip_special_tokens:j,...J,...L},this.token_cache=[],this.print_len=0,this.next_tokens_are_prompt=!0}put(v){if(v.length>1)throw Error("TextStreamer only supports batch size of 1");const x=this.next_tokens_are_prompt;if(x&&(this.next_tokens_are_prompt=!1,this.skip_prompt))return;const S=v[0];this.token_callback_function?.(S),this.token_cache=(0,u.mergeArrays)(this.token_cache,S);const F=this.tokenizer.decode(this.token_cache,this.decode_kwargs);let j;x||F.endsWith(`
`)?(j=F.slice(this.print_len),this.token_cache=[],this.print_len=0):F.length>0&&(0,m.is_chinese_char)(F.charCodeAt(F.length-1))?(j=F.slice(this.print_len),this.print_len+=j.length):(j=F.slice(this.print_len,F.lastIndexOf(" ")+1),this.print_len+=j.length),this.on_finalized_text(j,!1)}end(){let v;this.token_cache.length>0?(v=this.tokenizer.decode(this.token_cache,this.decode_kwargs).slice(this.print_len),this.token_cache=[],this.print_len=0):v="",this.next_tokens_are_prompt=!0,this.on_finalized_text(v,!0)}on_finalized_text(v,x){v.length>0&&this.callback_function?.(v),x&&this.callback_function===w&&b.apis.IS_PROCESS_AVAILABLE&&this.callback_function?.(`
`)}}class B extends E{constructor(v,{skip_prompt:x=!1,callback_function:S=null,token_callback_function:F=null,on_chunk_start:j=null,on_chunk_end:J=null,on_finalize:L=null,time_precision:N=.02,skip_special_tokens:U=!0,decode_kwargs:f={}}={}){super(v,{skip_prompt:x,skip_special_tokens:U,callback_function:S,token_callback_function:F,decode_kwargs:f}),this.timestamp_begin=v.timestamp_begin,this.on_chunk_start=j,this.on_chunk_end=J,this.on_finalize=L,this.time_precision=N,this.waiting_for_timestamp=!1}put(v){if(v.length>1)throw Error("WhisperTextStreamer only supports batch size of 1");const x=v[0];if(x.length===1){const S=Number(x[0])-this.timestamp_begin;if(S>=0){const F=S*this.time_precision;this.waiting_for_timestamp?this.on_chunk_end?.(F):this.on_chunk_start?.(F),this.waiting_for_timestamp=!this.waiting_for_timestamp,this.token_callback_function?.(x);return}}return super.put(v)}end(){super.end(),this.on_finalize?.()}}},"./src/models.js":(a,o,n)=>{n.r(o),n.d(o,{ASTForAudioClassification:()=>An,ASTModel:()=>Bn,ASTPreTrainedModel:()=>es,AlbertForMaskedLM:()=>Me,AlbertForQuestionAnswering:()=>fe,AlbertForSequenceClassification:()=>K,AlbertModel:()=>Oe,AlbertPreTrainedModel:()=>Vs,AutoModel:()=>l8,AutoModelForAudioClassification:()=>y8,AutoModelForAudioFrameClassification:()=>T8,AutoModelForAudioTextToText:()=>L8,AutoModelForCTC:()=>x8,AutoModelForCausalLM:()=>m8,AutoModelForDepthEstimation:()=>F8,AutoModelForDocumentQuestionAnswering:()=>P8,AutoModelForImageClassification:()=>I8,AutoModelForImageFeatureExtraction:()=>z8,AutoModelForImageMatting:()=>G8,AutoModelForImageSegmentation:()=>w8,AutoModelForImageTextToText:()=>N8,AutoModelForImageToImage:()=>Q8,AutoModelForMaskGeneration:()=>B8,AutoModelForMaskedLM:()=>h8,AutoModelForNormalEstimation:()=>S8,AutoModelForObjectDetection:()=>M8,AutoModelForPoseEstimation:()=>O8,AutoModelForQuestionAnswering:()=>C8,AutoModelForSemanticSegmentation:()=>k8,AutoModelForSeq2SeqLM:()=>d8,AutoModelForSequenceClassification:()=>c8,AutoModelForSpeechSeq2Seq:()=>f8,AutoModelForTextToSpectrogram:()=>g8,AutoModelForTextToWaveform:()=>p8,AutoModelForTokenClassification:()=>u8,AutoModelForUniversalSegmentation:()=>E8,AutoModelForVision2Seq:()=>b8,AutoModelForXVector:()=>D8,AutoModelForZeroShotObjectDetection:()=>v8,BartForConditionalGeneration:()=>lr,BartForSequenceClassification:()=>vr,BartModel:()=>Qr,BartPretrainedModel:()=>jt,BaseModelOutput:()=>Xe,BeitForImageClassification:()=>mA,BeitModel:()=>lA,BeitPreTrainedModel:()=>Ke,BertForMaskedLM:()=>H,BertForQuestionAnswering:()=>he,BertForSequenceClassification:()=>cA,BertForTokenClassification:()=>fA,BertModel:()=>qe,BertPreTrainedModel:()=>AA,BlenderbotForConditionalGeneration:()=>wr,BlenderbotModel:()=>Ir,BlenderbotPreTrainedModel:()=>Wt,BlenderbotSmallForConditionalGeneration:()=>Yr,BlenderbotSmallModel:()=>cr,BlenderbotSmallPreTrainedModel:()=>Pt,BloomForCausalLM:()=>Nn,BloomModel:()=>Qt,BloomPreTrainedModel:()=>Or,CLIPModel:()=>an,CLIPPreTrainedModel:()=>Ks,CLIPSegForImageSegmentation:()=>ni,CLIPSegModel:()=>ai,CLIPSegPreTrainedModel:()=>ps,CLIPTextModel:()=>Hr,CLIPTextModelWithProjection:()=>ls,CLIPVisionModel:()=>ca,CLIPVisionModelWithProjection:()=>Xs,CamembertForMaskedLM:()=>bt,CamembertForQuestionAnswering:()=>Rt,CamembertForSequenceClassification:()=>or,CamembertForTokenClassification:()=>_t,CamembertModel:()=>tr,CamembertPreTrainedModel:()=>SA,CausalLMOutput:()=>pi,CausalLMOutputWithPast:()=>R8,ChineseCLIPModel:()=>da,ChineseCLIPPreTrainedModel:()=>ua,ClapAudioModelWithProjection:()=>Du,ClapModel:()=>xu,ClapPreTrainedModel:()=>o0,ClapTextModelWithProjection:()=>yu,CodeGenForCausalLM:()=>un,CodeGenModel:()=>Bs,CodeGenPreTrainedModel:()=>mr,CohereForCausalLM:()=>po,CohereModel:()=>ci,CoherePreTrainedModel:()=>ms,ConvBertForMaskedLM:()=>Ts,ConvBertForQuestionAnswering:()=>ie,ConvBertForSequenceClassification:()=>re,ConvBertForTokenClassification:()=>De,ConvBertModel:()=>VA,ConvBertPreTrainedModel:()=>Wr,ConvNextForImageClassification:()=>E1,ConvNextModel:()=>k1,ConvNextPreTrainedModel:()=>ul,ConvNextV2ForImageClassification:()=>v1,ConvNextV2Model:()=>M1,ConvNextV2PreTrainedModel:()=>dl,DFineForObjectDetection:()=>Rn,DFineModel:()=>Cn,DFinePreTrainedModel:()=>qs,DPTForDepthEstimation:()=>s1,DPTModel:()=>r1,DPTPreTrainedModel:()=>ol,DacDecoderModel:()=>hd,DacDecoderOutput:()=>gd,DacEncoderModel:()=>md,DacEncoderOutput:()=>fd,DacModel:()=>pd,DacPreTrainedModel:()=>p0,DebertaForMaskedLM:()=>Ps,DebertaForQuestionAnswering:()=>ea,DebertaForSequenceClassification:()=>Rs,DebertaForTokenClassification:()=>Is,DebertaModel:()=>rr,DebertaPreTrainedModel:()=>zA,DebertaV2ForMaskedLM:()=>ks,DebertaV2ForQuestionAnswering:()=>oa,DebertaV2ForSequenceClassification:()=>Gs,DebertaV2ForTokenClassification:()=>Jr,DebertaV2Model:()=>ws,DebertaV2PreTrainedModel:()=>fs,DecisionTransformerModel:()=>Zu,DecisionTransformerPreTrainedModel:()=>Xu,DeiTForImageClassification:()=>Do,DeiTModel:()=>yo,DeiTPreTrainedModel:()=>Ui,DepthAnythingForDepthEstimation:()=>n1,DepthAnythingPreTrainedModel:()=>a1,DepthProForDepthEstimation:()=>u1,DepthProPreTrainedModel:()=>c1,DetrForObjectDetection:()=>JA,DetrForSegmentation:()=>pt,DetrModel:()=>NA,DetrObjectDetectionOutput:()=>Mt,DetrPreTrainedModel:()=>GA,DetrSegmentationOutput:()=>Dt,Dinov2ForImageClassification:()=>x1,Dinov2Model:()=>B1,Dinov2PreTrainedModel:()=>fl,Dinov2WithRegistersForImageClassification:()=>D1,Dinov2WithRegistersModel:()=>y1,Dinov2WithRegistersPreTrainedModel:()=>gl,DistilBertForMaskedLM:()=>uA,DistilBertForQuestionAnswering:()=>Lr,DistilBertForSequenceClassification:()=>Fs,DistilBertForTokenClassification:()=>qr,DistilBertModel:()=>Qs,DistilBertPreTrainedModel:()=>Tt,DonutSwinModel:()=>w1,DonutSwinPreTrainedModel:()=>I1,EfficientNetForImageClassification:()=>Ou,EfficientNetModel:()=>Su,EfficientNetPreTrainedModel:()=>Ml,ElectraForMaskedLM:()=>oA,ElectraForQuestionAnswering:()=>QA,ElectraForSequenceClassification:()=>Le,ElectraForTokenClassification:()=>LA,ElectraModel:()=>Re,ElectraPreTrainedModel:()=>xe,EsmForMaskedLM:()=>Mr,EsmForSequenceClassification:()=>gs,EsmForTokenClassification:()=>js,EsmModel:()=>WA,EsmPreTrainedModel:()=>gA,ExaoneForCausalLM:()=>dA,ExaoneModel:()=>Ze,ExaonePreTrainedModel:()=>Te,FalconForCausalLM:()=>Bu,FalconModel:()=>vu,FalconPreTrainedModel:()=>wl,FastViTForImageClassification:()=>I,FastViTModel:()=>p,FastViTPreTrainedModel:()=>g,Florence2ForConditionalGeneration:()=>Gn,Florence2PreTrainedModel:()=>Pn,GLPNForDepthEstimation:()=>b1,GLPNModel:()=>C1,GLPNPreTrainedModel:()=>cl,GPT2LMHeadModel:()=>UA,GPT2Model:()=>Zs,GPT2PreTrainedModel:()=>fa,GPTBigCodeForCausalLM:()=>vs,GPTBigCodeModel:()=>xr,GPTBigCodePreTrainedModel:()=>cn,GPTJForCausalLM:()=>zs,GPTJModel:()=>Ua,GPTJPreTrainedModel:()=>Ms,GPTNeoForCausalLM:()=>ar,GPTNeoModel:()=>Es,GPTNeoPreTrainedModel:()=>ka,GPTNeoXForCausalLM:()=>At,GPTNeoXModel:()=>Sn,GPTNeoXPreTrainedModel:()=>Ha,Gemma2ForCausalLM:()=>ho,Gemma2Model:()=>gn,Gemma2PreTrainedModel:()=>ui,Gemma3ForCausalLM:()=>ts,Gemma3Model:()=>Co,Gemma3PreTrainedModel:()=>Oi,GemmaForCausalLM:()=>Si,GemmaModel:()=>mo,GemmaPreTrainedModel:()=>Js,GlmForCausalLM:()=>ce,GlmModel:()=>se,GlmPreTrainedModel:()=>Z,GraniteForCausalLM:()=>li,GraniteModel:()=>oi,GranitePreTrainedModel:()=>ii,GroundingDinoForObjectDetection:()=>P1,GroundingDinoPreTrainedModel:()=>T1,GroupViTModel:()=>c,GroupViTPreTrainedModel:()=>l,HeliumForCausalLM:()=>W,HeliumModel:()=>G,HeliumPreTrainedModel:()=>Ut,HieraForImageClassification:()=>Xc,HieraModel:()=>Kc,HieraPreTrainedModel:()=>al,HubertForCTC:()=>iu,HubertForSequenceClassification:()=>ou,HubertModel:()=>nu,HubertPreTrainedModel:()=>Zb,IJepaForImageClassification:()=>Vi,IJepaModel:()=>Ur,IJepaPreTrainedModel:()=>Ln,Idefics3ForConditionalGeneration:()=>Wa,Idefics3PreTrainedModel:()=>ti,ImageMattingOutput:()=>Kd,JAISLMHeadModel:()=>ln,JAISModel:()=>Fn,JAISPreTrainedModel:()=>Qn,JinaCLIPModel:()=>on,JinaCLIPPreTrainedModel:()=>Va,JinaCLIPTextModel:()=>wa,JinaCLIPVisionModel:()=>CA,LiteWhisperForConditionalGeneration:()=>Dn,LlamaForCausalLM:()=>dn,LlamaModel:()=>On,LlamaPreTrainedModel:()=>Ka,LlavaForConditionalGeneration:()=>Hs,LlavaOnevisionForConditionalGeneration:()=>ta,LlavaPreTrainedModel:()=>Ia,LongT5ForConditionalGeneration:()=>BA,LongT5Model:()=>xA,LongT5PreTrainedModel:()=>vA,M2M100ForConditionalGeneration:()=>R1,M2M100Model:()=>_1,M2M100PreTrainedModel:()=>hl,MBartForCausalLM:()=>_r,MBartForConditionalGeneration:()=>os,MBartForSequenceClassification:()=>br,MBartModel:()=>Jt,MBartPreTrainedModel:()=>kt,MPNetForMaskedLM:()=>Ca,MPNetForQuestionAnswering:()=>Ys,MPNetForSequenceClassification:()=>Oa,MPNetForTokenClassification:()=>Ss,MPNetModel:()=>Sa,MPNetPreTrainedModel:()=>$r,MT5ForConditionalGeneration:()=>nt,MT5Model:()=>gt,MT5PreTrainedModel:()=>Ve,MarianMTModel:()=>L1,MarianModel:()=>N1,MarianPreTrainedModel:()=>ml,MaskFormerForInstanceSegmentation:()=>h1,MaskFormerModel:()=>m1,MaskFormerPreTrainedModel:()=>ll,MaskedLMOutput:()=>Cs,Metric3DForDepthEstimation:()=>f1,Metric3DPreTrainedModel:()=>d1,Metric3Dv2ForDepthEstimation:()=>p1,Metric3Dv2PreTrainedModel:()=>g1,MgpstrForSceneTextRecognition:()=>Ad,MgpstrModelOutput:()=>$u,MgpstrPreTrainedModel:()=>ed,MimiDecoderModel:()=>dd,MimiDecoderOutput:()=>ld,MimiEncoderModel:()=>ud,MimiEncoderOutput:()=>od,MimiModel:()=>cd,MimiPreTrainedModel:()=>g0,MistralForCausalLM:()=>ku,MistralModel:()=>wu,MistralPreTrainedModel:()=>bl,MobileBertForMaskedLM:()=>Ws,MobileBertForQuestionAnswering:()=>is,MobileBertForSequenceClassification:()=>rt,MobileBertModel:()=>Gr,MobileBertPreTrainedModel:()=>pr,MobileLLMForCausalLM:()=>lt,MobileLLMModel:()=>FA,MobileLLMPreTrainedModel:()=>MA,MobileNetV1ForImageClassification:()=>Nu,MobileNetV1ForSemanticSegmentation:()=>Lu,MobileNetV1Model:()=>zu,MobileNetV1PreTrainedModel:()=>c0,MobileNetV2ForImageClassification:()=>Ru,MobileNetV2ForSemanticSegmentation:()=>ju,MobileNetV2Model:()=>_u,MobileNetV2PreTrainedModel:()=>u0,MobileNetV3ForImageClassification:()=>Yu,MobileNetV3ForSemanticSegmentation:()=>Vu,MobileNetV3Model:()=>Wu,MobileNetV3PreTrainedModel:()=>d0,MobileNetV4ForImageClassification:()=>Uu,MobileNetV4ForSemanticSegmentation:()=>Ku,MobileNetV4Model:()=>Hu,MobileNetV4PreTrainedModel:()=>f0,MobileViTForImageClassification:()=>Y,MobileViTModel:()=>z,MobileViTPreTrainedModel:()=>P,MobileViTV2ForImageClassification:()=>te,MobileViTV2Model:()=>X,MobileViTV2PreTrainedModel:()=>V,ModelOutput:()=>He,ModernBertForMaskedLM:()=>EA,ModernBertForSequenceClassification:()=>PA,ModernBertForTokenClassification:()=>wA,ModernBertModel:()=>rA,ModernBertPreTrainedModel:()=>bA,Moondream1ForConditionalGeneration:()=>Os,MoonshineForConditionalGeneration:()=>Bt,MoonshineModel:()=>rn,MoonshinePreTrainedModel:()=>Tn,MptForCausalLM:()=>Eo,MptModel:()=>_i,MptPreTrainedModel:()=>Li,MultiModalityCausalLM:()=>qu,MultiModalityPreTrainedModel:()=>Ju,MusicgenForCausalLM:()=>e8,MusicgenForConditionalGeneration:()=>Bl,MusicgenModel:()=>$b,MusicgenPreTrainedModel:()=>vl,NomicBertModel:()=>TA,NomicBertPreTrainedModel:()=>ZA,OPTForCausalLM:()=>ji,OPTModel:()=>Mo,OPTPreTrainedModel:()=>Ri,Olmo2ForCausalLM:()=>Sr,Olmo2Model:()=>fn,Olmo2PreTrainedModel:()=>As,OlmoForCausalLM:()=>Fr,OlmoModel:()=>yt,OlmoPreTrainedModel:()=>Et,OpenELMForCausalLM:()=>zi,OpenELMModel:()=>rs,OpenELMPreTrainedModel:()=>pn,OwlViTForObjectDetection:()=>ke,OwlViTModel:()=>me,OwlViTPreTrainedModel:()=>ne,Owlv2ForObjectDetection:()=>_e,Owlv2Model:()=>Pe,Owlv2PreTrainedModel:()=>ye,PaliGemmaForConditionalGeneration:()=>sn,PaliGemmaPreTrainedModel:()=>Us,PatchTSMixerForPrediction:()=>ad,PatchTSMixerModel:()=>sd,PatchTSMixerPreTrainedModel:()=>yl,PatchTSTForPrediction:()=>rd,PatchTSTModel:()=>td,PatchTSTPreTrainedModel:()=>xl,Phi3ForCausalLM:()=>gi,Phi3Model:()=>Ni,Phi3PreTrainedModel:()=>Ns,Phi3VForCausalLM:()=>DA,Phi3VPreTrainedModel:()=>ri,PhiForCausalLM:()=>Za,PhiModel:()=>ko,PhiPreTrainedModel:()=>fi,PreTrainedModel:()=>ge,PretrainedMixin:()=>Vt,PvtForImageClassification:()=>KA,PvtModel:()=>_n,PvtPreTrainedModel:()=>Hi,PyAnnoteForAudioFrameClassification:()=>U1,PyAnnoteModel:()=>H1,PyAnnotePreTrainedModel:()=>Cl,QuestionAnsweringModelOutput:()=>xs,Qwen2ForCausalLM:()=>Kt,Qwen2Model:()=>bo,Qwen2PreTrainedModel:()=>zn,Qwen2VLForConditionalGeneration:()=>wo,Qwen2VLPreTrainedModel:()=>Io,Qwen3ForCausalLM:()=>mn,Qwen3Model:()=>Xa,Qwen3PreTrainedModel:()=>di,RFDetrForObjectDetection:()=>ra,RFDetrModel:()=>hs,RFDetrObjectDetectionOutput:()=>sa,RFDetrPreTrainedModel:()=>as,RTDetrForObjectDetection:()=>fr,RTDetrModel:()=>$t,RTDetrObjectDetectionOutput:()=>er,RTDetrPreTrainedModel:()=>Yt,RTDetrV2ForObjectDetection:()=>Kr,RTDetrV2Model:()=>zr,RTDetrV2ObjectDetectionOutput:()=>ss,RTDetrV2PreTrainedModel:()=>Er,ResNetForImageClassification:()=>Jc,ResNetModel:()=>Zc,ResNetPreTrainedModel:()=>nl,RoFormerForMaskedLM:()=>ot,RoFormerForQuestionAnswering:()=>Lt,RoFormerForSequenceClassification:()=>$A,RoFormerForTokenClassification:()=>tt,RoFormerModel:()=>OA,RoFormerPreTrainedModel:()=>tA,RobertaForMaskedLM:()=>sr,RobertaForQuestionAnswering:()=>Gt,RobertaForSequenceClassification:()=>qt,RobertaForTokenClassification:()=>_A,RobertaModel:()=>kr,RobertaPreTrainedModel:()=>ur,SamImageSegmentationOutput:()=>z1,SamModel:()=>O1,SamPreTrainedModel:()=>S1,SapiensForDepthEstimation:()=>o1,SapiensForNormalEstimation:()=>l1,SapiensForSemanticSegmentation:()=>i1,SapiensPreTrainedModel:()=>s0,SegformerForImageClassification:()=>Pu,SegformerForSemanticSegmentation:()=>Gu,SegformerModel:()=>qb,SegformerPreTrainedModel:()=>l0,Seq2SeqLMOutput:()=>_8,SequenceClassifierOutput:()=>ut,SiglipModel:()=>dr,SiglipPreTrainedModel:()=>Ya,SiglipTextModel:()=>si,SiglipVisionModel:()=>nn,SmolVLMForConditionalGeneration:()=>iA,SnacDecoderModel:()=>Id,SnacEncoderModel:()=>bd,SnacModel:()=>Cd,SnacPreTrainedModel:()=>m0,SpeechT5ForSpeechToText:()=>mu,SpeechT5ForTextToSpeech:()=>hu,SpeechT5HifiGan:()=>Cu,SpeechT5Model:()=>Jb,SpeechT5PreTrainedModel:()=>i0,SqueezeBertForMaskedLM:()=>Na,SqueezeBertForQuestionAnswering:()=>_a,SqueezeBertForSequenceClassification:()=>La,SqueezeBertModel:()=>za,SqueezeBertPreTrainedModel:()=>Aa,StableLmForCausalLM:()=>Fu,StableLmModel:()=>Qu,StableLmPreTrainedModel:()=>El,Starcoder2ForCausalLM:()=>Mu,Starcoder2Model:()=>Eu,Starcoder2PreTrainedModel:()=>Il,StyleTextToSpeech2Model:()=>pu,StyleTextToSpeech2PreTrainedModel:()=>gu,Swin2SRForImageSuperResolution:()=>t1,Swin2SRModel:()=>A1,Swin2SRPreTrainedModel:()=>il,SwinForImageClassification:()=>$c,SwinForSemanticSegmentation:()=>e1,SwinModel:()=>qc,SwinPreTrainedModel:()=>r0,T5ForConditionalGeneration:()=>eA,T5Model:()=>We,T5PreTrainedModel:()=>Ie,TableTransformerForObjectDetection:()=>Wn,TableTransformerModel:()=>jn,TableTransformerObjectDetectionOutput:()=>xo,TableTransformerPreTrainedModel:()=>Ja,TokenClassifierOutput:()=>cs,TrOCRForCausalLM:()=>Iu,TrOCRPreTrainedModel:()=>bu,UltravoxModel:()=>id,UltravoxPreTrainedModel:()=>nd,UniSpeechForCTC:()=>J1,UniSpeechForSequenceClassification:()=>q1,UniSpeechModel:()=>Z1,UniSpeechPreTrainedModel:()=>a0,UniSpeechSatForAudioFrameClassification:()=>tu,UniSpeechSatForCTC:()=>eu,UniSpeechSatForSequenceClassification:()=>Au,UniSpeechSatModel:()=>$1,UniSpeechSatPreTrainedModel:()=>To,ViTForImageClassification:()=>Yi,ViTMAEModel:()=>t,ViTMAEPreTrainedModel:()=>A,ViTMSNForImageClassification:()=>i,ViTMSNModel:()=>s,ViTMSNPreTrainedModel:()=>r,ViTModel:()=>vo,ViTPreTrainedModel:()=>Wi,VisionEncoderDecoderModel:()=>ja,VitMatteForImageMatting:()=>M,VitMattePreTrainedModel:()=>h,VitPoseForPoseEstimation:()=>hn,VitPosePreTrainedModel:()=>Bo,VitsModel:()=>kl,VitsModelOutput:()=>Xd,VitsPreTrainedModel:()=>Tu,Wav2Vec2BertForCTC:()=>su,Wav2Vec2BertForSequenceClassification:()=>au,Wav2Vec2BertModel:()=>ru,Wav2Vec2BertPreTrainedModel:()=>n0,Wav2Vec2ForAudioFrameClassification:()=>V1,Wav2Vec2ForCTC:()=>W1,Wav2Vec2ForSequenceClassification:()=>Y1,Wav2Vec2Model:()=>j1,Wav2Vec2PreTrainedModel:()=>Yn,WavLMForAudioFrameClassification:()=>fu,WavLMForCTC:()=>cu,WavLMForSequenceClassification:()=>uu,WavLMForXVector:()=>du,WavLMModel:()=>lu,WavLMPreTrainedModel:()=>Ki,WeSpeakerResNetModel:()=>X1,WeSpeakerResNetPreTrainedModel:()=>K1,WhisperForConditionalGeneration:()=>tn,WhisperModel:()=>yn,WhisperPreTrainedModel:()=>xn,XLMForQuestionAnswering:()=>ba,XLMForSequenceClassification:()=>vn,XLMForTokenClassification:()=>ei,XLMModel:()=>$a,XLMPreTrainedModel:()=>Vr,XLMRobertaForMaskedLM:()=>en,XLMRobertaForQuestionAnswering:()=>yA,XLMRobertaForSequenceClassification:()=>Ra,XLMRobertaForTokenClassification:()=>Br,XLMRobertaModel:()=>Ai,XLMRobertaPreTrainedModel:()=>la,XLMWithLMHeadModel:()=>$n,XVectorOutput:()=>Ud,YolosForObjectDetection:()=>Q1,YolosModel:()=>G1,YolosObjectDetectionOutput:()=>F1,YolosPreTrainedModel:()=>pl});var u=n("./src/configs.js"),m=n("./src/backends/onnx.js"),b=n("./src/utils/dtypes.js"),C=n("./src/utils/generic.js"),w=n("./src/utils/core.js"),E=n("./src/utils/hub.js"),B=n("./src/utils/constants.js"),D=n("./src/generation/logits_process.js"),v=n("./src/generation/configuration_utils.js"),x=n("./src/utils/tensor.js"),S=n("./src/utils/image.js"),F=n("./src/utils/maths.js"),j=n("./src/generation/stopping_criteria.js"),J=n("./src/generation/logits_sampler.js"),L=n("./src/env.js"),N=n("./src/models/whisper/generation_whisper.js"),U=n("./src/models/whisper/common_whisper.js");const f={EncoderOnly:0,EncoderDecoder:1,Seq2Seq:2,Vision2Seq:3,DecoderOnly:4,MaskGeneration:5,ImageTextToText:6,Musicgen:7,MultiModality:8,Phi3V:9,AudioTextToText:10,AutoEncoder:11},k=new Map,e=new Map,d=new Map;async function y(_,R,ue){let Qe=ue.config?.["transformers.js_config"]??{},je=ue.device??Qe.device;je&&typeof je!="string"&&(je.hasOwnProperty(R)?je=je[R]:(console.warn(`device not specified for "${R}". Using the default device.`),je=null));const Ye=je??(L.apis.IS_NODE_ENV?"cpu":"wasm"),sA=(0,m.deviceToExecutionProviders)(Ye),pA=Qe.device_config??{};pA.hasOwnProperty(Ye)&&(Qe={...Qe,...pA[Ye]});let IA=ue.dtype??Qe.dtype;if(typeof IA!="string"&&(IA&&IA.hasOwnProperty(R)?IA=IA[R]:(IA=b.DEFAULT_DEVICE_DTYPE_MAPPING[Ye]??b.DATA_TYPES.fp32,console.warn(`dtype not specified for "${R}". Using the default dtype (${IA}) for this device (${Ye}).`))),IA===b.DATA_TYPES.auto){let It=Qe.dtype;typeof It!="string"&&(It=It?.[R]),It&&It!==b.DATA_TYPES.auto&&b.DATA_TYPES.hasOwnProperty(It)?IA=It:IA=b.DEFAULT_DEVICE_DTYPE_MAPPING[Ye]??b.DATA_TYPES.fp32}const jA=IA;if(b.DEFAULT_DTYPE_SUFFIX_MAPPING.hasOwnProperty(jA)){if(jA===b.DATA_TYPES.fp16&&Ye==="webgpu"&&!await(0,b.isWebGpuFp16Supported)())throw new Error(`The device (${Ye}) does not support fp16.`)}else throw new Error(`Invalid dtype: ${jA}. Should be one of: ${Object.keys(b.DATA_TYPES).join(", ")}`);const dt=Qe.kv_cache_dtype,Ct=dt?typeof dt=="string"?dt:dt[jA]??"float32":void 0;if(Ct&&!["float32","float16"].includes(Ct))throw new Error(`Invalid kv_cache_dtype: ${Ct}. Should be one of: float32, float16`);const st={dtype:jA,kv_cache_dtype:Ct,device:Ye},et=b.DEFAULT_DTYPE_SUFFIX_MAPPING[jA],Ht=`${R}${et}.onnx`,at=`${ue.subfolder??""}/${Ht}`,qA={...ue.session_options};qA.executionProviders??=sA;const Ft=Qe.free_dimension_overrides;Ft?qA.freeDimensionOverrides??=Ft:Ye.startsWith("webnn")&&!qA.freeDimensionOverrides&&console.warn(`WebNN does not currently support dynamic shapes and requires 'free_dimension_overrides' to be set in config.json, preferably as a field within config["transformers.js_config"]["device_config"]["${Ye}"]. When 'free_dimension_overrides' is not set, you may experience significant performance degradation.`);const nr=L.apis.IS_NODE_ENV&&L.env.useFSCache,yr=(0,E.getModelFile)(_,at,!0,ue,nr),Xr=ue.use_external_data_format??Qe.use_external_data_format;let Zr=[];if(Xr){let It;typeof Xr=="object"?Xr.hasOwnProperty(Ht)?It=Xr[Ht]:Xr.hasOwnProperty(R)?It=Xr[R]:It=!1:It=Xr;const Dr=+It;if(Dr>E.MAX_EXTERNAL_DATA_CHUNKS)throw new Error(`The number of external data chunks (${Dr}) exceeds the maximum allowed value (${E.MAX_EXTERNAL_DATA_CHUNKS}).`);for(let us=0;us<Dr;++us){const mi=`${Ht}_data${us===0?"":"_"+us}`,Ls=`${ue.subfolder??""}/${mi}`;Zr.push(new Promise(async(Ea,Zi)=>{const Ji=await(0,E.getModelFile)(_,Ls,!0,ue,nr);Ea(Ji instanceof Uint8Array?{path:mi,data:Ji}:mi)}))}}else qA.externalData!==void 0&&(Zr=qA.externalData.map(async It=>{if(typeof It.data=="string"){const Dr=await(0,E.getModelFile)(_,It.data,!0,ue);return{...It,data:Dr}}return It}));if(Zr.length>0){const It=await Promise.all(Zr);L.apis.IS_NODE_ENV||(qA.externalData=It)}if(Ye==="webgpu"){const It=(0,u.getKeyValueShapes)(ue.config,{prefix:"present"});if(Object.keys(It).length>0&&!(0,m.isONNXProxy)()){const Dr={};for(const us in It)Dr[us]="gpu-buffer";qA.preferredOutputLocation=Dr}}return{buffer_or_path:await yr,session_options:qA,session_config:st}}async function ee(_,R,ue){return Object.fromEntries(await Promise.all(Object.keys(R).map(async Qe=>{const{buffer_or_path:je,session_options:Ye,session_config:sA}=await y(_,R[Qe],ue),pA=await(0,m.createInferenceSession)(je,Ye,sA);return[Qe,pA]})))}async function T(_,R,ue){return Object.fromEntries(await Promise.all(Object.keys(R).map(async Qe=>{const je=await(0,E.getModelJSON)(_,R[Qe],!1,ue);return[Qe,je]})))}function O(_,R){const ue=Object.create(null),Qe=[];for(const sA of _.inputNames){const pA=R[sA];if(!(pA instanceof x.Tensor)){Qe.push(sA);continue}ue[sA]=(0,m.isONNXProxy)()?pA.clone():pA}if(Qe.length>0)throw new Error(`An error occurred during model execution: "Missing the following inputs: ${Qe.join(", ")}.`);const je=Object.keys(R).length,Ye=_.inputNames.length;if(je>Ye){let sA=Object.keys(R).filter(pA=>!_.inputNames.includes(pA));console.warn(`WARNING: Too many inputs were provided (${je} > ${Ye}). The following inputs will be ignored: "${sA.join(", ")}".`)}return ue}let we=Promise.resolve();async function $(_,R){const ue=O(_,R);try{const Qe=Object.fromEntries(Object.entries(ue).map(([sA,pA])=>[sA,pA.ort_tensor])),je=()=>_.run(Qe),Ye=await(L.apis.IS_BROWSER_ENV||L.apis.IS_WEBWORKER_ENV?we=we.then(je):je());return be(Ye)}catch(Qe){const je=Object.fromEntries(Object.entries(ue).map(([Ye,sA])=>{const pA={type:sA.type,dims:sA.dims,location:sA.location};return pA.location!=="gpu-buffer"&&(pA.data=sA.data),[Ye,pA]}));throw console.error(`An error occurred during model execution: "${Qe}".`),console.error("Inputs given to model:",je),Qe}}function be(_){for(let R in _)(0,m.isONNXTensor)(_[R])?_[R]=new x.Tensor(_[R]):typeof _[R]=="object"&&be(_[R]);return _}function Ce(_){if(_ instanceof x.Tensor)return _;if(_.length===0)throw Error("items must be non-empty");if(Array.isArray(_[0])){if(_.some(R=>R.length!==_[0].length))throw Error("Unable to create tensor, you should probably activate truncation and/or padding with 'padding=True' and/or 'truncation=True' to have batched tensors with the same length.");return new x.Tensor("int64",BigInt64Array.from(_.flat().map(R=>BigInt(R))),[_.length,_[0].length])}else return new x.Tensor("int64",BigInt64Array.from(_.map(R=>BigInt(R))),[1,_.length])}function Ee(_){return new x.Tensor("bool",[_],[1])}async function Be(_,R){let{encoder_outputs:ue,input_ids:Qe,decoder_input_ids:je,...Ye}=R;if(!ue){const pA=(0,w.pick)(R,_.sessions.model.inputNames);ue=(await ve(_,pA)).last_hidden_state}return Ye.input_ids=je,Ye.encoder_hidden_states=ue,_.sessions.decoder_model_merged.inputNames.includes("encoder_attention_mask")&&(Ye.encoder_attention_mask=R.attention_mask),await Fe(_,Ye,!0)}async function ve(_,R){const ue=_.sessions.model,Qe=(0,w.pick)(R,ue.inputNames);if(ue.inputNames.includes("inputs_embeds")&&!Qe.inputs_embeds){if(!R.input_ids)throw new Error("Both `input_ids` and `inputs_embeds` are missing in the model inputs.");Qe.inputs_embeds=await _.encode_text({input_ids:R.input_ids})}if(ue.inputNames.includes("token_type_ids")&&!Qe.token_type_ids){if(!Qe.input_ids)throw new Error("Both `input_ids` and `token_type_ids` are missing in the model inputs.");Qe.token_type_ids=(0,x.zeros_like)(Qe.input_ids)}if(ue.inputNames.includes("pixel_mask")&&!Qe.pixel_mask){if(!Qe.pixel_values)throw new Error("Both `pixel_values` and `pixel_mask` are missing in the model inputs.");const je=Qe.pixel_values.dims;Qe.pixel_mask=(0,x.ones)([je[0],je[2],je[3]])}return await $(ue,Qe)}async function Ne(_,R){const ue=await _.encode(R);return await _.decode(ue)}async function Fe(_,R,ue=!1){const Qe=_.sessions[ue?"decoder_model_merged":"model"],{past_key_values:je,...Ye}=R;if(Qe.inputNames.includes("use_cache_branch")&&(Ye.use_cache_branch=Ee(!!je)),Qe.inputNames.includes("position_ids")&&Ye.attention_mask&&!Ye.position_ids){const pA=["paligemma","gemma3_text","gemma3"].includes(_.config.model_type)?1:0;Ye.position_ids=aA(Ye,je,pA)}_.addPastKeyValues(Ye,je);const sA=(0,w.pick)(Ye,Qe.inputNames);return await $(Qe,sA)}function le({modality_token_id:_,inputs_embeds:R,modality_features:ue,input_ids:Qe,attention_mask:je}){const Ye=Qe.tolist().map(jA=>jA.reduce((dt,Ct,st)=>(Ct==_&&dt.push(st),dt),[])),sA=Ye.reduce((jA,dt)=>jA+dt.length,0),pA=ue.dims[0];if(sA!==pA)throw new Error(`Number of tokens and features do not match: tokens: ${sA}, features ${pA}`);let IA=0;for(let jA=0;jA<Ye.length;++jA){const dt=Ye[jA],Ct=R[jA];for(let st=0;st<dt.length;++st)Ct[dt[st]].data.set(ue[IA++].data)}return{inputs_embeds:R,attention_mask:je}}function Ae({image_token_id:_,inputs_embeds:R,image_features:ue,input_ids:Qe,attention_mask:je}){return le({modality_token_id:_,inputs_embeds:R,modality_features:ue,input_ids:Qe,attention_mask:je})}function pe({audio_token_id:_,inputs_embeds:R,audio_features:ue,input_ids:Qe,attention_mask:je}){return le({modality_token_id:_,inputs_embeds:R,modality_features:ue,input_ids:Qe,attention_mask:je})}async function oe(_,{encode_function:R,merge_function:ue,modality_input_name:Qe,modality_output_name:je,input_ids:Ye=null,attention_mask:sA=null,position_ids:pA=null,inputs_embeds:IA=null,past_key_values:jA=null,generation_config:dt=null,logits_processor:Ct=null,...st}){const et=st[Qe];if(!IA){if(IA=await _.encode_text({input_ids:Ye,...st}),et&&Ye.dims[1]!==1){const at=await R({[Qe]:et,...st});({inputs_embeds:IA,attention_mask:sA}=ue({[je]:at,inputs_embeds:IA,input_ids:Ye,attention_mask:sA}))}else if(jA&&et&&Ye.dims[1]===1){const at=Ye.dims[1],qA=Object.values(jA)[0].dims.at(-2);sA=(0,x.cat)([(0,x.ones)([Ye.dims[0],qA]),sA.slice(null,[sA.dims[1]-at,sA.dims[1]])],1)}}if(!pA&&_.config.model_type==="qwen2_vl"){const{image_grid_thw:at,video_grid_thw:qA}=st;[pA]=_.get_rope_index(Ye,at,qA,sA)}return await Fe(_,{inputs_embeds:IA,past_key_values:jA,attention_mask:sA,position_ids:pA,generation_config:dt,logits_processor:Ct},!0)}async function Ge(_,R){return await oe(_,{...R,modality_input_name:"audio_values",modality_output_name:"audio_features",encode_function:_.encode_audio.bind(_),merge_function:_._merge_input_ids_with_audio_features.bind(_)})}async function nA(_,R){return await oe(_,{...R,modality_input_name:"pixel_values",modality_output_name:"image_features",encode_function:_.encode_image.bind(_),merge_function:_._merge_input_ids_with_image_features.bind(_)})}function Je(_,R=0){const[ue,Qe]=_.dims,je=_.data,Ye=new BigInt64Array(je.length);for(let sA=0;sA<ue;++sA){const pA=sA*Qe;let IA=BigInt(R);for(let jA=0;jA<Qe;++jA){const dt=pA+jA;je[dt]===0n?Ye[dt]=BigInt(1):(Ye[dt]=IA,IA+=je[dt])}}return{data:Ye,dims:_.dims}}function aA(_,R=null,ue=0){const{input_ids:Qe,inputs_embeds:je,attention_mask:Ye}=_,{data:sA,dims:pA}=Je(Ye,ue);let IA=new x.Tensor("int64",sA,pA);if(R){const jA=-(Qe??je).dims.at(1);IA=IA.slice(null,[jA,null])}return IA}function kA(_,R,ue,Qe){if(ue.past_key_values){const je=Object.values(ue.past_key_values)[0].dims.at(-2),{input_ids:Ye,attention_mask:sA}=ue;if(!(sA&&sA.dims[1]>Ye.dims[1])){if(je<Ye.dims[1])ue.input_ids=Ye.slice(null,[je,null]);else if(_.config.image_token_index!=null&&Ye.data.some(pA=>pA==_.config.image_token_index)){const pA=_.config.num_image_tokens;if(!pA)throw new Error("`num_image_tokens` is missing in the model configuration.");const IA=Ye.dims[1]-(je-pA);ue.input_ids=Ye.slice(null,[-IA,null]),ue.attention_mask=(0,x.ones)([1,je+IA])}}}return ue}function ze(_,R,ue,Qe){return ue.past_key_values&&(R=R.map(je=>[je.at(-1)])),{...ue,decoder_input_ids:Ce(R)}}function de(_,...R){return _.config.is_encoder_decoder?ze(_,...R):kA(_,...R)}function Se(_,R,ue,Qe){const je=!!ue.past_key_values;return Qe.guidance_scale!==null&&Qe.guidance_scale>1&&(je?ue.input_ids=(0,x.cat)([ue.input_ids,ue.input_ids],0):(ue.input_ids=(0,x.cat)([ue.input_ids,(0,x.full_like)(ue.input_ids,BigInt(Qe.pad_token_id))],0),ue.attention_mask=(0,x.cat)([ue.attention_mask,(0,x.full_like)(ue.attention_mask,0n)],0))),(je||!ue.pixel_values)&&(ue.pixel_values=(0,x.full)([0,0,3,384,384],1)),je&&(ue.images_seq_mask=new x.Tensor("bool",new Array(1).fill(!0).fill(!1,0,1),[1,1]),ue.images_emb_mask=new x.Tensor("bool",new Array(0).fill(!1),[1,1,0])),ue}class ge extends C.Callable{main_input_name="input_ids";forward_params=["input_ids","attention_mask"];constructor(R,ue,Qe){super(),this.config=R,this.sessions=ue,this.configs=Qe;const je=d.get(this.constructor),Ye=k.get(je);switch(this.can_generate=!1,this._forward=null,this._prepare_inputs_for_generation=null,Ye){case f.DecoderOnly:this.can_generate=!0,this._forward=Fe,this._prepare_inputs_for_generation=kA;break;case f.Seq2Seq:case f.Vision2Seq:case f.Musicgen:this.can_generate=!0,this._forward=Be,this._prepare_inputs_for_generation=ze;break;case f.EncoderDecoder:this._forward=Be;break;case f.ImageTextToText:this.can_generate=!0,this._forward=nA,this._prepare_inputs_for_generation=de;break;case f.AudioTextToText:this.can_generate=!0,this._forward=Ge,this._prepare_inputs_for_generation=de;break;case f.Phi3V:this.can_generate=!0,this._prepare_inputs_for_generation=de;break;case f.MultiModality:this.can_generate=!0,this._prepare_inputs_for_generation=Se;break;case f.AutoEncoder:this._forward=Ne;break;default:this._forward=ve;break}this.can_generate&&this.forward_params.push("past_key_values"),this.custom_config=this.config["transformers.js_config"]??{}}async dispose(){const R=[];for(const ue of Object.values(this.sessions))ue?.handler?.dispose&&R.push(ue.handler.dispose());return await Promise.all(R)}static async from_pretrained(R,{progress_callback:ue=null,config:Qe=null,cache_dir:je=null,local_files_only:Ye=!1,revision:sA="main",model_file_name:pA=null,subfolder:IA="onnx",device:jA=null,dtype:dt=null,use_external_data_format:Ct=null,session_options:st={}}={}){let et={progress_callback:ue,config:Qe,cache_dir:je,local_files_only:Ye,revision:sA,model_file_name:pA,subfolder:IA,device:jA,dtype:dt,use_external_data_format:Ct,session_options:st};const Ht=d.get(this),at=k.get(Ht);Qe=et.config=await u.AutoConfig.from_pretrained(R,et);let qA;if(at===f.DecoderOnly)qA=await Promise.all([ee(R,{model:et.model_file_name??"model"},et),T(R,{generation_config:"generation_config.json"},et)]);else if(at===f.Seq2Seq||at===f.Vision2Seq)qA=await Promise.all([ee(R,{model:"encoder_model",decoder_model_merged:"decoder_model_merged"},et),T(R,{generation_config:"generation_config.json"},et)]);else if(at===f.MaskGeneration)qA=await Promise.all([ee(R,{model:"vision_encoder",prompt_encoder_mask_decoder:"prompt_encoder_mask_decoder"},et)]);else if(at===f.EncoderDecoder)qA=await Promise.all([ee(R,{model:"encoder_model",decoder_model_merged:"decoder_model_merged"},et)]);else if(at===f.ImageTextToText){const Ft={embed_tokens:"embed_tokens",vision_encoder:"vision_encoder",decoder_model_merged:"decoder_model_merged"};Qe.is_encoder_decoder&&(Ft.model="encoder_model"),qA=await Promise.all([ee(R,Ft,et),T(R,{generation_config:"generation_config.json"},et)])}else if(at===f.AudioTextToText){const Ft={embed_tokens:"embed_tokens",audio_encoder:"audio_encoder",decoder_model_merged:"decoder_model_merged"};qA=await Promise.all([ee(R,Ft,et),T(R,{generation_config:"generation_config.json"},et)])}else if(at===f.Musicgen)qA=await Promise.all([ee(R,{model:"text_encoder",decoder_model_merged:"decoder_model_merged",encodec_decode:"encodec_decode"},et),T(R,{generation_config:"generation_config.json"},et)]);else if(at===f.MultiModality)qA=await Promise.all([ee(R,{prepare_inputs_embeds:"prepare_inputs_embeds",model:"language_model",lm_head:"lm_head",gen_head:"gen_head",gen_img_embeds:"gen_img_embeds",image_decode:"image_decode"},et),T(R,{generation_config:"generation_config.json"},et)]);else if(at===f.Phi3V)qA=await Promise.all([ee(R,{prepare_inputs_embeds:"prepare_inputs_embeds",model:"model",vision_encoder:"vision_encoder"},et),T(R,{generation_config:"generation_config.json"},et)]);else if(at===f.AutoEncoder)qA=await Promise.all([ee(R,{encoder_model:"encoder_model",decoder_model:"decoder_model"},et)]);else{if(at!==f.EncoderOnly){const Ft=Ht??Qe?.model_type;Ft!=="custom"&&console.warn(`Model type for '${Ft}' not found, assuming encoder-only architecture. Please report this at ${B.GITHUB_ISSUE_URL}.`)}qA=await Promise.all([ee(R,{model:et.model_file_name??"model"},et)])}return new this(Qe,...qA)}async _call(R){return await this.forward(R)}async forward(R){return await this._forward(this,R)}get generation_config(){return this.configs?.generation_config??null}_get_logits_warper(R){const ue=new D.LogitsProcessorList;return R.temperature!==null&&R.temperature!==1&&ue.push(new D.TemperatureLogitsWarper(R.temperature)),R.top_k!==null&&R.top_k!==0&&ue.push(new D.TopKLogitsWarper(R.top_k)),R.top_p!==null&&R.top_p<1&&ue.push(new D.TopPLogitsWarper(R.top_p)),ue}_get_logits_processor(R,ue,Qe=null){const je=new D.LogitsProcessorList;if(R.repetition_penalty!==null&&R.repetition_penalty!==1&&je.push(new D.RepetitionPenaltyLogitsProcessor(R.repetition_penalty)),R.no_repeat_ngram_size!==null&&R.no_repeat_ngram_size>0&&je.push(new D.NoRepeatNGramLogitsProcessor(R.no_repeat_ngram_size)),R.bad_words_ids!==null&&je.push(new D.NoBadWordsLogitsProcessor(R.bad_words_ids,R.eos_token_id)),R.min_length!==null&&R.eos_token_id!==null&&R.min_length>0&&je.push(new D.MinLengthLogitsProcessor(R.min_length,R.eos_token_id)),R.min_new_tokens!==null&&R.eos_token_id!==null&&R.min_new_tokens>0&&je.push(new D.MinNewTokensLengthLogitsProcessor(ue,R.min_new_tokens,R.eos_token_id)),R.forced_bos_token_id!==null&&je.push(new D.ForcedBOSTokenLogitsProcessor(R.forced_bos_token_id)),R.forced_eos_token_id!==null&&je.push(new D.ForcedEOSTokenLogitsProcessor(R.max_length,R.forced_eos_token_id)),R.begin_suppress_tokens!==null){const Ye=ue>1||R.forced_bos_token_id===null?ue:ue+1;je.push(new D.SuppressTokensAtBeginLogitsProcessor(R.begin_suppress_tokens,Ye))}return R.guidance_scale!==null&&R.guidance_scale>1&&je.push(new D.ClassifierFreeGuidanceLogitsProcessor(R.guidance_scale)),Qe!==null&&je.extend(Qe),je}_prepare_generation_config(R,ue,Qe=v.GenerationConfig){const je={...this.config};for(const sA of["decoder","generator","text_config"])sA in je&&Object.assign(je,je[sA]);const Ye=new Qe(je);return Object.assign(Ye,this.generation_config??{}),R&&Object.assign(Ye,R),ue&&Object.assign(Ye,(0,w.pick)(ue,Object.getOwnPropertyNames(Ye))),Ye}_get_stopping_criteria(R,ue=null){const Qe=new j.StoppingCriteriaList;return R.max_length!==null&&Qe.push(new j.MaxLengthCriteria(R.max_length,this.config.max_position_embeddings??null)),R.eos_token_id!==null&&Qe.push(new j.EosTokenCriteria(R.eos_token_id)),ue&&Qe.extend(ue),Qe}_validate_model_class(){if(!this.can_generate){const R=[Pl,Gl,Tl,Dl],ue=d.get(this.constructor),Qe=new Set,je=this.config.model_type;for(const sA of R){const pA=sA.get(je);pA&&Qe.add(pA[0])}let Ye=`The current model class (${ue}) is not compatible with \`.generate()\`, as it doesn't have a language model head.`;throw Qe.size>0&&(Ye+=` Please use the following class instead: ${[...Qe].join(", ")}`),Error(Ye)}}prepare_inputs_for_generation(...R){return this._prepare_inputs_for_generation(this,...R)}_update_model_kwargs_for_generation({generated_input_ids:R,outputs:ue,model_inputs:Qe,is_encoder_decoder:je}){return Qe.past_key_values=this.getPastKeyValues(ue,Qe.past_key_values),Qe.input_ids=new x.Tensor("int64",R.flat(),[R.length,1]),je||(Qe.attention_mask=(0,x.cat)([Qe.attention_mask,(0,x.ones)([Qe.attention_mask.dims[0],1])],1)),Qe.position_ids=null,Qe}_prepare_model_inputs({inputs:R,bos_token_id:ue,model_kwargs:Qe}){const je=(0,w.pick)(Qe,this.forward_params),Ye=this.main_input_name;if(Ye in je){if(R)throw new Error("`inputs`: {inputs}` were passed alongside {input_name} which is not allowed. Make sure to either pass {inputs} or {input_name}=...")}else je[Ye]=R;return{inputs_tensor:je[Ye],model_inputs:je,model_input_name:Ye}}async _prepare_encoder_decoder_kwargs_for_generation({inputs_tensor:R,model_inputs:ue,model_input_name:Qe,generation_config:je}){if(this.sessions.model.inputNames.includes("inputs_embeds")&&!ue.inputs_embeds&&"_prepare_inputs_embeds"in this){const{input_ids:sA,pixel_values:pA,attention_mask:IA,...jA}=ue,dt=await this._prepare_inputs_embeds(ue);ue={...jA,...(0,w.pick)(dt,["inputs_embeds","attention_mask"])}}let{last_hidden_state:Ye}=await ve(this,ue);if(je.guidance_scale!==null&&je.guidance_scale>1)Ye=(0,x.cat)([Ye,(0,x.full_like)(Ye,0)],0),"attention_mask"in ue&&(ue.attention_mask=(0,x.cat)([ue.attention_mask,(0,x.zeros_like)(ue.attention_mask)],0));else if(ue.decoder_input_ids){const sA=Ce(ue.decoder_input_ids).dims[0];if(sA!==Ye.dims[0]){if(Ye.dims[0]!==1)throw new Error(`The encoder outputs have a different batch size (${Ye.dims[0]}) than the decoder inputs (${sA}).`);Ye=(0,x.cat)(Array.from({length:sA},()=>Ye),0)}}return ue.encoder_outputs=Ye,ue}_prepare_decoder_input_ids_for_generation({batch_size:R,model_input_name:ue,model_kwargs:Qe,decoder_start_token_id:je,bos_token_id:Ye,generation_config:sA}){let{decoder_input_ids:pA,...IA}=Qe;if(!(pA instanceof x.Tensor)){if(pA)Array.isArray(pA[0])||(pA=Array.from({length:R},()=>pA));else if(je??=Ye,this.config.model_type==="musicgen")pA=Array.from({length:R*this.config.decoder.num_codebooks},()=>[je]);else if(Array.isArray(je)){if(je.length!==R)throw new Error(`\`decoder_start_token_id\` expcted to have length ${R} but got ${je.length}`);pA=je}else pA=Array.from({length:R},()=>[je]);pA=Ce(pA)}return Qe.decoder_attention_mask=(0,x.ones_like)(pA),{input_ids:pA,model_inputs:IA}}async generate({inputs:R=null,generation_config:ue=null,logits_processor:Qe=null,stopping_criteria:je=null,streamer:Ye=null,...sA}){this._validate_model_class(),ue=this._prepare_generation_config(ue,sA);let{inputs_tensor:pA,model_inputs:IA,model_input_name:jA}=this._prepare_model_inputs({inputs:R,model_kwargs:sA});const dt=this.config.is_encoder_decoder;dt&&("encoder_outputs"in IA||(IA=await this._prepare_encoder_decoder_kwargs_for_generation({inputs_tensor:pA,model_inputs:IA,model_input_name:jA,generation_config:ue})));let Ct;dt?{input_ids:Ct,model_inputs:IA}=this._prepare_decoder_input_ids_for_generation({batch_size:IA[jA].dims.at(0),model_input_name:jA,model_kwargs:IA,decoder_start_token_id:ue.decoder_start_token_id,bos_token_id:ue.bos_token_id,generation_config:ue}):Ct=IA[jA];let st=Ct.dims.at(-1);ue.max_new_tokens!==null&&(ue.max_length=st+ue.max_new_tokens);const et=this._get_logits_processor(ue,st,Qe),Ht=this._get_stopping_criteria(ue,je),at=IA[jA].dims.at(0),qA=J.LogitsSampler.getSampler(ue),Ft=new Array(at).fill(0),nr=Ct.tolist();Ye&&Ye.put(nr);let yr,Xr={};for(;;){if(IA=this.prepare_inputs_for_generation(nr,IA,ue),yr=await this.forward(IA),ue.output_attentions&&ue.return_dict_in_generate){const Ls=this.getAttentions(yr);for(const Ea in Ls)Ea in Xr||(Xr[Ea]=[]),Xr[Ea].push(Ls[Ea])}const It=yr.logits.slice(null,-1,null),Dr=et(nr,It),us=[];for(let Ls=0;Ls<Dr.dims.at(0);++Ls){const Ea=Dr[Ls],Zi=await qA(Ea);for(const[Ji,h0]of Zi){const Po=BigInt(Ji);Ft[Ls]+=h0,nr[Ls].push(Po),us.push([Po]);break}}if(Ye&&Ye.put(us),Ht(nr).every(Ls=>Ls))break;IA=this._update_model_kwargs_for_generation({generated_input_ids:us,outputs:yr,model_inputs:IA,is_encoder_decoder:dt})}Ye&&Ye.end();const Zr=this.getPastKeyValues(yr,IA.past_key_values,!0),Rr=new x.Tensor("int64",nr.flat(),[nr.length,nr[0].length]);if(ue.return_dict_in_generate)return{sequences:Rr,past_key_values:Zr,...Xr};for(const It of Object.values(yr))It.location==="gpu-buffer"&&It.dispose();return Rr}getPastKeyValues(R,ue,Qe=!1){const je=Object.create(null);for(const Ye in R)if(Ye.startsWith("present")){const sA=Ye.replace("present","past_key_values"),pA=Ye.includes("encoder");if(pA&&ue?je[sA]=ue[sA]:je[sA]=R[Ye],ue&&(!pA||Qe)){const IA=ue[sA];IA.location==="gpu-buffer"&&IA.dispose()}}return je}getAttentions(R){const ue={};for(const Qe of["cross_attentions","encoder_attentions","decoder_attentions"])for(const je in R)je.startsWith(Qe)&&(Qe in ue||(ue[Qe]=[]),ue[Qe].push(R[je]));return ue}addPastKeyValues(R,ue){if(ue)Object.assign(R,ue);else{const je=(this.sessions.decoder_model_merged??this.sessions.model)?.config?.kv_cache_dtype??"float32",Ye=je==="float16"?new x.DataTypeMap.float16:[],sA=(R[this.main_input_name]??R.attention_mask)?.dims?.[0]??1,pA=(0,u.getKeyValueShapes)(this.config,{batch_size:sA});for(const IA in pA)R[IA]=new x.Tensor(je,Ye,pA[IA])}}async encode_image({pixel_values:R}){const ue=(await $(this.sessions.vision_encoder,{pixel_values:R})).image_features;return this.config.num_image_tokens||(console.warn(`The number of image tokens was not set in the model configuration. Setting it to the number of features detected by the vision encoder (${ue.dims[1]}).`),this.config.num_image_tokens=ue.dims[1]),ue}async encode_text({input_ids:R}){return(await $(this.sessions.embed_tokens,{input_ids:R})).inputs_embeds}async encode_audio({audio_values:R}){return(await $(this.sessions.audio_encoder,{audio_values:R})).audio_features}}class He{}class Xe extends He{constructor({last_hidden_state:R,hidden_states:ue=null,attentions:Qe=null}){super(),this.last_hidden_state=R,this.hidden_states=ue,this.attentions=Qe}}class AA extends ge{}class qe extends AA{}class H extends AA{async _call(R){return new Cs(await super._call(R))}}class cA extends AA{async _call(R){return new ut(await super._call(R))}}class fA extends AA{async _call(R){return new cs(await super._call(R))}}class he extends AA{async _call(R){return new xs(await super._call(R))}}class bA extends ge{}class rA extends bA{}class EA extends bA{async _call(R){return new Cs(await super._call(R))}}class PA extends bA{async _call(R){return new ut(await super._call(R))}}class wA extends bA{async _call(R){return new cs(await super._call(R))}}class ZA extends ge{}class TA extends ZA{}class tA extends ge{}class OA extends tA{}class ot extends tA{async _call(R){return new Cs(await super._call(R))}}class $A extends tA{async _call(R){return new ut(await super._call(R))}}class tt extends tA{async _call(R){return new cs(await super._call(R))}}class Lt extends tA{async _call(R){return new xs(await super._call(R))}}class Wr extends ge{}class VA extends Wr{}class Ts extends Wr{async _call(R){return new Cs(await super._call(R))}}class re extends Wr{async _call(R){return new ut(await super._call(R))}}class De extends Wr{async _call(R){return new cs(await super._call(R))}}class ie extends Wr{async _call(R){return new xs(await super._call(R))}}class xe extends ge{}class Re extends xe{}class oA extends xe{async _call(R){return new Cs(await super._call(R))}}class Le extends xe{async _call(R){return new ut(await super._call(R))}}class LA extends xe{async _call(R){return new cs(await super._call(R))}}class QA extends xe{async _call(R){return new xs(await super._call(R))}}class SA extends ge{}class tr extends SA{}class bt extends SA{async _call(R){return new Cs(await super._call(R))}}class or extends SA{async _call(R){return new ut(await super._call(R))}}class _t extends SA{async _call(R){return new cs(await super._call(R))}}class Rt extends SA{async _call(R){return new xs(await super._call(R))}}class zA extends ge{}class rr extends zA{}class Ps extends zA{async _call(R){return new Cs(await super._call(R))}}class Rs extends zA{async _call(R){return new ut(await super._call(R))}}class Is extends zA{async _call(R){return new cs(await super._call(R))}}class ea extends zA{async _call(R){return new xs(await super._call(R))}}class fs extends ge{}class ws extends fs{}class ks extends fs{async _call(R){return new Cs(await super._call(R))}}class Gs extends fs{async _call(R){return new ut(await super._call(R))}}class Jr extends fs{async _call(R){return new cs(await super._call(R))}}class oa extends fs{async _call(R){return new xs(await super._call(R))}}class Tt extends ge{}class Qs extends Tt{}class Fs extends Tt{async _call(R){return new ut(await super._call(R))}}class qr extends Tt{async _call(R){return new cs(await super._call(R))}}class Lr extends Tt{async _call(R){return new xs(await super._call(R))}}class uA extends Tt{async _call(R){return new Cs(await super._call(R))}}class gA extends ge{}class WA extends gA{}class Mr extends gA{async _call(R){return new Cs(await super._call(R))}}class gs extends gA{async _call(R){return new ut(await super._call(R))}}class js extends gA{async _call(R){return new cs(await super._call(R))}}class pr extends ge{}class Gr extends pr{}class Ws extends pr{async _call(R){return new Cs(await super._call(R))}}class rt extends pr{async _call(R){return new ut(await super._call(R))}}class is extends pr{async _call(R){return new xs(await super._call(R))}}class $r extends ge{}class Sa extends $r{}class Ca extends $r{async _call(R){return new Cs(await super._call(R))}}class Oa extends $r{async _call(R){return new ut(await super._call(R))}}class Ss extends $r{async _call(R){return new cs(await super._call(R))}}class Ys extends $r{async _call(R){return new xs(await super._call(R))}}class Aa extends ge{}class za extends Aa{}class Na extends Aa{async _call(R){return new Cs(await super._call(R))}}class La extends Aa{async _call(R){return new ut(await super._call(R))}}class _a extends Aa{async _call(R){return new xs(await super._call(R))}}class Vs extends ge{}class Oe extends Vs{}class K extends Vs{async _call(R){return new ut(await super._call(R))}}class fe extends Vs{async _call(R){return new xs(await super._call(R))}}class Me extends Vs{async _call(R){return new Cs(await super._call(R))}}class Ie extends ge{forward_params=["input_ids","attention_mask","encoder_outputs","decoder_input_ids","decoder_attention_mask","past_key_values"]}class We extends Ie{}class eA extends Ie{}class vA extends ge{}class xA extends vA{}class BA extends vA{}class Ve extends ge{}class gt extends Ve{}class nt extends Ve{}class jt extends ge{}class Qr extends jt{}class lr extends jt{}class vr extends jt{async _call(R){return new ut(await super._call(R))}}class kt extends ge{}class Jt extends kt{}class os extends kt{}class br extends kt{async _call(R){return new ut(await super._call(R))}}class _r extends kt{}class Wt extends ge{}class Ir extends Wt{}class wr extends Wt{}class Pt extends ge{}class cr extends Pt{}class Yr extends Pt{}class ur extends ge{}class kr extends ur{}class sr extends ur{async _call(R){return new Cs(await super._call(R))}}class qt extends ur{async _call(R){return new ut(await super._call(R))}}class _A extends ur{async _call(R){return new cs(await super._call(R))}}class Gt extends ur{async _call(R){return new xs(await super._call(R))}}class Vr extends ge{}class $a extends Vr{}class $n extends Vr{async _call(R){return new Cs(await super._call(R))}}class vn extends Vr{async _call(R){return new ut(await super._call(R))}}class ei extends Vr{async _call(R){return new cs(await super._call(R))}}class ba extends Vr{async _call(R){return new xs(await super._call(R))}}class la extends ge{}class Ai extends la{}class en extends la{async _call(R){return new Cs(await super._call(R))}}class Ra extends la{async _call(R){return new ut(await super._call(R))}}class Br extends la{async _call(R){return new cs(await super._call(R))}}class yA extends la{async _call(R){return new xs(await super._call(R))}}class es extends ge{}class Bn extends es{}class An extends es{}class xn extends ge{requires_attention_mask=!1;main_input_name="input_features";forward_params=["input_features","attention_mask","decoder_input_ids","decoder_attention_mask","past_key_values"]}class yn extends xn{}class tn extends xn{_prepare_generation_config(R,ue){return super._prepare_generation_config(R,ue,N.WhisperGenerationConfig)}_retrieve_init_tokens(R){const ue=[R.decoder_start_token_id];let Qe=R.language;const je=R.task;if(R.is_multilingual){Qe||(console.warn("No language specified - defaulting to English (en)."),Qe="en");const sA=`<|${(0,U.whisper_language_to_code)(Qe)}|>`;ue.push(R.lang_to_id[sA]),ue.push(R.task_to_id[je??"transcribe"])}else if(Qe||je)throw new Error("Cannot specify `task` or `language` for an English-only model. If the model is intended to be multilingual, pass `is_multilingual=true` to generate, or update the generation config.");return!R.return_timestamps&&R.no_timestamps_token_id&&ue.at(-1)!==R.no_timestamps_token_id?ue.push(R.no_timestamps_token_id):R.return_timestamps&&ue.at(-1)===R.no_timestamps_token_id&&(console.warn("<|notimestamps|> prompt token is removed from generation_config since `return_timestamps` is set to `true`."),ue.pop()),ue.filter(Ye=>Ye!=null)}async generate({inputs:R=null,generation_config:ue=null,logits_processor:Qe=null,stopping_criteria:je=null,...Ye}){ue=this._prepare_generation_config(ue,Ye);const sA=Ye.decoder_input_ids??this._retrieve_init_tokens(ue);if(ue.return_timestamps&&(Qe??=new D.LogitsProcessorList,Qe.push(new D.WhisperTimeStampLogitsProcessor(ue,sA))),ue.begin_suppress_tokens&&(Qe??=new D.LogitsProcessorList,Qe.push(new D.SuppressTokensAtBeginLogitsProcessor(ue.begin_suppress_tokens,sA.length))),ue.return_token_timestamps){if(!ue.alignment_heads)throw new Error("Model generation config has no `alignment_heads`, token-level timestamps not available. See https://gist.github.com/hollance/42e32852f24243b748ae6bc1f985b13a on how to add this property to the generation config.");ue.task==="translate"&&console.warn("Token-level timestamps may not be reliable for task 'translate'."),ue.output_attentions=!0,ue.return_dict_in_generate=!0}const pA=await super.generate({inputs:R,generation_config:ue,logits_processor:Qe,decoder_input_ids:sA,...Ye});return ue.return_token_timestamps&&(pA.token_timestamps=this._extract_token_timestamps(pA,ue.alignment_heads,ue.num_frames)),pA}_extract_token_timestamps(R,ue,Qe=null,je=.02){if(!R.cross_attentions)throw new Error("Model outputs must contain cross attentions to extract timestamps. This is most likely because the model was not exported with `output_attentions=True`.");Qe==null&&console.warn("`num_frames` has not been set, meaning the entire audio will be analyzed. This may lead to inaccurate token-level timestamps for short audios (< 30 seconds).");let Ye=this.config.median_filter_width;Ye===void 0&&(console.warn("Model config has no `median_filter_width`, using default value of 7."),Ye=7);const sA=R.cross_attentions,pA=Array.from({length:this.config.decoder_layers},(at,qA)=>(0,x.cat)(sA.map(Ft=>Ft[qA]),2)),IA=(0,x.stack)(ue.map(([at,qA])=>{if(at>=pA.length)throw new Error(`Layer index ${at} is out of bounds for cross attentions (length ${pA.length}).`);return Qe?pA[at].slice(null,qA,null,[0,Qe]):pA[at].slice(null,qA)})).transpose(1,0,2,3),[jA,dt]=(0,x.std_mean)(IA,-2,0,!0),Ct=IA.clone();for(let at=0;at<Ct.dims[0];++at){const qA=Ct[at];for(let Ft=0;Ft<qA.dims[0];++Ft){const nr=qA[Ft],yr=jA[at][Ft][0].data,Xr=dt[at][Ft][0].data;for(let Zr=0;Zr<nr.dims[0];++Zr){let Rr=nr[Zr].data;for(let It=0;It<Rr.length;++It)Rr[It]=(Rr[It]-Xr[It])/yr[It];Rr.set((0,F.medianFilter)(Rr,Ye))}}}const st=[(0,x.mean)(Ct,1)],et=R.sequences.dims,Ht=new x.Tensor("float32",new Float32Array(et[0]*et[1]),et);for(let at=0;at<et[0];++at){const qA=st[at].neg().squeeze_(0),[Ft,nr]=(0,F.dynamic_time_warping)(qA.tolist()),yr=Array.from({length:Ft.length-1},(Rr,It)=>Ft[It+1]-Ft[It]),Xr=(0,w.mergeArrays)([1],yr).map(Rr=>!!Rr),Zr=[];for(let Rr=0;Rr<Xr.length;++Rr)Xr[Rr]&&Zr.push(nr[Rr]*je);Ht[at].data.set(Zr,1)}return Ht}}class Dn extends tn{}class Tn extends ge{requires_attention_mask=!1;main_input_name="input_values";forward_params=["input_values","decoder_input_ids","past_key_values"]}class rn extends Tn{}class Bt extends Tn{}class ja extends ge{main_input_name="pixel_values";forward_params=["pixel_values","decoder_input_ids","encoder_hidden_states","past_key_values"]}class Ia extends ge{forward_params=["input_ids","attention_mask","pixel_values","position_ids","past_key_values"]}class Hs extends Ia{_merge_input_ids_with_image_features({inputs_embeds:R,image_features:ue,input_ids:Qe,attention_mask:je}){const Ye=this.config.image_token_index,pA=Qe.tolist().map(st=>st.findIndex(et=>et==Ye)),IA=pA.every(st=>st===-1),jA=pA.every(st=>st!==-1);if(!IA&&!jA)throw new Error("Every input should contain either 0 or 1 image token.");if(IA)return{inputs_embeds:R,attention_mask:je};const dt=[],Ct=[];for(let st=0;st<pA.length;++st){const et=pA[st],Ht=R[st],at=ue[st],qA=je[st];dt.push((0,x.cat)([Ht.slice([0,et]),at,Ht.slice([et+1,Ht.dims[0]])],0)),Ct.push((0,x.cat)([qA.slice([0,et]),(0,x.ones)([at.dims[0]]),qA.slice([et+1,qA.dims[0]])],0))}return{inputs_embeds:(0,x.stack)(dt,0),attention_mask:(0,x.stack)(Ct,0)}}}class ta extends Hs{}class Os extends Hs{}class Pn extends ge{forward_params=["input_ids","inputs_embeds","attention_mask","pixel_values","encoder_outputs","decoder_input_ids","decoder_inputs_embeds","decoder_attention_mask","past_key_values"];main_input_name="inputs_embeds"}class Gn extends Pn{_merge_input_ids_with_image_features({inputs_embeds:R,image_features:ue,input_ids:Qe,attention_mask:je}){return{inputs_embeds:(0,x.cat)([ue,R],1),attention_mask:(0,x.cat)([(0,x.ones)(ue.dims.slice(0,2)),je],1)}}async _prepare_inputs_embeds({input_ids:R,pixel_values:ue,inputs_embeds:Qe,attention_mask:je}){if(!R&&!ue)throw new Error("Either `input_ids` or `pixel_values` should be provided.");let Ye,sA;return R&&(Ye=await this.encode_text({input_ids:R})),ue&&(sA=await this.encode_image({pixel_values:ue})),Ye&&sA?{inputs_embeds:Qe,attention_mask:je}=this._merge_input_ids_with_image_features({inputs_embeds:Ye,image_features:sA,input_ids:R,attention_mask:je}):Qe=Ye||sA,{inputs_embeds:Qe,attention_mask:je}}async forward({input_ids:R,pixel_values:ue,attention_mask:Qe,decoder_input_ids:je,decoder_attention_mask:Ye,encoder_outputs:sA,past_key_values:pA,inputs_embeds:IA,decoder_inputs_embeds:jA}){if(IA||({inputs_embeds:IA,attention_mask:Qe}=await this._prepare_inputs_embeds({input_ids:R,pixel_values:ue,inputs_embeds:IA,attention_mask:Qe})),!sA){let{last_hidden_state:st}=await ve(this,{inputs_embeds:IA,attention_mask:Qe});sA=st}if(!jA){if(!je)throw new Error("Either `decoder_input_ids` or `decoder_inputs_embeds` should be provided.");jA=await this.encode_text({input_ids:je})}return await Fe(this,{inputs_embeds:jA,attention_mask:Ye,encoder_attention_mask:Qe,encoder_hidden_states:sA,past_key_values:pA},!0)}}class Us extends ge{forward_params=["input_ids","attention_mask","pixel_values","position_ids","past_key_values"]}class sn extends Us{_merge_input_ids_with_image_features(R){const ue=R.image_features.dims.at(-1),Qe=R.image_features.view(-1,ue);return Ae({image_token_id:this.config.image_token_index,...R,image_features:Qe})}}class ti extends ge{forward_params=["input_ids","attention_mask","pixel_values","pixel_attention_mask","position_ids","past_key_values"]}class Wa extends ti{async encode_image({pixel_values:R,pixel_attention_mask:ue}){return(await $(this.sessions.vision_encoder,{pixel_values:R,pixel_attention_mask:ue})).image_features}_merge_input_ids_with_image_features(R){const ue=R.image_features.dims.at(-1),Qe=R.image_features.view(-1,ue);return Ae({image_token_id:this.config.image_token_id,...R,image_features:Qe})}}class iA extends Wa{}class ri extends ge{forward_params=["input_ids","inputs_embeds","attention_mask","position_ids","pixel_values","image_sizes","past_key_values"]}class DA extends ri{async forward({input_ids:R=null,attention_mask:ue=null,pixel_values:Qe=null,image_sizes:je=null,position_ids:Ye=null,inputs_embeds:sA=null,past_key_values:pA=null,generation_config:IA=null,logits_processor:jA=null,...dt}){if(!sA){let st;if(Qe&&R.dims[1]!==1){if(!je)throw new Error("`image_sizes` must be provided when `pixel_values` is provided.");({image_features:st}=await $(this.sessions.vision_encoder,{pixel_values:Qe,image_sizes:je}))}else{const et=this.config.normalized_config.hidden_size;st=new x.Tensor("float32",[],[0,et])}({inputs_embeds:sA}=await $(this.sessions.prepare_inputs_embeds,{input_ids:R,image_features:st}))}return await Fe(this,{inputs_embeds:sA,past_key_values:pA,attention_mask:ue,position_ids:Ye,generation_config:IA,logits_processor:jA},!1)}}class Ks extends ge{}class an extends Ks{}class Hr extends Ks{static async from_pretrained(R,ue={}){return super.from_pretrained(R,{...ue,model_file_name:ue.model_file_name??"text_model"})}}class ls extends Ks{static async from_pretrained(R,ue={}){return super.from_pretrained(R,{...ue,model_file_name:ue.model_file_name??"text_model"})}}class ca extends Ks{static async from_pretrained(R,ue={}){return super.from_pretrained(R,{...ue,model_file_name:ue.model_file_name??"vision_model"})}}class Xs extends Ks{static async from_pretrained(R,ue={}){return super.from_pretrained(R,{...ue,model_file_name:ue.model_file_name??"vision_model"})}}class Ya extends ge{}class dr extends Ya{}class si extends Ya{static async from_pretrained(R,ue={}){return super.from_pretrained(R,{...ue,model_file_name:ue.model_file_name??"text_model"})}}class nn extends Ks{static async from_pretrained(R,ue={}){return super.from_pretrained(R,{...ue,model_file_name:ue.model_file_name??"vision_model"})}}class ua extends ge{}class da extends ua{}class Va extends ge{}class on extends Va{async forward(R){const ue=!R.input_ids,Qe=!R.pixel_values;if(ue&&Qe)throw new Error("Either `input_ids` or `pixel_values` should be provided.");if(ue&&(R.input_ids=(0,x.ones)([R.pixel_values.dims[0],1])),Qe){const{image_size:jA}=this.config.vision_config;R.pixel_values=(0,x.full)([0,3,jA,jA],0)}const{text_embeddings:je,image_embeddings:Ye,l2norm_text_embeddings:sA,l2norm_image_embeddings:pA}=await super.forward(R),IA={};return ue||(IA.text_embeddings=je,IA.l2norm_text_embeddings=sA),Qe||(IA.image_embeddings=Ye,IA.l2norm_image_embeddings=pA),IA}}class wa extends Va{static async from_pretrained(R,ue={}){return super.from_pretrained(R,{...ue,model_file_name:ue.model_file_name??"text_model"})}}class CA extends Va{static async from_pretrained(R,ue={}){return super.from_pretrained(R,{...ue,model_file_name:ue.model_file_name??"vision_model"})}}class ps extends ge{}class ai extends ps{}class ni extends ps{}class fa extends ge{}class Zs extends fa{}class UA extends fa{}class Qn extends ge{}class Fn extends Qn{}class ln extends Qn{}class ka extends ge{}class Es extends ka{}class ar extends ka{}class Ha extends ge{}class Sn extends Ha{}class At extends Ha{}class Ms extends ge{}class Ua extends Ms{}class zs extends Ms{}class cn extends ge{}class xr extends cn{}class vs extends cn{}class mr extends ge{}class Bs extends mr{}class un extends mr{}class Ka extends ge{}class On extends Ka{}class dn extends Ka{}class Ut extends ge{}class G extends Ut{}class W extends Ut{}class Z extends ge{}class se extends Z{}class ce extends Z{}class Te extends ge{}class Ze extends Te{}class dA extends Te{}class MA extends ge{}class FA extends MA{}class lt extends MA{}class Et extends ge{}class yt extends Et{}class Fr extends Et{}class As extends ge{}class fn extends As{}class Sr extends As{}class ii extends ge{}class oi extends ii{}class li extends ii{}class ms extends ge{}class ci extends ms{}class po extends ms{}class Js extends ge{}class mo extends Js{}class Si extends Js{}class ui extends ge{}class gn extends ui{}class ho extends ui{}class Oi extends ge{}class Co extends Oi{}class ts extends Oi{}class pn extends ge{}class rs extends pn{}class zi extends pn{}class zn extends ge{}class bo extends zn{}class Kt extends zn{}class di extends ge{}class Xa extends di{}class mn extends di{}class Io extends ge{forward_params=["input_ids","attention_mask","position_ids","past_key_values","pixel_values","image_grid_thw"]}class wo extends Io{get_rope_index(R,ue,Qe,je){const{vision_config:Ye,image_token_id:sA,video_token_id:pA,vision_start_token_id:IA}=this.config,jA=Ye.spatial_merge_size??2,dt=[];if(ue||Qe){let Ct=R.tolist();je||(je=(0,x.ones_like)(R));const st=je.tolist(),et=Array.from({length:3},nr=>Array.from({length:R.dims[0]},yr=>Array.from({length:R.dims[1]},Xr=>1))),Ht=ue?ue.tolist():[],at=Qe?Qe.tolist():[];let qA=0,Ft=0;for(let nr=0;nr<Ct.length;++nr){const yr=Ct[nr].filter((hr,ns)=>st[nr][ns]==1),Zr=yr.reduce((hr,ns,Vn)=>(ns==IA&&hr.push(Vn),hr),[]).map(hr=>yr[hr+1]),Rr=Zr.filter(hr=>hr==sA).length,It=Zr.filter(hr=>hr==pA).length;let Dr=[],us=0,mi=Rr,Ls=It;for(let hr=0;hr<Zr.length;++hr){const ns=yr.findIndex((Ci,Ma)=>Ma>us&&Ci==sA),Vn=yr.findIndex((Ci,Ma)=>Ma>us&&Ci==pA),hi=mi>0&&ns!==-1?ns:yr.length+1,qi=Ls>0&&Vn!==-1?Vn:yr.length+1;let C0,Ql,Fl,Sl;hi<qi?([Ql,Fl,Sl]=Ht[qA],++qA,--mi,C0=hi):([Ql,Fl,Sl]=at[Ft],++Ft,--Ls,C0=qi);const[W8,Ol,b0]=[Number(Ql),Math.floor(Number(Fl)/jA),Math.floor(Number(Sl)/jA)],zl=C0-us,Zd=Dr.length>0?(0,F.max)(Dr.at(-1))[0]+1:0;Dr.push(Array.from({length:3*zl},(Ci,Ma)=>Zd+Ma%zl));const Nl=zl+Zd,I0=W8*Ol*b0,Y8=Array.from({length:I0},(Ci,Ma)=>Nl+Math.floor(Ma/(Ol*b0))),V8=Array.from({length:I0},(Ci,Ma)=>Nl+Math.floor(Ma/b0)%Ol),H8=Array.from({length:I0},(Ci,Ma)=>Nl+Ma%b0);Dr.push([Y8,V8,H8].flat()),us=C0+I0}if(us<yr.length){const hr=Dr.length>0?(0,F.max)(Dr.at(-1))[0]+1:0,ns=yr.length-us;Dr.push(Array.from({length:3*ns},(Vn,hi)=>hr+hi%ns))}const Ea=Dr.reduce((hr,ns)=>hr+ns.length,0),Zi=new Array(Ea);let Ji=0;for(let hr=0;hr<3;++hr)for(let ns=0;ns<Dr.length;++ns){const Vn=Dr[ns],hi=Vn.length/3;for(let qi=hr*hi;qi<(hr+1)*hi;++qi)Zi[Ji++]=Vn[qi]}let h0=0;const Po=st[nr];for(let hr=0;hr<Po.length;++hr)if(Po[hr]==1){for(let ns=0;ns<3;++ns)et[ns][nr][hr]=Zi[ns*Ea/3+h0];++h0}const j8=(0,F.max)(Zi)[0];dt.push(j8+1-Ct[nr].length)}return[new x.Tensor("int64",et.flat(1/0),[3,R.dims[0],R.dims[1]]),new x.Tensor("int64",dt,[dt.length,1])]}else if(je){const{data:Ct,dims:st}=Je(je),et=BigInt64Array.from({length:3*Ct.length},(at,qA)=>Ct[qA%Ct.length]),Ht=Array.from({length:st[0]},(at,qA)=>(0,F.max)(Ct.subarray(st[1]*qA,st[1]*(qA+1)))[0]+1n+BigInt(st[1]));return[new x.Tensor("int64",et,[3,...st]),new x.Tensor("int64",Ht,[Ht.length,1])]}else{const[Ct,st]=R.dims,et=BigInt64Array.from({length:3*Ct*st},(Ht,at)=>BigInt(Math.floor(at%st/Ct)));return[new x.Tensor("int64",et,[3,...R.dims]),(0,x.zeros)([Ct,1])]}}async encode_image({pixel_values:R,image_grid_thw:ue}){return(await $(this.sessions.vision_encoder,{pixel_values:R,grid_thw:ue})).image_features}_merge_input_ids_with_image_features(R){return Ae({image_token_id:this.config.image_token_id,...R})}prepare_inputs_for_generation(R,ue,Qe){if(ue.attention_mask&&!ue.position_ids)if(!ue.past_key_values)[ue.position_ids,ue.rope_deltas]=this.get_rope_index(ue.input_ids,ue.image_grid_thw,ue.video_grid_thw,ue.attention_mask);else{ue.pixel_values=null;const je=BigInt(Object.values(ue.past_key_values)[0].dims.at(-2)),Ye=ue.rope_deltas.map(sA=>je+sA);ue.position_ids=(0,x.stack)([Ye,Ye,Ye],0)}return ue}}class fi extends ge{}class ko extends fi{}class Za extends fi{}class Ns extends ge{}class Ni extends Ns{}class gi extends Ns{}class Or extends ge{}class Qt extends Or{}class Nn extends Or{}class Li extends ge{}class _i extends Li{}class Eo extends Li{}class Ri extends ge{}class Mo extends Ri{}class ji extends Ri{}class Wi extends ge{}class vo extends Wi{}class Yi extends Wi{async _call(R){return new ut(await super._call(R))}}class Ln extends ge{}class Ur extends Ln{}class Vi extends Ln{async _call(R){return new ut(await super._call(R))}}class Bo extends ge{}class hn extends Bo{}class Hi extends ge{}class _n extends Hi{}class KA extends Hi{async _call(R){return new ut(await super._call(R))}}class A extends ge{}class t extends A{}class r extends ge{}class s extends r{}class i extends r{async _call(R){return new ut(await super._call(R))}}class l extends ge{}class c extends l{}class g extends ge{}class p extends g{}class I extends g{async _call(R){return new ut(await super._call(R))}}class h extends ge{}class M extends h{async _call(R){return new Kd(await super._call(R))}}class P extends ge{}class z extends P{}class Y extends P{async _call(R){return new ut(await super._call(R))}}class V extends ge{}class X extends V{}class te extends V{async _call(R){return new ut(await super._call(R))}}class ne extends ge{}class me extends ne{}class ke extends ne{}class ye extends ge{}class Pe extends ye{}class _e extends ye{}class Ke extends ge{}class lA extends Ke{}class mA extends Ke{async _call(R){return new ut(await super._call(R))}}class GA extends ge{}class NA extends GA{}class JA extends GA{async _call(R){return new Mt(await super._call(R))}}class pt extends GA{async _call(R){return new Dt(await super._call(R))}}class Mt extends He{constructor({logits:R,pred_boxes:ue}){super(),this.logits=R,this.pred_boxes=ue}}class Dt extends He{constructor({logits:R,pred_boxes:ue,pred_masks:Qe}){super(),this.logits=R,this.pred_boxes=ue,this.pred_masks=Qe}}class Yt extends ge{}class $t extends Yt{}class fr extends Yt{async _call(R){return new er(await super._call(R))}}class er extends He{constructor({logits:R,pred_boxes:ue}){super(),this.logits=R,this.pred_boxes=ue}}class Er extends ge{}class zr extends Er{}class Kr extends Er{async _call(R){return new ss(await super._call(R))}}class ss extends er{}class as extends ge{}class hs extends as{}class ra extends as{async _call(R){return new sa(await super._call(R))}}class sa extends er{}class qs extends ge{}class Cn extends qs{}class Rn extends qs{async _call(R){return new er(await super._call(R))}}class Ja extends ge{}class jn extends Ja{}class Wn extends Ja{async _call(R){return new xo(await super._call(R))}}class xo extends Mt{}class Ui extends ge{}class yo extends Ui{}class Do extends Ui{async _call(R){return new ut(await super._call(R))}}class al extends ge{}class Kc extends al{}class Xc extends al{async _call(R){return new ut(await super._call(R))}}class nl extends ge{}class Zc extends nl{}class Jc extends nl{async _call(R){return new ut(await super._call(R))}}class r0 extends ge{}class qc extends r0{}class $c extends r0{async _call(R){return new ut(await super._call(R))}}class e1 extends r0{}class il extends ge{}class A1 extends il{}class t1 extends il{}class ol extends ge{}class r1 extends ol{}class s1 extends ol{}class a1 extends ge{}class n1 extends a1{}class s0 extends ge{}class i1 extends s0{}class o1 extends s0{}class l1 extends s0{}class c1 extends ge{}class u1 extends c1{}class d1 extends ge{}class f1 extends d1{}class g1 extends ge{}class p1 extends g1{}class ll extends ge{}class m1 extends ll{}class h1 extends ll{}class cl extends ge{}class C1 extends cl{}class b1 extends cl{}class I1 extends ge{}class w1 extends I1{}class ul extends ge{}class k1 extends ul{}class E1 extends ul{async _call(R){return new ut(await super._call(R))}}class dl extends ge{}class M1 extends dl{}class v1 extends dl{async _call(R){return new ut(await super._call(R))}}class fl extends ge{}class B1 extends fl{}class x1 extends fl{async _call(R){return new ut(await super._call(R))}}class gl extends ge{}class y1 extends gl{}class D1 extends gl{async _call(R){return new ut(await super._call(R))}}class T1 extends ge{}class P1 extends T1{}class pl extends ge{}class G1 extends pl{}class Q1 extends pl{async _call(R){return new F1(await super._call(R))}}class F1 extends He{constructor({logits:R,pred_boxes:ue}){super(),this.logits=R,this.pred_boxes=ue}}class S1 extends ge{}class O1 extends S1{async get_image_embeddings({pixel_values:R}){return await ve(this,{pixel_values:R})}async forward(R){if((!R.image_embeddings||!R.image_positional_embeddings)&&(R={...R,...await this.get_image_embeddings(R)}),!R.input_labels&&R.input_points){const Qe=R.input_points.dims.slice(0,-1),je=Qe.reduce((Ye,sA)=>Ye*sA,1);R.input_labels=new x.Tensor("int64",new BigInt64Array(je).fill(1n),Qe)}const ue={image_embeddings:R.image_embeddings,image_positional_embeddings:R.image_positional_embeddings};return R.input_points&&(ue.input_points=R.input_points),R.input_labels&&(ue.input_labels=R.input_labels),R.input_boxes&&(ue.input_boxes=R.input_boxes),await $(this.sessions.prompt_encoder_mask_decoder,ue)}async _call(R){return new z1(await super._call(R))}}class z1 extends He{constructor({iou_scores:R,pred_masks:ue}){super(),this.iou_scores=R,this.pred_masks=ue}}class ml extends ge{}class N1 extends ml{}class L1 extends ml{}class hl extends ge{}class _1 extends hl{}class R1 extends hl{}class Yn extends ge{}class j1 extends Yn{}class W1 extends Yn{async _call(R){return new pi(await super._call(R))}}class Y1 extends Yn{async _call(R){return new ut(await super._call(R))}}class V1 extends Yn{async _call(R){return new cs(await super._call(R))}}class Cl extends ge{}class H1 extends Cl{}class U1 extends Cl{async _call(R){return new cs(await super._call(R))}}class K1 extends ge{}class X1 extends K1{}class a0 extends ge{}class Z1 extends a0{}class J1 extends a0{async _call(R){return new pi(await super._call(R))}}class q1 extends a0{async _call(R){return new ut(await super._call(R))}}class To extends ge{}class $1 extends To{}class eu extends To{async _call(R){return new pi(await super._call(R))}}class Au extends To{async _call(R){return new ut(await super._call(R))}}class tu extends To{async _call(R){return new cs(await super._call(R))}}class n0 extends ge{}class ru extends n0{}class su extends n0{async _call(R){return new pi(await super._call(R))}}class au extends n0{async _call(R){return new ut(await super._call(R))}}class Zb extends ge{}class nu extends Yn{}class iu extends Yn{async _call(R){return new pi(await super._call(R))}}class ou extends Yn{async _call(R){return new ut(await super._call(R))}}class Ki extends ge{}class lu extends Ki{}class cu extends Ki{async _call(R){return new pi(await super._call(R))}}class uu extends Ki{async _call(R){return new ut(await super._call(R))}}class du extends Ki{async _call(R){return new Ud(await super._call(R))}}class fu extends Ki{async _call(R){return new cs(await super._call(R))}}class gu extends ge{}class pu extends gu{}class i0 extends ge{}class Jb extends i0{}class mu extends i0{}class hu extends i0{async generate_speech(R,ue,{threshold:Qe=.5,minlenratio:je=0,maxlenratio:Ye=20,vocoder:sA=null}={}){const pA={input_ids:R},{encoder_outputs:IA,encoder_attention_mask:jA}=await ve(this,pA),dt=IA.dims[1]/this.config.reduction_factor,Ct=Math.floor(dt*Ye),st=Math.floor(dt*je),et=this.config.num_mel_bins;let Ht=[],at=null,qA=null,Ft=0;for(;;){++Ft;const Xr=Ee(!!qA);let Zr;qA?Zr=qA.output_sequence_out:Zr=new x.Tensor("float32",new Float32Array(et),[1,1,et]);let Rr={use_cache_branch:Xr,output_sequence:Zr,encoder_attention_mask:jA,speaker_embeddings:ue,encoder_hidden_states:IA};this.addPastKeyValues(Rr,at),qA=await $(this.sessions.decoder_model_merged,Rr),at=this.getPastKeyValues(qA,at);const{prob:It,spectrum:Dr}=qA;if(Ht.push(Dr),Ft>=st&&(Array.from(It.data).filter(us=>us>=Qe).length>0||Ft>=Ct))break}const nr=(0,x.cat)(Ht),{waveform:yr}=await $(sA.sessions.model,{spectrogram:nr});return{spectrogram:nr,waveform:yr}}}class Cu extends ge{main_input_name="spectrogram"}class bu extends ge{}class Iu extends bu{}class bl extends ge{}class wu extends bl{}class ku extends bl{}class Il extends ge{}class Eu extends Il{}class Mu extends Il{}class wl extends ge{}class vu extends wl{}class Bu extends wl{}class o0 extends ge{}class xu extends o0{}class yu extends o0{static async from_pretrained(R,ue={}){return super.from_pretrained(R,{...ue,model_file_name:ue.model_file_name??"text_model"})}}class Du extends o0{static async from_pretrained(R,ue={}){return super.from_pretrained(R,{...ue,model_file_name:ue.model_file_name??"audio_model"})}}class Tu extends ge{}class kl extends Tu{async _call(R){return new Xd(await super._call(R))}}class l0 extends ge{}class qb extends l0{}class Pu extends l0{}class Gu extends l0{}class El extends ge{}class Qu extends El{}class Fu extends El{}class Ml extends ge{}class Su extends Ml{}class Ou extends Ml{async _call(R){return new ut(await super._call(R))}}class vl extends ge{}class $b extends vl{}class e8 extends vl{}class Bl extends ge{forward_params=["input_ids","attention_mask","encoder_outputs","decoder_input_ids","decoder_attention_mask","past_key_values"];_apply_and_filter_by_delay_pattern_mask(R){const[ue,Qe]=R.dims,je=this.config.decoder.num_codebooks,Ye=Qe-je;let sA=0;for(let jA=0;jA<R.size;++jA){if(R.data[jA]===this.config.decoder.pad_token_id)continue;const dt=jA%Qe,Ct=Math.floor(jA/Qe)%je,st=dt-Ct;st>0&&st<=Ye&&(R.data[sA++]=R.data[jA])}const pA=Math.floor(ue/je),IA=sA/(pA*je);return new x.Tensor(R.type,R.data.slice(0,sA),[pA,je,IA])}prepare_inputs_for_generation(R,ue,Qe){let je=structuredClone(R);for(let sA=0;sA<je.length;++sA)for(let pA=0;pA<je[sA].length;++pA)sA%this.config.decoder.num_codebooks>=pA&&(je[sA][pA]=BigInt(this.config.decoder.pad_token_id));return Qe.guidance_scale!==null&&Qe.guidance_scale>1&&(je=je.concat(je)),super.prepare_inputs_for_generation(je,ue,Qe)}async generate(R){const ue=await super.generate(R),Qe=this._apply_and_filter_by_delay_pattern_mask(ue).unsqueeze_(0),{audio_values:je}=await $(this.sessions.encodec_decode,{audio_codes:Qe});return je}}class c0 extends ge{}class zu extends c0{}class Nu extends c0{async _call(R){return new ut(await super._call(R))}}class Lu extends c0{}class u0 extends ge{}class _u extends u0{}class Ru extends u0{async _call(R){return new ut(await super._call(R))}}class ju extends u0{}class d0 extends ge{}class Wu extends d0{}class Yu extends d0{async _call(R){return new ut(await super._call(R))}}class Vu extends d0{}class f0 extends ge{}class Hu extends f0{}class Uu extends f0{async _call(R){return new ut(await super._call(R))}}class Ku extends f0{}class Xu extends ge{}class Zu extends Xu{}class Ju extends ge{}class qu extends Ju{forward_params=["input_ids","pixel_values","images_seq_mask","images_emb_mask","attention_mask","position_ids","past_key_values"];constructor(...R){super(...R),this._generation_mode="text"}async forward(R){const ue=this._generation_mode??"text";let Qe;if(ue==="text"||!R.past_key_values){const IA=this.sessions.prepare_inputs_embeds,jA=(0,w.pick)(R,IA.inputNames);Qe=await $(IA,jA)}else{const IA=this.sessions.gen_img_embeds,jA=(0,w.pick)({image_ids:R.input_ids},IA.inputNames);Qe=await $(IA,jA)}const je={...R,...Qe},Ye=await Fe(this,je),sA=this.sessions[ue==="text"?"lm_head":"gen_head"];if(!sA)throw new Error(`Unable to find "${sA}" generation head`);const pA=await $(sA,(0,w.pick)(Ye,sA.inputNames));return{...Qe,...Ye,...pA}}async generate(R){return this._generation_mode="text",super.generate(R)}async generate_images(R){this._generation_mode="image";const ue=(R.inputs??R[this.main_input_name]).dims[1],je=(await super.generate(R)).slice(null,[ue,null]),Ye=this.sessions.image_decode,{decoded_image:sA}=await $(Ye,{generated_tokens:je}),pA=sA.add_(1).mul_(255/2).clamp_(0,255).to("uint8"),IA=[];for(const jA of pA){const dt=S.RawImage.fromTensor(jA);IA.push(dt)}return IA}}class $u extends He{constructor({char_logits:R,bpe_logits:ue,wp_logits:Qe}){super(),this.char_logits=R,this.bpe_logits=ue,this.wp_logits=Qe}get logits(){return[this.char_logits,this.bpe_logits,this.wp_logits]}}class ed extends ge{}class Ad extends ed{async _call(R){return new $u(await super._call(R))}}class xl extends ge{}class td extends xl{}class rd extends xl{}class yl extends ge{}class sd extends yl{}class ad extends yl{}class nd extends ge{forward_params=["input_ids","attention_mask","position_ids","audio_values","past_key_values"]}class id extends nd{_merge_input_ids_with_audio_features(R){const ue=R.audio_features.dims.at(-1),Qe=R.audio_features.view(-1,ue);return pe({audio_token_id:this.config.ignore_index,...R,audio_features:Qe})}}class g0 extends ge{main_input_name="input_values";forward_params=["input_values"]}class od extends He{constructor({audio_codes:R}){super(),this.audio_codes=R}}class ld extends He{constructor({audio_values:R}){super(),this.audio_values=R}}class cd extends g0{async encode(R){return new od(await $(this.sessions.encoder_model,R))}async decode(R){return new ld(await $(this.sessions.decoder_model,R))}}class ud extends g0{static async from_pretrained(R,ue={}){return super.from_pretrained(R,{...ue,model_file_name:ue.model_file_name??"encoder_model"})}}class dd extends g0{static async from_pretrained(R,ue={}){return super.from_pretrained(R,{...ue,model_file_name:ue.model_file_name??"decoder_model"})}}class p0 extends ge{main_input_name="input_values";forward_params=["input_values"]}class fd extends He{constructor({audio_codes:R}){super(),this.audio_codes=R}}class gd extends He{constructor({audio_values:R}){super(),this.audio_values=R}}class pd extends p0{async encode(R){return new fd(await $(this.sessions.encoder_model,R))}async decode(R){return new gd(await $(this.sessions.decoder_model,R))}}class md extends p0{static async from_pretrained(R,ue={}){return super.from_pretrained(R,{...ue,model_file_name:ue.model_file_name??"encoder_model"})}}class hd extends p0{static async from_pretrained(R,ue={}){return super.from_pretrained(R,{...ue,model_file_name:ue.model_file_name??"decoder_model"})}}class m0 extends ge{main_input_name="input_values";forward_params=["input_values"]}class Cd extends m0{async encode(R){return await $(this.sessions.encoder_model,R)}async decode(R){return await $(this.sessions.decoder_model,R)}}class bd extends m0{static async from_pretrained(R,ue={}){return super.from_pretrained(R,{...ue,model_file_name:ue.model_file_name??"encoder_model"})}}class Id extends m0{static async from_pretrained(R,ue={}){return super.from_pretrained(R,{...ue,model_file_name:ue.model_file_name??"decoder_model"})}}class Vt{static MODEL_CLASS_MAPPINGS=null;static BASE_IF_FAIL=!1;static async from_pretrained(R,{progress_callback:ue=null,config:Qe=null,cache_dir:je=null,local_files_only:Ye=!1,revision:sA="main",model_file_name:pA=null,subfolder:IA="onnx",device:jA=null,dtype:dt=null,use_external_data_format:Ct=null,session_options:st={}}={}){const et={progress_callback:ue,config:Qe,cache_dir:je,local_files_only:Ye,revision:sA,model_file_name:pA,subfolder:IA,device:jA,dtype:dt,use_external_data_format:Ct,session_options:st};if(et.config=await u.AutoConfig.from_pretrained(R,et),!this.MODEL_CLASS_MAPPINGS)throw new Error("`MODEL_CLASS_MAPPINGS` not implemented for this type of `AutoClass`: "+this.name);const Ht=et.config.model_type;for(const at of this.MODEL_CLASS_MAPPINGS){let qA=at.get(Ht);if(!qA){for(const Ft of at.values())if(Ft[0]===Ht){qA=Ft;break}if(!qA)continue}return await qA[1].from_pretrained(R,et)}if(this.BASE_IF_FAIL)return Hd.has(Ht)||console.warn(`Unknown model class "${Ht}", attempting to construct from base class.`),await ge.from_pretrained(R,et);throw Error(`Unsupported model type: ${Ht}`)}}const A8=new Map([["bert",["BertModel",qe]],["modernbert",["ModernBertModel",rA]],["nomic_bert",["NomicBertModel",TA]],["roformer",["RoFormerModel",OA]],["electra",["ElectraModel",Re]],["esm",["EsmModel",WA]],["convbert",["ConvBertModel",VA]],["camembert",["CamembertModel",tr]],["deberta",["DebertaModel",rr]],["deberta-v2",["DebertaV2Model",ws]],["mpnet",["MPNetModel",Sa]],["albert",["AlbertModel",Oe]],["distilbert",["DistilBertModel",Qs]],["roberta",["RobertaModel",kr]],["xlm",["XLMModel",$a]],["xlm-roberta",["XLMRobertaModel",Ai]],["clap",["ClapModel",xu]],["clip",["CLIPModel",an]],["clipseg",["CLIPSegModel",ai]],["chinese_clip",["ChineseCLIPModel",da]],["siglip",["SiglipModel",dr]],["jina_clip",["JinaCLIPModel",on]],["mobilebert",["MobileBertModel",Gr]],["squeezebert",["SqueezeBertModel",za]],["wav2vec2",["Wav2Vec2Model",j1]],["wav2vec2-bert",["Wav2Vec2BertModel",ru]],["unispeech",["UniSpeechModel",Z1]],["unispeech-sat",["UniSpeechSatModel",$1]],["hubert",["HubertModel",nu]],["wavlm",["WavLMModel",lu]],["audio-spectrogram-transformer",["ASTModel",Bn]],["vits",["VitsModel",kl]],["pyannote",["PyAnnoteModel",H1]],["wespeaker-resnet",["WeSpeakerResNetModel",X1]],["detr",["DetrModel",NA]],["rt_detr",["RTDetrModel",$t]],["rt_detr_v2",["RTDetrV2Model",zr]],["rf_detr",["RFDetrModel",hs]],["d_fine",["DFineModel",Cn]],["table-transformer",["TableTransformerModel",jn]],["vit",["ViTModel",vo]],["ijepa",["IJepaModel",Ur]],["pvt",["PvtModel",_n]],["vit_msn",["ViTMSNModel",s]],["vit_mae",["ViTMAEModel",t]],["groupvit",["GroupViTModel",c]],["fastvit",["FastViTModel",p]],["mobilevit",["MobileViTModel",z]],["mobilevitv2",["MobileViTV2Model",X]],["owlvit",["OwlViTModel",me]],["owlv2",["Owlv2Model",Pe]],["beit",["BeitModel",lA]],["deit",["DeiTModel",yo]],["hiera",["HieraModel",Kc]],["convnext",["ConvNextModel",k1]],["convnextv2",["ConvNextV2Model",M1]],["dinov2",["Dinov2Model",B1]],["dinov2_with_registers",["Dinov2WithRegistersModel",y1]],["resnet",["ResNetModel",Zc]],["swin",["SwinModel",qc]],["swin2sr",["Swin2SRModel",A1]],["donut-swin",["DonutSwinModel",w1]],["yolos",["YolosModel",G1]],["dpt",["DPTModel",r1]],["glpn",["GLPNModel",C1]],["hifigan",["SpeechT5HifiGan",Cu]],["efficientnet",["EfficientNetModel",Su]],["decision_transformer",["DecisionTransformerModel",Zu]],["patchtst",["PatchTSTForPrediction",td]],["patchtsmixer",["PatchTSMixerForPrediction",sd]],["mobilenet_v1",["MobileNetV1Model",zu]],["mobilenet_v2",["MobileNetV2Model",_u]],["mobilenet_v3",["MobileNetV3Model",Wu]],["mobilenet_v4",["MobileNetV4Model",Hu]],["maskformer",["MaskFormerModel",m1]],["mgp-str",["MgpstrForSceneTextRecognition",Ad]],["style_text_to_speech_2",["StyleTextToSpeech2Model",pu]]]),t8=new Map([["t5",["T5Model",We]],["longt5",["LongT5Model",xA]],["mt5",["MT5Model",gt]],["bart",["BartModel",Qr]],["mbart",["MBartModel",Jt]],["marian",["MarianModel",N1]],["whisper",["WhisperModel",yn]],["m2m_100",["M2M100Model",_1]],["blenderbot",["BlenderbotModel",Ir]],["blenderbot-small",["BlenderbotSmallModel",cr]]]),r8=new Map([["mimi",["MimiModel",cd]],["dac",["DacModel",pd]],["snac",["SnacModel",Cd]]]),s8=new Map([["bloom",["BloomModel",Qt]],["jais",["JAISModel",Fn]],["gpt2",["GPT2Model",Zs]],["gptj",["GPTJModel",Ua]],["gpt_bigcode",["GPTBigCodeModel",xr]],["gpt_neo",["GPTNeoModel",Es]],["gpt_neox",["GPTNeoXModel",Sn]],["codegen",["CodeGenModel",Bs]],["llama",["LlamaModel",On]],["exaone",["ExaoneModel",Ze]],["olmo",["OlmoModel",yt]],["olmo2",["Olmo2Model",fn]],["mobilellm",["MobileLLMModel",FA]],["granite",["GraniteModel",oi]],["cohere",["CohereModel",ci]],["gemma",["GemmaModel",mo]],["gemma2",["Gemma2Model",gn]],["gemma3_text",["Gemma3Model",Co]],["helium",["HeliumModel",G]],["glm",["GlmModel",se]],["openelm",["OpenELMModel",rs]],["qwen2",["Qwen2Model",bo]],["qwen3",["Qwen3Model",Xa]],["phi",["PhiModel",ko]],["phi3",["Phi3Model",Ni]],["mpt",["MptModel",_i]],["opt",["OPTModel",Mo]],["mistral",["MistralModel",wu]],["starcoder2",["Starcoder2Model",Eu]],["falcon",["FalconModel",vu]],["stablelm",["StableLmModel",Qu]]]),Dl=new Map([["speecht5",["SpeechT5ForSpeechToText",mu]],["whisper",["WhisperForConditionalGeneration",tn]],["lite-whisper",["LiteWhisperForConditionalGeneration",Dn]],["moonshine",["MoonshineForConditionalGeneration",Bt]]]),wd=new Map([["speecht5",["SpeechT5ForTextToSpeech",hu]]]),kd=new Map([["vits",["VitsModel",kl]],["musicgen",["MusicgenForConditionalGeneration",Bl]]]),Ed=new Map([["bert",["BertForSequenceClassification",cA]],["modernbert",["ModernBertForSequenceClassification",PA]],["roformer",["RoFormerForSequenceClassification",$A]],["electra",["ElectraForSequenceClassification",Le]],["esm",["EsmForSequenceClassification",gs]],["convbert",["ConvBertForSequenceClassification",re]],["camembert",["CamembertForSequenceClassification",or]],["deberta",["DebertaForSequenceClassification",Rs]],["deberta-v2",["DebertaV2ForSequenceClassification",Gs]],["mpnet",["MPNetForSequenceClassification",Oa]],["albert",["AlbertForSequenceClassification",K]],["distilbert",["DistilBertForSequenceClassification",Fs]],["roberta",["RobertaForSequenceClassification",qt]],["xlm",["XLMForSequenceClassification",vn]],["xlm-roberta",["XLMRobertaForSequenceClassification",Ra]],["bart",["BartForSequenceClassification",vr]],["mbart",["MBartForSequenceClassification",br]],["mobilebert",["MobileBertForSequenceClassification",rt]],["squeezebert",["SqueezeBertForSequenceClassification",La]]]),Md=new Map([["bert",["BertForTokenClassification",fA]],["modernbert",["ModernBertForTokenClassification",wA]],["roformer",["RoFormerForTokenClassification",tt]],["electra",["ElectraForTokenClassification",LA]],["esm",["EsmForTokenClassification",js]],["convbert",["ConvBertForTokenClassification",De]],["camembert",["CamembertForTokenClassification",_t]],["deberta",["DebertaForTokenClassification",Is]],["deberta-v2",["DebertaV2ForTokenClassification",Jr]],["mpnet",["MPNetForTokenClassification",Ss]],["distilbert",["DistilBertForTokenClassification",qr]],["roberta",["RobertaForTokenClassification",_A]],["xlm",["XLMForTokenClassification",ei]],["xlm-roberta",["XLMRobertaForTokenClassification",Br]]]),Tl=new Map([["t5",["T5ForConditionalGeneration",eA]],["longt5",["LongT5ForConditionalGeneration",BA]],["mt5",["MT5ForConditionalGeneration",nt]],["bart",["BartForConditionalGeneration",lr]],["mbart",["MBartForConditionalGeneration",os]],["marian",["MarianMTModel",L1]],["m2m_100",["M2M100ForConditionalGeneration",R1]],["blenderbot",["BlenderbotForConditionalGeneration",wr]],["blenderbot-small",["BlenderbotSmallForConditionalGeneration",Yr]]]),Pl=new Map([["bloom",["BloomForCausalLM",Nn]],["gpt2",["GPT2LMHeadModel",UA]],["jais",["JAISLMHeadModel",ln]],["gptj",["GPTJForCausalLM",zs]],["gpt_bigcode",["GPTBigCodeForCausalLM",vs]],["gpt_neo",["GPTNeoForCausalLM",ar]],["gpt_neox",["GPTNeoXForCausalLM",At]],["codegen",["CodeGenForCausalLM",un]],["llama",["LlamaForCausalLM",dn]],["exaone",["ExaoneForCausalLM",dA]],["olmo",["OlmoForCausalLM",Fr]],["olmo2",["Olmo2ForCausalLM",Sr]],["mobilellm",["MobileLLMForCausalLM",lt]],["granite",["GraniteForCausalLM",li]],["cohere",["CohereForCausalLM",po]],["gemma",["GemmaForCausalLM",Si]],["gemma2",["Gemma2ForCausalLM",ho]],["gemma3_text",["Gemma3ForCausalLM",ts]],["helium",["HeliumForCausalLM",W]],["glm",["GlmForCausalLM",ce]],["openelm",["OpenELMForCausalLM",zi]],["qwen2",["Qwen2ForCausalLM",Kt]],["qwen3",["Qwen3ForCausalLM",mn]],["phi",["PhiForCausalLM",Za]],["phi3",["Phi3ForCausalLM",gi]],["mpt",["MptForCausalLM",Eo]],["opt",["OPTForCausalLM",ji]],["mbart",["MBartForCausalLM",_r]],["mistral",["MistralForCausalLM",ku]],["starcoder2",["Starcoder2ForCausalLM",Mu]],["falcon",["FalconForCausalLM",Bu]],["trocr",["TrOCRForCausalLM",Iu]],["stablelm",["StableLmForCausalLM",Fu]],["phi3_v",["Phi3VForCausalLM",DA]]]),a8=new Map([["multi_modality",["MultiModalityCausalLM",qu]]]),vd=new Map([["bert",["BertForMaskedLM",H]],["modernbert",["ModernBertForMaskedLM",EA]],["roformer",["RoFormerForMaskedLM",ot]],["electra",["ElectraForMaskedLM",oA]],["esm",["EsmForMaskedLM",Mr]],["convbert",["ConvBertForMaskedLM",Ts]],["camembert",["CamembertForMaskedLM",bt]],["deberta",["DebertaForMaskedLM",Ps]],["deberta-v2",["DebertaV2ForMaskedLM",ks]],["mpnet",["MPNetForMaskedLM",Ca]],["albert",["AlbertForMaskedLM",Me]],["distilbert",["DistilBertForMaskedLM",uA]],["roberta",["RobertaForMaskedLM",sr]],["xlm",["XLMWithLMHeadModel",$n]],["xlm-roberta",["XLMRobertaForMaskedLM",en]],["mobilebert",["MobileBertForMaskedLM",Ws]],["squeezebert",["SqueezeBertForMaskedLM",Na]]]),Bd=new Map([["bert",["BertForQuestionAnswering",he]],["roformer",["RoFormerForQuestionAnswering",Lt]],["electra",["ElectraForQuestionAnswering",QA]],["convbert",["ConvBertForQuestionAnswering",ie]],["camembert",["CamembertForQuestionAnswering",Rt]],["deberta",["DebertaForQuestionAnswering",ea]],["deberta-v2",["DebertaV2ForQuestionAnswering",oa]],["mpnet",["MPNetForQuestionAnswering",Ys]],["albert",["AlbertForQuestionAnswering",fe]],["distilbert",["DistilBertForQuestionAnswering",Lr]],["roberta",["RobertaForQuestionAnswering",Gt]],["xlm",["XLMForQuestionAnswering",ba]],["xlm-roberta",["XLMRobertaForQuestionAnswering",yA]],["mobilebert",["MobileBertForQuestionAnswering",is]],["squeezebert",["SqueezeBertForQuestionAnswering",_a]]]),Gl=new Map([["vision-encoder-decoder",["VisionEncoderDecoderModel",ja]],["idefics3",["Idefics3ForConditionalGeneration",Wa]],["smolvlm",["SmolVLMForConditionalGeneration",iA]]]),xd=new Map([["llava",["LlavaForConditionalGeneration",Hs]],["llava_onevision",["LlavaOnevisionForConditionalGeneration",ta]],["moondream1",["Moondream1ForConditionalGeneration",Os]],["florence2",["Florence2ForConditionalGeneration",Gn]],["qwen2-vl",["Qwen2VLForConditionalGeneration",wo]],["idefics3",["Idefics3ForConditionalGeneration",Wa]],["smolvlm",["SmolVLMForConditionalGeneration",iA]],["paligemma",["PaliGemmaForConditionalGeneration",sn]]]),yd=new Map([["ultravox",["UltravoxModel",id]]]),n8=new Map([["vision-encoder-decoder",["VisionEncoderDecoderModel",ja]]]),Dd=new Map([["vit",["ViTForImageClassification",Yi]],["ijepa",["IJepaForImageClassification",Vi]],["pvt",["PvtForImageClassification",KA]],["vit_msn",["ViTMSNForImageClassification",i]],["fastvit",["FastViTForImageClassification",I]],["mobilevit",["MobileViTForImageClassification",Y]],["mobilevitv2",["MobileViTV2ForImageClassification",te]],["beit",["BeitForImageClassification",mA]],["deit",["DeiTForImageClassification",Do]],["hiera",["HieraForImageClassification",Xc]],["convnext",["ConvNextForImageClassification",E1]],["convnextv2",["ConvNextV2ForImageClassification",v1]],["dinov2",["Dinov2ForImageClassification",x1]],["dinov2_with_registers",["Dinov2WithRegistersForImageClassification",D1]],["resnet",["ResNetForImageClassification",Jc]],["swin",["SwinForImageClassification",$c]],["segformer",["SegformerForImageClassification",Pu]],["efficientnet",["EfficientNetForImageClassification",Ou]],["mobilenet_v1",["MobileNetV1ForImageClassification",Nu]],["mobilenet_v2",["MobileNetV2ForImageClassification",Ru]],["mobilenet_v3",["MobileNetV3ForImageClassification",Yu]],["mobilenet_v4",["MobileNetV4ForImageClassification",Uu]]]),Td=new Map([["detr",["DetrForObjectDetection",JA]],["rt_detr",["RTDetrForObjectDetection",fr]],["rt_detr_v2",["RTDetrV2ForObjectDetection",Kr]],["rf_detr",["RFDetrForObjectDetection",ra]],["d_fine",["DFineForObjectDetection",Rn]],["table-transformer",["TableTransformerForObjectDetection",Wn]],["yolos",["YolosForObjectDetection",Q1]]]),Pd=new Map([["owlvit",["OwlViTForObjectDetection",ke]],["owlv2",["Owlv2ForObjectDetection",_e]],["grounding-dino",["GroundingDinoForObjectDetection",P1]]]),Xi=new Map([["detr",["DetrForSegmentation",pt]],["clipseg",["CLIPSegForImageSegmentation",ni]]]),Gd=new Map([["segformer",["SegformerForSemanticSegmentation",Gu]],["sapiens",["SapiensForSemanticSegmentation",i1]],["swin",["SwinForSemanticSegmentation",e1]],["mobilenet_v1",["MobileNetV1ForSemanticSegmentation",Lu]],["mobilenet_v2",["MobileNetV2ForSemanticSegmentation",ju]],["mobilenet_v3",["MobileNetV3ForSemanticSegmentation",Vu]],["mobilenet_v4",["MobileNetV4ForSemanticSegmentation",Ku]]]),Qd=new Map([["detr",["DetrForSegmentation",pt]],["maskformer",["MaskFormerForInstanceSegmentation",h1]]]),Fd=new Map([["sam",["SamModel",O1]]]),Sd=new Map([["wav2vec2",["Wav2Vec2ForCTC",W1]],["wav2vec2-bert",["Wav2Vec2BertForCTC",su]],["unispeech",["UniSpeechForCTC",J1]],["unispeech-sat",["UniSpeechSatForCTC",eu]],["wavlm",["WavLMForCTC",cu]],["hubert",["HubertForCTC",iu]]]),Od=new Map([["wav2vec2",["Wav2Vec2ForSequenceClassification",Y1]],["wav2vec2-bert",["Wav2Vec2BertForSequenceClassification",au]],["unispeech",["UniSpeechForSequenceClassification",q1]],["unispeech-sat",["UniSpeechSatForSequenceClassification",Au]],["wavlm",["WavLMForSequenceClassification",uu]],["hubert",["HubertForSequenceClassification",ou]],["audio-spectrogram-transformer",["ASTForAudioClassification",An]]]),zd=new Map([["wavlm",["WavLMForXVector",du]]]),Nd=new Map([["unispeech-sat",["UniSpeechSatForAudioFrameClassification",tu]],["wavlm",["WavLMForAudioFrameClassification",fu]],["wav2vec2",["Wav2Vec2ForAudioFrameClassification",V1]],["pyannote",["PyAnnoteForAudioFrameClassification",U1]]]),Ld=new Map([["vitmatte",["VitMatteForImageMatting",M]]]),i8=new Map([["patchtst",["PatchTSTForPrediction",rd]],["patchtsmixer",["PatchTSMixerForPrediction",ad]]]),_d=new Map([["swin2sr",["Swin2SRForImageSuperResolution",t1]]]),Rd=new Map([["dpt",["DPTForDepthEstimation",s1]],["depth_anything",["DepthAnythingForDepthEstimation",n1]],["glpn",["GLPNForDepthEstimation",b1]],["sapiens",["SapiensForDepthEstimation",o1]],["depth_pro",["DepthProForDepthEstimation",u1]],["metric3d",["Metric3DForDepthEstimation",f1]],["metric3dv2",["Metric3Dv2ForDepthEstimation",p1]]]),jd=new Map([["sapiens",["SapiensForNormalEstimation",l1]]]),Wd=new Map([["vitpose",["VitPoseForPoseEstimation",hn]]]),Yd=new Map([["clip",["CLIPVisionModelWithProjection",Xs]],["siglip",["SiglipVisionModel",nn]],["jina_clip",["JinaCLIPVisionModel",CA]]]),Vd=[[A8,f.EncoderOnly],[t8,f.EncoderDecoder],[s8,f.DecoderOnly],[r8,f.AutoEncoder],[Ed,f.EncoderOnly],[Md,f.EncoderOnly],[Tl,f.Seq2Seq],[Dl,f.Seq2Seq],[Pl,f.DecoderOnly],[a8,f.MultiModality],[vd,f.EncoderOnly],[Bd,f.EncoderOnly],[Gl,f.Vision2Seq],[xd,f.ImageTextToText],[yd,f.AudioTextToText],[Dd,f.EncoderOnly],[Xi,f.EncoderOnly],[Qd,f.EncoderOnly],[Gd,f.EncoderOnly],[Ld,f.EncoderOnly],[i8,f.EncoderOnly],[_d,f.EncoderOnly],[Rd,f.EncoderOnly],[jd,f.EncoderOnly],[Wd,f.EncoderOnly],[Td,f.EncoderOnly],[Pd,f.EncoderOnly],[Fd,f.MaskGeneration],[Sd,f.EncoderOnly],[Od,f.EncoderOnly],[wd,f.Seq2Seq],[kd,f.EncoderOnly],[zd,f.EncoderOnly],[Nd,f.EncoderOnly],[Yd,f.EncoderOnly]];for(const[_,R]of Vd)for(const[ue,Qe]of _.values())k.set(ue,R),d.set(Qe,ue),e.set(ue,Qe);const o8=[["MusicgenForConditionalGeneration",Bl,f.Musicgen],["Phi3VForCausalLM",DA,f.Phi3V],["CLIPTextModelWithProjection",ls,f.EncoderOnly],["SiglipTextModel",si,f.EncoderOnly],["JinaCLIPTextModel",wa,f.EncoderOnly],["ClapTextModelWithProjection",yu,f.EncoderOnly],["ClapAudioModelWithProjection",Du,f.EncoderOnly],["DacEncoderModel",md,f.EncoderOnly],["DacDecoderModel",hd,f.EncoderOnly],["MimiEncoderModel",ud,f.EncoderOnly],["MimiDecoderModel",dd,f.EncoderOnly],["SnacEncoderModel",bd,f.EncoderOnly],["SnacDecoderModel",Id,f.EncoderOnly]];for(const[_,R,ue]of o8)k.set(_,ue),d.set(R,_),e.set(_,R);const Hd=new Map([["modnet",Xi],["birefnet",Xi],["isnet",Xi],["ben",Xi]]);for(const[_,R]of Hd.entries())R.set(_,["PreTrainedModel",ge]),k.set(_,f.EncoderOnly),d.set(ge,_),e.set(_,ge);class l8 extends Vt{static MODEL_CLASS_MAPPINGS=Vd.map(R=>R[0]);static BASE_IF_FAIL=!0}class c8 extends Vt{static MODEL_CLASS_MAPPINGS=[Ed]}class u8 extends Vt{static MODEL_CLASS_MAPPINGS=[Md]}class d8 extends Vt{static MODEL_CLASS_MAPPINGS=[Tl]}class f8 extends Vt{static MODEL_CLASS_MAPPINGS=[Dl]}class g8 extends Vt{static MODEL_CLASS_MAPPINGS=[wd]}class p8 extends Vt{static MODEL_CLASS_MAPPINGS=[kd]}class m8 extends Vt{static MODEL_CLASS_MAPPINGS=[Pl]}class h8 extends Vt{static MODEL_CLASS_MAPPINGS=[vd]}class C8 extends Vt{static MODEL_CLASS_MAPPINGS=[Bd]}class b8 extends Vt{static MODEL_CLASS_MAPPINGS=[Gl]}class I8 extends Vt{static MODEL_CLASS_MAPPINGS=[Dd]}class w8 extends Vt{static MODEL_CLASS_MAPPINGS=[Xi]}class k8 extends Vt{static MODEL_CLASS_MAPPINGS=[Gd]}class E8 extends Vt{static MODEL_CLASS_MAPPINGS=[Qd]}class M8 extends Vt{static MODEL_CLASS_MAPPINGS=[Td]}class v8 extends Vt{static MODEL_CLASS_MAPPINGS=[Pd]}class B8 extends Vt{static MODEL_CLASS_MAPPINGS=[Fd]}class x8 extends Vt{static MODEL_CLASS_MAPPINGS=[Sd]}class y8 extends Vt{static MODEL_CLASS_MAPPINGS=[Od]}class D8 extends Vt{static MODEL_CLASS_MAPPINGS=[zd]}class T8 extends Vt{static MODEL_CLASS_MAPPINGS=[Nd]}class P8 extends Vt{static MODEL_CLASS_MAPPINGS=[n8]}class G8 extends Vt{static MODEL_CLASS_MAPPINGS=[Ld]}class Q8 extends Vt{static MODEL_CLASS_MAPPINGS=[_d]}class F8 extends Vt{static MODEL_CLASS_MAPPINGS=[Rd]}class S8 extends Vt{static MODEL_CLASS_MAPPINGS=[jd]}class O8 extends Vt{static MODEL_CLASS_MAPPINGS=[Wd]}class z8 extends Vt{static MODEL_CLASS_MAPPINGS=[Yd]}class N8 extends Vt{static MODEL_CLASS_MAPPINGS=[xd]}class L8 extends Vt{static MODEL_CLASS_MAPPINGS=[yd]}class _8 extends He{constructor({logits:R,past_key_values:ue,encoder_outputs:Qe,decoder_attentions:je=null,cross_attentions:Ye=null}){super(),this.logits=R,this.past_key_values=ue,this.encoder_outputs=Qe,this.decoder_attentions=je,this.cross_attentions=Ye}}class ut extends He{constructor({logits:R,...ue}){super(),this.logits=R;const Qe=Object.values(ue);Qe.length>0&&(this.attentions=Qe)}}class Ud extends He{constructor({logits:R,embeddings:ue}){super(),this.logits=R,this.embeddings=ue}}class cs extends He{constructor({logits:R}){super(),this.logits=R}}class Cs extends He{constructor({logits:R}){super(),this.logits=R}}class xs extends He{constructor({start_logits:R,end_logits:ue}){super(),this.start_logits=R,this.end_logits=ue}}class pi extends He{constructor({logits:R}){super(),this.logits=R}}class R8 extends He{constructor({logits:R,past_key_values:ue}){super(),this.logits=R,this.past_key_values=ue}}class Kd extends He{constructor({alphas:R}){super(),this.alphas=R}}class Xd extends He{constructor({waveform:R,spectrogram:ue}){super(),this.waveform=R,this.spectrogram=ue}}},"./src/models/audio_spectrogram_transformer/feature_extraction_audio_spectrogram_transformer.js":(a,o,n)=>{n.r(o),n.d(o,{ASTFeatureExtractor:()=>b});var u=n("./src/base/feature_extraction_utils.js");n("./src/utils/tensor.js");var m=n("./src/utils/audio.js");class b extends u.FeatureExtractor{constructor(w){super(w);const E=this.config.sampling_rate,B=(0,m.mel_filter_bank)(257,this.config.num_mel_bins,20,Math.floor(E/2),E,null,"kaldi",!0);this.mel_filters=B,this.window=(0,m.window_function)(400,"hann",{periodic:!1}),this.mean=this.config.mean,this.std=this.config.std}async _extract_fbank_features(w,E){return(0,m.spectrogram)(w,this.window,400,160,{fft_length:512,power:2,center:!1,preemphasis:.97,mel_filters:this.mel_filters,log_mel:"log",mel_floor:1192092955078125e-22,remove_dc_offset:!0,max_num_frames:E,transpose:!0})}async _call(w){(0,u.validate_audio_inputs)(w,"ASTFeatureExtractor");const E=await this._extract_fbank_features(w,this.config.max_length);if(this.config.do_normalize){const B=this.std*2,D=E.data;for(let v=0;v<D.length;++v)D[v]=(D[v]-this.mean)/B}return{input_values:E.unsqueeze_(0)}}}},"./src/models/auto/feature_extraction_auto.js":(a,o,n)=>{n.r(o),n.d(o,{AutoFeatureExtractor:()=>C});var u=n("./src/utils/constants.js"),m=n("./src/utils/hub.js");n("./src/base/feature_extraction_utils.js");var b=n("./src/models/feature_extractors.js");class C{static async from_pretrained(E,B={}){const D=await(0,m.getModelJSON)(E,u.FEATURE_EXTRACTOR_NAME,!0,B),v=D.feature_extractor_type,x=b[v];if(!x)throw new Error(`Unknown feature_extractor_type: '${v}'. Please report this at ${u.GITHUB_ISSUE_URL}.`);return new x(D)}}},"./src/models/auto/image_processing_auto.js":(a,o,n)=>{n.r(o),n.d(o,{AutoImageProcessor:()=>w});var u=n("./src/utils/constants.js"),m=n("./src/utils/hub.js"),b=n("./src/base/image_processors_utils.js"),C=n("./src/models/image_processors.js");class w{static async from_pretrained(B,D={}){const v=await(0,m.getModelJSON)(B,u.IMAGE_PROCESSOR_NAME,!0,D),x=v.image_processor_type??v.feature_extractor_type;let S=C[x];return S||(x!==void 0&&console.warn(`Image processor type '${x}' not found, assuming base ImageProcessor. Please report this at ${u.GITHUB_ISSUE_URL}.`),S=b.ImageProcessor),new S(v)}}},"./src/models/auto/processing_auto.js":(a,o,n)=>{n.r(o),n.d(o,{AutoProcessor:()=>B});var u=n("./src/utils/constants.js"),m=n("./src/utils/hub.js"),b=n("./src/base/processing_utils.js"),C=n("./src/models/processors.js"),w=n("./src/models/image_processors.js"),E=n("./src/models/feature_extractors.js");class B{static async from_pretrained(v,x={}){const S=await(0,m.getModelJSON)(v,u.IMAGE_PROCESSOR_NAME,!0,x),{image_processor_type:F,feature_extractor_type:j,processor_class:J}=S;if(J&&C[J])return C[J].from_pretrained(v,x);if(!F&&!j)throw new Error("No `image_processor_type` or `feature_extractor_type` found in the config.");const L={};if(F){const U=w[F];if(!U)throw new Error(`Unknown image_processor_type: '${F}'.`);L.image_processor=new U(S)}if(j){const U=w[j];if(U)L.image_processor=new U(S);else{const f=E[j];if(!f)throw new Error(`Unknown feature_extractor_type: '${j}'.`);L.feature_extractor=new f(S)}}const N={};return new b.Processor(N,L)}}},"./src/models/beit/image_processing_beit.js":(a,o,n)=>{n.r(o),n.d(o,{BeitFeatureExtractor:()=>m});var u=n("./src/base/image_processors_utils.js");class m extends u.ImageProcessor{}},"./src/models/bit/image_processing_bit.js":(a,o,n)=>{n.r(o),n.d(o,{BitImageProcessor:()=>m});var u=n("./src/base/image_processors_utils.js");class m extends u.ImageProcessor{}},"./src/models/chinese_clip/image_processing_chinese_clip.js":(a,o,n)=>{n.r(o),n.d(o,{ChineseCLIPFeatureExtractor:()=>m});var u=n("./src/base/image_processors_utils.js");class m extends u.ImageProcessor{}},"./src/models/clap/feature_extraction_clap.js":(a,o,n)=>{n.r(o),n.d(o,{ClapFeatureExtractor:()=>b});var u=n("./src/base/feature_extraction_utils.js");n("./src/utils/tensor.js");var m=n("./src/utils/audio.js");class b extends u.FeatureExtractor{constructor(w){super(w),this.mel_filters=(0,m.mel_filter_bank)(this.config.nb_frequency_bins,this.config.feature_size,this.config.frequency_min,this.config.frequency_max,this.config.sampling_rate,null,"htk"),this.mel_filters_slaney=(0,m.mel_filter_bank)(this.config.nb_frequency_bins,this.config.feature_size,this.config.frequency_min,this.config.frequency_max,this.config.sampling_rate,"slaney","slaney"),this.window=(0,m.window_function)(this.config.fft_window_size,"hann")}async _get_input_mel(w,E,B,D){let v;const x=w.length-E;if(x>0)if(B==="rand_trunc"){const S=Math.floor(Math.random()*(x+1));w=w.subarray(S,S+E),v=await this._extract_fbank_features(w,this.mel_filters_slaney,this.config.nb_max_samples)}else throw new Error(`Truncation strategy "${B}" not implemented`);else{if(x<0){let S=new Float64Array(E);if(S.set(w),D==="repeat")for(let F=w.length;F<E;F+=w.length)S.set(w.subarray(0,Math.min(w.length,E-F)),F);else if(D==="repeatpad")for(let F=w.length;F<-x;F+=w.length)S.set(w,F);w=S}if(B==="fusion")throw new Error(`Truncation strategy "${B}" not implemented`);v=await this._extract_fbank_features(w,this.mel_filters_slaney,this.config.nb_max_samples)}return v.unsqueeze_(0)}async _extract_fbank_features(w,E,B=null){return(0,m.spectrogram)(w,this.window,this.config.fft_window_size,this.config.hop_length,{power:2,mel_filters:E,log_mel:"dB",max_num_frames:B,do_pad:!1,transpose:!0})}async _call(w,{max_length:E=null}={}){return(0,u.validate_audio_inputs)(w,"ClapFeatureExtractor"),{input_features:(await this._get_input_mel(w,E??this.config.nb_max_samples,this.config.truncation,this.config.padding)).unsqueeze_(0)}}}},"./src/models/clip/image_processing_clip.js":(a,o,n)=>{n.r(o),n.d(o,{CLIPFeatureExtractor:()=>b,CLIPImageProcessor:()=>m});var u=n("./src/base/image_processors_utils.js");class m extends u.ImageProcessor{}class b extends m{}},"./src/models/convnext/image_processing_convnext.js":(a,o,n)=>{n.r(o),n.d(o,{ConvNextFeatureExtractor:()=>b,ConvNextImageProcessor:()=>m});var u=n("./src/base/image_processors_utils.js");class m extends u.ImageProcessor{constructor(w){super(w),this.crop_pct=this.config.crop_pct??224/256}async resize(w){const E=this.size?.shortest_edge;if(E===void 0)throw new Error("Size dictionary must contain 'shortest_edge' key.");if(E<384){const B=Math.floor(E/this.crop_pct),[D,v]=this.get_resize_output_image_size(w,{shortest_edge:B});w=await w.resize(D,v,{resample:this.resample}),w=await w.center_crop(E,E)}else w=await w.resize(E,E,{resample:this.resample});return w}}class b extends m{}},"./src/models/dac/feature_extraction_dac.js":(a,o,n)=>{n.r(o),n.d(o,{DacFeatureExtractor:()=>m});var u=n("./src/models/encodec/feature_extraction_encodec.js");class m extends u.EncodecFeatureExtractor{}},"./src/models/deit/image_processing_deit.js":(a,o,n)=>{n.r(o),n.d(o,{DeiTFeatureExtractor:()=>b,DeiTImageProcessor:()=>m});var u=n("./src/base/image_processors_utils.js");class m extends u.ImageProcessor{}class b extends m{}},"./src/models/detr/image_processing_detr.js":(a,o,n)=>{n.r(o),n.d(o,{DetrFeatureExtractor:()=>C,DetrImageProcessor:()=>b});var u=n("./src/base/image_processors_utils.js"),m=n("./src/utils/tensor.js");class b extends u.ImageProcessor{async _call(E){const B=await super._call(E),D=[B.pixel_values.dims[0],64,64],v=(0,m.full)(D,1n);return{...B,pixel_mask:v}}post_process_object_detection(...E){return(0,u.post_process_object_detection)(...E)}post_process_panoptic_segmentation(...E){return(0,u.post_process_panoptic_segmentation)(...E)}post_process_instance_segmentation(...E){return(0,u.post_process_instance_segmentation)(...E)}}class C extends b{}},"./src/models/donut/image_processing_donut.js":(a,o,n)=>{n.r(o),n.d(o,{DonutFeatureExtractor:()=>b,DonutImageProcessor:()=>m});var u=n("./src/base/image_processors_utils.js");class m extends u.ImageProcessor{pad_image(w,E,B,D={}){const[v,x,S]=E;let F=this.image_mean;Array.isArray(this.image_mean)||(F=new Array(S).fill(F));let j=this.image_std;Array.isArray(j)||(j=new Array(S).fill(F));const J=F.map((L,N)=>-L/j[N]);return super.pad_image(w,E,B,{center:!0,constant_values:J,...D})}}class b extends m{}},"./src/models/dpt/image_processing_dpt.js":(a,o,n)=>{n.r(o),n.d(o,{DPTFeatureExtractor:()=>b,DPTImageProcessor:()=>m});var u=n("./src/base/image_processors_utils.js");class m extends u.ImageProcessor{}class b extends m{}},"./src/models/efficientnet/image_processing_efficientnet.js":(a,o,n)=>{n.r(o),n.d(o,{EfficientNetImageProcessor:()=>m});var u=n("./src/base/image_processors_utils.js");class m extends u.ImageProcessor{constructor(C){super(C),this.include_top=this.config.include_top??!0,this.include_top&&(this.image_std=this.image_std.map(w=>w*w))}}},"./src/models/encodec/feature_extraction_encodec.js":(a,o,n)=>{n.r(o),n.d(o,{EncodecFeatureExtractor:()=>b});var u=n("./src/base/feature_extraction_utils.js"),m=n("./src/utils/tensor.js");class b extends u.FeatureExtractor{async _call(w){(0,u.validate_audio_inputs)(w,"EncodecFeatureExtractor"),w instanceof Float64Array&&(w=new Float32Array(w));const E=this.config.feature_size;if(w.length%E!==0)throw new Error(`The length of the audio data must be a multiple of the number of channels (${E}).`);const B=[1,E,w.length/E];return{input_values:new m.Tensor("float32",w,B)}}}},"./src/models/feature_extractors.js":(a,o,n)=>{n.r(o),n.d(o,{ASTFeatureExtractor:()=>u.ASTFeatureExtractor,ClapFeatureExtractor:()=>b.ClapFeatureExtractor,DacFeatureExtractor:()=>C.DacFeatureExtractor,EncodecFeatureExtractor:()=>m.EncodecFeatureExtractor,ImageFeatureExtractor:()=>j.ImageProcessor,MoonshineFeatureExtractor:()=>w.MoonshineFeatureExtractor,PyAnnoteFeatureExtractor:()=>E.PyAnnoteFeatureExtractor,SeamlessM4TFeatureExtractor:()=>B.SeamlessM4TFeatureExtractor,SnacFeatureExtractor:()=>D.SnacFeatureExtractor,SpeechT5FeatureExtractor:()=>v.SpeechT5FeatureExtractor,Wav2Vec2FeatureExtractor:()=>x.Wav2Vec2FeatureExtractor,WeSpeakerFeatureExtractor:()=>S.WeSpeakerFeatureExtractor,WhisperFeatureExtractor:()=>F.WhisperFeatureExtractor});var u=n("./src/models/audio_spectrogram_transformer/feature_extraction_audio_spectrogram_transformer.js"),m=n("./src/models/encodec/feature_extraction_encodec.js"),b=n("./src/models/clap/feature_extraction_clap.js"),C=n("./src/models/dac/feature_extraction_dac.js"),w=n("./src/models/moonshine/feature_extraction_moonshine.js"),E=n("./src/models/pyannote/feature_extraction_pyannote.js"),B=n("./src/models/seamless_m4t/feature_extraction_seamless_m4t.js"),D=n("./src/models/snac/feature_extraction_snac.js"),v=n("./src/models/speecht5/feature_extraction_speecht5.js"),x=n("./src/models/wav2vec2/feature_extraction_wav2vec2.js"),S=n("./src/models/wespeaker/feature_extraction_wespeaker.js"),F=n("./src/models/whisper/feature_extraction_whisper.js"),j=n("./src/base/image_processors_utils.js")},"./src/models/florence2/processing_florence2.js":(a,o,n)=>{n.r(o),n.d(o,{Florence2Processor:()=>C});var u=n("./src/base/processing_utils.js"),m=n("./src/models/auto/image_processing_auto.js"),b=n("./src/tokenizers.js");class C extends u.Processor{static tokenizer_class=b.AutoTokenizer;static image_processor_class=m.AutoImageProcessor;constructor(E,B){super(E,B);const{tasks_answer_post_processing_type:D,task_prompts_without_inputs:v,task_prompts_with_input:x}=this.image_processor.config;this.tasks_answer_post_processing_type=new Map(Object.entries(D??{})),this.task_prompts_without_inputs=new Map(Object.entries(v??{})),this.task_prompts_with_input=new Map(Object.entries(x??{})),this.regexes={quad_boxes:/(.+?)<loc_(\d+)><loc_(\d+)><loc_(\d+)><loc_(\d+)><loc_(\d+)><loc_(\d+)><loc_(\d+)><loc_(\d+)>/gm,bboxes:/([^<]+)?<loc_(\d+)><loc_(\d+)><loc_(\d+)><loc_(\d+)>/gm},this.size_per_bin=1e3}construct_prompts(E){typeof E=="string"&&(E=[E]);const B=[];for(const D of E)if(this.task_prompts_without_inputs.has(D))B.push(this.task_prompts_without_inputs.get(D));else{for(const[v,x]of this.task_prompts_with_input)if(D.includes(v)){B.push(x.replaceAll("{input}",D).replaceAll(v,""));break}B.length!==E.length&&B.push(D)}return B}post_process_generation(E,B,D){const v=this.tasks_answer_post_processing_type.get(B)??"pure_text";E=E.replaceAll("<s>","").replaceAll("</s>","");let x;switch(v){case"pure_text":x=E;break;case"description_with_bboxes":case"bboxes":case"phrase_grounding":case"ocr":const S=v==="ocr"?"quad_boxes":"bboxes",F=E.matchAll(this.regexes[S]),j=[],J=[];for(const[L,N,...U]of F)j.push(N?N.trim():j.at(-1)??""),J.push(U.map((f,k)=>(Number(f)+.5)/this.size_per_bin*D[k%2]));x={labels:j,[S]:J};break;default:throw new Error(`Task "${B}" (of type "${v}") not yet implemented.`)}return{[B]:x}}async _call(E,B=null,D={}){if(!E&&!B)throw new Error("Either text or images must be provided");const v=await this.image_processor(E,D),x=B?this.tokenizer(B,D):{};return{...v,...x}}}},"./src/models/glpn/image_processing_glpn.js":(a,o,n)=>{n.r(o),n.d(o,{GLPNFeatureExtractor:()=>m});var u=n("./src/base/image_processors_utils.js");class m extends u.ImageProcessor{}},"./src/models/grounding_dino/image_processing_grounding_dino.js":(a,o,n)=>{n.r(o),n.d(o,{GroundingDinoImageProcessor:()=>b});var u=n("./src/base/image_processors_utils.js"),m=n("./src/utils/tensor.js");class b extends u.ImageProcessor{async _call(w){const E=await super._call(w),B=E.pixel_values.dims,D=(0,m.ones)([B[0],B[2],B[3]]);return{...E,pixel_mask:D}}}},"./src/models/grounding_dino/processing_grounding_dino.js":(a,o,n)=>{n.r(o),n.d(o,{GroundingDinoProcessor:()=>E});var u=n("./src/base/processing_utils.js"),m=n("./src/models/auto/image_processing_auto.js"),b=n("./src/tokenizers.js"),C=n("./src/base/image_processors_utils.js");function w(B,D){const x=B.dims.at(-1)-1,S=B.tolist();S.fill(!1,0,1),S.fill(!1,x);const F=D.tolist();return S.map((j,J)=>j?J:null).filter(j=>j!==null).map(j=>F[j])}class E extends u.Processor{static tokenizer_class=b.AutoTokenizer;static image_processor_class=m.AutoImageProcessor;async _call(D,v,x={}){const S=D?await this.image_processor(D,x):{};return{...v?this.tokenizer(v,x):{},...S}}post_process_grounded_object_detection(D,v,{box_threshold:x=.25,text_threshold:S=.25,target_sizes:F=null}={}){const{logits:j,pred_boxes:J}=D,L=j.dims[0];if(F!==null&&F.length!==L)throw Error("Make sure that you pass in as many target sizes as the batch dimension of the logits");const N=j.dims.at(1),U=j.sigmoid(),f=U.max(-1).tolist(),k=J.tolist().map(d=>d.map(y=>(0,C.center_to_corners_format)(y))),e=[];for(let d=0;d<L;++d){const y=F!==null?F[d]:null;y!==null&&(k[d]=k[d].map($=>$.map((be,Ce)=>be*y[(Ce+1)%2])));const ee=f[d],T=[],O=[],we=[];for(let $=0;$<N;++$){const be=ee[$];if(be<=x)continue;const Ce=k[d][$],Ee=U[d][$];T.push(be),we.push(Ce);const Be=w(Ee.gt(S),v[d]);O.push(Be)}e.push({scores:T,boxes:we,labels:this.batch_decode(O)})}return e}}},"./src/models/idefics3/image_processing_idefics3.js":(a,o,n)=>{n.r(o),n.d(o,{Idefics3ImageProcessor:()=>b});var u=n("./src/base/image_processors_utils.js"),m=n("./src/utils/tensor.js");class b extends u.ImageProcessor{constructor(w){super(w),this.do_image_splitting=w.do_image_splitting??!0,this.max_image_size=w.max_image_size}get_resize_for_vision_encoder(w,E){let[B,D]=w.dims.slice(-2);const v=D/B;return D>=B?(D=Math.ceil(D/E)*E,B=Math.floor(D/v),B=Math.ceil(B/E)*E):(B=Math.ceil(B/E)*E,D=Math.floor(B*v),D=Math.ceil(D/E)*E),{height:B,width:D}}async _call(w,{do_image_splitting:E=null,return_row_col_info:B=!1}={}){let D;if(!Array.isArray(w))D=[[w]];else{if(w.length===0||!w[0])throw new Error("No images provided.");Array.isArray(w[0])?D=w:D=[w]}let v=[],x=[],S=[];const F=[],j=[];for(const d of D){let y=await Promise.all(d.map(O=>this.preprocess(O)));F.push(...y.map(O=>O.original_size)),j.push(...y.map(O=>O.reshaped_input_size)),y.forEach(O=>O.pixel_values.unsqueeze_(0));const{longest_edge:ee}=this.max_image_size;let T;if(E??this.do_image_splitting){let O=new Array(y.length),we=new Array(y.length);T=await Promise.all(y.map(async($,be)=>{const Ce=this.get_resize_for_vision_encoder($.pixel_values,ee),Ee=await(0,m.interpolate_4d)($.pixel_values,{size:[Ce.height,Ce.width]}),{frames:Be,num_splits_h:ve,num_splits_w:Ne}=await this.split_image(Ee,this.max_image_size);return O[be]=ve,we[be]=Ne,(0,m.cat)(Be,0)})),x.push(O),S.push(we)}else{const O=[ee,ee];T=await Promise.all(y.map(we=>(0,m.interpolate_4d)(we.pixel_values,{size:O}))),x.push(new Array(y.length).fill(0)),S.push(new Array(y.length).fill(0))}v.push((0,m.cat)(T,0))}const J=v.length,[L,N,U,f]=v[0].dims;let k,e;if(J===1)k=v[0].unsqueeze_(0),e=(0,m.full)([J,L,U,f],!0);else{const d=Math.max(...v.map(T=>T.dims.at(0)));e=(0,m.full)([J,d,U,f],!0);const y=e.data,ee=d*U*f;for(let T=0;T<J;++T){const O=v[T].dims[0];if(O<d){v[T]=(0,m.cat)([v[T],(0,m.full)([d-O,N,U,f],0)],0);const we=T*ee+O*U*f,$=(T+1)*ee;y.fill(!1,we,$)}}k=(0,m.stack)(v,0)}return{pixel_values:k,pixel_attention_mask:e,original_sizes:F,reshaped_input_sizes:j,...B?{rows:x,cols:S}:{}}}async split_image(w,{longest_edge:E}){const B=E,D=E,v=[],[x,S]=w.dims.slice(-2);let F=0,j=0;if(x>B||S>D){F=Math.ceil(x/B),j=Math.ceil(S/D);const J=Math.ceil(x/F),L=Math.ceil(S/j);for(let f=0;f<F;++f)for(let k=0;k<j;++k){let e,d,y,ee;f===F-1?(d=x-J,ee=x):(d=f*J,ee=(f+1)*J),k===j-1?(e=S-L,y=S):(e=k*L,y=(k+1)*L);const T=[d,e],O=[ee,y],we=await(0,m.slice)(w,T,O,[2,3]);v.push(we)}const N=B,U=D;(x!==N||S!==U)&&(w=await(0,m.interpolate_4d)(w,{size:[N,U]}))}return v.push(w),{frames:v,num_splits_h:F,num_splits_w:j}}}},"./src/models/idefics3/processing_idefics3.js":(a,o,n)=>{n.r(o),n.d(o,{Idefics3Processor:()=>D});var u=n("./src/base/processing_utils.js"),m=n("./src/models/auto/image_processing_auto.js"),b=n("./src/tokenizers.js");n("./src/utils/image.js");var C=n("./src/utils/core.js");function w(v,x,S,F,j,J){let L="";for(let N=0;N<x;++N){for(let U=0;U<S;++U)L+=F+`<row_${N+1}_col_${U+1}>`+j.repeat(v);L+=`
`}return L+=`
${F}${J}`+j.repeat(v)+`${F}`,L}function E(v,x,S,F){return`${x}${F}`+S.repeat(v)+`${x}`}function B(v,x,S,F,j,J){return v===0&&x===0?E(S,F,j,J):w(S,v,x,F,j,J)}class D extends u.Processor{static image_processor_class=m.AutoImageProcessor;static tokenizer_class=b.AutoTokenizer;static uses_processor_config=!0;fake_image_token="<fake_token_around_image>";image_token="<image>";global_img_token="<global-img>";async _call(x,S=null,F={}){F.return_row_col_info??=!0;let j;S&&(j=await this.image_processor(S,F)),Array.isArray(x)||(x=[x]);const J=j.rows??[new Array(x.length).fill(0)],L=j.cols??[new Array(x.length).fill(0)],N=this.config.image_seq_len,U=[],f=[];for(let e=0;e<x.length;++e){const d=x[e],y=J[e],ee=L[e];U.push((0,C.count)(d,this.image_token));const T=y.map(($,be)=>B($,ee[be],N,this.fake_image_token,this.image_token,this.global_img_token)),O=d.split(this.image_token);if(O.length===0)throw new Error("The image token should be present in the text.");let we=O[0];for(let $=0;$<T.length;++$)we+=T[$]+O[$+1];f.push(we)}return{...this.tokenizer(f),...j}}}},"./src/models/image_processors.js":(a,o,n)=>{n.r(o),n.d(o,{BeitFeatureExtractor:()=>u.BeitFeatureExtractor,BitImageProcessor:()=>m.BitImageProcessor,CLIPFeatureExtractor:()=>C.CLIPFeatureExtractor,CLIPImageProcessor:()=>C.CLIPImageProcessor,ChineseCLIPFeatureExtractor:()=>b.ChineseCLIPFeatureExtractor,ConvNextFeatureExtractor:()=>w.ConvNextFeatureExtractor,ConvNextImageProcessor:()=>w.ConvNextImageProcessor,DPTFeatureExtractor:()=>v.DPTFeatureExtractor,DPTImageProcessor:()=>v.DPTImageProcessor,DeiTFeatureExtractor:()=>E.DeiTFeatureExtractor,DeiTImageProcessor:()=>E.DeiTImageProcessor,DetrFeatureExtractor:()=>B.DetrFeatureExtractor,DetrImageProcessor:()=>B.DetrImageProcessor,DonutFeatureExtractor:()=>D.DonutFeatureExtractor,DonutImageProcessor:()=>D.DonutImageProcessor,EfficientNetImageProcessor:()=>x.EfficientNetImageProcessor,GLPNFeatureExtractor:()=>S.GLPNFeatureExtractor,GroundingDinoImageProcessor:()=>F.GroundingDinoImageProcessor,Idefics3ImageProcessor:()=>j.Idefics3ImageProcessor,JinaCLIPImageProcessor:()=>L.JinaCLIPImageProcessor,LlavaOnevisionImageProcessor:()=>N.LlavaOnevisionImageProcessor,Mask2FormerImageProcessor:()=>U.Mask2FormerImageProcessor,MaskFormerFeatureExtractor:()=>f.MaskFormerFeatureExtractor,MaskFormerImageProcessor:()=>f.MaskFormerImageProcessor,MobileNetV1FeatureExtractor:()=>k.MobileNetV1FeatureExtractor,MobileNetV1ImageProcessor:()=>k.MobileNetV1ImageProcessor,MobileNetV2FeatureExtractor:()=>e.MobileNetV2FeatureExtractor,MobileNetV2ImageProcessor:()=>e.MobileNetV2ImageProcessor,MobileNetV3FeatureExtractor:()=>d.MobileNetV3FeatureExtractor,MobileNetV3ImageProcessor:()=>d.MobileNetV3ImageProcessor,MobileNetV4FeatureExtractor:()=>y.MobileNetV4FeatureExtractor,MobileNetV4ImageProcessor:()=>y.MobileNetV4ImageProcessor,MobileViTFeatureExtractor:()=>ee.MobileViTFeatureExtractor,MobileViTImageProcessor:()=>ee.MobileViTImageProcessor,NougatImageProcessor:()=>T.NougatImageProcessor,OwlViTFeatureExtractor:()=>we.OwlViTFeatureExtractor,OwlViTImageProcessor:()=>we.OwlViTImageProcessor,Owlv2ImageProcessor:()=>O.Owlv2ImageProcessor,Phi3VImageProcessor:()=>$.Phi3VImageProcessor,PvtImageProcessor:()=>be.PvtImageProcessor,Qwen2VLImageProcessor:()=>Ce.Qwen2VLImageProcessor,RTDetrImageProcessor:()=>Ee.RTDetrImageProcessor,SamImageProcessor:()=>Be.SamImageProcessor,SegformerFeatureExtractor:()=>ve.SegformerFeatureExtractor,SegformerImageProcessor:()=>ve.SegformerImageProcessor,SiglipImageProcessor:()=>Ne.SiglipImageProcessor,SmolVLMImageProcessor:()=>Fe.SmolVLMImageProcessor,Swin2SRImageProcessor:()=>le.Swin2SRImageProcessor,VLMImageProcessor:()=>J.VLMImageProcessor,ViTFeatureExtractor:()=>Ae.ViTFeatureExtractor,ViTImageProcessor:()=>Ae.ViTImageProcessor,VitMatteImageProcessor:()=>pe.VitMatteImageProcessor,VitPoseImageProcessor:()=>oe.VitPoseImageProcessor,YolosFeatureExtractor:()=>Ge.YolosFeatureExtractor,YolosImageProcessor:()=>Ge.YolosImageProcessor});var u=n("./src/models/beit/image_processing_beit.js"),m=n("./src/models/bit/image_processing_bit.js"),b=n("./src/models/chinese_clip/image_processing_chinese_clip.js"),C=n("./src/models/clip/image_processing_clip.js"),w=n("./src/models/convnext/image_processing_convnext.js"),E=n("./src/models/deit/image_processing_deit.js"),B=n("./src/models/detr/image_processing_detr.js"),D=n("./src/models/donut/image_processing_donut.js"),v=n("./src/models/dpt/image_processing_dpt.js"),x=n("./src/models/efficientnet/image_processing_efficientnet.js"),S=n("./src/models/glpn/image_processing_glpn.js"),F=n("./src/models/grounding_dino/image_processing_grounding_dino.js"),j=n("./src/models/idefics3/image_processing_idefics3.js"),J=n("./src/models/janus/image_processing_janus.js"),L=n("./src/models/jina_clip/image_processing_jina_clip.js"),N=n("./src/models/llava_onevision/image_processing_llava_onevision.js"),U=n("./src/models/mask2former/image_processing_mask2former.js"),f=n("./src/models/maskformer/image_processing_maskformer.js"),k=n("./src/models/mobilenet_v1/image_processing_mobilenet_v1.js"),e=n("./src/models/mobilenet_v2/image_processing_mobilenet_v2.js"),d=n("./src/models/mobilenet_v3/image_processing_mobilenet_v3.js"),y=n("./src/models/mobilenet_v4/image_processing_mobilenet_v4.js"),ee=n("./src/models/mobilevit/image_processing_mobilevit.js"),T=n("./src/models/nougat/image_processing_nougat.js"),O=n("./src/models/owlv2/image_processing_owlv2.js"),we=n("./src/models/owlvit/image_processing_owlvit.js"),$=n("./src/models/phi3_v/image_processing_phi3_v.js"),be=n("./src/models/pvt/image_processing_pvt.js"),Ce=n("./src/models/qwen2_vl/image_processing_qwen2_vl.js"),Ee=n("./src/models/rt_detr/image_processing_rt_detr.js"),Be=n("./src/models/sam/image_processing_sam.js"),ve=n("./src/models/segformer/image_processing_segformer.js"),Ne=n("./src/models/siglip/image_processing_siglip.js"),Fe=n("./src/models/smolvlm/image_processing_smolvlm.js"),le=n("./src/models/swin2sr/image_processing_swin2sr.js"),Ae=n("./src/models/vit/image_processing_vit.js"),pe=n("./src/models/vitmatte/image_processing_vitmatte.js"),oe=n("./src/models/vitpose/image_processing_vitpose.js"),Ge=n("./src/models/yolos/image_processing_yolos.js")},"./src/models/janus/image_processing_janus.js":(a,o,n)=>{n.r(o),n.d(o,{VLMImageProcessor:()=>m});var u=n("./src/base/image_processors_utils.js");class m extends u.ImageProcessor{constructor(C){super({do_pad:!0,pad_size:{width:C.image_size,height:C.image_size},...C}),this.constant_values=this.config.background_color.map(w=>w*this.rescale_factor)}pad_image(C,w,E,B){return super.pad_image(C,w,E,{constant_values:this.constant_values,center:!0,...B})}}},"./src/models/janus/processing_janus.js":(a,o,n)=>{n.r(o),n.d(o,{VLChatProcessor:()=>B});var u=n("./src/base/processing_utils.js"),m=n("./src/models/auto/image_processing_auto.js"),b=n("./src/tokenizers.js"),C=n("./src/utils/core.js"),w=n("./src/utils/tensor.js"),E=n("./src/utils/image.js");class B extends u.Processor{static image_processor_class=m.AutoImageProcessor;static tokenizer_class=b.AutoTokenizer;static uses_processor_config=!0;constructor(v,x){super(v,x),this.image_tag=this.config.image_tag,this.image_start_tag=this.config.image_start_tag,this.image_end_tag=this.config.image_end_tag,this.num_image_tokens=this.config.num_image_tokens}async _call(v,{images:x=null,chat_template:S="default"}={}){x?Array.isArray(x)||(x=[x]):x=await Promise.all(v.filter(T=>T.images).flatMap(T=>T.images).map(T=>E.RawImage.read(T)));const F=this.tokenizer,j=F.apply_chat_template(v,{tokenize:!1,add_generation_prompt:!0,chat_template:S}),J=T=>F.encode(T,{add_special_tokens:!1}),L=j.split(this.image_tag),N=L.length-1;if(x.length!==N)throw new Error(`Number of images provided (${x.length}) does not match number of "${this.image_tag}" image tags (${N})`);const[U,f,k]=F.model.convert_tokens_to_ids([this.image_tag,this.image_start_tag,this.image_end_tag]);let e=J(L[0]),d=new Array(e.length).fill(!1);for(let T=1;T<L.length;++T){const O=new Array(this.num_image_tokens).fill(U),we=J(L[T]);e=(0,C.mergeArrays)(e,[f],O,[k],we);const $=new Array(this.num_image_tokens).fill(!0);d=(0,C.mergeArrays)(d,[!1],$,[!1],new Array(we.length).fill(!1))}const y=[1,e.length],ee={input_ids:new w.Tensor("int64",e,y),attention_mask:new w.Tensor("int64",new Array(e.length).fill(1),y),images_seq_mask:new w.Tensor("bool",d,y),images_emb_mask:new w.Tensor("bool",new Array(N*this.num_image_tokens).fill(!0),[1,N,this.num_image_tokens])};if(x&&x.length>0){const T=await this.image_processor(x);return T.pixel_values.unsqueeze_(0),{...ee,...T}}return ee}}},"./src/models/jina_clip/image_processing_jina_clip.js":(a,o,n)=>{n.r(o),n.d(o,{JinaCLIPImageProcessor:()=>m});var u=n("./src/base/image_processors_utils.js");class m extends u.ImageProcessor{constructor(C){const{resize_mode:w,fill_color:E,interpolation:B,size:D,...v}=C,x=w==="squash"?{width:D,height:D}:w==="shortest"?{shortest_edge:D}:{longest_edge:D},S=B==="bicubic"?3:2;super({...v,size:x,resample:S,do_center_crop:!0,crop_size:D,do_normalize:!0})}}},"./src/models/jina_clip/processing_jina_clip.js":(a,o,n)=>{n.r(o),n.d(o,{JinaCLIPProcessor:()=>C});var u=n("./src/base/processing_utils.js"),m=n("./src/models/auto/image_processing_auto.js"),b=n("./src/tokenizers.js");class C extends u.Processor{static tokenizer_class=b.AutoTokenizer;static image_processor_class=m.AutoImageProcessor;async _call(E=null,B=null,D={}){if(!E&&!B)throw new Error("Either text or images must be provided");const v=E?this.tokenizer(E,D):{},x=B?await this.image_processor(B,D):{};return{...v,...x}}}},"./src/models/llava_onevision/image_processing_llava_onevision.js":(a,o,n)=>{n.r(o),n.d(o,{LlavaOnevisionImageProcessor:()=>m});var u=n("./src/base/image_processors_utils.js");class m extends u.ImageProcessor{}},"./src/models/mask2former/image_processing_mask2former.js":(a,o,n)=>{n.r(o),n.d(o,{Mask2FormerImageProcessor:()=>m});var u=n("./src/models/maskformer/image_processing_maskformer.js");class m extends u.MaskFormerImageProcessor{}},"./src/models/maskformer/image_processing_maskformer.js":(a,o,n)=>{n.r(o),n.d(o,{MaskFormerFeatureExtractor:()=>b,MaskFormerImageProcessor:()=>m});var u=n("./src/base/image_processors_utils.js");class m extends u.ImageProcessor{post_process_panoptic_segmentation(...w){return(0,u.post_process_panoptic_segmentation)(...w)}post_process_instance_segmentation(...w){return(0,u.post_process_instance_segmentation)(...w)}}class b extends m{}},"./src/models/mgp_str/processing_mgp_str.js":(a,o,n)=>{n.r(o),n.d(o,{MgpstrProcessor:()=>E});var u=n("./src/base/processing_utils.js"),m=n("./src/models/auto/image_processing_auto.js"),b=n("./src/tokenizers.js"),C=n("./src/utils/maths.js");const w={char:["char_decode",1],bpe:["bpe_decode",2],wp:["wp_decode",102]};class E extends u.Processor{static tokenizer_class=b.AutoTokenizer;static image_processor_class=m.AutoImageProcessor;get char_tokenizer(){return this.components.char_tokenizer}get bpe_tokenizer(){return this.components.bpe_tokenizer}get wp_tokenizer(){return this.components.wp_tokenizer}_decode_helper(D,v){if(!w.hasOwnProperty(v))throw new Error(`Format ${v} is not supported.`);const[x,S]=w[v],F=this[x].bind(this),[j,J]=D.dims,L=[],N=[],U=D.tolist();for(let k=0;k<j;++k){const e=U[k],d=[],y=[];for(let T=1;T<J;++T){const[O,we]=(0,C.max)((0,C.softmax)(e[T]));if(y.push(O),we==S)break;d.push(we)}const ee=y.length>0?y.reduce((T,O)=>T*O,1):0;N.push(d),L.push(ee)}return[F(N),L]}char_decode(D){return this.char_tokenizer.batch_decode(D).map(v=>v.replaceAll(" ",""))}bpe_decode(D){return this.bpe_tokenizer.batch_decode(D)}wp_decode(D){return this.wp_tokenizer.batch_decode(D).map(v=>v.replaceAll(" ",""))}batch_decode([D,v,x]){const[S,F]=this._decode_helper(D,"char"),[j,J]=this._decode_helper(v,"bpe"),[L,N]=this._decode_helper(x,"wp"),U=[],f=[];for(let k=0;k<S.length;++k){const[e,d]=(0,C.max)([F[k],J[k],N[k]]);U.push([S[k],j[k],L[k]][d]),f.push(e)}return{generated_text:U,scores:f,char_preds:S,bpe_preds:j,wp_preds:L}}static async from_pretrained(...D){const v=await super.from_pretrained(...D),x=await b.AutoTokenizer.from_pretrained("Xenova/gpt2"),S=await b.AutoTokenizer.from_pretrained("Xenova/bert-base-uncased");return v.components={image_processor:v.image_processor,char_tokenizer:v.tokenizer,bpe_tokenizer:x,wp_tokenizer:S},v}async _call(D,v=null){const x=await this.image_processor(D);return v&&(x.labels=this.tokenizer(v).input_ids),x}}},"./src/models/mobilenet_v1/image_processing_mobilenet_v1.js":(a,o,n)=>{n.r(o),n.d(o,{MobileNetV1FeatureExtractor:()=>b,MobileNetV1ImageProcessor:()=>m});var u=n("./src/base/image_processors_utils.js");class m extends u.ImageProcessor{}class b extends m{}},"./src/models/mobilenet_v2/image_processing_mobilenet_v2.js":(a,o,n)=>{n.r(o),n.d(o,{MobileNetV2FeatureExtractor:()=>b,MobileNetV2ImageProcessor:()=>m});var u=n("./src/base/image_processors_utils.js");class m extends u.ImageProcessor{}class b extends m{}},"./src/models/mobilenet_v3/image_processing_mobilenet_v3.js":(a,o,n)=>{n.r(o),n.d(o,{MobileNetV3FeatureExtractor:()=>b,MobileNetV3ImageProcessor:()=>m});var u=n("./src/base/image_processors_utils.js");class m extends u.ImageProcessor{}class b extends m{}},"./src/models/mobilenet_v4/image_processing_mobilenet_v4.js":(a,o,n)=>{n.r(o),n.d(o,{MobileNetV4FeatureExtractor:()=>b,MobileNetV4ImageProcessor:()=>m});var u=n("./src/base/image_processors_utils.js");class m extends u.ImageProcessor{}class b extends m{}},"./src/models/mobilevit/image_processing_mobilevit.js":(a,o,n)=>{n.r(o),n.d(o,{MobileViTFeatureExtractor:()=>b,MobileViTImageProcessor:()=>m});var u=n("./src/base/image_processors_utils.js");class m extends u.ImageProcessor{}class b extends m{}},"./src/models/moonshine/feature_extraction_moonshine.js":(a,o,n)=>{n.r(o),n.d(o,{MoonshineFeatureExtractor:()=>b});var u=n("./src/base/feature_extraction_utils.js"),m=n("./src/utils/tensor.js");class b extends u.FeatureExtractor{async _call(w){(0,u.validate_audio_inputs)(w,"MoonshineFeatureExtractor"),w instanceof Float64Array&&(w=new Float32Array(w));const E=[1,w.length];return{input_values:new m.Tensor("float32",w,E)}}}},"./src/models/moonshine/processing_moonshine.js":(a,o,n)=>{n.r(o),n.d(o,{MoonshineProcessor:()=>C});var u=n("./src/models/auto/feature_extraction_auto.js"),m=n("./src/tokenizers.js"),b=n("./src/base/processing_utils.js");class C extends b.Processor{static tokenizer_class=m.AutoTokenizer;static feature_extractor_class=u.AutoFeatureExtractor;async _call(E){return await this.feature_extractor(E)}}},"./src/models/nougat/image_processing_nougat.js":(a,o,n)=>{n.r(o),n.d(o,{NougatImageProcessor:()=>m});var u=n("./src/models/donut/image_processing_donut.js");class m extends u.DonutImageProcessor{}},"./src/models/owlv2/image_processing_owlv2.js":(a,o,n)=>{n.r(o),n.d(o,{Owlv2ImageProcessor:()=>m});var u=n("./src/models/owlvit/image_processing_owlvit.js");class m extends u.OwlViTImageProcessor{}},"./src/models/owlvit/image_processing_owlvit.js":(a,o,n)=>{n.r(o),n.d(o,{OwlViTFeatureExtractor:()=>b,OwlViTImageProcessor:()=>m});var u=n("./src/base/image_processors_utils.js");class m extends u.ImageProcessor{post_process_object_detection(...w){return(0,u.post_process_object_detection)(...w)}}class b extends m{}},"./src/models/owlvit/processing_owlvit.js":(a,o,n)=>{n.r(o),n.d(o,{OwlViTProcessor:()=>C});var u=n("./src/base/processing_utils.js"),m=n("./src/models/auto/image_processing_auto.js"),b=n("./src/tokenizers.js");class C extends u.Processor{static tokenizer_class=b.AutoTokenizer;static image_processor_class=m.AutoImageProcessor}},"./src/models/paligemma/processing_paligemma.js":(a,o,n)=>{n.r(o),n.d(o,{PaliGemmaProcessor:()=>E});var u=n("./src/base/processing_utils.js"),m=n("./src/models/auto/image_processing_auto.js"),b=n("./src/tokenizers.js");const C="<image>";function w(B,D,v,x,S){return`${x.repeat(v*S)}${D}${B}
`}class E extends u.Processor{static tokenizer_class=b.AutoTokenizer;static image_processor_class=m.AutoImageProcessor;static uses_processor_config=!1;async _call(D,v=null,x={}){v||(console.warn("You are using PaliGemma without a text prefix. It will perform as a picture-captioning model."),v=""),Array.isArray(D)||(D=[D]),Array.isArray(v)||(v=[v]);const S=this.tokenizer.bos_token,F=this.image_processor.config.image_seq_length;let j;v.some(N=>N.includes(C))?j=v.map(N=>{const U=N.replaceAll(C,C.repeat(F)),f=U.lastIndexOf(C),k=f===-1?0:f+C.length;return U.slice(0,k)+S+U.slice(k)+`
`}):(console.warn("You are passing both `text` and `images` to `PaliGemmaProcessor`. The processor expects special image tokens in the text, as many tokens as there are images per each text. It is recommended to add `<image>` tokens in the very beginning of your text. For this call, we will infer how many images each text has and add special tokens."),j=v.map(N=>w(N,S,F,C,D.length)));const J=this.tokenizer(j,x);return{...await this.image_processor(D,x),...J}}}},"./src/models/phi3_v/image_processing_phi3_v.js":(a,o,n)=>{n.r(o),n.d(o,{Phi3VImageProcessor:()=>D});var u=n("./src/base/image_processors_utils.js"),m=n("./src/utils/tensor.js");const b=336,C=[2,3],{ceil:w,floor:E,sqrt:B}=Math;class D extends u.ImageProcessor{constructor(x){super({...x,do_normalize:!0,do_pad:!0,pad_size:"custom",do_convert_rgb:!0,do_resize:!0}),this._num_crops=x.num_crops}calc_num_image_tokens_from_image_size(x,S){const{num_img_tokens:F}=this.config;return E((E(S/b)*E(x/b)+1)*F+1+(E(S/b)+1)*B(F))}get_resize_output_image_size(x,S){const F=this._num_crops,[j,J]=x.size;let L=j/J,N=1;for(;N*Math.ceil(N/L)<=F;)N+=1;N-=1;const U=Math.floor(N*336),f=Math.floor(U/L);return[U,f]}pad_image(x,S,F,j={}){const[J,L]=S,N=b*w(J/b),U=b*w(L/b),f=[1,1,1].map((k,e)=>(k-this.image_mean[e])/this.image_std[e]);return super.pad_image(x,S,{width:U,height:N},{center:!0,constant_values:f,...j})}async _call(x,{num_crops:S=null}={}){if(this._num_crops=S??=this.config.num_crops,S<4||B(S)%1!==0)throw new Error("num_crops must be a square number >= 4");Array.isArray(x)||(x=[x]);const F=x.length,j=await Promise.all(x.map(d=>this.preprocess(d))),J=j.map(d=>d.original_size),L=j.map(d=>d.reshaped_input_size),N=[];for(const{pixel_values:d}of j){d.unsqueeze_(0);const[y,ee]=d.dims.slice(-2),T=await(0,m.interpolate_4d)(d,{size:[b,b],mode:"bicubic"});if(S>0){const O=[],we=B(S),$=E(ee/we),be=E(y/we);for(let Ee=0;Ee<we;++Ee)for(let Be=0;Be<we;++Be){let ve,Ne,Fe,le;Ee===we-1?(Ne=y-be,le=y):(Ne=Ee*be,le=(Ee+1)*be),Be===we-1?(ve=ee-$,Fe=ee):(ve=Be*$,Fe=(Be+1)*$);const Ae=[Ne,ve],pe=[le,Fe],oe=await(0,m.slice)(d,Ae,pe,C);O.push(oe)}const Ce=await(0,m.interpolate_4d)((0,m.cat)(O,0),{size:[b,b],mode:"bicubic"});N.push((0,m.cat)([T,Ce],0))}else N.push(T)}const U=(0,m.stack)(N,0),f=L.map(d=>d.map(y=>b*w(y/b))),k=new m.Tensor("int64",f.flat(),[F,2]),e=f.map(([d,y])=>this.calc_num_image_tokens_from_image_size(y,d));return{pixel_values:U,original_sizes:J,reshaped_input_sizes:L,image_sizes:k,num_img_tokens:e}}}},"./src/models/phi3_v/processing_phi3_v.js":(a,o,n)=>{n.r(o),n.d(o,{Phi3VProcessor:()=>E});var u=n("./src/base/processing_utils.js"),m=n("./src/models/auto/image_processing_auto.js"),b=n("./src/tokenizers.js");n("./src/utils/image.js");const C="<|image|>",w=/<\|image_\d+\|>/g;class E extends u.Processor{static image_processor_class=m.AutoImageProcessor;static tokenizer_class=b.AutoTokenizer;async _call(D,v=null,{padding:x=!0,truncation:S=!0,num_crops:F=null}={}){Array.isArray(D)||(D=[D]);let j,J;if(v){J=await this.image_processor(v,{num_crops:F});const{num_img_tokens:L}=J,N=D.map((f,k)=>f.split(w).join(C.repeat(L[k])));j=this.tokenizer(N,{padding:x,truncation:S});const U=this.tokenizer.model.convert_tokens_to_ids([C])[0];j.input_ids.map_(f=>f==U?-f:f)}else j=this.tokenizer(D);return{...j,...J}}}},"./src/models/processors.js":(a,o,n)=>{n.r(o),n.d(o,{Florence2Processor:()=>u.Florence2Processor,GroundingDinoProcessor:()=>m.GroundingDinoProcessor,Idefics3Processor:()=>b.Idefics3Processor,JinaCLIPProcessor:()=>w.JinaCLIPProcessor,MgpstrProcessor:()=>E.MgpstrProcessor,MoonshineProcessor:()=>B.MoonshineProcessor,OwlViTProcessor:()=>D.OwlViTProcessor,PaliGemmaProcessor:()=>x.PaliGemmaProcessor,Phi3VProcessor:()=>v.Phi3VProcessor,PyAnnoteProcessor:()=>S.PyAnnoteProcessor,Qwen2VLProcessor:()=>F.Qwen2VLProcessor,SamProcessor:()=>j.SamProcessor,SmolVLMProcessor:()=>J.SmolVLMProcessor,SpeechT5Processor:()=>L.SpeechT5Processor,UltravoxProcessor:()=>N.UltravoxProcessor,VLChatProcessor:()=>C.VLChatProcessor,Wav2Vec2Processor:()=>U.Wav2Vec2Processor,Wav2Vec2ProcessorWithLM:()=>f.Wav2Vec2ProcessorWithLM,WhisperProcessor:()=>k.WhisperProcessor});var u=n("./src/models/florence2/processing_florence2.js"),m=n("./src/models/grounding_dino/processing_grounding_dino.js"),b=n("./src/models/idefics3/processing_idefics3.js"),C=n("./src/models/janus/processing_janus.js"),w=n("./src/models/jina_clip/processing_jina_clip.js"),E=n("./src/models/mgp_str/processing_mgp_str.js"),B=n("./src/models/moonshine/processing_moonshine.js"),D=n("./src/models/owlvit/processing_owlvit.js"),v=n("./src/models/phi3_v/processing_phi3_v.js"),x=n("./src/models/paligemma/processing_paligemma.js"),S=n("./src/models/pyannote/processing_pyannote.js"),F=n("./src/models/qwen2_vl/processing_qwen2_vl.js"),j=n("./src/models/sam/processing_sam.js"),J=n("./src/models/smolvlm/processing_smolvlm.js"),L=n("./src/models/speecht5/processing_speecht5.js"),N=n("./src/models/ultravox/processing_ultravox.js"),U=n("./src/models/wav2vec2/processing_wav2vec2.js"),f=n("./src/models/wav2vec2_with_lm/processing_wav2vec2_with_lm.js"),k=n("./src/models/whisper/processing_whisper.js")},"./src/models/pvt/image_processing_pvt.js":(a,o,n)=>{n.r(o),n.d(o,{PvtImageProcessor:()=>m});var u=n("./src/base/image_processors_utils.js");class m extends u.ImageProcessor{}},"./src/models/pyannote/feature_extraction_pyannote.js":(a,o,n)=>{n.r(o),n.d(o,{PyAnnoteFeatureExtractor:()=>C});var u=n("./src/base/feature_extraction_utils.js"),m=n("./src/utils/tensor.js"),b=n("./src/utils/maths.js");class C extends u.FeatureExtractor{async _call(E){(0,u.validate_audio_inputs)(E,"PyAnnoteFeatureExtractor"),E instanceof Float64Array&&(E=new Float32Array(E));const B=[1,1,E.length];return{input_values:new m.Tensor("float32",E,B)}}samples_to_frames(E){return(E-this.config.offset)/this.config.step}post_process_speaker_diarization(E,B){const D=B/this.samples_to_frames(B)/this.config.sampling_rate,v=[];for(const x of E.tolist()){const S=[];let F=-1;for(let j=0;j<x.length;++j){const J=(0,b.softmax)(x[j]),[L,N]=(0,b.max)(J),[U,f]=[j,j+1];N!==F?(F=N,S.push({id:N,start:U,end:f,score:L})):(S.at(-1).end=f,S.at(-1).score+=L)}v.push(S.map(({id:j,start:J,end:L,score:N})=>({id:j,start:J*D,end:L*D,confidence:N/(L-J)})))}return v}}},"./src/models/pyannote/processing_pyannote.js":(a,o,n)=>{n.r(o),n.d(o,{PyAnnoteProcessor:()=>b});var u=n("./src/base/processing_utils.js"),m=n("./src/models/pyannote/feature_extraction_pyannote.js");class b extends u.Processor{static feature_extractor_class=m.PyAnnoteFeatureExtractor;async _call(w){return await this.feature_extractor(w)}post_process_speaker_diarization(...w){return this.feature_extractor.post_process_speaker_diarization(...w)}get sampling_rate(){return this.feature_extractor.config.sampling_rate}}},"./src/models/qwen2_vl/image_processing_qwen2_vl.js":(a,o,n)=>{n.r(o),n.d(o,{Qwen2VLImageProcessor:()=>b});var u=n("./src/base/image_processors_utils.js"),m=n("./src/utils/tensor.js");class b extends u.ImageProcessor{async _call(w,...E){const{pixel_values:B,original_sizes:D,reshaped_input_sizes:v}=await super._call(w,...E);let x=B;const{temporal_patch_size:S,merge_size:F,patch_size:j}=this.config;x.dims[0]===1&&(x=(0,m.cat)(Array.from({length:S},()=>x),0));const J=x.dims[0]/S,L=x.dims[1],N=Math.floor(x.dims[2]/j),U=Math.floor(x.dims[3]/j),f=x.view(J,S,L,Math.floor(N/F),F,j,Math.floor(U/F),F,j).permute(0,3,6,4,7,2,1,5,8).view(J*N*U,L*S*j*j),k=new m.Tensor("int64",[J,N,U],[1,3]);return{pixel_values:f,image_grid_thw:k,original_sizes:D,reshaped_input_sizes:v}}}},"./src/models/qwen2_vl/processing_qwen2_vl.js":(a,o,n)=>{n.r(o),n.d(o,{Qwen2VLProcessor:()=>C});var u=n("./src/base/processing_utils.js"),m=n("./src/models/auto/image_processing_auto.js"),b=n("./src/tokenizers.js");n("./src/utils/image.js");class C extends u.Processor{static image_processor_class=m.AutoImageProcessor;static tokenizer_class=b.AutoTokenizer;async _call(E,B=null,...D){Array.isArray(E)||(E=[E]);let v,x;if(B&&(v=await this.image_processor(B),x=v.image_grid_thw),x){let F=this.image_processor.config.merge_size**2,j=0;const J=x.tolist();E=E.map(L=>{for(;L.includes("<|image_pad|>");){const N=Number(J[j++].reduce((U,f)=>U*f,1n));L=L.replace("<|image_pad|>","<|placeholder|>".repeat(Math.floor(N/F)))}return L.replaceAll("<|placeholder|>","<|image_pad|>")})}return{...this.tokenizer(E),...v}}}},"./src/models/rt_detr/image_processing_rt_detr.js":(a,o,n)=>{n.r(o),n.d(o,{RTDetrImageProcessor:()=>m});var u=n("./src/base/image_processors_utils.js");class m extends u.ImageProcessor{post_process_object_detection(...C){return(0,u.post_process_object_detection)(...C)}}},"./src/models/sam/image_processing_sam.js":(a,o,n)=>{n.r(o),n.d(o,{SamImageProcessor:()=>C});var u=n("./src/base/image_processors_utils.js"),m=n("./src/utils/core.js"),b=n("./src/utils/tensor.js");class C extends u.ImageProcessor{reshape_input_points(E,B,D,v=!1){E=structuredClone(E);let x=(0,m.calculateDimensions)(E);if(x.length===3)v||(x=[1,...x]),E=[E];else if(x.length!==4)throw Error("The input_points must be a 4D tensor of shape `batch_size`, `point_batch_size`, `nb_points_per_image`, `2`.");for(let S=0;S<E.length;++S){let F=B[S],j=D[S],J=[j[0]/F[0],j[1]/F[1]];for(let L=0;L<E[S].length;++L)for(let N=0;N<E[S][L].length;++N)for(let U=0;U<E[S][L][N].length;++U)E[S][L][N][U]*=J[U%2]}return new b.Tensor("float32",Float32Array.from(E.flat(1/0)),x)}add_input_labels(E,B){let D=(0,m.calculateDimensions)(E);if(D.length===2)D=[1,...D],E=[E];else if(D.length!==3)throw Error("The input_points must be a 4D tensor of shape `batch_size`, `point_batch_size`, `nb_points_per_image`, `2`.");if(D.some((v,x)=>v!==B.dims[x]))throw Error(`The first ${D.length} dimensions of 'input_points' and 'input_labels' must be the same.`);return new b.Tensor("int64",E.flat(1/0).map(BigInt),D)}async _call(E,{input_points:B=null,input_labels:D=null,input_boxes:v=null}={}){const x=await super._call(E);if(B&&(x.input_points=this.reshape_input_points(B,x.original_sizes,x.reshaped_input_sizes)),D){if(!x.input_points)throw Error("`input_points` must be provided if `input_labels` are provided.");x.input_labels=this.add_input_labels(D,x.input_points)}return v&&(x.input_boxes=this.reshape_input_points(v,x.original_sizes,x.reshaped_input_sizes,!0)),x}async post_process_masks(E,B,D,{mask_threshold:v=0,binarize:x=!0,pad_size:S=null}={}){const F=[];S=S??this.pad_size;const j=[S.height,S.width];for(let J=0;J<B.length;++J){const L=B[J],N=D[J];let U=await(0,b.interpolate_4d)(E[J],{mode:"bilinear",size:j});if(U=U.slice(null,null,[0,N[0]],[0,N[1]]),U=await(0,b.interpolate_4d)(U,{mode:"bilinear",size:L}),x){const f=U.data,k=new Uint8Array(f.length);for(let e=0;e<f.length;++e)f[e]>v&&(k[e]=1);U=new b.Tensor("bool",k,U.dims)}F.push(U)}return F}generate_crop_boxes(E,B,{crop_n_layers:D=0,overlap_ratio:v=512/1500,points_per_crop:x=32,crop_n_points_downscale_factor:S=1}={}){}}},"./src/models/sam/processing_sam.js":(a,o,n)=>{n.r(o),n.d(o,{SamProcessor:()=>b});var u=n("./src/base/processing_utils.js"),m=n("./src/models/auto/image_processing_auto.js");class b extends u.Processor{static image_processor_class=m.AutoImageProcessor;async _call(...w){return await this.image_processor(...w)}post_process_masks(...w){return this.image_processor.post_process_masks(...w)}reshape_input_points(...w){return this.image_processor.reshape_input_points(...w)}}},"./src/models/seamless_m4t/feature_extraction_seamless_m4t.js":(a,o,n)=>{n.r(o),n.d(o,{SeamlessM4TFeatureExtractor:()=>C});var u=n("./src/base/feature_extraction_utils.js"),m=n("./src/utils/tensor.js"),b=n("./src/utils/audio.js");class C extends u.FeatureExtractor{constructor(E){super(E);const B=this.config.sampling_rate,D=(0,b.mel_filter_bank)(257,this.config.num_mel_bins,20,Math.floor(B/2),B,null,"kaldi",!0);this.mel_filters=D,this.window=(0,b.window_function)(400,"povey",{periodic:!1})}async _extract_fbank_features(E,B){return E=E.map(D=>D*32768),(0,b.spectrogram)(E,this.window,400,160,{fft_length:512,power:2,center:!1,preemphasis:.97,mel_filters:this.mel_filters,log_mel:"log",mel_floor:1192092955078125e-22,remove_dc_offset:!0,max_num_frames:B,transpose:!0})}async _call(E,{padding:B=!0,pad_to_multiple_of:D=2,do_normalize_per_mel_bins:v=!0,return_attention_mask:x=!0}={}){(0,u.validate_audio_inputs)(E,"SeamlessM4TFeatureExtractor");let S=await this._extract_fbank_features(E,this.config.max_length);if(v){const[k,e]=S.dims,d=S.data;for(let y=0;y<e;++y){let ee=0;for(let $=0;$<k;++$)ee+=d[$*e+y];const T=ee/k;let O=0;for(let $=0;$<k;++$)O+=(d[$*e+y]-T)**2;O/=k-1;const we=Math.sqrt(O+1e-7);for(let $=0;$<k;++$){const be=$*e+y;d[be]=(d[be]-T)/we}}}let F;if(B){const[k,e]=S.dims,d=S.data,y=k%D;if(y>0){const ee=new Float32Array(e*(k+y));ee.set(d),ee.fill(this.config.padding_value,d.length);const T=k+y;S=new m.Tensor(S.type,ee,[T,e]),x&&(F=new m.Tensor("int64",new BigInt64Array(T),[1,T]),F.data.fill(1n,0,k))}}const[j,J]=S.dims,L=this.config.stride;if(j%L!==0)throw new Error(`The number of frames (${j}) must be a multiple of the stride (${L}).`);const U=S.view(1,Math.floor(j/L),J*L),f={input_features:U};if(x){const k=U.dims[1],e=new BigInt64Array(k);if(F){const d=F.data;for(let y=1,ee=0;y<j;y+=L,++ee)e[ee]=d[y]}else e.fill(1n);f.attention_mask=new m.Tensor("int64",e,[1,k])}return f}}},"./src/models/segformer/image_processing_segformer.js":(a,o,n)=>{n.r(o),n.d(o,{SegformerFeatureExtractor:()=>b,SegformerImageProcessor:()=>m});var u=n("./src/base/image_processors_utils.js");class m extends u.ImageProcessor{post_process_semantic_segmentation(...w){return(0,u.post_process_semantic_segmentation)(...w)}}class b extends m{}},"./src/models/siglip/image_processing_siglip.js":(a,o,n)=>{n.r(o),n.d(o,{SiglipImageProcessor:()=>m});var u=n("./src/base/image_processors_utils.js");class m extends u.ImageProcessor{}},"./src/models/smolvlm/image_processing_smolvlm.js":(a,o,n)=>{n.r(o),n.d(o,{SmolVLMImageProcessor:()=>u.Idefics3ImageProcessor});var u=n("./src/models/idefics3/image_processing_idefics3.js")},"./src/models/smolvlm/processing_smolvlm.js":(a,o,n)=>{n.r(o),n.d(o,{SmolVLMProcessor:()=>u.Idefics3Processor});var u=n("./src/models/idefics3/processing_idefics3.js")},"./src/models/snac/feature_extraction_snac.js":(a,o,n)=>{n.r(o),n.d(o,{SnacFeatureExtractor:()=>m});var u=n("./src/models/dac/feature_extraction_dac.js");class m extends u.DacFeatureExtractor{}},"./src/models/speecht5/feature_extraction_speecht5.js":(a,o,n)=>{n.r(o),n.d(o,{SpeechT5FeatureExtractor:()=>m});var u=n("./src/base/feature_extraction_utils.js");class m extends u.FeatureExtractor{}},"./src/models/speecht5/processing_speecht5.js":(a,o,n)=>{n.r(o),n.d(o,{SpeechT5Processor:()=>C});var u=n("./src/base/processing_utils.js"),m=n("./src/tokenizers.js"),b=n("./src/models/auto/feature_extraction_auto.js");class C extends u.Processor{static tokenizer_class=m.AutoTokenizer;static feature_extractor_class=b.AutoFeatureExtractor;async _call(E){return await this.feature_extractor(E)}}},"./src/models/swin2sr/image_processing_swin2sr.js":(a,o,n)=>{n.r(o),n.d(o,{Swin2SRImageProcessor:()=>m});var u=n("./src/base/image_processors_utils.js");class m extends u.ImageProcessor{pad_image(C,w,E,B={}){const[D,v,x]=w;return super.pad_image(C,w,{width:v+(E-v%E)%E,height:D+(E-D%E)%E},{mode:"symmetric",center:!1,constant_values:-1,...B})}}},"./src/models/ultravox/processing_ultravox.js":(a,o,n)=>{n.r(o),n.d(o,{UltravoxProcessor:()=>C});var u=n("./src/models/auto/feature_extraction_auto.js"),m=n("./src/tokenizers.js"),b=n("./src/base/processing_utils.js");class C extends b.Processor{static tokenizer_class=m.AutoTokenizer;static feature_extractor_class=u.AutoFeatureExtractor;static uses_processor_config=!0;async _call(E,B=null,D={}){if(Array.isArray(E))throw new Error("Batched inputs are not supported yet.");let v={};if(B){const S=B.length,{input_features:F}=await this.feature_extractor(B,{...D,max_length:S}),j=Math.round(S/this.config.encoder_ds_factor+1e-4),J=1+Math.ceil(j/this.config.stack_factor);v.audio_token_len=[J],v.audio_values=F;const L=this.config.audio_placeholder;if(!E.includes(L))throw new Error(`The input text does not contain the image token ${L}.`);E=E.replaceAll(L,L.repeat(J))}return{...this.tokenizer(E,{add_special_tokens:!1,...D}),...v}}}},"./src/models/vit/image_processing_vit.js":(a,o,n)=>{n.r(o),n.d(o,{ViTFeatureExtractor:()=>b,ViTImageProcessor:()=>m});var u=n("./src/base/image_processors_utils.js");class m extends u.ImageProcessor{}class b extends m{}},"./src/models/vitmatte/image_processing_vitmatte.js":(a,o,n)=>{n.r(o),n.d(o,{VitMatteImageProcessor:()=>b});var u=n("./src/base/image_processors_utils.js"),m=n("./src/utils/tensor.js");class b extends u.ImageProcessor{async _call(w,E){Array.isArray(w)||(w=[w]),Array.isArray(E)||(E=[E]);const B=await Promise.all(w.map(x=>this.preprocess(x))),D=await Promise.all(E.map(x=>this.preprocess(x,{do_normalize:!1,do_convert_rgb:!1,do_convert_grayscale:!0})));return{pixel_values:(0,m.stack)(B.map((x,S)=>(0,m.cat)([x.pixel_values,D[S].pixel_values],0)),0),original_sizes:B.map(x=>x.original_size),reshaped_input_sizes:B.map(x=>x.reshaped_input_size)}}}},"./src/models/vitpose/image_processing_vitpose.js":(a,o,n)=>{n.r(o),n.d(o,{VitPoseImageProcessor:()=>m});var u=n("./src/base/image_processors_utils.js");class m extends u.ImageProcessor{post_process_pose_estimation(C,w,{threshold:E=null}={}){const B=C.tolist(),[D,v,x,S]=C.dims,F=[];for(let j=0;j<D;++j){const J=B[j],L=w[j],N=[];for(let U=0;U<L.length;++U){const f=L[U],k=[],e=[],d=[],y=f.at(-2)/S,ee=f.at(-1)/x;for(let T=0;T<J.length;++T){let[O,we]=[0,0],$=0,be=-1/0;const Ce=J[T];for(let Be=0;Be<Ce.length;++Be){const ve=Ce[Be];for(let Ne=0;Ne<ve.length;++Ne){const Fe=ve[Ne];$+=Fe,be=Math.max(be,Fe),O+=(Ne+.5)*Fe,we+=Be*Fe}}if(E!=null&&be<E)continue;const Ee=[y*O/$,ee*we/$];k.push(Ee),d.push(T),e.push(be)}N.push({bbox:f,scores:e,labels:d,keypoints:k})}F.push(N)}return F}}},"./src/models/wav2vec2/feature_extraction_wav2vec2.js":(a,o,n)=>{n.r(o),n.d(o,{Wav2Vec2FeatureExtractor:()=>b});var u=n("./src/base/feature_extraction_utils.js"),m=n("./src/utils/tensor.js");class b extends u.FeatureExtractor{_zero_mean_unit_var_norm(w){const B=w.reduce((v,x)=>v+x,0)/w.length,D=w.reduce((v,x)=>v+(x-B)**2,0)/w.length;return w.map(v=>(v-B)/Math.sqrt(D+1e-7))}async _call(w){(0,u.validate_audio_inputs)(w,"Wav2Vec2FeatureExtractor"),w instanceof Float64Array&&(w=new Float32Array(w));let E=w;this.config.do_normalize&&(E=this._zero_mean_unit_var_norm(E));const B=[1,E.length];return{input_values:new m.Tensor("float32",E,B),attention_mask:new m.Tensor("int64",new BigInt64Array(E.length).fill(1n),B)}}}},"./src/models/wav2vec2/processing_wav2vec2.js":(a,o,n)=>{n.r(o),n.d(o,{Wav2Vec2Processor:()=>C});var u=n("./src/tokenizers.js"),m=n("./src/models/auto/feature_extraction_auto.js"),b=n("./src/base/processing_utils.js");class C extends b.Processor{static tokenizer_class=u.AutoTokenizer;static feature_extractor_class=m.AutoFeatureExtractor;async _call(E){return await this.feature_extractor(E)}}},"./src/models/wav2vec2_with_lm/processing_wav2vec2_with_lm.js":(a,o,n)=>{n.r(o),n.d(o,{Wav2Vec2ProcessorWithLM:()=>C});var u=n("./src/tokenizers.js"),m=n("./src/models/auto/feature_extraction_auto.js"),b=n("./src/base/processing_utils.js");class C extends b.Processor{static tokenizer_class=u.AutoTokenizer;static feature_extractor_class=m.AutoFeatureExtractor;async _call(E){return await this.feature_extractor(E)}}},"./src/models/wespeaker/feature_extraction_wespeaker.js":(a,o,n)=>{n.r(o),n.d(o,{WeSpeakerFeatureExtractor:()=>b});var u=n("./src/base/feature_extraction_utils.js");n("./src/utils/tensor.js");var m=n("./src/utils/audio.js");class b extends u.FeatureExtractor{constructor(w){super(w);const E=this.config.sampling_rate,B=(0,m.mel_filter_bank)(257,this.config.num_mel_bins,20,Math.floor(E/2),E,null,"kaldi",!0);this.mel_filters=B,this.window=(0,m.window_function)(400,"hamming",{periodic:!1}),this.min_num_frames=this.config.min_num_frames}async _extract_fbank_features(w){return w=w.map(E=>E*32768),(0,m.spectrogram)(w,this.window,400,160,{fft_length:512,power:2,center:!1,preemphasis:.97,mel_filters:this.mel_filters,log_mel:"log",mel_floor:1192092955078125e-22,remove_dc_offset:!0,transpose:!0,min_num_frames:this.min_num_frames})}async _call(w){(0,u.validate_audio_inputs)(w,"WeSpeakerFeatureExtractor");const E=(await this._extract_fbank_features(w)).unsqueeze_(0);if(this.config.fbank_centering_span===null){const B=E.mean(1).data,D=E.data,[v,x,S]=E.dims;for(let F=0;F<v;++F){const j=F*x*S,J=F*S;for(let L=0;L<x;++L){const N=j+L*S;for(let U=0;U<S;++U)D[N+U]-=B[J+U]}}}return{input_features:E}}}},"./src/models/whisper/common_whisper.js":(a,o,n)=>{n.r(o),n.d(o,{WHISPER_LANGUAGE_MAPPING:()=>m,WHISPER_TO_LANGUAGE_CODE_MAPPING:()=>b,whisper_language_to_code:()=>C});const u=[["en","english"],["zh","chinese"],["de","german"],["es","spanish"],["ru","russian"],["ko","korean"],["fr","french"],["ja","japanese"],["pt","portuguese"],["tr","turkish"],["pl","polish"],["ca","catalan"],["nl","dutch"],["ar","arabic"],["sv","swedish"],["it","italian"],["id","indonesian"],["hi","hindi"],["fi","finnish"],["vi","vietnamese"],["he","hebrew"],["uk","ukrainian"],["el","greek"],["ms","malay"],["cs","czech"],["ro","romanian"],["da","danish"],["hu","hungarian"],["ta","tamil"],["no","norwegian"],["th","thai"],["ur","urdu"],["hr","croatian"],["bg","bulgarian"],["lt","lithuanian"],["la","latin"],["mi","maori"],["ml","malayalam"],["cy","welsh"],["sk","slovak"],["te","telugu"],["fa","persian"],["lv","latvian"],["bn","bengali"],["sr","serbian"],["az","azerbaijani"],["sl","slovenian"],["kn","kannada"],["et","estonian"],["mk","macedonian"],["br","breton"],["eu","basque"],["is","icelandic"],["hy","armenian"],["ne","nepali"],["mn","mongolian"],["bs","bosnian"],["kk","kazakh"],["sq","albanian"],["sw","swahili"],["gl","galician"],["mr","marathi"],["pa","punjabi"],["si","sinhala"],["km","khmer"],["sn","shona"],["yo","yoruba"],["so","somali"],["af","afrikaans"],["oc","occitan"],["ka","georgian"],["be","belarusian"],["tg","tajik"],["sd","sindhi"],["gu","gujarati"],["am","amharic"],["yi","yiddish"],["lo","lao"],["uz","uzbek"],["fo","faroese"],["ht","haitian creole"],["ps","pashto"],["tk","turkmen"],["nn","nynorsk"],["mt","maltese"],["sa","sanskrit"],["lb","luxembourgish"],["my","myanmar"],["bo","tibetan"],["tl","tagalog"],["mg","malagasy"],["as","assamese"],["tt","tatar"],["haw","hawaiian"],["ln","lingala"],["ha","hausa"],["ba","bashkir"],["jw","javanese"],["su","sundanese"]],m=new Map(u),b=new Map([...u.map(([w,E])=>[E,w]),["burmese","my"],["valencian","ca"],["flemish","nl"],["haitian","ht"],["letzeburgesch","lb"],["pushto","ps"],["panjabi","pa"],["moldavian","ro"],["moldovan","ro"],["sinhalese","si"],["castilian","es"]]);function C(w){w=w.toLowerCase();let E=b.get(w);if(E===void 0){const B=w.match(/^<\|([a-z]{2})\|>$/);if(B&&(w=B[1]),m.has(w))E=w;else{const v=w.length===2?m.keys():m.values();throw new Error(`Language "${w}" is not supported. Must be one of: ${JSON.stringify(Array.from(v))}`)}}return E}},"./src/models/whisper/feature_extraction_whisper.js":(a,o,n)=>{n.r(o),n.d(o,{WhisperFeatureExtractor:()=>C});var u=n("./src/base/feature_extraction_utils.js");n("./src/utils/tensor.js");var m=n("./src/utils/audio.js"),b=n("./src/utils/maths.js");class C extends u.FeatureExtractor{constructor(E){super(E),this.config.mel_filters??=(0,m.mel_filter_bank)(Math.floor(1+this.config.n_fft/2),this.config.feature_size,0,8e3,this.config.sampling_rate,"slaney","slaney"),this.window=(0,m.window_function)(this.config.n_fft,"hann")}async _extract_fbank_features(E){const B=await(0,m.spectrogram)(E,this.window,this.config.n_fft,this.config.hop_length,{power:2,mel_filters:this.config.mel_filters,log_mel:"log10",max_num_frames:Math.min(Math.floor(E.length/this.config.hop_length),this.config.nb_max_frames)}),D=B.data,v=(0,b.max)(D)[0];for(let x=0;x<D.length;++x)D[x]=(Math.max(D[x],v-8)+4)/4;return B}async _call(E,{max_length:B=null}={}){(0,u.validate_audio_inputs)(E,"WhisperFeatureExtractor");let D;const v=B??this.config.n_samples;return E.length>v?(E.length>this.config.n_samples&&console.warn("Attempting to extract features for audio longer than 30 seconds. If using a pipeline to extract transcript from a long audio clip, remember to specify `chunk_length_s` and/or `stride_length_s`."),D=E.slice(0,v)):(D=new Float32Array(v),D.set(E)),{input_features:(await this._extract_fbank_features(D)).unsqueeze_(0)}}}},"./src/models/whisper/generation_whisper.js":(a,o,n)=>{n.r(o),n.d(o,{WhisperGenerationConfig:()=>m});var u=n("./src/generation/configuration_utils.js");class m extends u.GenerationConfig{return_timestamps=null;return_token_timestamps=null;num_frames=null;alignment_heads=null;task=null;language=null;no_timestamps_token_id=null;prompt_ids=null;is_multilingual=null;lang_to_id=null;task_to_id=null;max_initial_timestamp_index=1}},"./src/models/whisper/processing_whisper.js":(a,o,n)=>{n.r(o),n.d(o,{WhisperProcessor:()=>C});var u=n("./src/models/auto/feature_extraction_auto.js"),m=n("./src/tokenizers.js"),b=n("./src/base/processing_utils.js");class C extends b.Processor{static tokenizer_class=m.AutoTokenizer;static feature_extractor_class=u.AutoFeatureExtractor;async _call(E){return await this.feature_extractor(E)}}},"./src/models/yolos/image_processing_yolos.js":(a,o,n)=>{n.r(o),n.d(o,{YolosFeatureExtractor:()=>b,YolosImageProcessor:()=>m});var u=n("./src/base/image_processors_utils.js");class m extends u.ImageProcessor{post_process_object_detection(...w){return(0,u.post_process_object_detection)(...w)}}class b extends m{}},"./src/ops/registry.js":(a,o,n)=>{n.r(o),n.d(o,{TensorOpRegistry:()=>E});var u=n("./src/backends/onnx.js"),m=n("./src/utils/tensor.js"),b=n("./src/env.js");const C=b.apis.IS_BROWSER_ENV||b.apis.IS_WEBWORKER_ENV,w=async(B,D,v)=>{const x=await(0,u.createInferenceSession)(new Uint8Array(B),D);let S=Promise.resolve();return async F=>{const j=(0,u.isONNXProxy)(),J=Object.fromEntries(Object.entries(F).map(([N,U])=>[N,(j?U.clone():U).ort_tensor])),L=await(S=C?S.then(()=>x.run(J)):x.run(J));return Array.isArray(v)?v.map(N=>new m.Tensor(L[N])):new m.Tensor(L[v])}};class E{static session_options={};static get nearest_interpolate_4d(){return this._nearest_interpolate_4d||(this._nearest_interpolate_4d=w([8,10,18,0,58,129,1,10,41,10,1,120,10,0,10,0,10,1,115,18,1,121,34,6,82,101,115,105,122,101,42,18,10,4,109,111,100,101,34,7,110,101,97,114,101,115,116,160,1,3,18,1,114,90,31,10,1,120,18,26,10,24,8,1,18,20,10,3,18,1,98,10,3,18,1,99,10,3,18,1,104,10,3,18,1,119,90,15,10,1,115,18,10,10,8,8,7,18,4,10,2,8,4,98,31,10,1,121,18,26,10,24,8,1,18,20,10,3,18,1,98,10,3,18,1,99,10,3,18,1,104,10,3,18,1,119,66,2,16,21],this.session_options,"y")),this._nearest_interpolate_4d}static get bilinear_interpolate_4d(){return this._bilinear_interpolate_4d||(this._bilinear_interpolate_4d=w([8,9,18,0,58,128,1,10,40,10,1,120,10,0,10,0,10,1,115,18,1,121,34,6,82,101,115,105,122,101,42,17,10,4,109,111,100,101,34,6,108,105,110,101,97,114,160,1,3,18,1,114,90,31,10,1,120,18,26,10,24,8,1,18,20,10,3,18,1,98,10,3,18,1,99,10,3,18,1,104,10,3,18,1,119,90,15,10,1,115,18,10,10,8,8,7,18,4,10,2,8,4,98,31,10,1,121,18,26,10,24,8,1,18,20,10,3,18,1,98,10,3,18,1,99,10,3,18,1,104,10,3,18,1,119,66,2,16,20],this.session_options,"y")),this._bilinear_interpolate_4d}static get bicubic_interpolate_4d(){return this._bicubic_interpolate_4d||(this._bicubic_interpolate_4d=w([8,9,18,0,58,127,10,39,10,1,120,10,0,10,0,10,1,115,18,1,121,34,6,82,101,115,105,122,101,42,16,10,4,109,111,100,101,34,5,99,117,98,105,99,160,1,3,18,1,114,90,31,10,1,120,18,26,10,24,8,1,18,20,10,3,18,1,98,10,3,18,1,99,10,3,18,1,104,10,3,18,1,119,90,15,10,1,115,18,10,10,8,8,7,18,4,10,2,8,4,98,31,10,1,121,18,26,10,24,8,1,18,20,10,3,18,1,98,10,3,18,1,99,10,3,18,1,104,10,3,18,1,119,66,2,16,20],this.session_options,"y")),this._bicubic_interpolate_4d}static get matmul(){return this._matmul||(this._matmul=w([8,9,18,0,58,55,10,17,10,1,97,10,1,98,18,1,99,34,6,77,97,116,77,117,108,18,1,114,90,9,10,1,97,18,4,10,2,8,1,90,9,10,1,98,18,4,10,2,8,1,98,9,10,1,99,18,4,10,2,8,1,66,2,16,20],this.session_options,"c")),this._matmul}static get stft(){return this._stft||(this._stft=w([8,7,18,0,58,148,1,10,38,10,1,115,10,1,106,10,1,119,10,1,108,18,1,111,34,4,83,84,70,84,42,15,10,8,111,110,101,115,105,100,101,100,24,1,160,1,2,18,1,115,90,26,10,1,115,18,21,10,19,8,1,18,15,10,3,18,1,98,10,3,18,1,115,10,3,18,1,99,90,11,10,1,106,18,6,10,4,8,7,18,0,90,16,10,1,119,18,11,10,9,8,1,18,5,10,3,18,1,119,90,11,10,1,108,18,6,10,4,8,7,18,0,98,31,10,1,111,18,26,10,24,8,1,18,20,10,3,18,1,98,10,3,18,1,102,10,3,18,1,100,10,3,18,1,99,66,2,16,17],this.session_options,"o")),this._stft}static get rfft(){return this._rfft||(this._rfft=w([8,9,18,0,58,97,10,33,10,1,120,10,0,10,1,97,18,1,121,34,3,68,70,84,42,15,10,8,111,110,101,115,105,100,101,100,24,1,160,1,2,18,1,100,90,21,10,1,120,18,16,10,14,8,1,18,10,10,3,18,1,115,10,3,18,1,99,90,11,10,1,97,18,6,10,4,8,7,18,0,98,21,10,1,121,18,16,10,14,8,1,18,10,10,3,18,1,115,10,3,18,1,99,66,2,16,20],this.session_options,"y")),this._rfft}static get top_k(){return this._top_k||(this._top_k=w([8,10,18,0,58,73,10,18,10,1,120,10,1,107,18,1,118,18,1,105,34,4,84,111,112,75,18,1,116,90,9,10,1,120,18,4,10,2,8,1,90,15,10,1,107,18,10,10,8,8,7,18,4,10,2,8,1,98,9,10,1,118,18,4,10,2,8,1,98,9,10,1,105,18,4,10,2,8,7,66,2,16,21],this.session_options,["v","i"])),this._top_k}static get slice(){return this._slice||(this._slice=w([8,7,18,0,58,96,10,25,10,1,120,10,1,115,10,1,101,10,1,97,10,1,116,18,1,121,34,5,83,108,105,99,101,18,1,114,90,9,10,1,120,18,4,10,2,8,1,90,9,10,1,115,18,4,10,2,8,7,90,9,10,1,101,18,4,10,2,8,7,90,9,10,1,97,18,4,10,2,8,7,90,9,10,1,116,18,4,10,2,8,7,98,9,10,1,121,18,4,10,2,8,1,66,2,16,13],this.session_options,"y")),this._slice}}},"./src/pipelines.js":(a,o,n)=>{n.r(o),n.d(o,{AudioClassificationPipeline:()=>we,AutomaticSpeechRecognitionPipeline:()=>be,BackgroundRemovalPipeline:()=>ve,DepthEstimationPipeline:()=>Ge,DocumentQuestionAnsweringPipeline:()=>Ae,FeatureExtractionPipeline:()=>T,FillMaskPipeline:()=>U,ImageClassificationPipeline:()=>Ee,ImageFeatureExtractionPipeline:()=>O,ImageSegmentationPipeline:()=>Be,ImageToImagePipeline:()=>oe,ImageToTextPipeline:()=>Ce,ObjectDetectionPipeline:()=>Fe,Pipeline:()=>j,QuestionAnsweringPipeline:()=>N,SummarizationPipeline:()=>k,Text2TextGenerationPipeline:()=>f,TextClassificationPipeline:()=>J,TextGenerationPipeline:()=>y,TextToAudioPipeline:()=>pe,TokenClassificationPipeline:()=>L,TranslationPipeline:()=>e,ZeroShotAudioClassificationPipeline:()=>$,ZeroShotClassificationPipeline:()=>ee,ZeroShotImageClassificationPipeline:()=>Ne,ZeroShotObjectDetectionPipeline:()=>le,pipeline:()=>aA});var u=n("./src/tokenizers.js"),m=n("./src/models.js"),b=n("./src/models/auto/processing_auto.js");n("./src/base/processing_utils.js");var C=n("./src/utils/generic.js"),w=n("./src/utils/core.js"),E=n("./src/utils/maths.js"),B=n("./src/utils/audio.js"),D=n("./src/utils/tensor.js"),v=n("./src/utils/image.js");async function x(ze){return Array.isArray(ze)||(ze=[ze]),await Promise.all(ze.map(de=>v.RawImage.read(de)))}async function S(ze,de){return Array.isArray(ze)||(ze=[ze]),await Promise.all(ze.map(Se=>typeof Se=="string"||Se instanceof URL?(0,B.read_audio)(Se,de):Se instanceof Float64Array?new Float32Array(Se):Se))}function F(ze,de){de&&(ze=ze.map(AA=>AA|0));const[Se,ge,He,Xe]=ze;return{xmin:Se,ymin:ge,xmax:He,ymax:Xe}}class j extends C.Callable{constructor({task:de,model:Se,tokenizer:ge=null,processor:He=null}){super(),this.task=de,this.model=Se,this.tokenizer=ge,this.processor=He}async dispose(){await this.model.dispose()}}class J extends j{constructor(de){super(de)}async _call(de,{top_k:Se=1}={}){const ge=this.tokenizer(de,{padding:!0,truncation:!0}),He=await this.model(ge),Xe=this.model.config.problem_type==="multi_label_classification"?H=>H.sigmoid():H=>new D.Tensor("float32",(0,E.softmax)(H.data),H.dims),AA=this.model.config.id2label,qe=[];for(const H of He.logits){const cA=Xe(H),fA=await(0,D.topk)(cA,Se),he=fA[0].tolist(),rA=fA[1].tolist().map((EA,PA)=>({label:AA?AA[EA]:`LABEL_${EA}`,score:he[PA]}));Se===1?qe.push(...rA):qe.push(rA)}return Array.isArray(de)||Se===1?qe:qe[0]}}class L extends j{constructor(de){super(de)}async _call(de,{ignore_labels:Se=["O"]}={}){const ge=Array.isArray(de),He=this.tokenizer(ge?de:[de],{padding:!0,truncation:!0}),AA=(await this.model(He)).logits,qe=this.model.config.id2label,H=[];for(let cA=0;cA<AA.dims[0];++cA){const fA=He.input_ids[cA],he=AA[cA],bA=[];for(let rA=0;rA<he.dims[0];++rA){const EA=he[rA],PA=(0,E.max)(EA.data)[1],wA=qe?qe[PA]:`LABEL_${PA}`;if(Se.includes(wA))continue;const ZA=this.tokenizer.decode([fA[rA].item()],{skip_special_tokens:!0});if(ZA==="")continue;const TA=(0,E.softmax)(EA.data);bA.push({entity:wA,score:TA[PA],index:rA,word:ZA})}H.push(bA)}return ge?H:H[0]}}class N extends j{constructor(de){super(de)}async _call(de,Se,{top_k:ge=1}={}){const He=this.tokenizer(de,{text_pair:Se,padding:!0,truncation:!0}),{start_logits:Xe,end_logits:AA}=await this.model(He),qe=He.input_ids.tolist(),H=He.attention_mask.tolist(),cA=this.tokenizer.all_special_ids,fA=[];for(let he=0;he<Xe.dims[0];++he){const bA=qe[he],rA=bA.findIndex(tA=>tA==this.tokenizer.sep_token_id);H[he].map((tA,OA)=>tA==1&&(OA===0||OA>rA&&cA.findIndex(ot=>ot==bA[OA])===-1));const EA=Xe[he].tolist(),PA=AA[he].tolist();for(let tA=1;tA<EA.length;++tA)(H[he]==0||tA<=rA||cA.findIndex(OA=>OA==bA[tA])!==-1)&&(EA[tA]=-1/0,PA[tA]=-1/0);const wA=(0,E.softmax)(EA).map((tA,OA)=>[tA,OA]),ZA=(0,E.softmax)(PA).map((tA,OA)=>[tA,OA]);wA[0][0]=0,ZA[0][0]=0;const TA=(0,w.product)(wA,ZA).filter(tA=>tA[0][1]<=tA[1][1]).map(tA=>[tA[0][1],tA[1][1],tA[0][0]*tA[1][0]]).sort((tA,OA)=>OA[2]-tA[2]);for(let tA=0;tA<Math.min(TA.length,ge);++tA){const[OA,ot,$A]=TA[tA],tt=bA.slice(OA,ot+1),Lt=this.tokenizer.decode(tt,{skip_special_tokens:!0});fA.push({answer:Lt,score:$A})}}return ge===1?fA[0]:fA}}class U extends j{constructor(de){super(de)}async _call(de,{top_k:Se=5}={}){const ge=this.tokenizer(de,{padding:!0,truncation:!0}),{logits:He}=await this.model(ge),Xe=[],AA=ge.input_ids.tolist();for(let qe=0;qe<AA.length;++qe){const H=AA[qe],cA=H.findIndex(EA=>EA==this.tokenizer.mask_token_id);if(cA===-1)throw Error(`Mask token (${this.tokenizer.mask_token}) not found in text.`);const fA=He[qe][cA],he=await(0,D.topk)(new D.Tensor("float32",(0,E.softmax)(fA.data),fA.dims),Se),bA=he[0].tolist(),rA=he[1].tolist();Xe.push(rA.map((EA,PA)=>{const wA=H.slice();return wA[cA]=EA,{score:bA[PA],token:Number(EA),token_str:this.tokenizer.decode([EA]),sequence:this.tokenizer.decode(wA,{skip_special_tokens:!0})}}))}return Array.isArray(de)?Xe:Xe[0]}}class f extends j{_key="generated_text";constructor(de){super(de)}async _call(de,Se={}){Array.isArray(de)||(de=[de]),this.model.config.prefix&&(de=de.map(H=>this.model.config.prefix+H));const ge=this.model.config.task_specific_params;ge&&ge[this.task]&&ge[this.task].prefix&&(de=de.map(H=>ge[this.task].prefix+H));const He=this.tokenizer,Xe={padding:!0,truncation:!0};let AA;this instanceof e&&"_build_translation_inputs"in He?AA=He._build_translation_inputs(de,Xe,Se):AA=He(de,Xe);const qe=await this.model.generate({...AA,...Se});return He.batch_decode(qe,{skip_special_tokens:!0}).map(H=>({[this._key]:H}))}}class k extends f{_key="summary_text";constructor(de){super(de)}}class e extends f{_key="translation_text";constructor(de){super(de)}}function d(ze){return Array.isArray(ze)&&ze.every(de=>"role"in de&&"content"in de)}class y extends j{constructor(de){super(de)}async _call(de,Se={}){let ge=!1,He=!1,Xe;if(typeof de=="string")Xe=de=[de];else if(Array.isArray(de)&&de.every(rA=>typeof rA=="string"))ge=!0,Xe=de;else{if(d(de))de=[de];else if(Array.isArray(de)&&de.every(d))ge=!0;else throw new Error("Input must be a string, an array of strings, a Chat, or an array of Chats");He=!0,Xe=de.map(rA=>this.tokenizer.apply_chat_template(rA,{tokenize:!1,add_generation_prompt:!0}))}const AA=Se.add_special_tokens??!1,qe=He?!1:Se.return_full_text??!0;this.tokenizer.padding_side="left";const H=this.tokenizer(Xe,{add_special_tokens:AA,padding:!0,truncation:!0}),cA=await this.model.generate({...H,...Se}),fA=this.tokenizer.batch_decode(cA,{skip_special_tokens:!0});let he;!qe&&H.input_ids.dims.at(-1)>0&&(he=this.tokenizer.batch_decode(H.input_ids,{skip_special_tokens:!0}).map(rA=>rA.length));const bA=Array.from({length:de.length},rA=>[]);for(let rA=0;rA<fA.length;++rA){const EA=Math.floor(rA/cA.dims[0]*de.length);he&&(fA[rA]=fA[rA].slice(he[EA])),bA[EA].push({generated_text:He?[...de[EA],{role:"assistant",content:fA[rA]}]:fA[rA]})}return!ge&&bA.length===1?bA[0]:bA}}class ee extends j{constructor(de){super(de),this.label2id=Object.fromEntries(Object.entries(this.model.config.label2id).map(([Se,ge])=>[Se.toLowerCase(),ge])),this.entailment_id=this.label2id.entailment,this.entailment_id===void 0&&(console.warn("Could not find 'entailment' in label2id mapping. Using 2 as entailment_id."),this.entailment_id=2),this.contradiction_id=this.label2id.contradiction??this.label2id.not_entailment,this.contradiction_id===void 0&&(console.warn("Could not find 'contradiction' in label2id mapping. Using 0 as contradiction_id."),this.contradiction_id=0)}async _call(de,Se,{hypothesis_template:ge="This example is {}.",multi_label:He=!1}={}){const Xe=Array.isArray(de);Xe||(de=[de]),Array.isArray(Se)||(Se=[Se]);const AA=Se.map(cA=>ge.replace("{}",cA)),qe=He||Se.length===1,H=[];for(const cA of de){const fA=[];for(const rA of AA){const EA=this.tokenizer(cA,{text_pair:rA,padding:!0,truncation:!0}),PA=await this.model(EA);qe?fA.push([PA.logits.data[this.contradiction_id],PA.logits.data[this.entailment_id]]):fA.push(PA.logits.data[this.entailment_id])}const bA=(qe?fA.map(rA=>(0,E.softmax)(rA)[1]):(0,E.softmax)(fA)).map((rA,EA)=>[rA,EA]).sort((rA,EA)=>EA[0]-rA[0]);H.push({sequence:cA,labels:bA.map(rA=>Se[rA[1]]),scores:bA.map(rA=>rA[0])})}return Xe?H:H[0]}}class T extends j{constructor(de){super(de)}async _call(de,{pooling:Se="none",normalize:ge=!1,quantize:He=!1,precision:Xe="binary"}={}){const AA=this.tokenizer(de,{padding:!0,truncation:!0}),qe=await this.model(AA);let H=qe.last_hidden_state??qe.logits??qe.token_embeddings;if(Se!=="none")if(Se==="mean")H=(0,D.mean_pooling)(H,AA.attention_mask);else if(Se==="cls")H=H.slice(null,0);else throw Error(`Pooling method '${Se}' not supported.`);return ge&&(H=H.normalize(2,-1)),He&&(H=(0,D.quantize_embeddings)(H,Xe)),H}}class O extends j{constructor(de){super(de)}async _call(de,{pool:Se=null}={}){const ge=await x(de),{pixel_values:He}=await this.processor(ge),Xe=await this.model({pixel_values:He});let AA;if(Se){if(!("pooler_output"in Xe))throw Error("No pooled output was returned. Make sure the model has a 'pooler' layer when using the 'pool' option.");AA=Xe.pooler_output}else AA=Xe.last_hidden_state??Xe.logits??Xe.image_embeds;return AA}}class we extends j{constructor(de){super(de)}async _call(de,{top_k:Se=5}={}){const ge=this.processor.feature_extractor.config.sampling_rate,He=await S(de,ge),Xe=this.model.config.id2label,AA=[];for(const qe of He){const H=await this.processor(qe),fA=(await this.model(H)).logits[0],he=await(0,D.topk)(new D.Tensor("float32",(0,E.softmax)(fA.data),fA.dims),Se),bA=he[0].tolist(),EA=he[1].tolist().map((PA,wA)=>({label:Xe?Xe[PA]:`LABEL_${PA}`,score:bA[wA]}));AA.push(EA)}return Array.isArray(de)?AA:AA[0]}}class $ extends j{constructor(de){super(de)}async _call(de,Se,{hypothesis_template:ge="This is a sound of {}."}={}){const He=!Array.isArray(de);He&&(de=[de]);const Xe=Se.map(fA=>ge.replace("{}",fA)),AA=this.tokenizer(Xe,{padding:!0,truncation:!0}),qe=this.processor.feature_extractor.config.sampling_rate,H=await S(de,qe),cA=[];for(const fA of H){const he=await this.processor(fA),bA=await this.model({...AA,...he}),rA=(0,E.softmax)(bA.logits_per_audio.data);cA.push([...rA].map((EA,PA)=>({score:EA,label:Se[PA]})))}return He?cA[0]:cA}}class be extends j{constructor(de){super(de)}async _call(de,Se={}){switch(this.model.config.model_type){case"whisper":case"lite-whisper":return this._call_whisper(de,Se);case"wav2vec2":case"wav2vec2-bert":case"unispeech":case"unispeech-sat":case"hubert":return this._call_wav2vec2(de,Se);case"moonshine":return this._call_moonshine(de,Se);default:throw new Error(`AutomaticSpeechRecognitionPipeline does not support model type '${this.model.config.model_type}'.`)}}async _call_wav2vec2(de,Se){Se.language&&console.warn('`language` parameter is not yet supported for `wav2vec2` models, defaulting to "English".'),Se.task&&console.warn('`task` parameter is not yet supported for `wav2vec2` models, defaulting to "transcribe".');const ge=!Array.isArray(de);ge&&(de=[de]);const He=this.processor.feature_extractor.config.sampling_rate,Xe=await S(de,He),AA=[];for(const qe of Xe){const H=await this.processor(qe),fA=(await this.model(H)).logits[0],he=[];for(const rA of fA)he.push((0,E.max)(rA.data)[1]);const bA=this.tokenizer.decode(he);AA.push({text:bA})}return ge?AA[0]:AA}async _call_whisper(de,Se){const ge=Se.return_timestamps??!1,He=Se.chunk_length_s??0,Xe=Se.force_full_sequences??!1;let AA=Se.stride_length_s??null;const qe={...Se};ge==="word"&&(qe.return_token_timestamps=!0,qe.return_timestamps=!1);const H=!Array.isArray(de);H&&(de=[de]);const cA=this.processor.feature_extractor.config.chunk_length/this.model.config.max_source_positions,fA=this.processor.feature_extractor.config.hop_length,he=this.processor.feature_extractor.config.sampling_rate,bA=await S(de,he),rA=[];for(const EA of bA){let PA=[];if(He>0){if(AA===null)AA=He/6;else if(He<=AA)throw Error("`chunk_length_s` must be larger than `stride_length_s`.");const TA=he*He,tA=he*AA,OA=TA-2*tA;let ot=0;for(;;){const $A=ot+TA,tt=EA.subarray(ot,$A),Lt=await this.processor(tt),Wr=ot===0,VA=$A>=EA.length;if(PA.push({stride:[tt.length,Wr?0:tA,VA?0:tA],input_features:Lt.input_features,is_last:VA}),VA)break;ot+=OA}}else PA=[{stride:[EA.length,0,0],input_features:(await this.processor(EA)).input_features,is_last:!0}];for(const TA of PA){qe.num_frames=Math.floor(TA.stride[0]/fA);const tA=await this.model.generate({inputs:TA.input_features,...qe});ge==="word"?(TA.tokens=tA.sequences.tolist()[0],TA.token_timestamps=tA.token_timestamps.tolist()[0].map(OA=>(0,E.round)(OA,2))):TA.tokens=tA[0].tolist(),TA.stride=TA.stride.map(OA=>OA/he)}const[wA,ZA]=this.tokenizer._decode_asr(PA,{time_precision:cA,return_timestamps:ge,force_full_sequences:Xe});rA.push({text:wA,...ZA})}return H?rA[0]:rA}async _call_moonshine(de,Se){const ge=!Array.isArray(de);ge&&(de=[de]);const He=this.processor.feature_extractor.config.sampling_rate,Xe=await S(de,He),AA=[];for(const qe of Xe){const H=await this.processor(qe),cA=Math.floor(qe.length/He)*6,fA=await this.model.generate({max_new_tokens:cA,...Se,...H}),he=this.processor.batch_decode(fA,{skip_special_tokens:!0})[0];AA.push({text:he})}return ge?AA[0]:AA}}class Ce extends j{constructor(de){super(de)}async _call(de,Se={}){const ge=Array.isArray(de),He=await x(de),{pixel_values:Xe}=await this.processor(He),AA=[];for(const qe of Xe){qe.dims=[1,...qe.dims];const H=await this.model.generate({inputs:qe,...Se}),cA=this.tokenizer.batch_decode(H,{skip_special_tokens:!0}).map(fA=>({generated_text:fA.trim()}));AA.push(cA)}return ge?AA:AA[0]}}class Ee extends j{constructor(de){super(de)}async _call(de,{top_k:Se=5}={}){const ge=await x(de),{pixel_values:He}=await this.processor(ge),Xe=await this.model({pixel_values:He}),AA=this.model.config.id2label,qe=[];for(const H of Xe.logits){const cA=await(0,D.topk)(new D.Tensor("float32",(0,E.softmax)(H.data),H.dims),Se),fA=cA[0].tolist(),bA=cA[1].tolist().map((rA,EA)=>({label:AA?AA[rA]:`LABEL_${rA}`,score:fA[EA]}));qe.push(bA)}return Array.isArray(de)?qe:qe[0]}}class Be extends j{constructor(de){super(de),this.subtasks_mapping={panoptic:"post_process_panoptic_segmentation",instance:"post_process_instance_segmentation",semantic:"post_process_semantic_segmentation"}}async _call(de,{threshold:Se=.5,mask_threshold:ge=.5,overlap_mask_area_threshold:He=.8,label_ids_to_fuse:Xe=null,target_sizes:AA=null,subtask:qe=null}={}){if(Array.isArray(de)&&de.length!==1)throw Error("Image segmentation pipeline currently only supports a batch size of 1.");const cA=await x(de),fA=cA.map(TA=>[TA.height,TA.width]),he=await this.processor(cA),{inputNames:bA,outputNames:rA}=this.model.sessions.model;if(!bA.includes("pixel_values")){if(bA.length!==1)throw Error(`Expected a single input name, but got ${bA.length} inputs: ${bA}.`);const TA=bA[0];if(TA in he)throw Error(`Input name ${TA} already exists in the inputs.`);he[TA]=he.pixel_values}const EA=await this.model(he);let PA=null;if(qe!==null)PA=this.subtasks_mapping[qe];else if(this.processor.image_processor){for(const[TA,tA]of Object.entries(this.subtasks_mapping))if(tA in this.processor.image_processor){PA=this.processor.image_processor[tA].bind(this.processor.image_processor),qe=TA;break}}const wA=this.model.config.id2label,ZA=[];if(qe)if(qe==="panoptic"||qe==="instance"){const TA=PA(EA,Se,ge,He,Xe,AA??fA)[0],tA=TA.segmentation;for(const OA of TA.segments_info){const ot=new Uint8ClampedArray(tA.data.length);for(let tt=0;tt<tA.data.length;++tt)tA.data[tt]===OA.id&&(ot[tt]=255);const $A=new v.RawImage(ot,tA.dims[1],tA.dims[0],1);ZA.push({score:OA.score,label:wA[OA.label_id],mask:$A})}}else if(qe==="semantic"){const{segmentation:TA,labels:tA}=PA(EA,AA??fA)[0];for(const OA of tA){const ot=new Uint8ClampedArray(TA.data.length);for(let tt=0;tt<TA.data.length;++tt)TA.data[tt]===OA&&(ot[tt]=255);const $A=new v.RawImage(ot,TA.dims[1],TA.dims[0],1);ZA.push({score:null,label:wA[OA],mask:$A})}}else throw Error(`Subtask ${qe} not supported.`);else{const tA=EA[rA[0]];for(let OA=0;OA<fA.length;++OA){const ot=fA[OA],$A=tA[OA];$A.data.some(Lt=>Lt<-1e-5||Lt>1+1e-5)&&$A.sigmoid_();const tt=await v.RawImage.fromTensor($A.mul_(255).to("uint8")).resize(ot[1],ot[0]);ZA.push({label:null,score:null,mask:tt})}}return ZA}}class ve extends Be{constructor(de){super(de)}async _call(de,Se={}){if(Array.isArray(de)&&de.length!==1)throw Error("Background removal pipeline currently only supports a batch size of 1.");const He=await x(de),Xe=await super._call(de,Se);return He.map((qe,H)=>{const cA=qe.clone();return cA.putAlpha(Xe[H].mask),cA})}}class Ne extends j{constructor(de){super(de)}async _call(de,Se,{hypothesis_template:ge="This is a photo of {}"}={}){const He=Array.isArray(de),Xe=await x(de),AA=Se.map(bA=>ge.replace("{}",bA)),qe=this.tokenizer(AA,{padding:this.model.config.model_type==="siglip"?"max_length":!0,truncation:!0}),{pixel_values:H}=await this.processor(Xe),cA=await this.model({...qe,pixel_values:H}),fA=this.model.config.model_type==="siglip"?bA=>bA.sigmoid().data:bA=>(0,E.softmax)(bA.data),he=[];for(const bA of cA.logits_per_image){const EA=[...fA(bA)].map((PA,wA)=>({score:PA,label:Se[wA]}));EA.sort((PA,wA)=>wA.score-PA.score),he.push(EA)}return He?he:he[0]}}class Fe extends j{constructor(de){super(de)}async _call(de,{threshold:Se=.9,percentage:ge=!1}={}){const He=Array.isArray(de);if(He&&de.length!==1)throw Error("Object detection pipeline currently only supports a batch size of 1.");const Xe=await x(de),AA=ge?null:Xe.map(rA=>[rA.height,rA.width]),{pixel_values:qe,pixel_mask:H}=await this.processor(Xe),cA=await this.model({pixel_values:qe,pixel_mask:H}),fA=this.processor.image_processor.post_process_object_detection(cA,Se,AA),he=this.model.config.id2label,bA=fA.map(rA=>rA.boxes.map((EA,PA)=>({score:rA.scores[PA],label:he[rA.classes[PA]],box:F(EA,!ge)})));return He?bA:bA[0]}}class le extends j{constructor(de){super(de)}async _call(de,Se,{threshold:ge=.1,top_k:He=null,percentage:Xe=!1}={}){const AA=Array.isArray(de),qe=await x(de),H=this.tokenizer(Se,{padding:!0,truncation:!0}),cA=await this.processor(qe),fA=[];for(let he=0;he<qe.length;++he){const bA=qe[he],rA=Xe?null:[[bA.height,bA.width]],EA=cA.pixel_values[he].unsqueeze_(0),PA=await this.model({...H,pixel_values:EA});let wA;if("post_process_grounded_object_detection"in this.processor){const ZA=this.processor.post_process_grounded_object_detection(PA,H.input_ids,{box_threshold:ge,text_threshold:ge,target_sizes:rA})[0];wA=ZA.boxes.map((TA,tA)=>({score:ZA.scores[tA],label:ZA.labels[tA],box:F(TA,!Xe)}))}else{const ZA=this.processor.image_processor.post_process_object_detection(PA,ge,rA,!0)[0];wA=ZA.boxes.map((TA,tA)=>({score:ZA.scores[tA],label:Se[ZA.classes[tA]],box:F(TA,!Xe)}))}wA.sort((ZA,TA)=>TA.score-ZA.score),He!==null&&(wA=wA.slice(0,He)),fA.push(wA)}return AA?fA:fA[0]}}class Ae extends j{constructor(de){super(de)}async _call(de,Se,ge={}){const He=(await x(de))[0],{pixel_values:Xe}=await this.processor(He),AA=`<s_docvqa><s_question>${Se}</s_question><s_answer>`,qe=this.tokenizer(AA,{add_special_tokens:!1,padding:!0,truncation:!0}).input_ids,H=await this.model.generate({inputs:Xe,max_length:this.model.config.decoder.max_position_embeddings,decoder_input_ids:qe,...ge}),fA=this.tokenizer.batch_decode(H)[0].match(/<s_answer>(.*?)<\/s_answer>/);let he=null;return fA&&fA.length>=2&&(he=fA[1].trim()),[{answer:he}]}}class pe extends j{DEFAULT_VOCODER_ID="Xenova/speecht5_hifigan";constructor(de){super(de),this.vocoder=de.vocoder??null}async _call(de,{speaker_embeddings:Se=null}={}){return this.processor?this._call_text_to_spectrogram(de,{speaker_embeddings:Se}):this._call_text_to_waveform(de)}async _call_text_to_waveform(de){const Se=this.tokenizer(de,{padding:!0,truncation:!0}),{waveform:ge}=await this.model(Se),He=this.model.config.sampling_rate;return new B.RawAudio(ge.data,He)}async _call_text_to_spectrogram(de,{speaker_embeddings:Se}){if(this.vocoder||(console.log("No vocoder specified, using default HifiGan vocoder."),this.vocoder=await m.AutoModel.from_pretrained(this.DEFAULT_VOCODER_ID,{dtype:"fp32"})),(typeof Se=="string"||Se instanceof URL)&&(Se=new Float32Array(await(await fetch(Se)).arrayBuffer())),Se instanceof Float32Array)Se=new D.Tensor("float32",Se,[1,Se.length]);else if(!(Se instanceof D.Tensor))throw new Error("Speaker embeddings must be a `Tensor`, `Float32Array`, `string`, or `URL`.");const{input_ids:ge}=this.tokenizer(de,{padding:!0,truncation:!0}),{waveform:He}=await this.model.generate_speech(ge,Se,{vocoder:this.vocoder}),Xe=this.processor.feature_extractor.config.sampling_rate;return new B.RawAudio(He.data,Xe)}}class oe extends j{constructor(de){super(de)}async _call(de){const Se=await x(de),ge=await this.processor(Se),He=await this.model(ge),Xe=[];for(const AA of He.reconstruction){const qe=AA.squeeze().clamp_(0,1).mul_(255).round_().to("uint8");Xe.push(v.RawImage.fromTensor(qe))}return Xe.length>1?Xe:Xe[0]}}class Ge extends j{constructor(de){super(de)}async _call(de){const Se=await x(de),ge=await this.processor(Se),{predicted_depth:He}=await this.model(ge),Xe=[];for(let AA=0;AA<Se.length;++AA){const qe=He[AA],[H,cA]=qe.dims.slice(-2),[fA,he]=Se[AA].size,bA=(await(0,D.interpolate_4d)(qe.view(1,1,H,cA),{size:[he,fA],mode:"bilinear"})).view(he,fA),rA=bA.min().item(),EA=bA.max().item(),PA=bA.sub(rA).div_(EA-rA).mul_(255).to("uint8").unsqueeze(0),wA=v.RawImage.fromTensor(PA);Xe.push({predicted_depth:bA,depth:wA})}return Xe.length>1?Xe:Xe[0]}}const nA=Object.freeze({"text-classification":{tokenizer:u.AutoTokenizer,pipeline:J,model:m.AutoModelForSequenceClassification,default:{model:"Xenova/distilbert-base-uncased-finetuned-sst-2-english"},type:"text"},"token-classification":{tokenizer:u.AutoTokenizer,pipeline:L,model:m.AutoModelForTokenClassification,default:{model:"Xenova/bert-base-multilingual-cased-ner-hrl"},type:"text"},"question-answering":{tokenizer:u.AutoTokenizer,pipeline:N,model:m.AutoModelForQuestionAnswering,default:{model:"Xenova/distilbert-base-cased-distilled-squad"},type:"text"},"fill-mask":{tokenizer:u.AutoTokenizer,pipeline:U,model:m.AutoModelForMaskedLM,default:{model:"Xenova/bert-base-uncased"},type:"text"},summarization:{tokenizer:u.AutoTokenizer,pipeline:k,model:m.AutoModelForSeq2SeqLM,default:{model:"Xenova/distilbart-cnn-6-6"},type:"text"},translation:{tokenizer:u.AutoTokenizer,pipeline:e,model:m.AutoModelForSeq2SeqLM,default:{model:"Xenova/t5-small"},type:"text"},"text2text-generation":{tokenizer:u.AutoTokenizer,pipeline:f,model:m.AutoModelForSeq2SeqLM,default:{model:"Xenova/flan-t5-small"},type:"text"},"text-generation":{tokenizer:u.AutoTokenizer,pipeline:y,model:m.AutoModelForCausalLM,default:{model:"Xenova/gpt2"},type:"text"},"zero-shot-classification":{tokenizer:u.AutoTokenizer,pipeline:ee,model:m.AutoModelForSequenceClassification,default:{model:"Xenova/distilbert-base-uncased-mnli"},type:"text"},"audio-classification":{pipeline:we,model:m.AutoModelForAudioClassification,processor:b.AutoProcessor,default:{model:"Xenova/wav2vec2-base-superb-ks"},type:"audio"},"zero-shot-audio-classification":{tokenizer:u.AutoTokenizer,pipeline:$,model:m.AutoModel,processor:b.AutoProcessor,default:{model:"Xenova/clap-htsat-unfused"},type:"multimodal"},"automatic-speech-recognition":{tokenizer:u.AutoTokenizer,pipeline:be,model:[m.AutoModelForSpeechSeq2Seq,m.AutoModelForCTC],processor:b.AutoProcessor,default:{model:"Xenova/whisper-tiny.en"},type:"multimodal"},"text-to-audio":{tokenizer:u.AutoTokenizer,pipeline:pe,model:[m.AutoModelForTextToWaveform,m.AutoModelForTextToSpectrogram],processor:[b.AutoProcessor,null],default:{model:"Xenova/speecht5_tts"},type:"text"},"image-to-text":{tokenizer:u.AutoTokenizer,pipeline:Ce,model:m.AutoModelForVision2Seq,processor:b.AutoProcessor,default:{model:"Xenova/vit-gpt2-image-captioning"},type:"multimodal"},"image-classification":{pipeline:Ee,model:m.AutoModelForImageClassification,processor:b.AutoProcessor,default:{model:"Xenova/vit-base-patch16-224"},type:"multimodal"},"image-segmentation":{pipeline:Be,model:[m.AutoModelForImageSegmentation,m.AutoModelForSemanticSegmentation,m.AutoModelForUniversalSegmentation],processor:b.AutoProcessor,default:{model:"Xenova/detr-resnet-50-panoptic"},type:"multimodal"},"background-removal":{pipeline:ve,model:[m.AutoModelForImageSegmentation,m.AutoModelForSemanticSegmentation,m.AutoModelForUniversalSegmentation],processor:b.AutoProcessor,default:{model:"Xenova/modnet"},type:"image"},"zero-shot-image-classification":{tokenizer:u.AutoTokenizer,pipeline:Ne,model:m.AutoModel,processor:b.AutoProcessor,default:{model:"Xenova/clip-vit-base-patch32"},type:"multimodal"},"object-detection":{pipeline:Fe,model:m.AutoModelForObjectDetection,processor:b.AutoProcessor,default:{model:"Xenova/detr-resnet-50"},type:"multimodal"},"zero-shot-object-detection":{tokenizer:u.AutoTokenizer,pipeline:le,model:m.AutoModelForZeroShotObjectDetection,processor:b.AutoProcessor,default:{model:"Xenova/owlvit-base-patch32"},type:"multimodal"},"document-question-answering":{tokenizer:u.AutoTokenizer,pipeline:Ae,model:m.AutoModelForDocumentQuestionAnswering,processor:b.AutoProcessor,default:{model:"Xenova/donut-base-finetuned-docvqa"},type:"multimodal"},"image-to-image":{pipeline:oe,model:m.AutoModelForImageToImage,processor:b.AutoProcessor,default:{model:"Xenova/swin2SR-classical-sr-x2-64"},type:"image"},"depth-estimation":{pipeline:Ge,model:m.AutoModelForDepthEstimation,processor:b.AutoProcessor,default:{model:"Xenova/dpt-large"},type:"image"},"feature-extraction":{tokenizer:u.AutoTokenizer,pipeline:T,model:m.AutoModel,default:{model:"Xenova/all-MiniLM-L6-v2"},type:"text"},"image-feature-extraction":{processor:b.AutoProcessor,pipeline:O,model:[m.AutoModelForImageFeatureExtraction,m.AutoModel],default:{model:"Xenova/vit-base-patch16-224-in21k"},type:"image"}}),Je=Object.freeze({"sentiment-analysis":"text-classification",ner:"token-classification",asr:"automatic-speech-recognition","text-to-speech":"text-to-audio",embeddings:"feature-extraction"});async function aA(ze,de=null,{progress_callback:Se=null,config:ge=null,cache_dir:He=null,local_files_only:Xe=!1,revision:AA="main",device:qe=null,dtype:H=null,subfolder:cA="onnx",use_external_data_format:fA=null,model_file_name:he=null,session_options:bA={}}={}){ze=Je[ze]??ze;const rA=nA[ze.split("_",1)[0]];if(!rA)throw Error(`Unsupported pipeline: ${ze}. Must be one of [${Object.keys(nA)}]`);de||(de=rA.default.model,console.log(`No model specified. Using default model: "${de}".`));const EA={progress_callback:Se,config:ge,cache_dir:He,local_files_only:Xe,revision:AA,device:qe,dtype:H,subfolder:cA,use_external_data_format:fA,model_file_name:he,session_options:bA},PA=new Map([["tokenizer",rA.tokenizer],["model",rA.model],["processor",rA.processor]]),wA=await kA(PA,de,EA);wA.task=ze,(0,w.dispatchCallback)(Se,{status:"ready",task:ze,model:de});const ZA=rA.pipeline;return new ZA(wA)}async function kA(ze,de,Se){const ge=Object.create(null),He=[];for(const[Xe,AA]of ze.entries()){if(!AA)continue;let qe;Array.isArray(AA)?qe=new Promise(async(H,cA)=>{let fA;for(const he of AA){if(he===null){H(null);return}try{H(await he.from_pretrained(de,Se));return}catch(bA){if(bA.message?.includes("Unsupported model type"))fA=bA;else if(bA.message?.includes("Could not locate file"))fA=bA;else{cA(bA);return}}}cA(fA)}):qe=AA.from_pretrained(de,Se),ge[Xe]=qe,He.push(qe)}await Promise.all(He);for(const[Xe,AA]of Object.entries(ge))ge[Xe]=await AA;return ge}},"./src/tokenizers.js":(a,o,n)=>{n.r(o),n.d(o,{AlbertTokenizer:()=>QA,AutoTokenizer:()=>Vs,BartTokenizer:()=>ws,BertTokenizer:()=>LA,BlenderbotSmallTokenizer:()=>Ys,BlenderbotTokenizer:()=>Ss,BloomTokenizer:()=>oa,CLIPTokenizer:()=>$r,CamembertTokenizer:()=>Ps,CodeGenTokenizer:()=>is,CodeLlamaTokenizer:()=>Fs,CohereTokenizer:()=>La,ConvBertTokenizer:()=>Rt,DebertaTokenizer:()=>bt,DebertaV2Tokenizer:()=>or,DistilBertTokenizer:()=>rr,ElectraTokenizer:()=>Is,EsmTokenizer:()=>WA,FalconTokenizer:()=>uA,GPT2Tokenizer:()=>fs,GPTNeoXTokenizer:()=>gA,GemmaTokenizer:()=>gs,Grok1Tokenizer:()=>js,HerbertTokenizer:()=>_t,LlamaTokenizer:()=>Qs,M2M100Tokenizer:()=>Ws,MBart50Tokenizer:()=>Gs,MBartTokenizer:()=>ks,MPNetTokenizer:()=>Lr,MarianTokenizer:()=>Ca,MgpstrTokenizer:()=>_a,MobileBertTokenizer:()=>SA,NllbTokenizer:()=>Gr,NougatTokenizer:()=>za,PreTrainedTokenizer:()=>Le,Qwen2Tokenizer:()=>Mr,RoFormerTokenizer:()=>zA,RobertaTokenizer:()=>Jr,SiglipTokenizer:()=>Sa,SpeechT5Tokenizer:()=>Aa,SqueezeBertTokenizer:()=>tr,T5Tokenizer:()=>ea,TokenizerModel:()=>O,VitsTokenizer:()=>Na,Wav2Vec2CTCTokenizer:()=>Oa,WhisperTokenizer:()=>rt,XLMRobertaTokenizer:()=>qr,XLMTokenizer:()=>Rs,is_chinese_char:()=>U});var u=n("./src/utils/generic.js"),m=n("./src/utils/core.js"),b=n("./src/utils/hub.js"),C=n("./src/utils/maths.js"),w=n("./src/utils/tensor.js"),E=n("./src/utils/data-structures.js"),B=n("./node_modules/@huggingface/jinja/dist/index.js"),D=n("./src/models/whisper/common_whisper.js");async function v(Oe,K){const fe=await Promise.all([(0,b.getModelJSON)(Oe,"tokenizer.json",!0,K),(0,b.getModelJSON)(Oe,"tokenizer_config.json",!0,K)]);return K.legacy!==null&&(fe[1].legacy=K.legacy),fe}function x(Oe,K){const fe=[];let Me=0;for(const Ie of Oe.matchAll(K)){const We=Ie[0];Me<Ie.index&&fe.push(Oe.slice(Me,Ie.index)),We.length>0&&fe.push(We),Me=Ie.index+We.length}return Me<Oe.length&&fe.push(Oe.slice(Me)),fe}function S(Oe,K=!0){if(Oe.Regex!==void 0){let fe=Oe.Regex.replace(/\\([#&~])/g,"$1");for(const[Me,Ie]of ee)fe=fe.replaceAll(Me,Ie);return new RegExp(fe,"gu")}else if(Oe.String!==void 0){const fe=(0,m.escapeRegExp)(Oe.String);return new RegExp(K?fe:`(${fe})`,"gu")}else return console.warn("Unknown pattern type:",Oe),null}function F(Oe){return new Map(Object.entries(Oe))}function j(Oe){const K=Oe.dims;switch(K.length){case 1:return Oe.tolist();case 2:if(K[0]!==1)throw new Error("Unable to decode tensor with `batch size !== 1`. Use `tokenizer.batch_decode(...)` for batched inputs.");return Oe.tolist()[0];default:throw new Error(`Expected tensor to have 1-2 dimensions, got ${K.length}.`)}}function J(Oe){return Oe.replace(/ \./g,".").replace(/ \?/g,"?").replace(/ \!/g,"!").replace(/ ,/g,",").replace(/ \' /g,"'").replace(/ n\'t/g,"n't").replace(/ \'m/g,"'m").replace(/ \'s/g,"'s").replace(/ \'ve/g,"'ve").replace(/ \'re/g,"'re")}function L(Oe){return Oe.replace(/\p{M}/gu,"")}function N(Oe){return L(Oe.toLowerCase())}function U(Oe){return Oe>=19968&&Oe<=40959||Oe>=13312&&Oe<=19903||Oe>=131072&&Oe<=173791||Oe>=173824&&Oe<=177983||Oe>=177984&&Oe<=178207||Oe>=178208&&Oe<=183983||Oe>=63744&&Oe<=64255||Oe>=194560&&Oe<=195103}function f(Oe,K,fe){const Me=[];let Ie=0;for(;Ie<Oe.length;){if(Me.push(Oe[Ie]),(K.get(Oe[Ie])??fe)!==fe){++Ie;continue}for(;++Ie<Oe.length&&(K.get(Oe[Ie])??fe)===fe;)K.get(Me.at(-1))!==fe&&(Me[Me.length-1]+=Oe[Ie])}return Me}function k(Oe){return Oe.match(/\S+/g)||[]}const e="\\p{P}\\u0021-\\u002F\\u003A-\\u0040\\u005B-\\u0060\\u007B-\\u007E",d=new RegExp(`^[${e}]+$`,"gu"),y=".,!?…。，、।۔،",ee=new Map([["(?i:'s|'t|'re|'ve|'m|'ll|'d)","(?:'([sS]|[tT]|[rR][eE]|[vV][eE]|[mM]|[lL][lL]|[dD]))"],[` ?[^(\\s|[${y}])]+`,` ?[^\\s${y}]+`]]);class T{constructor(K){this.content=K.content,this.id=K.id,this.single_word=K.single_word??!1,this.lstrip=K.lstrip??!1,this.rstrip=K.rstrip??!1,this.special=K.special??!1,this.normalized=K.normalized??null}}class O extends u.Callable{constructor(K){super(),this.config=K,this.vocab=[],this.tokens_to_ids=new Map,this.unk_token_id=void 0,this.unk_token=void 0,this.end_of_word_suffix=void 0,this.fuse_unk=this.config.fuse_unk??!1}static fromConfig(K,...fe){switch(K.type){case"WordPiece":return new we(K);case"Unigram":return new $(K,...fe);case"BPE":return new Ee(K);default:if(K.vocab)return Array.isArray(K.vocab)?new $(K,...fe):Object.hasOwn(K,"continuing_subword_prefix")&&Object.hasOwn(K,"unk_token")?Object.hasOwn(K,"merges")?new Ee(K):new we(K):new Be(K,...fe);throw new Error(`Unknown TokenizerModel type: ${K.type}`)}}_call(K){return K=this.encode(K),this.fuse_unk&&(K=f(K,this.tokens_to_ids,this.unk_token_id)),K}encode(K){throw Error("encode should be implemented in subclass.")}convert_tokens_to_ids(K){return K.map(fe=>this.tokens_to_ids.get(fe)??this.unk_token_id)}convert_ids_to_tokens(K){return K.map(fe=>this.vocab[fe]??this.unk_token)}}class we extends O{constructor(K){super(K),this.tokens_to_ids=F(K.vocab),this.unk_token_id=this.tokens_to_ids.get(K.unk_token),this.unk_token=K.unk_token,this.max_input_chars_per_word=K.max_input_chars_per_word??100,this.vocab=new Array(this.tokens_to_ids.size);for(const[fe,Me]of this.tokens_to_ids)this.vocab[Me]=fe}encode(K){const fe=[];for(const Me of K){const Ie=[...Me];if(Ie.length>this.max_input_chars_per_word){fe.push(this.unk_token);continue}let We=!1,eA=0;const vA=[];for(;eA<Ie.length;){let xA=Ie.length,BA=null;for(;eA<xA;){let Ve=Ie.slice(eA,xA).join("");if(eA>0&&(Ve=this.config.continuing_subword_prefix+Ve),this.tokens_to_ids.has(Ve)){BA=Ve;break}--xA}if(BA===null){We=!0;break}vA.push(BA),eA=xA}We?fe.push(this.unk_token):fe.push(...vA)}return fe}}class $ extends O{constructor(K,fe){super(K);const Me=K.vocab.length;this.vocab=new Array(Me),this.scores=new Array(Me);for(let Ie=0;Ie<Me;++Ie)[this.vocab[Ie],this.scores[Ie]]=K.vocab[Ie];this.unk_token_id=K.unk_id,this.unk_token=this.vocab[K.unk_id],this.tokens_to_ids=new Map(this.vocab.map((Ie,We)=>[Ie,We])),this.bos_token=" ",this.bos_token_id=this.tokens_to_ids.get(this.bos_token),this.eos_token=fe.eos_token,this.eos_token_id=this.tokens_to_ids.get(this.eos_token),this.unk_token=this.vocab[this.unk_token_id],this.minScore=(0,C.min)(this.scores)[0],this.unk_score=this.minScore-10,this.scores[this.unk_token_id]=this.unk_score,this.trie=new E.CharTrie,this.trie.extend(this.vocab),this.fuse_unk=!0}populateNodes(K){const fe=K.chars,Me=1;let Ie=0;for(;Ie<fe.length;){let We=!1;const eA=fe.slice(Ie).join(""),vA=this.trie.commonPrefixSearch(eA);for(const xA of vA){const BA=this.tokens_to_ids.get(xA),Ve=this.scores[BA],gt=(0,m.len)(xA);K.insert(Ie,gt,Ve,BA),!We&&gt===Me&&(We=!0)}We||K.insert(Ie,Me,this.unk_score,this.unk_token_id),Ie+=Me}}tokenize(K){const fe=new E.TokenLattice(K,this.bos_token_id,this.eos_token_id);return this.populateNodes(fe),fe.tokens()}encode(K){const fe=[];for(const Me of K){const Ie=this.tokenize(Me);fe.push(...Ie)}return fe}}const be=(()=>{const Oe=[...Array.from({length:94},(Ie,We)=>We+33),...Array.from({length:12},(Ie,We)=>We+161),...Array.from({length:82},(Ie,We)=>We+174)],K=Oe.slice();let fe=0;for(let Ie=0;Ie<256;++Ie)Oe.includes(Ie)||(Oe.push(Ie),K.push(256+fe),fe+=1);const Me=K.map(Ie=>String.fromCharCode(Ie));return Object.fromEntries(Oe.map((Ie,We)=>[Ie,Me[We]]))})(),Ce=(0,m.reverseDictionary)(be);class Ee extends O{constructor(K){super(K),this.tokens_to_ids=F(K.vocab),this.unk_token_id=this.tokens_to_ids.get(K.unk_token),this.unk_token=K.unk_token,this.vocab=new Array(this.tokens_to_ids.size);for(const[Me,Ie]of this.tokens_to_ids)this.vocab[Ie]=Me;const fe=Array.isArray(K.merges[0]);this.merges=fe?K.merges:K.merges.map(Me=>Me.split(" ",2)),this.bpe_ranks=new Map(this.merges.map((Me,Ie)=>[JSON.stringify(Me),Ie])),this.end_of_word_suffix=K.end_of_word_suffix,this.continuing_subword_suffix=K.continuing_subword_suffix??null,this.byte_fallback=this.config.byte_fallback??!1,this.byte_fallback&&(this.text_encoder=new TextEncoder),this.ignore_merges=this.config.ignore_merges??!1,this.max_length_to_cache=256,this.cache_capacity=1e4,this.cache=new E.LRUCache(this.cache_capacity)}clear_cache(){this.cache.clear()}bpe(K){if(K.length===0)return[];const fe=this.cache.get(K);if(fe!==void 0)return fe;const Me=Array.from(K);this.end_of_word_suffix&&(Me[Me.length-1]+=this.end_of_word_suffix);let Ie=[];if(Me.length>1){const We=new E.PriorityQueue((xA,BA)=>xA.score<BA.score);let eA={token:Me[0],bias:0,prev:null,next:null},vA=eA;for(let xA=1;xA<Me.length;++xA){const BA={bias:xA/Me.length,token:Me[xA],prev:vA,next:null};vA.next=BA,this._add_node(We,vA),vA=BA}for(;!We.isEmpty();){const xA=We.pop();if(xA.deleted||!xA.next||xA.next.deleted)continue;if(xA.deleted=!0,xA.next.deleted=!0,xA.prev){const Ve={...xA.prev};xA.prev.deleted=!0,xA.prev=Ve,Ve.prev?Ve.prev.next=Ve:eA=Ve}const BA={token:xA.token+xA.next.token,bias:xA.bias,prev:xA.prev,next:xA.next.next};BA.prev?(BA.prev.next=BA,this._add_node(We,BA.prev)):eA=BA,BA.next&&(BA.next.prev=BA,this._add_node(We,BA))}for(let xA=eA;xA!==null;xA=xA.next)Ie.push(xA.token)}else Ie=Me;if(this.continuing_subword_suffix)for(let We=0;We<Ie.length-1;++We)Ie[We]+=this.continuing_subword_suffix;return K.length<this.max_length_to_cache&&this.cache.put(K,Ie),Ie}_add_node(K,fe){const Me=this.bpe_ranks.get(JSON.stringify([fe.token,fe.next.token]));Me!==void 0&&(fe.score=Me+fe.bias,K.push(fe))}encode(K){const fe=[];for(const Me of K){if(this.ignore_merges&&this.tokens_to_ids.has(Me)){fe.push(Me);continue}const Ie=this.bpe(Me);for(const We of Ie)if(this.tokens_to_ids.has(We))fe.push(We);else if(this.byte_fallback){const eA=Array.from(this.text_encoder.encode(We)).map(vA=>`<0x${vA.toString(16).toUpperCase().padStart(2,"0")}>`);eA.every(vA=>this.tokens_to_ids.has(vA))?fe.push(...eA):fe.push(this.unk_token)}else fe.push(this.unk_token)}return fe}}class Be extends O{constructor(K,fe){super(K),this.tokens_to_ids=F(fe.target_lang?K.vocab[fe.target_lang]:K.vocab),this.bos_token=fe.bos_token,this.bos_token_id=this.tokens_to_ids.get(this.bos_token),this.eos_token=fe.eos_token,this.eos_token_id=this.tokens_to_ids.get(this.eos_token),this.pad_token=fe.pad_token,this.pad_token_id=this.tokens_to_ids.get(this.pad_token),this.unk_token=fe.unk_token,this.unk_token_id=this.tokens_to_ids.get(this.unk_token),this.vocab=new Array(this.tokens_to_ids.size);for(const[Me,Ie]of this.tokens_to_ids)this.vocab[Ie]=Me}encode(K){return K}}class ve extends u.Callable{constructor(K){super(),this.config=K}static fromConfig(K){if(K===null)return null;switch(K.type){case"BertNormalizer":return new ze(K);case"Precompiled":return new VA(K);case"Sequence":return new kA(K);case"Replace":return new Ne(K);case"NFC":return new le(K);case"NFD":return new Ae(K);case"NFKC":return new pe(K);case"NFKD":return new oe(K);case"Strip":return new Ge(K);case"StripAccents":return new nA(K);case"Lowercase":return new Je(K);case"Prepend":return new aA(K);default:throw new Error(`Unknown Normalizer type: ${K.type}`)}}normalize(K){throw Error("normalize should be implemented in subclass.")}_call(K){return this.normalize(K)}}class Ne extends ve{normalize(K){const fe=S(this.config.pattern);return fe===null?K:K.replaceAll(fe,this.config.content)}}class Fe extends ve{form=void 0;normalize(K){return K=K.normalize(this.form),K}}class le extends Fe{form="NFC"}class Ae extends Fe{form="NFD"}class pe extends Fe{form="NFKC"}class oe extends Fe{form="NFKD"}class Ge extends ve{normalize(K){return this.config.strip_left&&this.config.strip_right?K=K.trim():(this.config.strip_left&&(K=K.trimStart()),this.config.strip_right&&(K=K.trimEnd())),K}}class nA extends ve{normalize(K){return K=L(K),K}}class Je extends ve{normalize(K){return K=K.toLowerCase(),K}}class aA extends ve{normalize(K){return K=this.config.prepend+K,K}}class kA extends ve{constructor(K){super(K),this.normalizers=K.normalizers.map(fe=>ve.fromConfig(fe))}normalize(K){return this.normalizers.reduce((fe,Me)=>Me.normalize(fe),K)}}class ze extends ve{_tokenize_chinese_chars(K){const fe=[];for(let Me=0;Me<K.length;++Me){const Ie=K[Me],We=Ie.charCodeAt(0);U(We)?(fe.push(" "),fe.push(Ie),fe.push(" ")):fe.push(Ie)}return fe.join("")}stripAccents(K){return K.normalize("NFD").replace(/\p{Mn}/gu,"")}_is_control(K){switch(K){case"	":case`
`:case"\r":return!1;default:return/^\p{Cc}|\p{Cf}|\p{Co}|\p{Cs}$/u.test(K)}}_clean_text(K){const fe=[];for(const Me of K){const Ie=Me.charCodeAt(0);Ie===0||Ie===65533||this._is_control(Me)||(/^\s$/.test(Me)?fe.push(" "):fe.push(Me))}return fe.join("")}normalize(K){return this.config.clean_text&&(K=this._clean_text(K)),this.config.handle_chinese_chars&&(K=this._tokenize_chinese_chars(K)),this.config.lowercase?(K=K.toLowerCase(),this.config.strip_accents!==!1&&(K=this.stripAccents(K))):this.config.strip_accents&&(K=this.stripAccents(K)),K}}class de extends u.Callable{static fromConfig(K){if(K===null)return null;switch(K.type){case"BertPreTokenizer":return new Se(K);case"Sequence":return new Ts(K);case"Whitespace":return new re(K);case"WhitespaceSplit":return new De(K);case"Metaspace":return new Lt(K);case"ByteLevel":return new ge(K);case"Split":return new He(K);case"Punctuation":return new Xe(K);case"Digits":return new AA(K);case"Replace":return new ie(K);default:throw new Error(`Unknown PreTokenizer type: ${K.type}`)}}pre_tokenize_text(K,fe){throw Error("pre_tokenize_text should be implemented in subclass.")}pre_tokenize(K,fe){return(Array.isArray(K)?K.map(Me=>this.pre_tokenize_text(Me,fe)):this.pre_tokenize_text(K,fe)).flat()}_call(K,fe){return this.pre_tokenize(K,fe)}}class Se extends de{constructor(K){super(),this.pattern=new RegExp(`[^\\s${e}]+|[${e}]`,"gu")}pre_tokenize_text(K,fe){return K.trim().match(this.pattern)||[]}}class ge extends de{constructor(K){super(),this.config=K,this.add_prefix_space=this.config.add_prefix_space,this.trim_offsets=this.config.trim_offsets,this.use_regex=this.config.use_regex??!0,this.pattern=/'s|'t|'re|'ve|'m|'ll|'d| ?\p{L}+| ?\p{N}+| ?[^\s\p{L}\p{N}]+|\s+(?!\S)|\s+/gu,this.byte_encoder=be,this.text_encoder=new TextEncoder}pre_tokenize_text(K,fe){return this.add_prefix_space&&!K.startsWith(" ")&&(K=" "+K),(this.use_regex?K.match(this.pattern)||[]:[K]).map(Ie=>Array.from(this.text_encoder.encode(Ie),We=>this.byte_encoder[We]).join(""))}}class He extends de{constructor(K){super(),this.config=K,this.pattern=S(this.config.pattern,this.config.invert)}pre_tokenize_text(K,fe){return this.pattern===null?[]:this.config.invert?K.match(this.pattern)||[]:this.config.behavior?.toLowerCase()==="removed"?K.split(this.pattern).filter(Me=>Me):x(K,this.pattern)}}class Xe extends de{constructor(K){super(),this.config=K,this.pattern=new RegExp(`[^${e}]+|[${e}]+`,"gu")}pre_tokenize_text(K,fe){return K.match(this.pattern)||[]}}class AA extends de{constructor(K){super(),this.config=K;const fe=`[^\\d]+|\\d${this.config.individual_digits?"":"+"}`;this.pattern=new RegExp(fe,"gu")}pre_tokenize_text(K,fe){return K.match(this.pattern)||[]}}class qe extends u.Callable{constructor(K){super(),this.config=K}static fromConfig(K){if(K===null)return null;switch(K.type){case"TemplateProcessing":return new fA(K);case"ByteLevel":return new he(K);case"RobertaProcessing":return new cA(K);case"BertProcessing":return new H(K);case"Sequence":return new bA(K);default:throw new Error(`Unknown PostProcessor type: ${K.type}`)}}post_process(K,...fe){throw Error("post_process should be implemented in subclass.")}_call(K,...fe){return this.post_process(K,...fe)}}class H extends qe{constructor(K){super(K),this.cls=K.cls[0],this.sep=K.sep[0]}post_process(K,fe=null,{add_special_tokens:Me=!0}={}){Me&&(K=(0,m.mergeArrays)([this.cls],K,[this.sep]));let Ie=new Array(K.length).fill(0);if(fe!==null){const We=Me&&this instanceof cA?[this.sep]:[],eA=Me?[this.sep]:[];K=(0,m.mergeArrays)(K,We,fe,eA),Ie=(0,m.mergeArrays)(Ie,new Array(fe.length+We.length+eA.length).fill(1))}return{tokens:K,token_type_ids:Ie}}}class cA extends H{}class fA extends qe{constructor(K){super(K),this.single=K.single,this.pair=K.pair}post_process(K,fe=null,{add_special_tokens:Me=!0}={}){const Ie=fe===null?this.single:this.pair;let We=[],eA=[];for(const vA of Ie)"SpecialToken"in vA?Me&&(We.push(vA.SpecialToken.id),eA.push(vA.SpecialToken.type_id)):"Sequence"in vA&&(vA.Sequence.id==="A"?(We=(0,m.mergeArrays)(We,K),eA=(0,m.mergeArrays)(eA,new Array(K.length).fill(vA.Sequence.type_id))):vA.Sequence.id==="B"&&(We=(0,m.mergeArrays)(We,fe),eA=(0,m.mergeArrays)(eA,new Array(fe.length).fill(vA.Sequence.type_id))));return{tokens:We,token_type_ids:eA}}}class he extends qe{post_process(K,fe=null){return fe&&(K=(0,m.mergeArrays)(K,fe)),{tokens:K}}}class bA extends qe{constructor(K){super(K),this.processors=K.processors.map(fe=>qe.fromConfig(fe))}post_process(K,fe=null,Me={}){let Ie;for(const We of this.processors)if(We instanceof he)K=We.post_process(K).tokens,fe&&(fe=We.post_process(fe).tokens);else{const eA=We.post_process(K,fe,Me);K=eA.tokens,Ie=eA.token_type_ids}return{tokens:K,token_type_ids:Ie}}}class rA extends u.Callable{constructor(K){super(),this.config=K,this.added_tokens=[],this.end_of_word_suffix=null,this.trim_offsets=K.trim_offsets}static fromConfig(K){if(K===null)return null;switch(K.type){case"WordPiece":return new TA(K);case"Metaspace":return new Wr(K);case"ByteLevel":return new tA(K);case"Replace":return new EA(K);case"ByteFallback":return new PA(K);case"Fuse":return new wA(K);case"Strip":return new ZA(K);case"Sequence":return new ot(K);case"CTC":return new OA(K);case"BPEDecoder":return new $A(K);default:throw new Error(`Unknown Decoder type: ${K.type}`)}}_call(K){return this.decode(K)}decode(K){return this.decode_chain(K).join("")}decode_chain(K){throw Error("`decode_chain` should be implemented in subclass.")}}class EA extends rA{decode_chain(K){const fe=S(this.config.pattern);return fe===null?K:K.map(Me=>Me.replaceAll(fe,this.config.content))}}class PA extends rA{constructor(K){super(K),this.text_decoder=new TextDecoder}decode_chain(K){const fe=[];let Me=[];for(const Ie of K){let We=null;if(Ie.length===6&&Ie.startsWith("<0x")&&Ie.endsWith(">")){const eA=parseInt(Ie.slice(3,5),16);isNaN(eA)||(We=eA)}if(We!==null)Me.push(We);else{if(Me.length>0){const eA=this.text_decoder.decode(Uint8Array.from(Me));fe.push(eA),Me=[]}fe.push(Ie)}}if(Me.length>0){const Ie=this.text_decoder.decode(Uint8Array.from(Me));fe.push(Ie),Me=[]}return fe}}class wA extends rA{decode_chain(K){return[K.join("")]}}class ZA extends rA{constructor(K){super(K),this.content=this.config.content,this.start=this.config.start,this.stop=this.config.stop}decode_chain(K){return K.map(fe=>{let Me=0;for(let We=0;We<this.start&&fe[We]===this.content;++We){Me=We+1;continue}let Ie=fe.length;for(let We=0;We<this.stop;++We){const eA=fe.length-We-1;if(fe[eA]===this.content){Ie=eA;continue}else break}return fe.slice(Me,Ie)})}}class TA extends rA{constructor(K){super(K),this.cleanup=K.cleanup}decode_chain(K){return K.map((fe,Me)=>(Me!==0&&(fe.startsWith(this.config.prefix)?fe=fe.replace(this.config.prefix,""):fe=" "+fe),this.cleanup&&(fe=J(fe)),fe))}}class tA extends rA{constructor(K){super(K),this.byte_decoder=Ce,this.text_decoder=new TextDecoder("utf-8",{fatal:!1,ignoreBOM:!0}),this.end_of_word_suffix=null}convert_tokens_to_string(K){const fe=K.join(""),Me=new Uint8Array([...fe].map(We=>this.byte_decoder[We]));return this.text_decoder.decode(Me)}decode_chain(K){const fe=[];let Me=[];for(const Ie of K)this.added_tokens.find(We=>We.content===Ie)!==void 0?(Me.length>0&&(fe.push(this.convert_tokens_to_string(Me)),Me=[]),fe.push(Ie)):Me.push(Ie);return Me.length>0&&fe.push(this.convert_tokens_to_string(Me)),fe}}class OA extends rA{constructor(K){super(K),this.pad_token=this.config.pad_token,this.word_delimiter_token=this.config.word_delimiter_token,this.cleanup=this.config.cleanup}convert_tokens_to_string(K){if(K.length===0)return"";const fe=[K[0]];for(let We=1;We<K.length;++We)K[We]!==fe.at(-1)&&fe.push(K[We]);let Ie=fe.filter(We=>We!==this.pad_token).join("");return this.cleanup&&(Ie=J(Ie).replaceAll(this.word_delimiter_token," ").trim()),Ie}decode_chain(K){return[this.convert_tokens_to_string(K)]}}class ot extends rA{constructor(K){super(K),this.decoders=K.decoders.map(fe=>rA.fromConfig(fe))}decode_chain(K){return this.decoders.reduce((fe,Me)=>Me.decode_chain(fe),K)}}class $A extends rA{constructor(K){super(K),this.suffix=this.config.suffix}decode_chain(K){return K.map((fe,Me)=>fe.replaceAll(this.suffix,Me===K.length-1?"":" "))}}class tt extends rA{decode_chain(K){let fe="";for(let Me=1;Me<K.length;Me+=2)fe+=K[Me];return[fe]}}class Lt extends de{constructor(K){super(),this.addPrefixSpace=K.add_prefix_space,this.replacement=K.replacement,this.strRep=K.str_rep||this.replacement,this.prepend_scheme=K.prepend_scheme??"always"}pre_tokenize_text(K,{section_index:fe=void 0}={}){let Me=K.replaceAll(" ",this.strRep);return this.addPrefixSpace&&!Me.startsWith(this.replacement)&&(this.prepend_scheme==="always"||this.prepend_scheme==="first"&&fe===0)&&(Me=this.strRep+Me),[Me]}}class Wr extends rA{constructor(K){super(K),this.addPrefixSpace=K.add_prefix_space,this.replacement=K.replacement}decode_chain(K){const fe=[];for(let Me=0;Me<K.length;++Me){let Ie=K[Me].replaceAll(this.replacement," ");this.addPrefixSpace&&Me==0&&Ie.startsWith(" ")&&(Ie=Ie.substring(1)),fe.push(Ie)}return fe}}class VA extends ve{constructor(K){super(K),this.charsmap=K.precompiled_charsmap}normalize(K){return K=K.replace(/[\u0001-\u0008\u000B\u000E-\u001F\u007F\u008F\u009F]/gm,""),K=K.replace(/[\u0009\u000A\u000C\u000D\u00A0\u1680\u2000-\u200F\u2028\u2029\u202F\u205F\u2581\u3000\uFEFF\uFFFD]/gm," "),K.includes("～")?K=K.split("～").map(Me=>Me.normalize("NFKC")).join("～"):K=K.normalize("NFKC"),K}}class Ts extends de{constructor(K){super(),this.tokenizers=K.pretokenizers.map(fe=>de.fromConfig(fe))}pre_tokenize_text(K,fe){return this.tokenizers.reduce((Me,Ie)=>Ie.pre_tokenize(Me,fe),[K])}}class re extends de{constructor(K){super()}pre_tokenize_text(K,fe){return K.match(/\w+|[^\w\s]+/g)||[]}}class De extends de{constructor(K){super()}pre_tokenize_text(K,fe){return k(K)}}class ie extends de{constructor(K){super(),this.config=K,this.pattern=S(this.config.pattern),this.content=this.config.content}pre_tokenize_text(K,fe){return this.pattern===null?[K]:[K.replaceAll(this.pattern,this.config.content)]}}const xe=["bos_token","eos_token","unk_token","sep_token","pad_token","cls_token","mask_token"];function Re(Oe,K,fe,Me){for(const Ie of Object.keys(Oe)){const We=K-Oe[Ie].length,eA=fe(Ie),vA=new Array(We).fill(eA);Oe[Ie]=Me==="right"?(0,m.mergeArrays)(Oe[Ie],vA):(0,m.mergeArrays)(vA,Oe[Ie])}}function oA(Oe,K){for(const fe of Object.keys(Oe))Oe[fe].length=K}class Le extends u.Callable{return_token_type_ids=!1;padding_side="right";constructor(K,fe){super(),this._tokenizer_config=fe,this.normalizer=ve.fromConfig(K.normalizer),this.pre_tokenizer=de.fromConfig(K.pre_tokenizer),this.model=O.fromConfig(K.model,fe),this.post_processor=qe.fromConfig(K.post_processor),this.decoder=rA.fromConfig(K.decoder),this.special_tokens=[],this.all_special_ids=[],this.added_tokens=[];for(const Me of K.added_tokens){const Ie=new T(Me);this.added_tokens.push(Ie),this.model.tokens_to_ids.set(Ie.content,Ie.id),this.model.vocab[Ie.id]=Ie.content,Ie.special&&(this.special_tokens.push(Ie.content),this.all_special_ids.push(Ie.id))}if(this.additional_special_tokens=fe.additional_special_tokens??[],this.special_tokens.push(...this.additional_special_tokens),this.special_tokens=[...new Set(this.special_tokens)],this.decoder&&(this.decoder.added_tokens=this.added_tokens,this.decoder.end_of_word_suffix=this.model.end_of_word_suffix),this.added_tokens_splitter=new E.DictionarySplitter(this.added_tokens.map(Me=>Me.content)),this.added_tokens_map=new Map(this.added_tokens.map(Me=>[Me.content,Me])),this.mask_token=this.getToken("mask_token"),this.mask_token_id=this.model.tokens_to_ids.get(this.mask_token),this.pad_token=this.getToken("pad_token","eos_token"),this.pad_token_id=this.model.tokens_to_ids.get(this.pad_token),this.sep_token=this.getToken("sep_token"),this.sep_token_id=this.model.tokens_to_ids.get(this.sep_token),this.unk_token=this.getToken("unk_token"),this.unk_token_id=this.model.tokens_to_ids.get(this.unk_token),this.bos_token=this.getToken("bos_token"),this.bos_token_id=this.model.tokens_to_ids.get(this.bos_token),this.eos_token=this.getToken("eos_token"),this.eos_token_id=this.model.tokens_to_ids.get(this.eos_token),this.model_max_length=fe.model_max_length,this.remove_space=fe.remove_space,this.clean_up_tokenization_spaces=fe.clean_up_tokenization_spaces??!0,this.do_lowercase_and_remove_accent=fe.do_lowercase_and_remove_accent??!1,fe.padding_side&&(this.padding_side=fe.padding_side),this.legacy=!1,this.chat_template=fe.chat_template??null,Array.isArray(this.chat_template)){const Me=Object.create(null);for(const{name:Ie,template:We}of this.chat_template){if(typeof Ie!="string"||typeof We!="string")throw new Error('Chat template must be a list of objects with "name" and "template" properties');Me[Ie]=We}this.chat_template=Me}this._compiled_template_cache=new Map}getToken(...K){for(const fe of K){const Me=this._tokenizer_config[fe];if(Me)if(typeof Me=="object"){if(Me.__type==="AddedToken")return Me.content;throw Error(`Unknown token: ${Me}`)}else return Me}return null}static async from_pretrained(K,{progress_callback:fe=null,config:Me=null,cache_dir:Ie=null,local_files_only:We=!1,revision:eA="main",legacy:vA=null}={}){const xA=await v(K,{progress_callback:fe,config:Me,cache_dir:Ie,local_files_only:We,revision:eA,legacy:vA});return new this(...xA)}_call(K,{text_pair:fe=null,add_special_tokens:Me=!0,padding:Ie=!1,truncation:We=null,max_length:eA=null,return_tensor:vA=!0,return_token_type_ids:xA=null}={}){const BA=Array.isArray(K);let Ve;if(BA){if(K.length===0)throw Error("text array must be non-empty");if(fe!==null){if(Array.isArray(fe)){if(K.length!==fe.length)throw Error("text and text_pair must have the same length")}else throw Error("text_pair must also be an array");Ve=K.map((nt,jt)=>this._encode_plus(nt,{text_pair:fe[jt],add_special_tokens:Me,return_token_type_ids:xA}))}else Ve=K.map(nt=>this._encode_plus(nt,{add_special_tokens:Me,return_token_type_ids:xA}))}else{if(K==null)throw Error("text may not be null or undefined");if(Array.isArray(fe))throw Error("When specifying `text_pair`, since `text` is a string, `text_pair` must also be a string (i.e., not an array).");Ve=[this._encode_plus(K,{text_pair:fe,add_special_tokens:Me,return_token_type_ids:xA})]}if(eA===null?eA=this.model_max_length:We===null&&(Ie===!0?(console.warn("`max_length` is ignored when `padding: true` and there is no truncation strategy. To pad to max length, use `padding: 'max_length'`."),eA=this.model_max_length):Ie===!1&&(console.warn("Truncation was not explicitly activated but `max_length` is provided a specific value, please use `truncation: true` to explicitly truncate examples to max length."),We=!0)),Ie===!0&&(eA=Math.min((0,C.max)(Ve.map(nt=>nt.input_ids.length))[0],eA??1/0)),eA=Math.min(eA,this.model_max_length??1/0),Ie||We)for(let nt=0;nt<Ve.length;++nt)Ve[nt].input_ids.length!==eA&&(Ve[nt].input_ids.length>eA?We&&oA(Ve[nt],eA):Ie&&Re(Ve[nt],eA,jt=>jt==="input_ids"?this.pad_token_id:0,this.padding_side));const gt={};if(vA){if(!(Ie&&We)&&Ve.some(jt=>{for(const Qr of Object.keys(jt))if(jt[Qr].length!==Ve[0][Qr]?.length)return!0;return!1}))throw Error("Unable to create tensor, you should probably activate truncation and/or padding with 'padding=true' and 'truncation=true' to have batched tensors with the same length.");const nt=[Ve.length,Ve[0].input_ids.length];for(const jt of Object.keys(Ve[0]))gt[jt]=new w.Tensor("int64",BigInt64Array.from(Ve.flatMap(Qr=>Qr[jt]).map(BigInt)),nt)}else{for(const nt of Object.keys(Ve[0]))gt[nt]=Ve.map(jt=>jt[nt]);if(!BA)for(const nt of Object.keys(gt))gt[nt]=gt[nt][0]}return gt}_encode_text(K){if(K===null)return null;const fe=this.added_tokens_splitter.split(K);for(let Ie=0;Ie<fe.length;++Ie){const We=this.added_tokens_map.get(fe[Ie]);We&&(We.lstrip&&Ie>0&&(fe[Ie-1]=fe[Ie-1].trimEnd()),We.rstrip&&Ie<fe.length-1&&(fe[Ie+1]=fe[Ie+1].trimStart()))}return fe.flatMap((Ie,We)=>{if(Ie.length===0)return[];if(this.added_tokens_map.has(Ie))return[Ie];if(this.remove_space===!0&&(Ie=Ie.trim().split(/\s+/).join(" ")),this.do_lowercase_and_remove_accent&&(Ie=N(Ie)),this.normalizer!==null&&(Ie=this.normalizer(Ie)),Ie.length===0)return[];const eA=this.pre_tokenizer!==null?this.pre_tokenizer(Ie,{section_index:We}):[Ie];return this.model(eA)})}_encode_plus(K,{text_pair:fe=null,add_special_tokens:Me=!0,return_token_type_ids:Ie=null}={}){const{tokens:We,token_type_ids:eA}=this._tokenize_helper(K,{pair:fe,add_special_tokens:Me}),vA=this.model.convert_tokens_to_ids(We),xA={input_ids:vA,attention_mask:new Array(vA.length).fill(1)};return(Ie??this.return_token_type_ids)&&eA&&(xA.token_type_ids=eA),xA}_tokenize_helper(K,{pair:fe=null,add_special_tokens:Me=!1}={}){const Ie=this._encode_text(K),We=this._encode_text(fe);return this.post_processor?this.post_processor(Ie,We,{add_special_tokens:Me}):{tokens:(0,m.mergeArrays)(Ie??[],We??[])}}tokenize(K,{pair:fe=null,add_special_tokens:Me=!1}={}){return this._tokenize_helper(K,{pair:fe,add_special_tokens:Me}).tokens}encode(K,{text_pair:fe=null,add_special_tokens:Me=!0,return_token_type_ids:Ie=null}={}){return this._encode_plus(K,{text_pair:fe,add_special_tokens:Me,return_token_type_ids:Ie}).input_ids}batch_decode(K,fe={}){return K instanceof w.Tensor&&(K=K.tolist()),K.map(Me=>this.decode(Me,fe))}decode(K,fe={}){if(K instanceof w.Tensor&&(K=j(K)),!Array.isArray(K)||K.length===0||!(0,m.isIntegralNumber)(K[0]))throw Error("token_ids must be a non-empty array of integers.");return this.decode_single(K,fe)}decode_single(K,{skip_special_tokens:fe=!1,clean_up_tokenization_spaces:Me=null}){let Ie=this.model.convert_ids_to_tokens(K);fe&&(Ie=Ie.filter(eA=>!this.special_tokens.includes(eA)));let We=this.decoder?this.decoder(Ie):Ie.join(" ");return this.decoder&&this.decoder.end_of_word_suffix&&(We=We.replaceAll(this.decoder.end_of_word_suffix," "),fe&&(We=We.trim())),(Me??this.clean_up_tokenization_spaces)&&(We=J(We)),We}get_chat_template({chat_template:K=null,tools:fe=null}={}){if(this.chat_template&&typeof this.chat_template=="object"){const Me=this.chat_template;if(K!==null&&Object.hasOwn(Me,K))K=Me[K];else if(K===null)if(fe!==null&&"tool_use"in Me)K=Me.tool_use;else if("default"in Me)K=Me.default;else throw Error(`This model has multiple chat templates with no default specified! Please either pass a chat template or the name of the template you wish to use to the 'chat_template' argument. Available template names are ${Object.keys(Me).sort()}.`)}else if(K===null)if(this.chat_template)K=this.chat_template;else throw Error("Cannot use apply_chat_template() because tokenizer.chat_template is not set and no template argument was passed! For information about writing templates and setting the tokenizer.chat_template attribute, please see the documentation at https://huggingface.co/docs/transformers/main/en/chat_templating");return K}apply_chat_template(K,{tools:fe=null,documents:Me=null,chat_template:Ie=null,add_generation_prompt:We=!1,tokenize:eA=!0,padding:vA=!1,truncation:xA=!1,max_length:BA=null,return_tensor:Ve=!0,return_dict:gt=!1,tokenizer_kwargs:nt={},...jt}={}){if(Ie=this.get_chat_template({chat_template:Ie,tools:fe}),typeof Ie!="string")throw Error(`chat_template must be a string, but got ${typeof Ie}`);let Qr=this._compiled_template_cache.get(Ie);Qr===void 0&&(Qr=new B.Template(Ie),this._compiled_template_cache.set(Ie,Qr));const lr=Object.create(null);for(const kt of xe){const Jt=this.getToken(kt);Jt&&(lr[kt]=Jt)}const vr=Qr.render({messages:K,add_generation_prompt:We,tools:fe,documents:Me,...lr,...jt});if(eA){const kt=this._call(vr,{add_special_tokens:!1,padding:vA,truncation:xA,max_length:BA,return_tensor:Ve,...nt});return gt?kt:kt.input_ids}return vr}}class LA extends Le{return_token_type_ids=!0}class QA extends Le{return_token_type_ids=!0}class SA extends Le{return_token_type_ids=!0}class tr extends Le{return_token_type_ids=!0}class bt extends Le{return_token_type_ids=!0}class or extends Le{return_token_type_ids=!0}class _t extends Le{return_token_type_ids=!0}class Rt extends Le{return_token_type_ids=!0}class zA extends Le{return_token_type_ids=!0}class rr extends Le{}class Ps extends Le{}class Rs extends Le{return_token_type_ids=!0;constructor(K,fe){super(K,fe),console.warn('WARNING: `XLMTokenizer` is not yet supported by Hugging Face\'s "fast" tokenizers library. Therefore, you may experience slightly inaccurate results.')}}class Is extends Le{return_token_type_ids=!0}class ea extends Le{}class fs extends Le{}class ws extends Le{}class ks extends Le{constructor(K,fe){super(K,fe),this.languageRegex=/^[a-z]{2}_[A-Z]{2}$/,this.language_codes=this.special_tokens.filter(Me=>this.languageRegex.test(Me)),this.lang_to_token=Me=>Me}_build_translation_inputs(K,fe,Me){return pr(this,K,fe,Me)}}class Gs extends ks{}class Jr extends Le{}class oa extends Le{}const Tt="▁";class Qs extends Le{padding_side="left";constructor(K,fe){super(K,fe),this.legacy=fe.legacy??!0,this.legacy||(this.normalizer=null,this.pre_tokenizer=new Lt({replacement:Tt,add_prefix_space:!0,prepend_scheme:"first"}))}_encode_text(K){if(K===null)return null;if(this.legacy||K.length===0)return super._encode_text(K);let fe=super._encode_text(Tt+K.replaceAll(Tt," "));return fe.length>1&&fe[0]===Tt&&this.special_tokens.includes(fe[1])&&(fe=fe.slice(1)),fe}}class Fs extends Le{}class qr extends Le{}class Lr extends Le{}class uA extends Le{}class gA extends Le{}class WA extends Le{}class Mr extends Le{}class gs extends Le{}class js extends Le{}function pr(Oe,K,fe,Me){if(!("language_codes"in Oe)||!Array.isArray(Oe.language_codes))throw new Error("Tokenizer must have `language_codes` attribute set and it should be an array of language ids.");if(!("languageRegex"in Oe)||!(Oe.languageRegex instanceof RegExp))throw new Error("Tokenizer must have `languageRegex` attribute set and it should be a regular expression.");if(!("lang_to_token"in Oe)||typeof Oe.lang_to_token!="function")throw new Error("Tokenizer must have `lang_to_token` attribute set and it should be a function.");const Ie=Me.src_lang,We=Me.tgt_lang;if(!Oe.language_codes.includes(We))throw new Error(`Target language code "${We}" is not valid. Must be one of: {${Oe.language_codes.join(", ")}}`);if(Ie!==void 0){if(!Oe.language_codes.includes(Ie))throw new Error(`Source language code "${Ie}" is not valid. Must be one of: {${Oe.language_codes.join(", ")}}`);for(const eA of Oe.post_processor.config.single)if("SpecialToken"in eA&&Oe.languageRegex.test(eA.SpecialToken.id)){eA.SpecialToken.id=Oe.lang_to_token(Ie);break}}return Me.forced_bos_token_id=Oe.model.convert_tokens_to_ids([Oe.lang_to_token(We)])[0],Oe._call(K,fe)}class Gr extends Le{constructor(K,fe){super(K,fe),this.languageRegex=/^[a-z]{3}_[A-Z][a-z]{3}$/,this.language_codes=this.special_tokens.filter(Me=>this.languageRegex.test(Me)),this.lang_to_token=Me=>Me}_build_translation_inputs(K,fe,Me){return pr(this,K,fe,Me)}}class Ws extends Le{constructor(K,fe){super(K,fe),this.languageRegex=/^__[a-z]{2,3}__$/,this.language_codes=this.special_tokens.filter(Me=>this.languageRegex.test(Me)).map(Me=>Me.slice(2,-2)),this.lang_to_token=Me=>`__${Me}__`}_build_translation_inputs(K,fe,Me){return pr(this,K,fe,Me)}}class rt extends Le{get timestamp_begin(){return this.model.convert_tokens_to_ids(["<|notimestamps|>"])[0]+1}_decode_asr(K,{return_timestamps:fe=!1,return_language:Me=!1,time_precision:Ie=null,force_full_sequences:We=!0}={}){if(Ie===null)throw Error("Must specify time_precision");let eA=null;const vA=fe==="word";function xA(){return{language:eA,timestamp:[null,null],text:""}}const BA=[];let Ve=xA(),gt=0;const nt=this.timestamp_begin,Qr=nt+1500;let lr=[],vr=[],kt=!1,Jt=null;const os=new Set(this.all_special_ids);for(const Wt of K){const Ir=Wt.tokens,wr=vA?Wt.token_timestamps:null;let Pt=null,cr=nt;if("stride"in Wt){const[kr,sr,qt]=Wt.stride;if(gt-=sr,Jt=kr-qt,sr&&(cr=sr/Ie+nt),qt)for(let _A=Ir.length-1;_A>=0;--_A){const Gt=Number(Ir[_A]);if(Gt>=nt){if(Pt!==null&&(Gt-nt)*Ie<Jt)break;Pt=Gt}}}let Yr=[],ur=[];for(let kr=0;kr<Ir.length;++kr){const sr=Number(Ir[kr]);if(os.has(sr)){const qt=this.decode([sr]),_A=D.WHISPER_LANGUAGE_MAPPING.get(qt.slice(2,-2));if(_A!==void 0){if(eA!==null&&_A!==eA&&!fe){lr.push(Yr);const Gt=this.findLongestCommonSequence(lr)[0],Vr=this.decode(Gt);Ve.text=Vr,BA.push(Ve),lr=[],Yr=[],Ve=xA()}eA=Ve.language=_A}}else if(sr>=nt&&sr<=Qr){const qt=(sr-nt)*Ie+gt,_A=(0,C.round)(qt,2);if(Pt!==null&&sr>=Pt)kt=!0;else if(kt||lr.length>0&&sr<cr)kt=!1;else if(Ve.timestamp[0]===null)Ve.timestamp[0]=_A;else if(_A!==Ve.timestamp[0]){Ve.timestamp[1]=_A,lr.push(Yr),vA&&vr.push(ur);const[Gt,Vr]=this.findLongestCommonSequence(lr,vr),$a=this.decode(Gt);Ve.text=$a,vA&&(Ve.words=this.collateWordTimestamps(Gt,Vr,eA)),BA.push(Ve),lr=[],Yr=[],vr=[],ur=[],Ve=xA()}}else if(Yr.push(sr),vA){let qt=(0,C.round)(wr[kr]+gt,2),_A;if(kr+1<wr.length){_A=(0,C.round)(wr[kr+1]+gt,2);const Gt=this.decode([sr]);d.test(Gt)&&(_A=(0,C.round)(Math.min(qt+Ie,_A),2))}else _A=null;ur.push([qt,_A])}}if("stride"in Wt){const[kr,sr,qt]=Wt.stride;gt+=kr-qt}Yr.length>0?(lr.push(Yr),vA&&vr.push(ur)):lr.every(kr=>kr.length===0)&&(Ve=xA(),lr=[],Yr=[],vr=[],ur=[])}if(lr.length>0){if(We&&fe)throw new Error("Whisper did not predict an ending timestamp, which can happen if audio is cut off in the middle of a word. Also make sure WhisperTimeStampLogitsProcessor was used during generation.");const[Wt,Ir]=this.findLongestCommonSequence(lr,vr),wr=this.decode(Wt);Ve.text=wr,vA&&(Ve.words=this.collateWordTimestamps(Wt,Ir,eA)),BA.push(Ve)}let br=Object.create(null);const _r=BA.map(Wt=>Wt.text).join("");if(fe||Me){for(let Wt=0;Wt<BA.length;++Wt){const Ir=BA[Wt];fe||delete Ir.timestamp,Me||delete Ir.language}if(vA){const Wt=[];for(const Ir of BA)for(const wr of Ir.words)Wt.push(wr);br={chunks:Wt}}else br={chunks:BA}}return[_r,br]}findLongestCommonSequence(K,fe=null){let Me=K[0],Ie=Me.length,We=[];const eA=Array.isArray(fe)&&fe.length>0;let vA=eA?[]:null,xA=eA?fe[0]:null;for(let BA=1;BA<K.length;++BA){const Ve=K[BA];let gt=0,nt=[Ie,Ie,0,0];const jt=Ve.length;for(let br=1;br<Ie+jt;++br){const _r=Math.max(0,Ie-br),Wt=Math.min(Ie,Ie+jt-br),Ir=Me.slice(_r,Wt),wr=Math.max(0,br-Ie),Pt=Math.min(jt,br),cr=Ve.slice(wr,Pt);if(Ir.length!==cr.length)throw new Error("There is a bug within whisper `decode_asr` function, please report it. Dropping to prevent bad inference.");let Yr;eA?Yr=Ir.filter((sr,qt)=>sr===cr[qt]&&xA[_r+qt]<=fe[BA][wr+qt]).length:Yr=Ir.filter((sr,qt)=>sr===cr[qt]).length;const ur=br/1e4,kr=Yr/br+ur;Yr>1&&kr>gt&&(gt=kr,nt=[_r,Wt,wr,Pt])}const[Qr,lr,vr,kt]=nt,Jt=Math.floor((lr+Qr)/2),os=Math.floor((kt+vr)/2);We.push(...Me.slice(0,Jt)),Me=Ve.slice(os),Ie=Me.length,eA&&(vA.push(...xA.slice(0,Jt)),xA=fe[BA].slice(os))}return We.push(...Me),eA?(vA.push(...xA),[We,vA]):[We,[]]}collateWordTimestamps(K,fe,Me){const[Ie,We,eA]=this.combineTokensIntoWords(K,Me),vA=[];for(let xA=0;xA<Ie.length;++xA){const BA=eA[xA];vA.push({text:Ie[xA],timestamp:[fe[BA.at(0)][0],fe[BA.at(-1)][1]]})}return vA}combineTokensIntoWords(K,fe,Me=`"'“¡¿([{-`,Ie=`"'.。,，!！?？:：”)]}、`){fe=fe??"english";let We,eA,vA;return["chinese","japanese","thai","lao","myanmar"].includes(fe)?[We,eA,vA]=this.splitTokensOnUnicode(K):[We,eA,vA]=this.splitTokensOnSpaces(K),this.mergePunctuations(We,eA,vA,Me,Ie)}decode(K,fe){let Me;return fe?.decode_with_timestamps?(K instanceof w.Tensor&&(K=j(K)),Me=this.decodeWithTimestamps(K,fe)):Me=super.decode(K,fe),Me}decodeWithTimestamps(K,fe){const Me=fe?.time_precision??.02,Ie=Array.from(this.all_special_ids).at(-1)+1;let We=[[]];for(let eA of K)if(eA=Number(eA),eA>=Ie){const vA=((eA-Ie)*Me).toFixed(2);We.push(`<|${vA}|>`),We.push([])}else We[We.length-1].push(eA);return We=We.map(eA=>typeof eA=="string"?eA:super.decode(eA,fe)),We.join("")}splitTokensOnUnicode(K){const fe=this.decode(K,{decode_with_timestamps:!0}),Me="�",Ie=[],We=[],eA=[];let vA=[],xA=[],BA=0;for(let Ve=0;Ve<K.length;++Ve){const gt=K[Ve];vA.push(gt),xA.push(Ve);const nt=this.decode(vA,{decode_with_timestamps:!0});(!nt.includes(Me)||fe[BA+nt.indexOf(Me)]===Me)&&(Ie.push(nt),We.push(vA),eA.push(xA),vA=[],xA=[],BA+=nt.length)}return[Ie,We,eA]}splitTokensOnSpaces(K){const[fe,Me,Ie]=this.splitTokensOnUnicode(K),We=[],eA=[],vA=[],xA=new RegExp(`^[${e}]$`,"gu");for(let BA=0;BA<fe.length;++BA){const Ve=fe[BA],gt=Me[BA],nt=Ie[BA],jt=gt[0]>=this.model.tokens_to_ids.get("<|endoftext|>"),Qr=Ve.startsWith(" "),lr=Ve.trim(),vr=xA.test(lr);if(jt||Qr||vr||We.length===0)We.push(Ve),eA.push(gt),vA.push(nt);else{const kt=We.length-1;We[kt]+=Ve,eA[kt].push(...gt),vA[kt].push(...nt)}}return[We,eA,vA]}mergePunctuations(K,fe,Me,Ie,We){const eA=structuredClone(K),vA=structuredClone(fe),xA=structuredClone(Me);let BA=eA.length-2,Ve=eA.length-1;for(;BA>=0;)eA[BA].startsWith(" ")&&Ie.includes(eA[BA].trim())?(eA[Ve]=eA[BA]+eA[Ve],vA[Ve]=(0,m.mergeArrays)(vA[BA],vA[Ve]),xA[Ve]=(0,m.mergeArrays)(xA[BA],xA[Ve]),eA[BA]="",vA[BA]=[],xA[BA]=[]):Ve=BA,--BA;for(BA=0,Ve=1;Ve<eA.length;)!eA[BA].endsWith(" ")&&We.includes(eA[Ve])?(eA[BA]+=eA[Ve],vA[BA]=(0,m.mergeArrays)(vA[BA],vA[Ve]),xA[BA]=(0,m.mergeArrays)(xA[BA],xA[Ve]),eA[Ve]="",vA[Ve]=[],xA[Ve]=[]):BA=Ve,++Ve;return[eA.filter(gt=>gt),vA.filter(gt=>gt.length>0),xA.filter(gt=>gt.length>0)]}}class is extends Le{}class $r extends Le{}class Sa extends Le{}class Ca extends Le{constructor(K,fe){super(K,fe),this.languageRegex=/^(>>\w+<<)\s*/g,this.supported_language_codes=this.model.vocab.filter(Me=>this.languageRegex.test(Me)),console.warn('WARNING: `MarianTokenizer` is not yet supported by Hugging Face\'s "fast" tokenizers library. Therefore, you may experience slightly inaccurate results.')}_encode_text(K){if(K===null)return null;const[fe,...Me]=K.trim().split(this.languageRegex);if(Me.length===0)return super._encode_text(fe);if(Me.length===2){const[Ie,We]=Me;return this.supported_language_codes.includes(Ie)||console.warn(`Unsupported language code "${Ie}" detected, which may lead to unexpected behavior. Should be one of: ${JSON.stringify(this.supported_language_codes)}`),(0,m.mergeArrays)([Ie],super._encode_text(We))}}}class Oa extends Le{}class Ss extends Le{}class Ys extends Le{}class Aa extends Le{}class za extends Le{}class Na extends Le{constructor(K,fe){super(K,fe),this.decoder=new tt({})}}class La extends Le{}class _a extends Le{}class Vs{static TOKENIZER_CLASS_MAPPING={T5Tokenizer:ea,DistilBertTokenizer:rr,CamembertTokenizer:Ps,DebertaTokenizer:bt,DebertaV2Tokenizer:or,BertTokenizer:LA,HerbertTokenizer:_t,ConvBertTokenizer:Rt,RoFormerTokenizer:zA,XLMTokenizer:Rs,ElectraTokenizer:Is,MobileBertTokenizer:SA,SqueezeBertTokenizer:tr,AlbertTokenizer:QA,GPT2Tokenizer:fs,BartTokenizer:ws,MBartTokenizer:ks,MBart50Tokenizer:Gs,RobertaTokenizer:Jr,WhisperTokenizer:rt,CodeGenTokenizer:is,CLIPTokenizer:$r,SiglipTokenizer:Sa,MarianTokenizer:Ca,BloomTokenizer:oa,NllbTokenizer:Gr,M2M100Tokenizer:Ws,LlamaTokenizer:Qs,CodeLlamaTokenizer:Fs,XLMRobertaTokenizer:qr,MPNetTokenizer:Lr,FalconTokenizer:uA,GPTNeoXTokenizer:gA,EsmTokenizer:WA,Wav2Vec2CTCTokenizer:Oa,BlenderbotTokenizer:Ss,BlenderbotSmallTokenizer:Ys,SpeechT5Tokenizer:Aa,NougatTokenizer:za,VitsTokenizer:Na,Qwen2Tokenizer:Mr,GemmaTokenizer:gs,Grok1Tokenizer:js,CohereTokenizer:La,MgpstrTokenizer:_a,PreTrainedTokenizer:Le};static async from_pretrained(K,{progress_callback:fe=null,config:Me=null,cache_dir:Ie=null,local_files_only:We=!1,revision:eA="main",legacy:vA=null}={}){const[xA,BA]=await v(K,{progress_callback:fe,config:Me,cache_dir:Ie,local_files_only:We,revision:eA,legacy:vA}),Ve=BA.tokenizer_class?.replace(/Fast$/,"")??"PreTrainedTokenizer";let gt=this.TOKENIZER_CLASS_MAPPING[Ve];return gt||(console.warn(`Unknown tokenizer class "${Ve}", attempting to construct from base class.`),gt=Le),new gt(xA,BA)}}},"./src/utils/audio.js":(a,o,n)=>{n.r(o),n.d(o,{RawAudio:()=>we,hamming:()=>x,hanning:()=>v,mel_filter_bank:()=>U,read_audio:()=>B,spectrogram:()=>y,window_function:()=>ee});var u=n("./src/utils/hub.js"),m=n("./src/utils/maths.js"),b=n("./src/utils/core.js"),C=n("./src/env.js"),w=n("?7a2c"),E=n("./src/utils/tensor.js");async function B($,be){if(typeof AudioContext>"u")throw Error("Unable to load audio from path/URL since `AudioContext` is not available in your environment. Instead, audio data should be passed directly to the pipeline/processor. For more information and some example code, see https://huggingface.co/docs/transformers.js/guides/node-audio-processing.");const Ce=await(await(0,u.getFile)($)).arrayBuffer(),Ee=new AudioContext({sampleRate:be});typeof be>"u"&&console.warn(`No sampling rate provided, using default of ${Ee.sampleRate}Hz.`);const Be=await Ee.decodeAudioData(Ce);let ve;if(Be.numberOfChannels===2){const Ne=Math.sqrt(2),Fe=Be.getChannelData(0),le=Be.getChannelData(1);ve=new Float32Array(Fe.length);for(let Ae=0;Ae<Be.length;++Ae)ve[Ae]=Ne*(Fe[Ae]+le[Ae])/2}else ve=Be.getChannelData(0);return ve}function D($,be){if($<1)return new Float64Array;if($===1)return new Float64Array([1]);const Ce=1-be,Ee=2*Math.PI/($-1),Be=new Float64Array($);for(let ve=0;ve<$;++ve)Be[ve]=be-Ce*Math.cos(ve*Ee);return Be}function v($){return D($,.5)}function x($){return D($,.54)}const S={htk:$=>2595*Math.log10(1+$/700),kaldi:$=>1127*Math.log(1+$/700),slaney:($,be=1e3,Ce=15,Ee=27/Math.log(6.4))=>$>=be?Ce+Math.log($/be)*Ee:3*$/200};function F($,be="htk"){const Ce=S[be];if(!Ce)throw new Error('mel_scale should be one of "htk", "slaney" or "kaldi".');return typeof $=="number"?Ce($):$.map(Ee=>Ce(Ee))}const j={htk:$=>700*(10**($/2595)-1),kaldi:$=>700*(Math.exp($/1127)-1),slaney:($,be=1e3,Ce=15,Ee=Math.log(6.4)/27)=>$>=Ce?be*Math.exp(Ee*($-Ce)):200*$/3};function J($,be="htk"){const Ce=j[be];if(!Ce)throw new Error('mel_scale should be one of "htk", "slaney" or "kaldi".');return typeof $=="number"?Ce($):$.map(Ee=>Ce(Ee))}function L($,be){const Ce=Float64Array.from({length:be.length-1},(Ne,Fe)=>be[Fe+1]-be[Fe]),Ee=Array.from({length:$.length},()=>new Array(be.length));for(let Ne=0;Ne<$.length;++Ne){const Fe=Ee[Ne];for(let le=0;le<be.length;++le)Fe[le]=be[le]-$[Ne]}const Be=be.length-2,ve=Array.from({length:Be},()=>new Array($.length));for(let Ne=0;Ne<$.length;++Ne){const Fe=Ee[Ne];for(let le=0;le<Be;++le){const Ae=-Fe[le]/Ce[le],pe=Fe[le+2]/Ce[le+1];ve[le][Ne]=Math.max(0,Math.min(Ae,pe))}}return ve}function N($,be,Ce){const Ee=(be-$)/(Ce-1);return Float64Array.from({length:Ce},(Be,ve)=>$+Ee*ve)}function U($,be,Ce,Ee,Be,ve=null,Ne="htk",Fe=!1){if(ve!==null&&ve!=="slaney")throw new Error('norm must be one of null or "slaney"');if($<2)throw new Error(`Require num_frequency_bins: ${$} >= 2`);if(Ce>Ee)throw new Error(`Require min_frequency: ${Ce} <= max_frequency: ${Ee}`);const le=F(Ce,Ne),Ae=F(Ee,Ne),pe=N(le,Ae,be+2);let oe=J(pe,Ne),Ge;if(Fe){const Je=Be/(($-1)*2);Ge=F(Float64Array.from({length:$},(aA,kA)=>kA*Je),Ne),oe=pe}else Ge=N(0,Math.floor(Be/2),$);const nA=L(Ge,oe);if(ve!==null&&ve==="slaney")for(let Je=0;Je<be;++Je){const aA=nA[Je],kA=2/(oe[Je+2]-oe[Je]);for(let ze=0;ze<$;++ze)aA[ze]*=kA}return nA}function f($,be,Ce){const Ee=new $.constructor($.length+be+Ce),Be=$.length-1;for(let ve=0;ve<$.length;++ve)Ee[be+ve]=$[ve];for(let ve=1;ve<=be;++ve)Ee[be-ve]=$[(0,b.calculateReflectOffset)(ve,Be)];for(let ve=1;ve<=Ce;++ve)Ee[Be+be+ve]=$[(0,b.calculateReflectOffset)(Be-ve,Be)];return Ee}function k($,be,Ce,Ee,Be){if(Ce<=0)throw new Error("reference must be greater than zero");if(Ee<=0)throw new Error("min_value must be greater than zero");Ce=Math.max(Ee,Ce);const ve=Math.log10(Ce);for(let Ne=0;Ne<$.length;++Ne)$[Ne]=be*Math.log10(Math.max(Ee,$[Ne])-ve);if(Be!==null){if(Be<=0)throw new Error("db_range must be greater than zero");const Ne=(0,m.max)($)[0]-Be;for(let Fe=0;Fe<$.length;++Fe)$[Fe]=Math.max($[Fe],Ne)}return $}function e($,be=1,Ce=1e-5,Ee=null){return k($,20,be,Ce,Ee)}function d($,be=1,Ce=1e-10,Ee=null){return k($,10,be,Ce,Ee)}async function y($,be,Ce,Ee,{fft_length:Be=null,power:ve=1,center:Ne=!0,pad_mode:Fe="reflect",onesided:le=!0,preemphasis:Ae=null,mel_filters:pe=null,mel_floor:oe=1e-10,log_mel:Ge=null,reference:nA=1,min_value:Je=1e-10,db_range:aA=null,remove_dc_offset:kA=null,min_num_frames:ze=null,max_num_frames:de=null,do_pad:Se=!0,transpose:ge=!1}={}){const He=be.length;if(Be===null&&(Be=Ce),Ce>Be)throw Error(`frame_length (${Ce}) may not be larger than fft_length (${Be})`);if(He!==Ce)throw new Error(`Length of the window (${He}) must equal frame_length (${Ce})`);if(Ee<=0)throw new Error("hop_length must be greater than zero");if(ve===null&&pe!==null)throw new Error("You have provided `mel_filters` but `power` is `None`. Mel spectrogram computation is not yet supported for complex-valued spectrogram. Specify `power` to fix this issue.");if(Ne){if(Fe!=="reflect")throw new Error(`pad_mode="${Fe}" not implemented yet.`);const wA=Math.floor((Be-1)/2)+1;$=f($,wA,wA)}let Xe=Math.floor(1+Math.floor(($.length-Ce)/Ee));ze!==null&&Xe<ze&&(Xe=ze);const AA=le?Math.floor(Be/2)+1:Be;let qe=Xe,H=Xe;de!==null&&(de>Xe?Se&&(H=de):H=qe=de);const cA=new m.FFT(Be),fA=new Float64Array(Be),he=new Float64Array(cA.outputBufferSize),bA=new Float32Array(AA*H);for(let wA=0;wA<qe;++wA){const ZA=wA*Ee,TA=Math.min($.length-ZA,Ce);TA!==Ce&&fA.fill(0,0,Ce);for(let tA=0;tA<TA;++tA)fA[tA]=$[ZA+tA];if(kA){let tA=0;for(let ot=0;ot<TA;++ot)tA+=fA[ot];const OA=tA/TA;for(let ot=0;ot<TA;++ot)fA[ot]-=OA}if(Ae!==null){for(let tA=TA-1;tA>=1;--tA)fA[tA]-=Ae*fA[tA-1];fA[0]*=1-Ae}for(let tA=0;tA<be.length;++tA)fA[tA]*=be[tA];cA.realTransform(he,fA);for(let tA=0;tA<AA;++tA){const OA=tA<<1;bA[tA*H+wA]=he[OA]**2+he[OA+1]**2}}if(ve!==null&&ve!==2){const wA=2/ve;for(let ZA=0;ZA<bA.length;++ZA)bA[ZA]**=wA}const rA=pe.length;let EA=await(0,E.matmul)(new E.Tensor("float32",pe.flat(),[rA,AA]),new E.Tensor("float32",bA,[AA,H]));ge&&(EA=EA.transpose(1,0));const PA=EA.data;for(let wA=0;wA<PA.length;++wA)PA[wA]=Math.max(oe,PA[wA]);if(ve!==null&&Ge!==null){const wA=Math.min(PA.length,qe*rA);switch(Ge){case"log":for(let ZA=0;ZA<wA;++ZA)PA[ZA]=Math.log(PA[ZA]);break;case"log10":for(let ZA=0;ZA<wA;++ZA)PA[ZA]=Math.log10(PA[ZA]);break;case"dB":if(ve===1)e(PA,nA,Je,aA);else if(ve===2)d(PA,nA,Je,aA);else throw new Error(`Cannot use log_mel option '${Ge}' with power ${ve}`);break;default:throw new Error(`log_mel must be one of null, 'log', 'log10' or 'dB'. Got '${Ge}'`)}}return EA}function ee($,be,{periodic:Ce=!0,frame_length:Ee=null,center:Be=!0}={}){const ve=Ce?$+1:$;let Ne;switch(be){case"boxcar":Ne=new Float64Array(ve).fill(1);break;case"hann":case"hann_window":Ne=v(ve);break;case"hamming":Ne=x(ve);break;case"povey":Ne=v(ve).map(Fe=>Math.pow(Fe,.85));break;default:throw new Error(`Unknown window type ${be}.`)}if(Ce&&(Ne=Ne.subarray(0,$)),Ee===null)return Ne;if($>Ee)throw new Error(`Length of the window (${$}) may not be larger than frame_length (${Ee})`);return Ne}function T($,be){let Ce=44;const Ee=new ArrayBuffer(Ce+$.length*4),Be=new DataView(Ee);O(Be,0,"RIFF"),Be.setUint32(4,36+$.length*4,!0),O(Be,8,"WAVE"),O(Be,12,"fmt "),Be.setUint32(16,16,!0),Be.setUint16(20,3,!0),Be.setUint16(22,1,!0),Be.setUint32(24,be,!0),Be.setUint32(28,be*4,!0),Be.setUint16(32,4,!0),Be.setUint16(34,32,!0),O(Be,36,"data"),Be.setUint32(40,$.length*4,!0);for(let ve=0;ve<$.length;++ve,Ce+=4)Be.setFloat32(Ce,$[ve],!0);return Ee}function O($,be,Ce){for(let Ee=0;Ee<Ce.length;++Ee)$.setUint8(be+Ee,Ce.charCodeAt(Ee))}class we{constructor(be,Ce){this.audio=be,this.sampling_rate=Ce}toWav(){return T(this.audio,this.sampling_rate)}toBlob(){const be=this.toWav();return new Blob([be],{type:"audio/wav"})}async save(be){let Ce;if(C.apis.IS_BROWSER_ENV){if(C.apis.IS_WEBWORKER_ENV)throw new Error("Unable to save a file from a Web Worker.");Ce=b.saveBlob}else if(C.apis.IS_FS_AVAILABLE)Ce=async(Ee,Be)=>{let ve=await Be.arrayBuffer();w.writeFileSync(Ee,Buffer.from(ve))};else throw new Error("Unable to save because filesystem is disabled in this environment.");await Ce(be,this.toBlob())}}},"./src/utils/constants.js":(a,o,n)=>{n.r(o),n.d(o,{CHAT_TEMPLATE_NAME:()=>E,CONFIG_NAME:()=>m,FEATURE_EXTRACTOR_NAME:()=>b,GENERATION_CONFIG_NAME:()=>B,GITHUB_ISSUE_URL:()=>u,IMAGE_PROCESSOR_NAME:()=>C,PROCESSOR_NAME:()=>w});const u="https://github.com/huggingface/transformers.js/issues/new/choose",m="config.json",b="preprocessor_config.json",C=b,w="processor_config.json",E="chat_template.json",B="generation_config.json"},"./src/utils/core.js":(a,o,n)=>{n.r(o),n.d(o,{calculateDimensions:()=>B,calculateReflectOffset:()=>S,count:()=>L,dispatchCallback:()=>u,escapeRegExp:()=>b,isIntegralNumber:()=>w,isNullishDimension:()=>E,isTypedArray:()=>C,len:()=>J,mergeArrays:()=>v,pick:()=>j,pop:()=>D,product:()=>x,reverseDictionary:()=>m,saveBlob:()=>F});function u(N,U){N&&N(U)}function m(N){return Object.fromEntries(Object.entries(N).map(([U,f])=>[f,U]))}function b(N){return N.replace(/[.*+?^${}()|[\]\\]/g,"\\$&")}function C(N){return N?.prototype?.__proto__?.constructor?.name==="TypedArray"}function w(N){return Number.isInteger(N)||typeof N=="bigint"}function E(N){return N==null||N===-1}function B(N){const U=[];let f=N;for(;Array.isArray(f);)U.push(f.length),f=f[0];return U}function D(N,U,f=void 0){const k=N[U];if(k!==void 0)return delete N[U],k;if(f===void 0)throw Error(`Key ${U} does not exist in object.`);return f}function v(...N){return Array.prototype.concat.apply([],N)}function x(...N){return N.reduce((U,f)=>U.flatMap(k=>f.map(e=>[k,e])))}function S(N,U){return Math.abs((N+U)%(2*U)-U)}function F(N,U){const f=URL.createObjectURL(U),k=document.createElement("a");k.href=f,k.download=N,k.click(),k.remove(),URL.revokeObjectURL(f)}function j(N,U){return Object.assign({},...U.map(f=>{if(N[f]!==void 0)return{[f]:N[f]}}))}function J(N){let U=0;for(const f of N)++U;return U}function L(N,U){let f=0;for(const k of N)k===U&&++f;return f}},"./src/utils/data-structures.js":(a,o,n)=>{n.r(o),n.d(o,{CharTrie:()=>m,DictionarySplitter:()=>E,LRUCache:()=>B,PriorityQueue:()=>u,TokenLattice:()=>C});class u{constructor(v=(S,F)=>S>F,x=1/0){this._heap=[],this._comparator=v,this._maxSize=x}get size(){return this._heap.length}isEmpty(){return this.size===0}peek(){return this._heap[0]}push(...v){return this.extend(v)}extend(v){for(const x of v)if(this.size<this._maxSize)this._heap.push(x),this._siftUp();else{const S=this._smallest();this._comparator(x,this._heap[S])&&(this._heap[S]=x,this._siftUpFrom(S))}return this.size}pop(){const v=this.peek(),x=this.size-1;return x>0&&this._swap(0,x),this._heap.pop(),this._siftDown(),v}replace(v){const x=this.peek();return this._heap[0]=v,this._siftDown(),x}_parent(v){return(v+1>>>1)-1}_left(v){return(v<<1)+1}_right(v){return v+1<<1}_greater(v,x){return this._comparator(this._heap[v],this._heap[x])}_swap(v,x){const S=this._heap[v];this._heap[v]=this._heap[x],this._heap[x]=S}_siftUp(){this._siftUpFrom(this.size-1)}_siftUpFrom(v){for(;v>0&&this._greater(v,this._parent(v));)this._swap(v,this._parent(v)),v=this._parent(v)}_siftDown(){let v=0;for(;this._left(v)<this.size&&this._greater(this._left(v),v)||this._right(v)<this.size&&this._greater(this._right(v),v);){const x=this._right(v)<this.size&&this._greater(this._right(v),this._left(v))?this._right(v):this._left(v);this._swap(v,x),v=x}}_smallest(){return 2**Math.floor(Math.log2(this.size))-1}}class m{constructor(){this.root=b.default()}extend(v){for(const x of v)this.push(x)}push(v){let x=this.root;for(const S of v){let F=x.children.get(S);F===void 0&&(F=b.default(),x.children.set(S,F)),x=F}x.isLeaf=!0}*commonPrefixSearch(v){let x=this.root;if(x===void 0)return;let S="";for(const F of v){if(S+=F,x=x.children.get(F),x===void 0)return;x.isLeaf&&(yield S)}}}class b{constructor(v,x){this.isLeaf=v,this.children=x}static default(){return new b(!1,new Map)}}class C{constructor(v,x,S){this.chars=Array.from(v),this.len=this.chars.length,this.bosTokenId=x,this.eosTokenId=S,this.nodes=[],this.beginNodes=Array.from({length:this.len+1},()=>[]),this.endNodes=Array.from({length:this.len+1},()=>[]);const F=new w(this.bosTokenId,0,0,0,0),j=new w(this.eosTokenId,1,this.len,0,0);this.nodes.push(F.clone()),this.nodes.push(j.clone()),this.beginNodes[this.len].push(j),this.endNodes[0].push(F)}insert(v,x,S,F){const j=this.nodes.length,J=new w(F,j,v,x,S);this.beginNodes[v].push(J),this.endNodes[v+x].push(J),this.nodes.push(J)}viterbi(){const v=this.len;let x=0;for(;x<=v;){if(this.beginNodes[x].length==0)return[];for(let L of this.beginNodes[x]){L.prev=null;let N=0,U=null;for(let f of this.endNodes[x]){const k=f.backtraceScore+L.score;(U===null||k>N)&&(U=f.clone(),N=k)}if(U!==null)L.prev=U,L.backtraceScore=N;else return[]}++x}const S=[],j=this.beginNodes[v][0].prev;if(j===null)return[];let J=j.clone();for(;J.prev!==null;)S.push(J.clone()),J=J.clone().prev.clone();return S.reverse(),S}piece(v){return this.chars.slice(v.pos,v.pos+v.length).join("")}tokens(){return this.viterbi().map(x=>this.piece(x))}tokenIds(){return this.viterbi().map(x=>x.tokenId)}}class w{constructor(v,x,S,F,j){this.tokenId=v,this.nodeId=x,this.pos=S,this.length=F,this.score=j,this.prev=null,this.backtraceScore=0}clone(){const v=new w(this.tokenId,this.nodeId,this.pos,this.length,this.score);return v.prev=this.prev,v.backtraceScore=this.backtraceScore,v}}class E{constructor(v){this.trie=this._buildTrie(v)}_buildTrie(v){const x=Object.create(null);for(const S of v){let F=x;for(let j=0;j<S.length;++j)F=F[S[j]]??=Object.create(null);F.end=S}return x}split(v){const x=[],S=v.length;let F=0,j=0;for(;j<S;){let J=this.trie,L=null,N=j;for(;N<S&&(J=J[v[N]]);)J.end&&(L=J.end),++N;L?(j>F&&x.push(v.slice(F,j)),x.push(L),j+=L.length,F=j):++j}return F<S&&x.push(v.slice(F)),x}}class B{constructor(v){this.capacity=v,this.cache=new Map}get(v){if(!this.cache.has(v))return;const x=this.cache.get(v);return this.cache.delete(v),this.cache.set(v,x),x}put(v,x){this.cache.has(v)&&this.cache.delete(v),this.cache.set(v,x),this.cache.size>this.capacity&&this.cache.delete(this.cache.keys().next().value)}clear(){this.cache.clear()}}},"./src/utils/devices.js":(a,o,n)=>{n.r(o),n.d(o,{DEVICE_TYPES:()=>u});const u=Object.freeze({auto:"auto",gpu:"gpu",cpu:"cpu",wasm:"wasm",webgpu:"webgpu",cuda:"cuda",dml:"dml",webnn:"webnn","webnn-npu":"webnn-npu","webnn-gpu":"webnn-gpu","webnn-cpu":"webnn-cpu"})},"./src/utils/dtypes.js":(a,o,n)=>{n.r(o),n.d(o,{DATA_TYPES:()=>C,DEFAULT_DEVICE_DTYPE_MAPPING:()=>w,DEFAULT_DTYPE_SUFFIX_MAPPING:()=>E,isWebGpuFp16Supported:()=>b});var u=n("./src/env.js"),m=n("./src/utils/devices.js");const b=function(){let B;return async function(){if(B===void 0)if(!u.apis.IS_WEBGPU_AVAILABLE)B=!1;else try{B=(await navigator.gpu.requestAdapter()).features.has("shader-f16")}catch{B=!1}return B}}(),C=Object.freeze({auto:"auto",fp32:"fp32",fp16:"fp16",q8:"q8",int8:"int8",uint8:"uint8",q4:"q4",bnb4:"bnb4",q4f16:"q4f16"}),w=Object.freeze({[m.DEVICE_TYPES.wasm]:C.q8}),E=Object.freeze({[C.fp32]:"",[C.fp16]:"_fp16",[C.int8]:"_int8",[C.uint8]:"_uint8",[C.q8]:"_quantized",[C.q4]:"_q4",[C.q4f16]:"_q4f16",[C.bnb4]:"_bnb4"})},"./src/utils/generic.js":(a,o,n)=>{n.r(o),n.d(o,{Callable:()=>u});const u=class{constructor(){let m=function(...b){return m._call(...b)};return Object.setPrototypeOf(m,new.target.prototype)}_call(...m){throw Error("Must implement _call method in subclass")}}},"./src/utils/hub.js":(a,o,n)=>{n.r(o),n.d(o,{MAX_EXTERNAL_DATA_CHUNKS:()=>w,getFile:()=>S,getModelFile:()=>N,getModelJSON:()=>U});var u=n("?7a2c"),m=n("?a42a"),b=n("./src/env.js"),C=n("./src/utils/core.js");const w=100,E={txt:"text/plain",html:"text/html",css:"text/css",js:"text/javascript",json:"application/json",png:"image/png",jpg:"image/jpeg",jpeg:"image/jpeg",gif:"image/gif"};class B{constructor(d){if(this.filePath=d,this.headers=new Headers,this.exists=u.existsSync(d),this.exists){this.status=200,this.statusText="OK";let y=u.statSync(d);this.headers.set("content-length",y.size.toString()),this.updateContentType();const ee=u.createReadStream(d);this.body=new ReadableStream({start(T){ee.on("data",O=>T.enqueue(O)),ee.on("end",()=>T.close()),ee.on("error",O=>T.error(O))},cancel(){ee.destroy()}})}else this.status=404,this.statusText="Not Found",this.body=null}updateContentType(){const d=this.filePath.toString().split(".").pop().toLowerCase();this.headers.set("content-type",E[d]??"application/octet-stream")}clone(){let d=new B(this.filePath);return d.exists=this.exists,d.status=this.status,d.statusText=this.statusText,d.headers=new Headers(this.headers),d}async arrayBuffer(){return(await u.promises.readFile(this.filePath)).buffer}async blob(){const d=await u.promises.readFile(this.filePath);return new Blob([d],{type:this.headers.get("content-type")})}async text(){return await u.promises.readFile(this.filePath,"utf8")}async json(){return JSON.parse(await this.text())}}function D(e,d=null,y=null){let ee;try{ee=new URL(e)}catch{return!1}return!(d&&!d.includes(ee.protocol)||y&&!y.includes(ee.hostname))}const v=/^(\b[\w\-.]+\b\/)?\b[\w\-.]{1,96}\b$/;function x(e){return!(!v.test(e)||e.includes("..")||e.includes("--")||e.endsWith(".git")||e.endsWith(".ipynb"))}async function S(e){if(b.env.useFS&&!D(e,["http:","https:","blob:"]))return new B(e instanceof URL?e.protocol==="file:"?e.pathname:e.toString():e);if(typeof process<"u"&&process?.release?.name==="node"){const d=!!L2?.TESTING_REMOTELY,y=b.env.version,ee=new Headers;if(ee.set("User-Agent",`transformers.js/${y}; is_ci/${d};`),D(e,["http:","https:"],["huggingface.co","hf.co"])){const O=L2?.HF_TOKEN??L2?.HF_ACCESS_TOKEN;O&&ee.set("Authorization",`Bearer ${O}`)}return fetch(e,{headers:ee})}else return fetch(e)}const F={400:"Bad request error occurred while trying to load file",401:"Unauthorized access to file",403:"Forbidden access to file",404:"Could not locate file",408:"Request timeout error occurred while trying to load file",500:"Internal server error error occurred while trying to load file",502:"Bad gateway error occurred while trying to load file",503:"Service unavailable error occurred while trying to load file",504:"Gateway timeout error occurred while trying to load file"};function j(e,d,y){if(!y)return null;const ee=F[e]??`Error (${e}) occurred while trying to load file`;throw Error(`${ee}: "${d}".`)}class J{constructor(d){this.path=d}async match(d){let y=m.join(this.path,d),ee=new B(y);if(ee.exists)return ee}async put(d,y,ee=void 0){let T=m.join(this.path,d);try{const O=y.headers.get("Content-Length"),we=parseInt(O??"0");let $=0;await u.promises.mkdir(m.dirname(T),{recursive:!0});const be=u.createWriteStream(T),Ce=y.body.getReader();for(;;){const{done:Ee,value:Be}=await Ce.read();if(Ee)break;await new Promise((Ne,Fe)=>{be.write(Be,le=>{if(le){Fe(le);return}Ne()})}),$+=Be.length;const ve=we?$/we*100:0;ee?.({progress:ve,loaded:$,total:we})}be.close()}catch(O){try{await u.promises.unlink(T)}catch{}throw O}}}async function L(e,...d){for(let y of d)try{let ee=await e.match(y);if(ee)return ee}catch{continue}}async function N(e,d,y=!0,ee={},T=!1){if(!b.env.allowLocalModels){if(ee.local_files_only)throw Error("Invalid configuration detected: local models are disabled (`env.allowLocalModels=false`) but you have requested to only use local models (`local_files_only=true`).");if(!b.env.allowRemoteModels)throw Error("Invalid configuration detected: both local and remote models are disabled. Fix by setting `env.allowLocalModels` or `env.allowRemoteModels` to `true`.")}(0,C.dispatchCallback)(ee.progress_callback,{status:"initiate",name:e,file:d});let O;if(!O&&b.env.useCustomCache){if(!b.env.customCache)throw Error("`env.useCustomCache=true`, but `env.customCache` is not defined.");if(!b.env.customCache.match||!b.env.customCache.put)throw new Error("`env.customCache` must be an object which implements the `match` and `put` functions of the Web Cache API. For more information, see https://developer.mozilla.org/en-US/docs/Web/API/Cache");O=b.env.customCache}if(!O&&b.env.useBrowserCache){if(typeof caches>"u")throw Error("Browser cache is not available in this environment.");try{O=await caches.open("transformers-cache")}catch(oe){console.warn("An error occurred while opening the browser cache:",oe)}}if(!O&&b.env.useFSCache){if(!b.apis.IS_FS_AVAILABLE)throw Error("File System Cache is not available in this environment.");O=new J(ee.cache_dir??b.env.cacheDir)}const we=ee.revision??"main",$=k(e,d),be=x(e),Ce=be?k(b.env.localModelPath,$):$,Ee=k(b.env.remoteHost,b.env.remotePathTemplate.replaceAll("{model}",e).replaceAll("{revision}",encodeURIComponent(we)),d);let Be;const ve=O instanceof J?we==="main"?$:k(e,we,d):Ee;let Ne=!1,Fe;O&&(Fe=await L(O,Ce,ve));const le=Fe!==void 0;if(Fe===void 0){if(b.env.allowLocalModels)if(D($,["http:","https:"])){if(ee.local_files_only)throw new Error(`\`local_files_only=true\`, but attempted to load a remote file from: ${$}.`);if(!b.env.allowRemoteModels)throw new Error(`\`env.allowRemoteModels=false\`, but attempted to load a remote file from: ${$}.`)}else try{Fe=await S(Ce),Be=Ce}catch(Ge){console.warn(`Unable to load from local path "${Ce}": "${Ge}"`)}if(Fe===void 0||Fe.status===404){if(ee.local_files_only||!b.env.allowRemoteModels){if(y)throw Error(`\`local_files_only=true\` or \`env.allowRemoteModels=false\` and file was not found locally at "${Ce}".`);return null}if(!be)throw Error(`Local file missing at "${Ce}" and download aborted due to invalid model ID "${e}".`);if(Fe=await S(Ee),Fe.status!==200)return j(Fe.status,Ee,y);Be=ve}Ne=O&&typeof Response<"u"&&Fe instanceof Response&&Fe.status===200}(0,C.dispatchCallback)(ee.progress_callback,{status:"download",name:e,file:d});let Ae;if(!(b.apis.IS_NODE_ENV&&T)){let oe;ee.progress_callback?le&&typeof navigator<"u"&&/firefox/i.test(navigator.userAgent)?(oe=new Uint8Array(await Fe.arrayBuffer()),(0,C.dispatchCallback)(ee.progress_callback,{status:"progress",name:e,file:d,progress:100,loaded:oe.length,total:oe.length})):oe=await f(Fe,Ge=>{(0,C.dispatchCallback)(ee.progress_callback,{status:"progress",name:e,file:d,...Ge})}):oe=new Uint8Array(await Fe.arrayBuffer()),Ae=oe}if(Ne&&Be&&await O.match(Be)===void 0&&(Ae?await O.put(Be,new Response(Ae,{headers:Fe.headers})).catch(oe=>{console.warn(`Unable to add response to browser cache: ${oe}.`)}):await O.put(Be,Fe,ee.progress_callback)),(0,C.dispatchCallback)(ee.progress_callback,{status:"done",name:e,file:d}),Ae){if(!b.apis.IS_NODE_ENV&&T)throw new Error("Cannot return path in a browser environment.");return Ae}if(Fe instanceof B)return Fe.filePath;const pe=await O?.match(Be);if(pe instanceof B)return pe.filePath;if(pe instanceof Response)return new Uint8Array(await pe.arrayBuffer());if(typeof pe=="string")return pe;throw new Error("Unable to get model file path or buffer.")}async function U(e,d,y=!0,ee={}){const T=await N(e,d,y,ee,!1);if(T===null)return{};const we=new TextDecoder("utf-8").decode(T);return JSON.parse(we)}async function f(e,d){const y=e.headers.get("Content-Length");y===null&&console.warn("Unable to determine content-length from response headers. Will expand buffer when needed.");let ee=parseInt(y??"0"),T=new Uint8Array(ee),O=0;const we=e.body.getReader();async function $(){const{done:be,value:Ce}=await we.read();if(be)return;const Ee=O+Ce.length;if(Ee>ee){ee=Ee;const ve=new Uint8Array(ee);ve.set(T),T=ve}T.set(Ce,O),O=Ee;const Be=O/ee*100;return d({progress:Be,loaded:O,total:ee}),$()}return await $(),T}function k(...e){return e=e.map((d,y)=>(y&&(d=d.replace(new RegExp("^/"),"")),y!==e.length-1&&(d=d.replace(new RegExp("/$"),"")),d)),e.join("/")}},"./src/utils/image.js":(a,o,n)=>{n.r(o),n.d(o,{RawImage:()=>F,load_image:()=>j});var u=n("./src/utils/core.js"),m=n("./src/utils/hub.js"),b=n("./src/env.js"),C=n("./src/utils/tensor.js"),w=n("?2b25");let E,B,D;const v=b.apis.IS_BROWSER_ENV||b.apis.IS_WEBWORKER_ENV;if(v)E=(J,L)=>{if(!self.OffscreenCanvas)throw new Error("OffscreenCanvas not supported by this browser.");return new self.OffscreenCanvas(J,L)},D=self.createImageBitmap,B=self.ImageData;else if(w)D=async J=>{const N=(await J.metadata()).channels,{data:U,info:f}=await J.rotate().raw().toBuffer({resolveWithObject:!0}),k=new F(new Uint8ClampedArray(U),f.width,f.height,f.channels);return N!==void 0&&N!==f.channels&&k.convert(N),k};else throw new Error("Unable to load image processing library.");const x={0:"nearest",1:"lanczos",2:"bilinear",3:"bicubic",4:"box",5:"hamming"},S=new Map([["png","image/png"],["jpg","image/jpeg"],["jpeg","image/jpeg"],["gif","image/gif"]]);class F{constructor(L,N,U,f){this.data=L,this.width=N,this.height=U,this.channels=f}get size(){return[this.width,this.height]}static async read(L){if(L instanceof F)return L;if(typeof L=="string"||L instanceof URL)return await this.fromURL(L);if(L instanceof Blob)return await this.fromBlob(L);if(typeof HTMLCanvasElement<"u"&&L instanceof HTMLCanvasElement||typeof OffscreenCanvas<"u"&&L instanceof OffscreenCanvas)return this.fromCanvas(L);throw new Error(`Unsupported input type: ${typeof L}`)}static fromCanvas(L){if(!v)throw new Error("fromCanvas() is only supported in browser environments.");const U=L.getContext("2d").getImageData(0,0,L.width,L.height).data;return new F(U,L.width,L.height,4)}static async fromURL(L){const N=await(0,m.getFile)(L);if(N.status!==200)throw new Error(`Unable to read image from "${L}" (${N.status} ${N.statusText})`);const U=await N.blob();return this.fromBlob(U)}static async fromBlob(L){if(v){const N=await D(L),U=E(N.width,N.height).getContext("2d");return U.drawImage(N,0,0),new this(U.getImageData(0,0,N.width,N.height).data,N.width,N.height,4)}else{const N=w(await L.arrayBuffer());return await D(N)}}static fromTensor(L,N="CHW"){if(L.dims.length!==3)throw new Error(`Tensor should have 3 dimensions, but has ${L.dims.length} dimensions.`);if(N==="CHW")L=L.transpose(1,2,0);else if(N!=="HWC")throw new Error(`Unsupported channel format: ${N}`);if(!(L.data instanceof Uint8ClampedArray||L.data instanceof Uint8Array))throw new Error(`Unsupported tensor type: ${L.type}`);switch(L.dims[2]){case 1:case 2:case 3:case 4:return new F(L.data,L.dims[1],L.dims[0],L.dims[2]);default:throw new Error(`Unsupported number of channels: ${L.dims[2]}`)}}grayscale(){if(this.channels===1)return this;const L=new Uint8ClampedArray(this.width*this.height*1);switch(this.channels){case 3:case 4:for(let N=0,U=0;N<this.data.length;N+=this.channels){const f=this.data[N],k=this.data[N+1],e=this.data[N+2];L[U++]=Math.round(.2989*f+.587*k+.114*e)}break;default:throw new Error(`Conversion failed due to unsupported number of channels: ${this.channels}`)}return this._update(L,this.width,this.height,1)}rgb(){if(this.channels===3)return this;const L=new Uint8ClampedArray(this.width*this.height*3);switch(this.channels){case 1:for(let N=0,U=0;N<this.data.length;++N)L[U++]=this.data[N],L[U++]=this.data[N],L[U++]=this.data[N];break;case 4:for(let N=0,U=0;N<this.data.length;N+=4)L[U++]=this.data[N],L[U++]=this.data[N+1],L[U++]=this.data[N+2];break;default:throw new Error(`Conversion failed due to unsupported number of channels: ${this.channels}`)}return this._update(L,this.width,this.height,3)}rgba(){if(this.channels===4)return this;const L=new Uint8ClampedArray(this.width*this.height*4);switch(this.channels){case 1:for(let N=0,U=0;N<this.data.length;++N)L[U++]=this.data[N],L[U++]=this.data[N],L[U++]=this.data[N],L[U++]=255;break;case 3:for(let N=0,U=0;N<this.data.length;N+=3)L[U++]=this.data[N],L[U++]=this.data[N+1],L[U++]=this.data[N+2],L[U++]=255;break;default:throw new Error(`Conversion failed due to unsupported number of channels: ${this.channels}`)}return this._update(L,this.width,this.height,4)}putAlpha(L){if(L.width!==this.width||L.height!==this.height)throw new Error(`Expected mask size to be ${this.width}x${this.height}, but got ${L.width}x${L.height}`);if(L.channels!==1)throw new Error(`Expected mask to have 1 channel, but got ${L.channels}`);const N=this.data,U=L.data,f=this.width*this.height;if(this.channels===3){const k=new Uint8ClampedArray(f*4);for(let e=0,d=0,y=0;e<f;++e)k[y++]=N[d++],k[y++]=N[d++],k[y++]=N[d++],k[y++]=U[e];return this._update(k,this.width,this.height,4)}else if(this.channels===4){for(let k=0;k<f;++k)N[4*k+3]=U[k];return this}throw new Error(`Expected image to have 3 or 4 channels, but got ${this.channels}`)}async resize(L,N,{resample:U=2}={}){if(this.width===L&&this.height===N)return this;let f=x[U]??U;const k=(0,u.isNullishDimension)(L),e=(0,u.isNullishDimension)(N);if(k&&e)return this;if(k?L=N/this.height*this.width:e&&(N=L/this.width*this.height),v){const d=this.channels,y=this.toCanvas(),ee=E(L,N).getContext("2d");return ee.drawImage(y,0,0,L,N),new F(ee.getImageData(0,0,L,N).data,L,N,4).convert(d)}else{let d=this.toSharp();switch(f){case"box":case"hamming":(f==="box"||f==="hamming")&&(console.warn(`Resampling method ${f} is not yet supported. Using bilinear instead.`),f="bilinear");case"nearest":case"bilinear":case"bicubic":d=d.affine([L/this.width,0,0,N/this.height],{interpolator:f});break;case"lanczos":d=d.resize({width:L,height:N,fit:"fill",kernel:"lanczos3"});break;default:throw new Error(`Resampling method ${f} is not supported.`)}return await D(d)}}async pad([L,N,U,f]){if(L=Math.max(L,0),N=Math.max(N,0),U=Math.max(U,0),f=Math.max(f,0),L===0&&N===0&&U===0&&f===0)return this;if(v){const k=this.channels,e=this.toCanvas(),d=this.width+L+N,y=this.height+U+f,ee=E(d,y).getContext("2d");return ee.drawImage(e,0,0,this.width,this.height,L,U,this.width,this.height),new F(ee.getImageData(0,0,d,y).data,d,y,4).convert(k)}else{const k=this.toSharp().extend({left:L,right:N,top:U,bottom:f});return await D(k)}}async crop([L,N,U,f]){if(L=Math.max(L,0),N=Math.max(N,0),U=Math.min(U,this.width-1),f=Math.min(f,this.height-1),L===0&&N===0&&U===this.width-1&&f===this.height-1)return this;const k=U-L+1,e=f-N+1;if(v){const d=this.channels,y=this.toCanvas(),ee=E(k,e).getContext("2d");return ee.drawImage(y,L,N,k,e,0,0,k,e),new F(ee.getImageData(0,0,k,e).data,k,e,4).convert(d)}else{const d=this.toSharp().extract({left:L,top:N,width:k,height:e});return await D(d)}}async center_crop(L,N){if(this.width===L&&this.height===N)return this;const U=(this.width-L)/2,f=(this.height-N)/2;if(v){const k=this.channels,e=this.toCanvas(),d=E(L,N).getContext("2d");let y=0,ee=0,T=0,O=0;return U>=0?y=U:T=-U,f>=0?ee=f:O=-f,d.drawImage(e,y,ee,L,N,T,O,L,N),new F(d.getImageData(0,0,L,N).data,L,N,4).convert(k)}else{let k=this.toSharp();if(U>=0&&f>=0)k=k.extract({left:Math.floor(U),top:Math.floor(f),width:L,height:N});else if(U<=0&&f<=0){const e=Math.floor(-f),d=Math.floor(-U);k=k.extend({top:e,left:d,right:L-this.width-d,bottom:N-this.height-e})}else{let e=[0,0],d=0;f<0?(e[0]=Math.floor(-f),e[1]=N-this.height-e[0]):d=Math.floor(f);let y=[0,0],ee=0;U<0?(y[0]=Math.floor(-U),y[1]=L-this.width-y[0]):ee=Math.floor(U),k=k.extend({top:e[0],bottom:e[1],left:y[0],right:y[1]}).extract({left:ee,top:d,width:L,height:N})}return await D(k)}}async toBlob(L="image/png",N=1){if(!v)throw new Error("toBlob() is only supported in browser environments.");return await this.toCanvas().convertToBlob({type:L,quality:N})}toTensor(L="CHW"){let N=new C.Tensor("uint8",new Uint8Array(this.data),[this.height,this.width,this.channels]);if(L!=="HWC")if(L==="CHW")N=N.permute(2,0,1);else throw new Error(`Unsupported channel format: ${L}`);return N}toCanvas(){if(!v)throw new Error("toCanvas() is only supported in browser environments.");const L=this.clone().rgba(),N=E(L.width,L.height),U=new B(L.data,L.width,L.height);return N.getContext("2d").putImageData(U,0,0),N}split(){const{data:L,width:N,height:U,channels:f}=this,k=L.constructor,e=L.length/f,d=Array.from({length:f},()=>new k(e));for(let y=0;y<e;++y){const ee=f*y;for(let T=0;T<f;++T)d[T][y]=L[ee+T]}return d.map(y=>new F(y,N,U,1))}_update(L,N,U,f=null){return this.data=L,this.width=N,this.height=U,f!==null&&(this.channels=f),this}clone(){return new F(this.data.slice(),this.width,this.height,this.channels)}convert(L){if(this.channels===L)return this;switch(L){case 1:this.grayscale();break;case 3:this.rgb();break;case 4:this.rgba();break;default:throw new Error(`Conversion failed due to unsupported number of channels: ${this.channels}`)}return this}async save(L){if(v){if(b.apis.IS_WEBWORKER_ENV)throw new Error("Unable to save an image from a Web Worker.");const N=L.split(".").pop().toLowerCase(),U=S.get(N)??"image/png",f=await this.toBlob(U);(0,u.saveBlob)(L,f)}else{if(b.apis.IS_FS_AVAILABLE)return await this.toSharp().toFile(L);throw new Error("Unable to save the image because filesystem is disabled in this environment.")}}toSharp(){if(v)throw new Error("toSharp() is only supported in server-side environments.");return w(this.data,{raw:{width:this.width,height:this.height,channels:this.channels}})}}const j=F.read.bind(F)},"./src/utils/maths.js":(a,o,n)=>{n.r(o),n.d(o,{FFT:()=>j,bankers_round:()=>N,cos_sim:()=>E,dot:()=>w,dynamic_time_warping:()=>U,interpolate_data:()=>u,log_softmax:()=>C,magnitude:()=>B,max:()=>v,medianFilter:()=>J,min:()=>D,permute_data:()=>m,round:()=>L,softmax:()=>b});function u(f,[k,e,d],[y,ee],T="bilinear",O=!1){const we=ee/d,$=y/e,be=new f.constructor(y*ee*k),Ce=e*d,Ee=y*ee;for(let Be=0;Be<y;++Be)for(let ve=0;ve<ee;++ve){const Ne=Be*ee+ve,Fe=(ve+.5)/we-.5,le=(Be+.5)/$-.5;let Ae=Math.floor(Fe),pe=Math.floor(le);const oe=Math.min(Ae+1,d-1),Ge=Math.min(pe+1,e-1);Ae=Math.max(Ae,0),pe=Math.max(pe,0);const nA=Fe-Ae,Je=le-pe,aA=(1-nA)*(1-Je),kA=nA*(1-Je),ze=(1-nA)*Je,de=nA*Je,Se=pe*d,ge=Ge*d,He=Se+Ae,Xe=Se+oe,AA=ge+Ae,qe=ge+oe;for(let H=0;H<k;++H){const cA=H*Ce;be[H*Ee+Ne]=aA*f[cA+He]+kA*f[cA+Xe]+ze*f[cA+AA]+de*f[cA+qe]}}return be}function m(f,k,e){const d=new Array(e.length),y=new Array(e.length);for(let O=e.length-1,we=1;O>=0;--O)y[O]=we,d[O]=k[e[O]],we*=d[O];const ee=e.map((O,we)=>y[e.indexOf(we)]),T=new f.constructor(f.length);for(let O=0;O<f.length;++O){let we=0;for(let $=k.length-1,be=O;$>=0;--$)we+=be%k[$]*ee[$],be=Math.floor(be/k[$]);T[we]=f[O]}return[T,d]}function b(f){const k=v(f)[0],e=f.map(ee=>Math.exp(ee-k)),d=e.reduce((ee,T)=>ee+T,0);return e.map(ee=>ee/d)}function C(f){const k=v(f)[0];let e=0;for(let ee=0;ee<f.length;++ee)e+=Math.exp(f[ee]-k);const d=Math.log(e);return f.map(ee=>ee-k-d)}function w(f,k){let e=0;for(let d=0;d<f.length;++d)e+=f[d]*k[d];return e}function E(f,k){const e=w(f,k),d=B(f),y=B(k);return e/(d*y)}function B(f){return Math.sqrt(f.reduce((k,e)=>k+e*e,0))}function D(f){if(f.length===0)throw Error("Array must not be empty");let k=f[0],e=0;for(let d=1;d<f.length;++d)f[d]<k&&(k=f[d],e=d);return[k,e]}function v(f){if(f.length===0)throw Error("Array must not be empty");let k=f[0],e=0;for(let d=1;d<f.length;++d)f[d]>k&&(k=f[d],e=d);return[k,e]}function x(f){return f>0&&(f&f-1)===0}class S{constructor(k){if(this.size=k|0,this.size<=1||!x(this.size))throw new Error("FFT size must be a power of two larger than 1");this._csize=k<<1,this.table=new Float64Array(this.size*2);for(let d=0;d<this.table.length;d+=2){const y=Math.PI*d/this.size;this.table[d]=Math.cos(y),this.table[d+1]=-Math.sin(y)}let e=0;for(let d=1;this.size>d;d<<=1)++e;this._width=e%2===0?e-1:e,this._bitrev=new Int32Array(1<<this._width);for(let d=0;d<this._bitrev.length;++d){this._bitrev[d]=0;for(let y=0;y<this._width;y+=2){const ee=this._width-y-2;this._bitrev[d]|=(d>>>y&3)<<ee}}}createComplexArray(){return new Float64Array(this._csize)}fromComplexArray(k,e){const d=e||new Array(k.length>>>1);for(let y=0;y<k.length;y+=2)d[y>>>1]=k[y];return d}toComplexArray(k,e){const d=e||this.createComplexArray();for(let y=0;y<d.length;y+=2)d[y]=k[y>>>1],d[y+1]=0;return d}transform(k,e){if(k===e)throw new Error("Input and output buffers must be different");this._transform4(k,e,1)}realTransform(k,e){if(k===e)throw new Error("Input and output buffers must be different");this._realTransform4(k,e,1)}inverseTransform(k,e){if(k===e)throw new Error("Input and output buffers must be different");this._transform4(k,e,-1);for(let d=0;d<k.length;++d)k[d]/=this.size}_transform4(k,e,d){const y=this._csize;let T=1<<this._width,O=y/T<<1,we,$;const be=this._bitrev;if(O===4)for(we=0,$=0;we<y;we+=O,++$){const Ee=be[$];this._singleTransform2(e,k,we,Ee,T)}else for(we=0,$=0;we<y;we+=O,++$){const Ee=be[$];this._singleTransform4(e,k,we,Ee,T,d)}const Ce=this.table;for(T>>=2;T>=2;T>>=2){O=y/T<<1;const Ee=O>>>2;for(we=0;we<y;we+=O){const Be=we+Ee-1;for(let ve=we,Ne=0;ve<Be;ve+=2,Ne+=T){const Fe=ve,le=Fe+Ee,Ae=le+Ee,pe=Ae+Ee,oe=k[Fe],Ge=k[Fe+1],nA=k[le],Je=k[le+1],aA=k[Ae],kA=k[Ae+1],ze=k[pe],de=k[pe+1],Se=Ce[Ne],ge=d*Ce[Ne+1],He=nA*Se-Je*ge,Xe=nA*ge+Je*Se,AA=Ce[2*Ne],qe=d*Ce[2*Ne+1],H=aA*AA-kA*qe,cA=aA*qe+kA*AA,fA=Ce[3*Ne],he=d*Ce[3*Ne+1],bA=ze*fA-de*he,rA=ze*he+de*fA,EA=oe+H,PA=Ge+cA,wA=oe-H,ZA=Ge-cA,TA=He+bA,tA=Xe+rA,OA=d*(He-bA),ot=d*(Xe-rA);k[Fe]=EA+TA,k[Fe+1]=PA+tA,k[le]=wA+ot,k[le+1]=ZA-OA,k[Ae]=EA-TA,k[Ae+1]=PA-tA,k[pe]=wA-ot,k[pe+1]=ZA+OA}}}}_singleTransform2(k,e,d,y,ee){const T=k[y],O=k[y+1],we=k[y+ee],$=k[y+ee+1];e[d]=T+we,e[d+1]=O+$,e[d+2]=T-we,e[d+3]=O-$}_singleTransform4(k,e,d,y,ee,T){const O=ee*2,we=ee*3,$=k[y],be=k[y+1],Ce=k[y+ee],Ee=k[y+ee+1],Be=k[y+O],ve=k[y+O+1],Ne=k[y+we],Fe=k[y+we+1],le=$+Be,Ae=be+ve,pe=$-Be,oe=be-ve,Ge=Ce+Ne,nA=Ee+Fe,Je=T*(Ce-Ne),aA=T*(Ee-Fe);e[d]=le+Ge,e[d+1]=Ae+nA,e[d+2]=pe+aA,e[d+3]=oe-Je,e[d+4]=le-Ge,e[d+5]=Ae-nA,e[d+6]=pe-aA,e[d+7]=oe+Je}_realTransform4(k,e,d){const y=this._csize;let T=1<<this._width,O=y/T<<1,we,$;const be=this._bitrev;if(O===4)for(we=0,$=0;we<y;we+=O,++$){const Be=be[$];this._singleRealTransform2(e,k,we,Be>>>1,T>>>1)}else for(we=0,$=0;we<y;we+=O,++$){const Be=be[$];this._singleRealTransform4(e,k,we,Be>>>1,T>>>1,d)}const Ce=this.table;for(T>>=2;T>=2;T>>=2){O=y/T<<1;const Be=O>>>1,ve=Be>>>1,Ne=ve>>>1;for(we=0;we<y;we+=O)for(let Fe=0,le=0;Fe<=Ne;Fe+=2,le+=T){const Ae=we+Fe,pe=Ae+ve,oe=pe+ve,Ge=oe+ve,nA=k[Ae],Je=k[Ae+1],aA=k[pe],kA=k[pe+1],ze=k[oe],de=k[oe+1],Se=k[Ge],ge=k[Ge+1],He=nA,Xe=Je,AA=Ce[le],qe=d*Ce[le+1],H=aA*AA-kA*qe,cA=aA*qe+kA*AA,fA=Ce[2*le],he=d*Ce[2*le+1],bA=ze*fA-de*he,rA=ze*he+de*fA,EA=Ce[3*le],PA=d*Ce[3*le+1],wA=Se*EA-ge*PA,ZA=Se*PA+ge*EA,TA=He+bA,tA=Xe+rA,OA=He-bA,ot=Xe-rA,$A=H+wA,tt=cA+ZA,Lt=d*(H-wA),Wr=d*(cA-ZA);if(k[Ae]=TA+$A,k[Ae+1]=tA+tt,k[pe]=OA+Wr,k[pe+1]=ot-Lt,Fe===0){k[oe]=TA-$A,k[oe+1]=tA-tt;continue}if(Fe===Ne)continue;const VA=we+ve-Fe,Ts=we+Be-Fe;k[VA]=OA-d*Wr,k[VA+1]=-ot-d*Lt,k[Ts]=TA-d*$A,k[Ts+1]=-tA+d*tt}}const Ee=y>>>1;for(let Be=2;Be<Ee;Be+=2)k[y-Be]=k[Be],k[y-Be+1]=-k[Be+1]}_singleRealTransform2(k,e,d,y,ee){const T=k[y],O=k[y+ee];e[d]=T+O,e[d+1]=0,e[d+2]=T-O,e[d+3]=0}_singleRealTransform4(k,e,d,y,ee,T){const O=ee*2,we=ee*3,$=k[y],be=k[y+ee],Ce=k[y+O],Ee=k[y+we],Be=$+Ce,ve=$-Ce,Ne=be+Ee,Fe=T*(be-Ee);e[d]=Be+Ne,e[d+1]=0,e[d+2]=ve,e[d+3]=-Fe,e[d+4]=Be-Ne,e[d+5]=0,e[d+6]=ve,e[d+7]=Fe}}class F{constructor(k){const e=2*(k-1),d=2*(2*k-1),y=2**Math.ceil(Math.log2(d));this.bufferSize=y,this._a=e;const ee=new Float64Array(d),T=new Float64Array(y);this._chirpBuffer=new Float64Array(y),this._buffer1=new Float64Array(y),this._buffer2=new Float64Array(y),this._outBuffer1=new Float64Array(y),this._outBuffer2=new Float64Array(y);const O=-2*Math.PI/k,we=Math.cos(O),$=Math.sin(O);for(let be=0;be<d>>1;++be){const Ce=(be+1-k)**2/2,Ee=Math.sqrt(we**2+$**2)**Ce,Be=Ce*Math.atan2($,we),ve=2*be;ee[ve]=Ee*Math.cos(Be),ee[ve+1]=Ee*Math.sin(Be),T[ve]=ee[ve],T[ve+1]=-ee[ve+1]}this._slicedChirpBuffer=ee.subarray(e,d),this._f=new S(y>>1),this._f.transform(this._chirpBuffer,T)}_transform(k,e,d){const y=this._buffer1,ee=this._buffer2,T=this._outBuffer1,O=this._outBuffer2,we=this._chirpBuffer,$=this._slicedChirpBuffer,be=this._a;if(d)for(let Ce=0;Ce<$.length;Ce+=2){const Ee=Ce+1,Be=Ce>>1,ve=e[Be];y[Ce]=ve*$[Ce],y[Ee]=ve*$[Ee]}else for(let Ce=0;Ce<$.length;Ce+=2){const Ee=Ce+1;y[Ce]=e[Ce]*$[Ce]-e[Ee]*$[Ee],y[Ee]=e[Ce]*$[Ee]+e[Ee]*$[Ce]}this._f.transform(T,y);for(let Ce=0;Ce<we.length;Ce+=2){const Ee=Ce+1;ee[Ce]=T[Ce]*we[Ce]-T[Ee]*we[Ee],ee[Ee]=T[Ce]*we[Ee]+T[Ee]*we[Ce]}this._f.inverseTransform(O,ee);for(let Ce=0;Ce<O.length;Ce+=2){const Ee=O[Ce+be],Be=O[Ce+be+1],ve=$[Ce],Ne=$[Ce+1];k[Ce]=Ee*ve-Be*Ne,k[Ce+1]=Ee*Ne+Be*ve}}transform(k,e){this._transform(k,e,!1)}realTransform(k,e){this._transform(k,e,!0)}}class j{constructor(k){this.fft_length=k,this.isPowerOfTwo=x(k),this.isPowerOfTwo?(this.fft=new S(k),this.outputBufferSize=2*k):(this.fft=new F(k),this.outputBufferSize=this.fft.bufferSize)}realTransform(k,e){this.fft.realTransform(k,e)}transform(k,e){this.fft.transform(k,e)}}function J(f,k){if(k%2===0||k<=0)throw new Error("Window size must be a positive odd number");const e=new f.constructor(f.length),d=new f.constructor(k),y=Math.floor(k/2);for(let ee=0;ee<f.length;++ee){let T=0;for(let O=-y;O<=y;++O){let we=ee+O;we<0?we=Math.abs(we):we>=f.length&&(we=2*(f.length-1)-we),d[T++]=f[we]}d.sort(),e[ee]=d[y]}return e}function L(f,k){const e=Math.pow(10,k);return Math.round(f*e)/e}function N(f){const k=Math.round(f);return Math.abs(f)%1===.5?k%2===0?k:k-1:k}function U(f){const k=f.length,e=f[0].length,d=[k+1,e+1],y=Array.from({length:d[0]},()=>Array(d[1]).fill(1/0));y[0][0]=0;const ee=Array.from({length:d[0]},()=>Array(d[1]).fill(-1));for(let be=1;be<d[1];++be)for(let Ce=1;Ce<d[0];++Ce){const Ee=y[Ce-1][be-1],Be=y[Ce-1][be],ve=y[Ce][be-1];let Ne,Fe;Ee<Be&&Ee<ve?(Ne=Ee,Fe=0):Be<Ee&&Be<ve?(Ne=Be,Fe=1):(Ne=ve,Fe=2),y[Ce][be]=f[Ce-1][be-1]+Ne,ee[Ce][be]=Fe}for(let be=0;be<d[1];++be)ee[0][be]=2;for(let be=0;be<d[0];++be)ee[be][0]=1;let T=k,O=e,we=[],$=[];for(;T>0||O>0;)switch(we.push(T-1),$.push(O-1),ee[T][O]){case 0:--T,--O;break;case 1:--T;break;case 2:--O;break;default:throw new Error(`Internal error in dynamic time warping. Unexpected trace[${T}, ${O}]. Please file a bug report.`)}return we.reverse(),$.reverse(),[we,$]}},"./src/utils/tensor.js":(a,o,n)=>{n.r(o),n.d(o,{DataTypeMap:()=>C,Tensor:()=>w,cat:()=>e,full:()=>$,full_like:()=>be,interpolate:()=>D,interpolate_4d:()=>v,layer_norm:()=>N,matmul:()=>x,mean:()=>T,mean_pooling:()=>L,ones:()=>Ce,ones_like:()=>Ee,permute:()=>B,quantize_embeddings:()=>Fe,rand:()=>Ne,rfft:()=>S,slice:()=>J,stack:()=>d,std_mean:()=>ee,topk:()=>F,zeros:()=>Be,zeros_like:()=>ve});var u=n("./src/utils/maths.js"),m=n("./src/backends/onnx.js"),b=n("./src/ops/registry.js");const C=Object.freeze({float32:Float32Array,float16:typeof Float16Array<"u"?Float16Array:Uint16Array,float64:Float64Array,string:Array,int8:Int8Array,uint8:Uint8Array,int16:Int16Array,uint16:Uint16Array,int32:Int32Array,uint32:Uint32Array,int64:BigInt64Array,uint64:BigUint64Array,bool:Uint8Array,uint4:Uint8Array,int4:Int8Array});class w{get dims(){return this.ort_tensor.dims}set dims(Ae){this.ort_tensor.dims=Ae}get type(){return this.ort_tensor.type}get data(){return this.ort_tensor.data}get size(){return this.ort_tensor.size}get location(){return this.ort_tensor.location}ort_tensor;constructor(...Ae){return(0,m.isONNXTensor)(Ae[0])?this.ort_tensor=Ae[0]:this.ort_tensor=new m.Tensor(Ae[0],Ae[1],Ae[2]),new Proxy(this,{get:(pe,oe)=>{if(typeof oe=="string"){let Ge=Number(oe);if(Number.isInteger(Ge))return pe._getitem(Ge)}return pe[oe]},set:(pe,oe,Ge)=>pe[oe]=Ge})}dispose(){this.ort_tensor.dispose()}*[Symbol.iterator](){const[Ae,...pe]=this.dims;if(pe.length>0){const oe=pe.reduce((Ge,nA)=>Ge*nA);for(let Ge=0;Ge<Ae;++Ge)yield this._subarray(Ge,oe,pe)}else yield*this.data}_getitem(Ae){const[pe,...oe]=this.dims;if(Ae=k(Ae,pe),oe.length>0){const Ge=oe.reduce((nA,Je)=>nA*Je);return this._subarray(Ae,Ge,oe)}else return new w(this.type,[this.data[Ae]],oe)}indexOf(Ae){const pe=this.data;for(let oe=0;oe<pe.length;++oe)if(pe[oe]==Ae)return oe;return-1}_subarray(Ae,pe,oe){const Ge=Ae*pe,nA=(Ae+1)*pe,Je="subarray"in this.data?this.data.subarray(Ge,nA):this.data.slice(Ge,nA);return new w(this.type,Je,oe)}item(){const Ae=this.data;if(Ae.length!==1)throw new Error(`a Tensor with ${Ae.length} elements cannot be converted to Scalar`);return Ae[0]}tolist(){return E(this.data,this.dims)}sigmoid(){return this.clone().sigmoid_()}sigmoid_(){const Ae=this.data;for(let pe=0;pe<Ae.length;++pe)Ae[pe]=1/(1+Math.exp(-Ae[pe]));return this}map(Ae){return this.clone().map_(Ae)}map_(Ae){const pe=this.data;for(let oe=0;oe<pe.length;++oe)pe[oe]=Ae(pe[oe],oe,pe);return this}mul(Ae){return this.clone().mul_(Ae)}mul_(Ae){const pe=this.data;for(let oe=0;oe<pe.length;++oe)pe[oe]*=Ae;return this}div(Ae){return this.clone().div_(Ae)}div_(Ae){const pe=this.data;for(let oe=0;oe<pe.length;++oe)pe[oe]/=Ae;return this}add(Ae){return this.clone().add_(Ae)}add_(Ae){const pe=this.data;for(let oe=0;oe<pe.length;++oe)pe[oe]+=Ae;return this}sub(Ae){return this.clone().sub_(Ae)}sub_(Ae){const pe=this.data;for(let oe=0;oe<pe.length;++oe)pe[oe]-=Ae;return this}clone(){return new w(this.type,this.data.slice(),this.dims.slice())}slice(...Ae){const pe=[],oe=[];for(let ze=0;ze<this.dims.length;++ze){let de=Ae[ze];if(de==null)oe.push([0,this.dims[ze]]),pe.push(this.dims[ze]);else if(typeof de=="number")de=k(de,this.dims[ze],ze),oe.push([de,de+1]);else if(Array.isArray(de)&&de.length===2){let[Se,ge]=de;if(Se=Se===null?0:k(Se,this.dims[ze],ze,!1),ge=ge===null?this.dims[ze]:k(ge,this.dims[ze],ze,!1),Se>ge)throw new Error(`Invalid slice: ${de}`);const He=[Math.max(Se,0),Math.min(ge,this.dims[ze])];oe.push(He),pe.push(He[1]-He[0])}else throw new Error(`Invalid slice: ${de}`)}const Ge=oe.map(([ze,de])=>de-ze),nA=Ge.reduce((ze,de)=>ze*de),Je=this.data,aA=new Je.constructor(nA),kA=this.stride();for(let ze=0;ze<nA;++ze){let de=0;for(let Se=Ge.length-1,ge=ze;Se>=0;--Se){const He=Ge[Se];de+=(ge%He+oe[Se][0])*kA[Se],ge=Math.floor(ge/He)}aA[ze]=Je[de]}return new w(this.type,aA,pe)}permute(...Ae){return B(this,Ae)}transpose(...Ae){return this.permute(...Ae)}sum(Ae=null,pe=!1){return this.norm(1,Ae,pe)}norm(Ae="fro",pe=null,oe=!1){if(Ae==="fro")Ae=2;else if(typeof Ae=="string")throw Error(`Unsupported norm: ${Ae}`);const Ge=this.data,nA=(ze,de)=>ze+de**Ae;if(pe===null){const ze=Ge.reduce(nA,0)**(1/Ae);return new w(this.type,[ze],[])}const[Je,aA,kA]=y(nA,this,pe,oe);if(Ae!==1)for(let ze=0;ze<aA.length;++ze)aA[ze]=aA[ze]**(1/Ae);return new w(Je,aA,kA)}normalize_(Ae=2,pe=1){pe=k(pe,this.dims.length);const oe=this.norm(Ae,pe,!0),Ge=this.data,nA=oe.data;for(let Je=0;Je<Ge.length;++Je){let aA=0;for(let kA=this.dims.length-1,ze=Je,de=1;kA>=0;--kA){const Se=this.dims[kA];if(kA!==pe){const ge=ze%Se;aA+=ge*de,de*=this.dims[kA]}ze=Math.floor(ze/Se)}Ge[Je]/=nA[aA]}return this}normalize(Ae=2,pe=1){return this.clone().normalize_(Ae,pe)}stride(){return O(this.dims)}squeeze(Ae=null){return new w(this.type,this.data,U(this.dims,Ae))}squeeze_(Ae=null){return this.dims=U(this.dims,Ae),this}unsqueeze(Ae=null){return new w(this.type,this.data,f(this.dims,Ae))}unsqueeze_(Ae=null){return this.dims=f(this.dims,Ae),this}flatten_(Ae=0,pe=-1){pe=(pe+this.dims.length)%this.dims.length;let oe=this.dims.slice(0,Ae),Ge=this.dims.slice(Ae,pe+1),nA=this.dims.slice(pe+1);return this.dims=[...oe,Ge.reduce((Je,aA)=>Je*aA,1),...nA],this}flatten(Ae=0,pe=-1){return this.clone().flatten_(Ae,pe)}view(...Ae){let pe=-1;for(let Ge=0;Ge<Ae.length;++Ge)if(Ae[Ge]===-1){if(pe!==-1)throw new Error("Only one dimension can be inferred");pe=Ge}const oe=this.data;if(pe!==-1){const Ge=Ae.reduce((nA,Je,aA)=>aA!==pe?nA*Je:nA,1);Ae[pe]=oe.length/Ge}return new w(this.type,oe,Ae)}neg_(){const Ae=this.data;for(let pe=0;pe<Ae.length;++pe)Ae[pe]=-Ae[pe];return this}neg(){return this.clone().neg_()}gt(Ae){const pe=new Uint8Array(this.data.length),oe=this.data;for(let Ge=0;Ge<oe.length;++Ge)pe[Ge]=oe[Ge]>Ae?1:0;return new w("bool",pe,this.dims)}lt(Ae){const pe=new Uint8Array(this.data.length),oe=this.data;for(let Ge=0;Ge<oe.length;++Ge)pe[Ge]=oe[Ge]<Ae?1:0;return new w("bool",pe,this.dims)}clamp_(Ae,pe){const oe=this.data;for(let Ge=0;Ge<oe.length;++Ge)oe[Ge]=Math.min(Math.max(oe[Ge],Ae),pe);return this}clamp(Ae,pe){return this.clone().clamp_(Ae,pe)}round_(){const Ae=this.data;for(let pe=0;pe<Ae.length;++pe)Ae[pe]=Math.round(Ae[pe]);return this}round(){return this.clone().round_()}mean(Ae=null,pe=!1){return T(this,Ae,pe)}min(Ae=null,pe=!1){if(Ae===null){const Je=(0,u.min)(this.data)[0];return new w(this.type,[Je],[])}const[oe,Ge,nA]=y((Je,aA)=>Math.min(Je,aA),this,Ae,pe,1/0);return new w(oe,Ge,nA)}max(Ae=null,pe=!1){if(Ae===null){const Je=(0,u.max)(this.data)[0];return new w(this.type,[Je],[])}const[oe,Ge,nA]=y((Je,aA)=>Math.max(Je,aA),this,Ae,pe,-1/0);return new w(oe,Ge,nA)}argmin(Ae=null,pe=!1){if(Ae!==null)throw new Error("`dim !== null` not yet implemented.");const oe=(0,u.min)(this.data)[1];return new w("int64",[BigInt(oe)],[])}argmax(Ae=null,pe=!1){if(Ae!==null)throw new Error("`dim !== null` not yet implemented.");const oe=(0,u.max)(this.data)[1];return new w("int64",[BigInt(oe)],[])}to(Ae){if(this.type===Ae)return this;if(!C.hasOwnProperty(Ae))throw new Error(`Unsupported type: ${Ae}`);let pe;const oe=["int64","uint64"].includes(this.type),Ge=["int64","uint64"].includes(Ae);return oe&&!Ge?pe=Number:!oe&&Ge&&(pe=BigInt),new w(Ae,C[Ae].from(this.data,pe),this.dims)}}function E(le,Ae){const pe=le.length,oe=Ae.reduce((nA,Je)=>nA*Je);if(pe!==oe)throw Error(`cannot reshape array of size ${pe} into shape (${Ae})`);let Ge=le;for(let nA=Ae.length-1;nA>=0;nA--)Ge=Ge.reduce((Je,aA)=>{let kA=Je[Je.length-1];return kA.length<Ae[nA]?kA.push(aA):Je.push([aA]),Je},[[]]);return Ge[0]}function B(le,Ae){const[pe,oe]=(0,u.permute_data)(le.data,le.dims,Ae);return new w(le.type,pe,oe)}function D(le,[Ae,pe],oe="bilinear",Ge=!1){const nA=le.dims.at(-3)??1,Je=le.dims.at(-2),aA=le.dims.at(-1);let kA=(0,u.interpolate_data)(le.data,[nA,Je,aA],[Ae,pe],oe,Ge);return new w(le.type,kA,[nA,Ae,pe])}async function v(le,{size:Ae=null,mode:pe="bilinear"}={}){if(le.dims.length!==4)throw new Error("`interpolate_4d` currently only supports 4D input.");if(!Ae)throw new Error("`interpolate_4d` requires a `size` argument.");let oe;if(Ae.length===2)oe=[...le.dims.slice(0,2),...Ae];else if(Ae.length===3)oe=[le.dims[0],...Ae];else if(Ae.length===4)oe=Ae;else throw new Error("`size` must be of length 2, 3, or 4.");let Ge;if(pe==="nearest")Ge=await b.TensorOpRegistry.nearest_interpolate_4d;else if(pe==="bilinear")Ge=await b.TensorOpRegistry.bilinear_interpolate_4d;else if(pe==="bicubic")Ge=await b.TensorOpRegistry.bicubic_interpolate_4d;else throw new Error(`Unsupported mode: ${pe}`);const nA=new w("int64",new BigInt64Array(oe.map(BigInt)),[oe.length]);return await Ge({x:le,s:nA})}async function x(le,Ae){return await(await b.TensorOpRegistry.matmul)({a:le,b:Ae})}async function S(le,Ae){return await(await b.TensorOpRegistry.rfft)({x:le,a:Ae})}async function F(le,Ae){const pe=await b.TensorOpRegistry.top_k;return Ae==null?Ae=le.dims.at(-1):Ae=Math.min(Ae,le.dims.at(-1)),await pe({x:le,k:new w("int64",[BigInt(Ae)],[1])})}const j=le=>new w("int64",le,[le.length]);async function J(le,Ae,pe,oe,Ge){return await(await b.TensorOpRegistry.slice)({x:le,s:j(Ae),e:j(pe),a:j(oe),t:j(Ge??new Array(oe.length).fill(1))})}function L(le,Ae){const pe=le.data,oe=Ae.data,Ge=[le.dims[0],le.dims[2]],nA=new pe.constructor(Ge[0]*Ge[1]),[Je,aA,kA]=le.dims;let ze=0;for(let de=0;de<Je;++de){const Se=de*kA*aA;for(let ge=0;ge<kA;++ge){let He=0,Xe=0;const AA=de*aA,qe=Se+ge;for(let cA=0;cA<aA;++cA){const fA=Number(oe[AA+cA]);Xe+=fA,He+=pe[qe+cA*kA]*fA}const H=He/Xe;nA[ze++]=H}}return new w(le.type,nA,Ge)}function N(le,Ae,{eps:pe=1e-5}={}){if(le.dims.length!==2)throw new Error("`layer_norm` currently only supports 2D input.");const[oe,Ge]=le.dims;if(Ae.length!==1&&Ae[0]!==Ge)throw new Error("`normalized_shape` must be a 1D array with shape `[input.dims[1]]`.");const[nA,Je]=ee(le,1,0,!0),aA=nA.data,kA=Je.data,ze=le.data,de=new ze.constructor(ze.length);for(let Se=0;Se<oe;++Se){const ge=Se*Ge;for(let He=0;He<Ge;++He){const Xe=ge+He;de[Xe]=(ze[Xe]-kA[Se])/(aA[Se]+pe)}}return new w(le.type,de,le.dims)}function U(le,Ae){return le=le.slice(),Ae===null?le=le.filter(pe=>pe!==1):typeof Ae=="number"?le[Ae]===1&&le.splice(Ae,1):Array.isArray(Ae)&&(le=le.filter((pe,oe)=>pe!==1||!Ae.includes(oe))),le}function f(le,Ae){return Ae=k(Ae,le.length+1),le=le.slice(),le.splice(Ae,0,1),le}function k(le,Ae,pe=null,oe=!0){if(le<-Ae||le>=Ae){if(oe)throw new Error(`IndexError: index ${le} is out of bounds for dimension${pe===null?"":" "+pe} with size ${Ae}`);return le<-Ae?0:Ae}return le<0&&(le=(le%Ae+Ae)%Ae),le}function e(le,Ae=0){Ae=k(Ae,le[0].dims.length);const pe=le[0].dims.slice();pe[Ae]=le.reduce((Je,aA)=>Je+aA.dims[Ae],0);const oe=pe.reduce((Je,aA)=>Je*aA,1),Ge=new le[0].data.constructor(oe),nA=le[0].type;if(Ae===0){let Je=0;for(const aA of le){const kA=aA.data;Ge.set(kA,Je),Je+=kA.length}}else{let Je=0;for(let aA=0;aA<le.length;++aA){const{data:kA,dims:ze}=le[aA];for(let de=0;de<kA.length;++de){let Se=0;for(let ge=ze.length-1,He=de,Xe=1;ge>=0;--ge){const AA=ze[ge];let qe=He%AA;ge===Ae&&(qe+=Je),Se+=qe*Xe,Xe*=pe[ge],He=Math.floor(He/AA)}Ge[Se]=kA[de]}Je+=ze[Ae]}}return new w(nA,Ge,pe)}function d(le,Ae=0){return e(le.map(pe=>pe.unsqueeze(Ae)),Ae)}function y(le,Ae,pe=null,oe=!1,Ge=null){const nA=Ae.data,Je=Ae.dims;pe=k(pe,Je.length);const aA=Je.slice();aA[pe]=1;const kA=new nA.constructor(nA.length/Je[pe]);Ge!==null&&kA.fill(Ge);for(let ze=0;ze<nA.length;++ze){let de=0;for(let Se=Je.length-1,ge=ze,He=1;Se>=0;--Se){const Xe=Je[Se];if(Se!==pe){const AA=ge%Xe;de+=AA*He,He*=aA[Se]}ge=Math.floor(ge/Xe)}kA[de]=le(kA[de],nA[ze],ze,de)}return oe||aA.splice(pe,1),[Ae.type,kA,aA]}function ee(le,Ae=null,pe=1,oe=!1){const Ge=le.data,nA=le.dims;if(Ae===null){const He=Ge.reduce((H,cA)=>H+cA,0)/Ge.length,Xe=Math.sqrt(Ge.reduce((H,cA)=>H+(cA-He)**2,0)/(Ge.length-pe)),AA=new w(le.type,[He],[]);return[new w(le.type,[Xe],[]),AA]}Ae=k(Ae,nA.length);const Je=T(le,Ae,oe),aA=Je.data,[kA,ze,de]=y((ge,He,Xe,AA)=>ge+(He-aA[AA])**2,le,Ae,oe);for(let ge=0;ge<ze.length;++ge)ze[ge]=Math.sqrt(ze[ge]/(nA[Ae]-pe));return[new w(kA,ze,de),Je]}function T(le,Ae=null,pe=!1){const oe=le.dims,Ge=le.data;if(Ae===null){const kA=Ge.reduce((ze,de)=>ze+de,0);return new w(le.type,[kA/Ge.length],[])}Ae=k(Ae,oe.length);const[nA,Je,aA]=y((kA,ze)=>kA+ze,le,Ae,pe);if(oe[Ae]!==1)for(let kA=0;kA<Je.length;++kA)Je[kA]/=oe[Ae];return new w(nA,Je,aA)}function O(le){const Ae=new Array(le.length);for(let pe=le.length-1,oe=1;pe>=0;--pe)Ae[pe]=oe,oe*=le[pe];return Ae}function we(le,Ae,pe,oe){const Ge=le.reduce((nA,Je)=>nA*Je,1);return new w(pe,new oe(Ge).fill(Ae),le)}function $(le,Ae){let pe,oe;if(typeof Ae=="number")pe="float32",oe=Float32Array;else if(typeof Ae=="bigint")pe="int64",oe=BigInt64Array;else if(typeof Ae=="boolean")pe="bool",oe=Uint8Array;else throw new Error(`Unsupported data type: ${typeof Ae}`);return we(le,Ae,pe,oe)}function be(le,Ae){return $(le.dims,Ae)}function Ce(le){return we(le,1n,"int64",BigInt64Array)}function Ee(le){return Ce(le.dims)}function Be(le){return we(le,0n,"int64",BigInt64Array)}function ve(le){return Be(le.dims)}function Ne(le){const Ae=le.reduce((pe,oe)=>pe*oe,1);return new w("float32",Float32Array.from({length:Ae},()=>Math.random()),le)}function Fe(le,Ae){if(le.dims.length!==2)throw new Error("The tensor must have 2 dimensions");if(le.dims.at(-1)%8!==0)throw new Error("The last dimension of the tensor must be a multiple of 8");if(!["binary","ubinary"].includes(Ae))throw new Error("The precision must be either 'binary' or 'ubinary'");const pe=Ae==="binary",oe=pe?"int8":"uint8",Ge=pe?Int8Array:Uint8Array,nA=le.data,Je=new Ge(nA.length/8);for(let aA=0;aA<nA.length;++aA){const kA=nA[aA]>0?1:0,ze=Math.floor(aA/8),de=aA%8;Je[ze]|=kA<<7-de,pe&&de===0&&(Je[ze]-=128)}return new w(oe,Je,[le.dims[0],le.dims[1]/8])}},"./src/utils/video.js":(a,o,n)=>{n.r(o),n.d(o,{RawVideo:()=>C,RawVideoFrame:()=>b,load_video:()=>w});var u=n("./src/utils/image.js"),m=n("./src/env.js");class b{constructor(B,D){this.image=B,this.timestamp=D}}class C{constructor(B,D){B.length>0&&B[0]instanceof u.RawImage&&(B=B.map((v,x)=>new b(v,(x+1)/(B.length+1)*D))),this.frames=B,this.duration=D}get width(){return this.frames[0].image.width}get height(){return this.frames[0].image.height}get fps(){return this.frames.length/this.duration}}async function w(E,{num_frames:B=null,fps:D=null}={}){if(!m.apis.IS_BROWSER_ENV)throw new Error("`load_video` is currently only supported in browser environments.");if(B==null&&D==null)throw new Error("Either num_frames or fps must be provided.");const v=[],x=document.createElement("video");if(x.crossOrigin="anonymous",x.muted=!0,typeof E=="string")x.src=E;else if(E instanceof Blob)x.src=URL.createObjectURL(E);else if(E instanceof HTMLVideoElement)x.src=E.src;else throw new Error("Invalid URL or video element provided.");if(await new Promise(U=>x.onloadedmetadata=U),x.seekable.start(0)===x.seekable.end(0)){const f=await(await fetch(x.src)).blob();x.src=URL.createObjectURL(f),await new Promise(k=>x.onloadedmetadata=k)}const S=x.duration;let F,j;B!=null?(F=B,j=B===1?0:S/(B-1)):(j=1/D,F=Math.floor(S/j));let J=[];for(let U=0;U<F;++U)J.push(B===1?S/2:U*j);const L=document.createElement("canvas");L.width=x.videoWidth,L.height=x.videoHeight;const N=L.getContext("2d",{willReadFrequently:!0});for(const U of J){x.currentTime=U,await new Promise(d=>{x.onseeked=d}),N.drawImage(x,0,0,L.width,L.height);const f=N.getImageData(0,0,L.width,L.height),k=new u.RawImage(f.data,L.width,L.height,4),e=new b(k,U);v.push(e)}return x.remove(),new C(v,S)}}},Gp={};function zt(a){var o=Gp[a];if(o!==void 0)return o.exports;var n=Gp[a]={exports:{}};return GI[a](n,n.exports,zt),n.exports}(()=>{var a=Object.getPrototypeOf?n=>Object.getPrototypeOf(n):n=>n.__proto__,o;zt.t=function(n,u){if(u&1&&(n=this(n)),u&8||typeof n=="object"&&n&&(u&4&&n.__esModule||u&16&&typeof n.then=="function"))return n;var m=Object.create(null);zt.r(m);var b={};o=o||[null,a({}),a([]),a(a)];for(var C=u&2&&n;typeof C=="object"&&!~o.indexOf(C);C=a(C))Object.getOwnPropertyNames(C).forEach(w=>b[w]=()=>n[w]);return b.default=()=>n,zt.d(m,b),m}})();zt.d=(a,o)=>{for(var n in o)zt.o(o,n)&&!zt.o(a,n)&&Object.defineProperty(a,n,{enumerable:!0,get:o[n]})};zt.o=(a,o)=>Object.prototype.hasOwnProperty.call(a,o);zt.r=a=>{typeof Symbol<"u"&&Symbol.toStringTag&&Object.defineProperty(a,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(a,"__esModule",{value:!0})};var Q={};(()=>{/*!*****************************!*\
  !*** ./src/transformers.js ***!
  \*****************************/zt.r(Q),zt.d(Q,{ASTFeatureExtractor:()=>v.ASTFeatureExtractor,ASTForAudioClassification:()=>n.ASTForAudioClassification,ASTModel:()=>n.ASTModel,ASTPreTrainedModel:()=>n.ASTPreTrainedModel,AlbertForMaskedLM:()=>n.AlbertForMaskedLM,AlbertForQuestionAnswering:()=>n.AlbertForQuestionAnswering,AlbertForSequenceClassification:()=>n.AlbertForSequenceClassification,AlbertModel:()=>n.AlbertModel,AlbertPreTrainedModel:()=>n.AlbertPreTrainedModel,AlbertTokenizer:()=>u.AlbertTokenizer,AudioClassificationPipeline:()=>o.AudioClassificationPipeline,AutoConfig:()=>m.AutoConfig,AutoFeatureExtractor:()=>x.AutoFeatureExtractor,AutoImageProcessor:()=>j.AutoImageProcessor,AutoModel:()=>n.AutoModel,AutoModelForAudioClassification:()=>n.AutoModelForAudioClassification,AutoModelForAudioFrameClassification:()=>n.AutoModelForAudioFrameClassification,AutoModelForAudioTextToText:()=>n.AutoModelForAudioTextToText,AutoModelForCTC:()=>n.AutoModelForCTC,AutoModelForCausalLM:()=>n.AutoModelForCausalLM,AutoModelForDepthEstimation:()=>n.AutoModelForDepthEstimation,AutoModelForDocumentQuestionAnswering:()=>n.AutoModelForDocumentQuestionAnswering,AutoModelForImageClassification:()=>n.AutoModelForImageClassification,AutoModelForImageFeatureExtraction:()=>n.AutoModelForImageFeatureExtraction,AutoModelForImageMatting:()=>n.AutoModelForImageMatting,AutoModelForImageSegmentation:()=>n.AutoModelForImageSegmentation,AutoModelForImageTextToText:()=>n.AutoModelForImageTextToText,AutoModelForImageToImage:()=>n.AutoModelForImageToImage,AutoModelForMaskGeneration:()=>n.AutoModelForMaskGeneration,AutoModelForMaskedLM:()=>n.AutoModelForMaskedLM,AutoModelForNormalEstimation:()=>n.AutoModelForNormalEstimation,AutoModelForObjectDetection:()=>n.AutoModelForObjectDetection,AutoModelForPoseEstimation:()=>n.AutoModelForPoseEstimation,AutoModelForQuestionAnswering:()=>n.AutoModelForQuestionAnswering,AutoModelForSemanticSegmentation:()=>n.AutoModelForSemanticSegmentation,AutoModelForSeq2SeqLM:()=>n.AutoModelForSeq2SeqLM,AutoModelForSequenceClassification:()=>n.AutoModelForSequenceClassification,AutoModelForSpeechSeq2Seq:()=>n.AutoModelForSpeechSeq2Seq,AutoModelForTextToSpectrogram:()=>n.AutoModelForTextToSpectrogram,AutoModelForTextToWaveform:()=>n.AutoModelForTextToWaveform,AutoModelForTokenClassification:()=>n.AutoModelForTokenClassification,AutoModelForUniversalSegmentation:()=>n.AutoModelForUniversalSegmentation,AutoModelForVision2Seq:()=>n.AutoModelForVision2Seq,AutoModelForXVector:()=>n.AutoModelForXVector,AutoModelForZeroShotObjectDetection:()=>n.AutoModelForZeroShotObjectDetection,AutoProcessor:()=>N.AutoProcessor,AutoTokenizer:()=>u.AutoTokenizer,AutomaticSpeechRecognitionPipeline:()=>o.AutomaticSpeechRecognitionPipeline,BackgroundRemovalPipeline:()=>o.BackgroundRemovalPipeline,BartForConditionalGeneration:()=>n.BartForConditionalGeneration,BartForSequenceClassification:()=>n.BartForSequenceClassification,BartModel:()=>n.BartModel,BartPretrainedModel:()=>n.BartPretrainedModel,BartTokenizer:()=>u.BartTokenizer,BaseModelOutput:()=>n.BaseModelOutput,BaseStreamer:()=>U.BaseStreamer,BeitFeatureExtractor:()=>F.BeitFeatureExtractor,BeitForImageClassification:()=>n.BeitForImageClassification,BeitModel:()=>n.BeitModel,BeitPreTrainedModel:()=>n.BeitPreTrainedModel,BertForMaskedLM:()=>n.BertForMaskedLM,BertForQuestionAnswering:()=>n.BertForQuestionAnswering,BertForSequenceClassification:()=>n.BertForSequenceClassification,BertForTokenClassification:()=>n.BertForTokenClassification,BertModel:()=>n.BertModel,BertPreTrainedModel:()=>n.BertPreTrainedModel,BertTokenizer:()=>u.BertTokenizer,BitImageProcessor:()=>F.BitImageProcessor,BlenderbotForConditionalGeneration:()=>n.BlenderbotForConditionalGeneration,BlenderbotModel:()=>n.BlenderbotModel,BlenderbotPreTrainedModel:()=>n.BlenderbotPreTrainedModel,BlenderbotSmallForConditionalGeneration:()=>n.BlenderbotSmallForConditionalGeneration,BlenderbotSmallModel:()=>n.BlenderbotSmallModel,BlenderbotSmallPreTrainedModel:()=>n.BlenderbotSmallPreTrainedModel,BlenderbotSmallTokenizer:()=>u.BlenderbotSmallTokenizer,BlenderbotTokenizer:()=>u.BlenderbotTokenizer,BloomForCausalLM:()=>n.BloomForCausalLM,BloomModel:()=>n.BloomModel,BloomPreTrainedModel:()=>n.BloomPreTrainedModel,BloomTokenizer:()=>u.BloomTokenizer,CLIPFeatureExtractor:()=>F.CLIPFeatureExtractor,CLIPImageProcessor:()=>F.CLIPImageProcessor,CLIPModel:()=>n.CLIPModel,CLIPPreTrainedModel:()=>n.CLIPPreTrainedModel,CLIPSegForImageSegmentation:()=>n.CLIPSegForImageSegmentation,CLIPSegModel:()=>n.CLIPSegModel,CLIPSegPreTrainedModel:()=>n.CLIPSegPreTrainedModel,CLIPTextModel:()=>n.CLIPTextModel,CLIPTextModelWithProjection:()=>n.CLIPTextModelWithProjection,CLIPTokenizer:()=>u.CLIPTokenizer,CLIPVisionModel:()=>n.CLIPVisionModel,CLIPVisionModelWithProjection:()=>n.CLIPVisionModelWithProjection,CamembertForMaskedLM:()=>n.CamembertForMaskedLM,CamembertForQuestionAnswering:()=>n.CamembertForQuestionAnswering,CamembertForSequenceClassification:()=>n.CamembertForSequenceClassification,CamembertForTokenClassification:()=>n.CamembertForTokenClassification,CamembertModel:()=>n.CamembertModel,CamembertPreTrainedModel:()=>n.CamembertPreTrainedModel,CamembertTokenizer:()=>u.CamembertTokenizer,CausalLMOutput:()=>n.CausalLMOutput,CausalLMOutputWithPast:()=>n.CausalLMOutputWithPast,ChineseCLIPFeatureExtractor:()=>F.ChineseCLIPFeatureExtractor,ChineseCLIPModel:()=>n.ChineseCLIPModel,ChineseCLIPPreTrainedModel:()=>n.ChineseCLIPPreTrainedModel,ClapAudioModelWithProjection:()=>n.ClapAudioModelWithProjection,ClapFeatureExtractor:()=>v.ClapFeatureExtractor,ClapModel:()=>n.ClapModel,ClapPreTrainedModel:()=>n.ClapPreTrainedModel,ClapTextModelWithProjection:()=>n.ClapTextModelWithProjection,ClassifierFreeGuidanceLogitsProcessor:()=>k.ClassifierFreeGuidanceLogitsProcessor,CodeGenForCausalLM:()=>n.CodeGenForCausalLM,CodeGenModel:()=>n.CodeGenModel,CodeGenPreTrainedModel:()=>n.CodeGenPreTrainedModel,CodeGenTokenizer:()=>u.CodeGenTokenizer,CodeLlamaTokenizer:()=>u.CodeLlamaTokenizer,CohereForCausalLM:()=>n.CohereForCausalLM,CohereModel:()=>n.CohereModel,CoherePreTrainedModel:()=>n.CoherePreTrainedModel,CohereTokenizer:()=>u.CohereTokenizer,ConvBertForMaskedLM:()=>n.ConvBertForMaskedLM,ConvBertForQuestionAnswering:()=>n.ConvBertForQuestionAnswering,ConvBertForSequenceClassification:()=>n.ConvBertForSequenceClassification,ConvBertForTokenClassification:()=>n.ConvBertForTokenClassification,ConvBertModel:()=>n.ConvBertModel,ConvBertPreTrainedModel:()=>n.ConvBertPreTrainedModel,ConvBertTokenizer:()=>u.ConvBertTokenizer,ConvNextFeatureExtractor:()=>F.ConvNextFeatureExtractor,ConvNextForImageClassification:()=>n.ConvNextForImageClassification,ConvNextImageProcessor:()=>F.ConvNextImageProcessor,ConvNextModel:()=>n.ConvNextModel,ConvNextPreTrainedModel:()=>n.ConvNextPreTrainedModel,ConvNextV2ForImageClassification:()=>n.ConvNextV2ForImageClassification,ConvNextV2Model:()=>n.ConvNextV2Model,ConvNextV2PreTrainedModel:()=>n.ConvNextV2PreTrainedModel,DFineForObjectDetection:()=>n.DFineForObjectDetection,DFineModel:()=>n.DFineModel,DFinePreTrainedModel:()=>n.DFinePreTrainedModel,DPTFeatureExtractor:()=>F.DPTFeatureExtractor,DPTForDepthEstimation:()=>n.DPTForDepthEstimation,DPTImageProcessor:()=>F.DPTImageProcessor,DPTModel:()=>n.DPTModel,DPTPreTrainedModel:()=>n.DPTPreTrainedModel,DacDecoderModel:()=>n.DacDecoderModel,DacDecoderOutput:()=>n.DacDecoderOutput,DacEncoderModel:()=>n.DacEncoderModel,DacEncoderOutput:()=>n.DacEncoderOutput,DacFeatureExtractor:()=>v.DacFeatureExtractor,DacModel:()=>n.DacModel,DacPreTrainedModel:()=>n.DacPreTrainedModel,DataTypeMap:()=>E.DataTypeMap,DebertaForMaskedLM:()=>n.DebertaForMaskedLM,DebertaForQuestionAnswering:()=>n.DebertaForQuestionAnswering,DebertaForSequenceClassification:()=>n.DebertaForSequenceClassification,DebertaForTokenClassification:()=>n.DebertaForTokenClassification,DebertaModel:()=>n.DebertaModel,DebertaPreTrainedModel:()=>n.DebertaPreTrainedModel,DebertaTokenizer:()=>u.DebertaTokenizer,DebertaV2ForMaskedLM:()=>n.DebertaV2ForMaskedLM,DebertaV2ForQuestionAnswering:()=>n.DebertaV2ForQuestionAnswering,DebertaV2ForSequenceClassification:()=>n.DebertaV2ForSequenceClassification,DebertaV2ForTokenClassification:()=>n.DebertaV2ForTokenClassification,DebertaV2Model:()=>n.DebertaV2Model,DebertaV2PreTrainedModel:()=>n.DebertaV2PreTrainedModel,DebertaV2Tokenizer:()=>u.DebertaV2Tokenizer,DecisionTransformerModel:()=>n.DecisionTransformerModel,DecisionTransformerPreTrainedModel:()=>n.DecisionTransformerPreTrainedModel,DeiTFeatureExtractor:()=>F.DeiTFeatureExtractor,DeiTForImageClassification:()=>n.DeiTForImageClassification,DeiTImageProcessor:()=>F.DeiTImageProcessor,DeiTModel:()=>n.DeiTModel,DeiTPreTrainedModel:()=>n.DeiTPreTrainedModel,DepthAnythingForDepthEstimation:()=>n.DepthAnythingForDepthEstimation,DepthAnythingPreTrainedModel:()=>n.DepthAnythingPreTrainedModel,DepthEstimationPipeline:()=>o.DepthEstimationPipeline,DepthProForDepthEstimation:()=>n.DepthProForDepthEstimation,DepthProPreTrainedModel:()=>n.DepthProPreTrainedModel,DetrFeatureExtractor:()=>F.DetrFeatureExtractor,DetrForObjectDetection:()=>n.DetrForObjectDetection,DetrForSegmentation:()=>n.DetrForSegmentation,DetrImageProcessor:()=>F.DetrImageProcessor,DetrModel:()=>n.DetrModel,DetrObjectDetectionOutput:()=>n.DetrObjectDetectionOutput,DetrPreTrainedModel:()=>n.DetrPreTrainedModel,DetrSegmentationOutput:()=>n.DetrSegmentationOutput,Dinov2ForImageClassification:()=>n.Dinov2ForImageClassification,Dinov2Model:()=>n.Dinov2Model,Dinov2PreTrainedModel:()=>n.Dinov2PreTrainedModel,Dinov2WithRegistersForImageClassification:()=>n.Dinov2WithRegistersForImageClassification,Dinov2WithRegistersModel:()=>n.Dinov2WithRegistersModel,Dinov2WithRegistersPreTrainedModel:()=>n.Dinov2WithRegistersPreTrainedModel,DistilBertForMaskedLM:()=>n.DistilBertForMaskedLM,DistilBertForQuestionAnswering:()=>n.DistilBertForQuestionAnswering,DistilBertForSequenceClassification:()=>n.DistilBertForSequenceClassification,DistilBertForTokenClassification:()=>n.DistilBertForTokenClassification,DistilBertModel:()=>n.DistilBertModel,DistilBertPreTrainedModel:()=>n.DistilBertPreTrainedModel,DistilBertTokenizer:()=>u.DistilBertTokenizer,DocumentQuestionAnsweringPipeline:()=>o.DocumentQuestionAnsweringPipeline,DonutFeatureExtractor:()=>F.DonutFeatureExtractor,DonutImageProcessor:()=>F.DonutImageProcessor,DonutSwinModel:()=>n.DonutSwinModel,DonutSwinPreTrainedModel:()=>n.DonutSwinPreTrainedModel,EfficientNetForImageClassification:()=>n.EfficientNetForImageClassification,EfficientNetImageProcessor:()=>F.EfficientNetImageProcessor,EfficientNetModel:()=>n.EfficientNetModel,EfficientNetPreTrainedModel:()=>n.EfficientNetPreTrainedModel,ElectraForMaskedLM:()=>n.ElectraForMaskedLM,ElectraForQuestionAnswering:()=>n.ElectraForQuestionAnswering,ElectraForSequenceClassification:()=>n.ElectraForSequenceClassification,ElectraForTokenClassification:()=>n.ElectraForTokenClassification,ElectraModel:()=>n.ElectraModel,ElectraPreTrainedModel:()=>n.ElectraPreTrainedModel,ElectraTokenizer:()=>u.ElectraTokenizer,EncodecFeatureExtractor:()=>v.EncodecFeatureExtractor,EosTokenCriteria:()=>f.EosTokenCriteria,EsmForMaskedLM:()=>n.EsmForMaskedLM,EsmForSequenceClassification:()=>n.EsmForSequenceClassification,EsmForTokenClassification:()=>n.EsmForTokenClassification,EsmModel:()=>n.EsmModel,EsmPreTrainedModel:()=>n.EsmPreTrainedModel,EsmTokenizer:()=>u.EsmTokenizer,ExaoneForCausalLM:()=>n.ExaoneForCausalLM,ExaoneModel:()=>n.ExaoneModel,ExaonePreTrainedModel:()=>n.ExaonePreTrainedModel,FFT:()=>B.FFT,FalconForCausalLM:()=>n.FalconForCausalLM,FalconModel:()=>n.FalconModel,FalconPreTrainedModel:()=>n.FalconPreTrainedModel,FalconTokenizer:()=>u.FalconTokenizer,FastViTForImageClassification:()=>n.FastViTForImageClassification,FastViTModel:()=>n.FastViTModel,FastViTPreTrainedModel:()=>n.FastViTPreTrainedModel,FeatureExtractionPipeline:()=>o.FeatureExtractionPipeline,FeatureExtractor:()=>D.FeatureExtractor,FillMaskPipeline:()=>o.FillMaskPipeline,Florence2ForConditionalGeneration:()=>n.Florence2ForConditionalGeneration,Florence2PreTrainedModel:()=>n.Florence2PreTrainedModel,Florence2Processor:()=>L.Florence2Processor,ForcedBOSTokenLogitsProcessor:()=>k.ForcedBOSTokenLogitsProcessor,ForcedEOSTokenLogitsProcessor:()=>k.ForcedEOSTokenLogitsProcessor,GLPNFeatureExtractor:()=>F.GLPNFeatureExtractor,GLPNForDepthEstimation:()=>n.GLPNForDepthEstimation,GLPNModel:()=>n.GLPNModel,GLPNPreTrainedModel:()=>n.GLPNPreTrainedModel,GPT2LMHeadModel:()=>n.GPT2LMHeadModel,GPT2Model:()=>n.GPT2Model,GPT2PreTrainedModel:()=>n.GPT2PreTrainedModel,GPT2Tokenizer:()=>u.GPT2Tokenizer,GPTBigCodeForCausalLM:()=>n.GPTBigCodeForCausalLM,GPTBigCodeModel:()=>n.GPTBigCodeModel,GPTBigCodePreTrainedModel:()=>n.GPTBigCodePreTrainedModel,GPTJForCausalLM:()=>n.GPTJForCausalLM,GPTJModel:()=>n.GPTJModel,GPTJPreTrainedModel:()=>n.GPTJPreTrainedModel,GPTNeoForCausalLM:()=>n.GPTNeoForCausalLM,GPTNeoModel:()=>n.GPTNeoModel,GPTNeoPreTrainedModel:()=>n.GPTNeoPreTrainedModel,GPTNeoXForCausalLM:()=>n.GPTNeoXForCausalLM,GPTNeoXModel:()=>n.GPTNeoXModel,GPTNeoXPreTrainedModel:()=>n.GPTNeoXPreTrainedModel,GPTNeoXTokenizer:()=>u.GPTNeoXTokenizer,Gemma2ForCausalLM:()=>n.Gemma2ForCausalLM,Gemma2Model:()=>n.Gemma2Model,Gemma2PreTrainedModel:()=>n.Gemma2PreTrainedModel,Gemma3ForCausalLM:()=>n.Gemma3ForCausalLM,Gemma3Model:()=>n.Gemma3Model,Gemma3PreTrainedModel:()=>n.Gemma3PreTrainedModel,GemmaForCausalLM:()=>n.GemmaForCausalLM,GemmaModel:()=>n.GemmaModel,GemmaPreTrainedModel:()=>n.GemmaPreTrainedModel,GemmaTokenizer:()=>u.GemmaTokenizer,GlmForCausalLM:()=>n.GlmForCausalLM,GlmModel:()=>n.GlmModel,GlmPreTrainedModel:()=>n.GlmPreTrainedModel,GraniteForCausalLM:()=>n.GraniteForCausalLM,GraniteModel:()=>n.GraniteModel,GranitePreTrainedModel:()=>n.GranitePreTrainedModel,Grok1Tokenizer:()=>u.Grok1Tokenizer,GroundingDinoForObjectDetection:()=>n.GroundingDinoForObjectDetection,GroundingDinoImageProcessor:()=>F.GroundingDinoImageProcessor,GroundingDinoPreTrainedModel:()=>n.GroundingDinoPreTrainedModel,GroundingDinoProcessor:()=>L.GroundingDinoProcessor,GroupViTModel:()=>n.GroupViTModel,GroupViTPreTrainedModel:()=>n.GroupViTPreTrainedModel,HeliumForCausalLM:()=>n.HeliumForCausalLM,HeliumModel:()=>n.HeliumModel,HeliumPreTrainedModel:()=>n.HeliumPreTrainedModel,HerbertTokenizer:()=>u.HerbertTokenizer,HieraForImageClassification:()=>n.HieraForImageClassification,HieraModel:()=>n.HieraModel,HieraPreTrainedModel:()=>n.HieraPreTrainedModel,HubertForCTC:()=>n.HubertForCTC,HubertForSequenceClassification:()=>n.HubertForSequenceClassification,HubertModel:()=>n.HubertModel,HubertPreTrainedModel:()=>n.HubertPreTrainedModel,IJepaForImageClassification:()=>n.IJepaForImageClassification,IJepaModel:()=>n.IJepaModel,IJepaPreTrainedModel:()=>n.IJepaPreTrainedModel,Idefics3ForConditionalGeneration:()=>n.Idefics3ForConditionalGeneration,Idefics3ImageProcessor:()=>F.Idefics3ImageProcessor,Idefics3PreTrainedModel:()=>n.Idefics3PreTrainedModel,Idefics3Processor:()=>L.Idefics3Processor,ImageClassificationPipeline:()=>o.ImageClassificationPipeline,ImageFeatureExtractionPipeline:()=>o.ImageFeatureExtractionPipeline,ImageFeatureExtractor:()=>v.ImageFeatureExtractor,ImageMattingOutput:()=>n.ImageMattingOutput,ImageProcessor:()=>S.ImageProcessor,ImageSegmentationPipeline:()=>o.ImageSegmentationPipeline,ImageToImagePipeline:()=>o.ImageToImagePipeline,ImageToTextPipeline:()=>o.ImageToTextPipeline,InterruptableStoppingCriteria:()=>f.InterruptableStoppingCriteria,JAISLMHeadModel:()=>n.JAISLMHeadModel,JAISModel:()=>n.JAISModel,JAISPreTrainedModel:()=>n.JAISPreTrainedModel,JinaCLIPImageProcessor:()=>F.JinaCLIPImageProcessor,JinaCLIPModel:()=>n.JinaCLIPModel,JinaCLIPPreTrainedModel:()=>n.JinaCLIPPreTrainedModel,JinaCLIPProcessor:()=>L.JinaCLIPProcessor,JinaCLIPTextModel:()=>n.JinaCLIPTextModel,JinaCLIPVisionModel:()=>n.JinaCLIPVisionModel,LiteWhisperForConditionalGeneration:()=>n.LiteWhisperForConditionalGeneration,LlamaForCausalLM:()=>n.LlamaForCausalLM,LlamaModel:()=>n.LlamaModel,LlamaPreTrainedModel:()=>n.LlamaPreTrainedModel,LlamaTokenizer:()=>u.LlamaTokenizer,LlavaForConditionalGeneration:()=>n.LlavaForConditionalGeneration,LlavaOnevisionForConditionalGeneration:()=>n.LlavaOnevisionForConditionalGeneration,LlavaOnevisionImageProcessor:()=>F.LlavaOnevisionImageProcessor,LlavaPreTrainedModel:()=>n.LlavaPreTrainedModel,LogitsProcessor:()=>k.LogitsProcessor,LogitsProcessorList:()=>k.LogitsProcessorList,LogitsWarper:()=>k.LogitsWarper,LongT5ForConditionalGeneration:()=>n.LongT5ForConditionalGeneration,LongT5Model:()=>n.LongT5Model,LongT5PreTrainedModel:()=>n.LongT5PreTrainedModel,M2M100ForConditionalGeneration:()=>n.M2M100ForConditionalGeneration,M2M100Model:()=>n.M2M100Model,M2M100PreTrainedModel:()=>n.M2M100PreTrainedModel,M2M100Tokenizer:()=>u.M2M100Tokenizer,MBart50Tokenizer:()=>u.MBart50Tokenizer,MBartForCausalLM:()=>n.MBartForCausalLM,MBartForConditionalGeneration:()=>n.MBartForConditionalGeneration,MBartForSequenceClassification:()=>n.MBartForSequenceClassification,MBartModel:()=>n.MBartModel,MBartPreTrainedModel:()=>n.MBartPreTrainedModel,MBartTokenizer:()=>u.MBartTokenizer,MPNetForMaskedLM:()=>n.MPNetForMaskedLM,MPNetForQuestionAnswering:()=>n.MPNetForQuestionAnswering,MPNetForSequenceClassification:()=>n.MPNetForSequenceClassification,MPNetForTokenClassification:()=>n.MPNetForTokenClassification,MPNetModel:()=>n.MPNetModel,MPNetPreTrainedModel:()=>n.MPNetPreTrainedModel,MPNetTokenizer:()=>u.MPNetTokenizer,MT5ForConditionalGeneration:()=>n.MT5ForConditionalGeneration,MT5Model:()=>n.MT5Model,MT5PreTrainedModel:()=>n.MT5PreTrainedModel,MarianMTModel:()=>n.MarianMTModel,MarianModel:()=>n.MarianModel,MarianPreTrainedModel:()=>n.MarianPreTrainedModel,MarianTokenizer:()=>u.MarianTokenizer,Mask2FormerImageProcessor:()=>F.Mask2FormerImageProcessor,MaskFormerFeatureExtractor:()=>F.MaskFormerFeatureExtractor,MaskFormerForInstanceSegmentation:()=>n.MaskFormerForInstanceSegmentation,MaskFormerImageProcessor:()=>F.MaskFormerImageProcessor,MaskFormerModel:()=>n.MaskFormerModel,MaskFormerPreTrainedModel:()=>n.MaskFormerPreTrainedModel,MaskedLMOutput:()=>n.MaskedLMOutput,MaxLengthCriteria:()=>f.MaxLengthCriteria,Metric3DForDepthEstimation:()=>n.Metric3DForDepthEstimation,Metric3DPreTrainedModel:()=>n.Metric3DPreTrainedModel,Metric3Dv2ForDepthEstimation:()=>n.Metric3Dv2ForDepthEstimation,Metric3Dv2PreTrainedModel:()=>n.Metric3Dv2PreTrainedModel,MgpstrForSceneTextRecognition:()=>n.MgpstrForSceneTextRecognition,MgpstrModelOutput:()=>n.MgpstrModelOutput,MgpstrPreTrainedModel:()=>n.MgpstrPreTrainedModel,MgpstrProcessor:()=>L.MgpstrProcessor,MgpstrTokenizer:()=>u.MgpstrTokenizer,MimiDecoderModel:()=>n.MimiDecoderModel,MimiDecoderOutput:()=>n.MimiDecoderOutput,MimiEncoderModel:()=>n.MimiEncoderModel,MimiEncoderOutput:()=>n.MimiEncoderOutput,MimiModel:()=>n.MimiModel,MimiPreTrainedModel:()=>n.MimiPreTrainedModel,MinLengthLogitsProcessor:()=>k.MinLengthLogitsProcessor,MinNewTokensLengthLogitsProcessor:()=>k.MinNewTokensLengthLogitsProcessor,MistralForCausalLM:()=>n.MistralForCausalLM,MistralModel:()=>n.MistralModel,MistralPreTrainedModel:()=>n.MistralPreTrainedModel,MobileBertForMaskedLM:()=>n.MobileBertForMaskedLM,MobileBertForQuestionAnswering:()=>n.MobileBertForQuestionAnswering,MobileBertForSequenceClassification:()=>n.MobileBertForSequenceClassification,MobileBertModel:()=>n.MobileBertModel,MobileBertPreTrainedModel:()=>n.MobileBertPreTrainedModel,MobileBertTokenizer:()=>u.MobileBertTokenizer,MobileLLMForCausalLM:()=>n.MobileLLMForCausalLM,MobileLLMModel:()=>n.MobileLLMModel,MobileLLMPreTrainedModel:()=>n.MobileLLMPreTrainedModel,MobileNetV1FeatureExtractor:()=>F.MobileNetV1FeatureExtractor,MobileNetV1ForImageClassification:()=>n.MobileNetV1ForImageClassification,MobileNetV1ForSemanticSegmentation:()=>n.MobileNetV1ForSemanticSegmentation,MobileNetV1ImageProcessor:()=>F.MobileNetV1ImageProcessor,MobileNetV1Model:()=>n.MobileNetV1Model,MobileNetV1PreTrainedModel:()=>n.MobileNetV1PreTrainedModel,MobileNetV2FeatureExtractor:()=>F.MobileNetV2FeatureExtractor,MobileNetV2ForImageClassification:()=>n.MobileNetV2ForImageClassification,MobileNetV2ForSemanticSegmentation:()=>n.MobileNetV2ForSemanticSegmentation,MobileNetV2ImageProcessor:()=>F.MobileNetV2ImageProcessor,MobileNetV2Model:()=>n.MobileNetV2Model,MobileNetV2PreTrainedModel:()=>n.MobileNetV2PreTrainedModel,MobileNetV3FeatureExtractor:()=>F.MobileNetV3FeatureExtractor,MobileNetV3ForImageClassification:()=>n.MobileNetV3ForImageClassification,MobileNetV3ForSemanticSegmentation:()=>n.MobileNetV3ForSemanticSegmentation,MobileNetV3ImageProcessor:()=>F.MobileNetV3ImageProcessor,MobileNetV3Model:()=>n.MobileNetV3Model,MobileNetV3PreTrainedModel:()=>n.MobileNetV3PreTrainedModel,MobileNetV4FeatureExtractor:()=>F.MobileNetV4FeatureExtractor,MobileNetV4ForImageClassification:()=>n.MobileNetV4ForImageClassification,MobileNetV4ForSemanticSegmentation:()=>n.MobileNetV4ForSemanticSegmentation,MobileNetV4ImageProcessor:()=>F.MobileNetV4ImageProcessor,MobileNetV4Model:()=>n.MobileNetV4Model,MobileNetV4PreTrainedModel:()=>n.MobileNetV4PreTrainedModel,MobileViTFeatureExtractor:()=>F.MobileViTFeatureExtractor,MobileViTForImageClassification:()=>n.MobileViTForImageClassification,MobileViTImageProcessor:()=>F.MobileViTImageProcessor,MobileViTModel:()=>n.MobileViTModel,MobileViTPreTrainedModel:()=>n.MobileViTPreTrainedModel,MobileViTV2ForImageClassification:()=>n.MobileViTV2ForImageClassification,MobileViTV2Model:()=>n.MobileViTV2Model,MobileViTV2PreTrainedModel:()=>n.MobileViTV2PreTrainedModel,ModelOutput:()=>n.ModelOutput,ModernBertForMaskedLM:()=>n.ModernBertForMaskedLM,ModernBertForSequenceClassification:()=>n.ModernBertForSequenceClassification,ModernBertForTokenClassification:()=>n.ModernBertForTokenClassification,ModernBertModel:()=>n.ModernBertModel,ModernBertPreTrainedModel:()=>n.ModernBertPreTrainedModel,Moondream1ForConditionalGeneration:()=>n.Moondream1ForConditionalGeneration,MoonshineFeatureExtractor:()=>v.MoonshineFeatureExtractor,MoonshineForConditionalGeneration:()=>n.MoonshineForConditionalGeneration,MoonshineModel:()=>n.MoonshineModel,MoonshinePreTrainedModel:()=>n.MoonshinePreTrainedModel,MoonshineProcessor:()=>L.MoonshineProcessor,MptForCausalLM:()=>n.MptForCausalLM,MptModel:()=>n.MptModel,MptPreTrainedModel:()=>n.MptPreTrainedModel,MultiModalityCausalLM:()=>n.MultiModalityCausalLM,MultiModalityPreTrainedModel:()=>n.MultiModalityPreTrainedModel,MusicgenForCausalLM:()=>n.MusicgenForCausalLM,MusicgenForConditionalGeneration:()=>n.MusicgenForConditionalGeneration,MusicgenModel:()=>n.MusicgenModel,MusicgenPreTrainedModel:()=>n.MusicgenPreTrainedModel,NllbTokenizer:()=>u.NllbTokenizer,NoBadWordsLogitsProcessor:()=>k.NoBadWordsLogitsProcessor,NoRepeatNGramLogitsProcessor:()=>k.NoRepeatNGramLogitsProcessor,NomicBertModel:()=>n.NomicBertModel,NomicBertPreTrainedModel:()=>n.NomicBertPreTrainedModel,NougatImageProcessor:()=>F.NougatImageProcessor,NougatTokenizer:()=>u.NougatTokenizer,OPTForCausalLM:()=>n.OPTForCausalLM,OPTModel:()=>n.OPTModel,OPTPreTrainedModel:()=>n.OPTPreTrainedModel,ObjectDetectionPipeline:()=>o.ObjectDetectionPipeline,Olmo2ForCausalLM:()=>n.Olmo2ForCausalLM,Olmo2Model:()=>n.Olmo2Model,Olmo2PreTrainedModel:()=>n.Olmo2PreTrainedModel,OlmoForCausalLM:()=>n.OlmoForCausalLM,OlmoModel:()=>n.OlmoModel,OlmoPreTrainedModel:()=>n.OlmoPreTrainedModel,OpenELMForCausalLM:()=>n.OpenELMForCausalLM,OpenELMModel:()=>n.OpenELMModel,OpenELMPreTrainedModel:()=>n.OpenELMPreTrainedModel,OwlViTFeatureExtractor:()=>F.OwlViTFeatureExtractor,OwlViTForObjectDetection:()=>n.OwlViTForObjectDetection,OwlViTImageProcessor:()=>F.OwlViTImageProcessor,OwlViTModel:()=>n.OwlViTModel,OwlViTPreTrainedModel:()=>n.OwlViTPreTrainedModel,OwlViTProcessor:()=>L.OwlViTProcessor,Owlv2ForObjectDetection:()=>n.Owlv2ForObjectDetection,Owlv2ImageProcessor:()=>F.Owlv2ImageProcessor,Owlv2Model:()=>n.Owlv2Model,Owlv2PreTrainedModel:()=>n.Owlv2PreTrainedModel,PaliGemmaForConditionalGeneration:()=>n.PaliGemmaForConditionalGeneration,PaliGemmaPreTrainedModel:()=>n.PaliGemmaPreTrainedModel,PaliGemmaProcessor:()=>L.PaliGemmaProcessor,PatchTSMixerForPrediction:()=>n.PatchTSMixerForPrediction,PatchTSMixerModel:()=>n.PatchTSMixerModel,PatchTSMixerPreTrainedModel:()=>n.PatchTSMixerPreTrainedModel,PatchTSTForPrediction:()=>n.PatchTSTForPrediction,PatchTSTModel:()=>n.PatchTSTModel,PatchTSTPreTrainedModel:()=>n.PatchTSTPreTrainedModel,Phi3ForCausalLM:()=>n.Phi3ForCausalLM,Phi3Model:()=>n.Phi3Model,Phi3PreTrainedModel:()=>n.Phi3PreTrainedModel,Phi3VForCausalLM:()=>n.Phi3VForCausalLM,Phi3VImageProcessor:()=>F.Phi3VImageProcessor,Phi3VPreTrainedModel:()=>n.Phi3VPreTrainedModel,Phi3VProcessor:()=>L.Phi3VProcessor,PhiForCausalLM:()=>n.PhiForCausalLM,PhiModel:()=>n.PhiModel,PhiPreTrainedModel:()=>n.PhiPreTrainedModel,Pipeline:()=>o.Pipeline,PreTrainedModel:()=>n.PreTrainedModel,PreTrainedTokenizer:()=>u.PreTrainedTokenizer,PretrainedConfig:()=>m.PretrainedConfig,PretrainedMixin:()=>n.PretrainedMixin,Processor:()=>J.Processor,PvtForImageClassification:()=>n.PvtForImageClassification,PvtImageProcessor:()=>F.PvtImageProcessor,PvtModel:()=>n.PvtModel,PvtPreTrainedModel:()=>n.PvtPreTrainedModel,PyAnnoteFeatureExtractor:()=>v.PyAnnoteFeatureExtractor,PyAnnoteForAudioFrameClassification:()=>n.PyAnnoteForAudioFrameClassification,PyAnnoteModel:()=>n.PyAnnoteModel,PyAnnotePreTrainedModel:()=>n.PyAnnotePreTrainedModel,PyAnnoteProcessor:()=>L.PyAnnoteProcessor,QuestionAnsweringModelOutput:()=>n.QuestionAnsweringModelOutput,QuestionAnsweringPipeline:()=>o.QuestionAnsweringPipeline,Qwen2ForCausalLM:()=>n.Qwen2ForCausalLM,Qwen2Model:()=>n.Qwen2Model,Qwen2PreTrainedModel:()=>n.Qwen2PreTrainedModel,Qwen2Tokenizer:()=>u.Qwen2Tokenizer,Qwen2VLForConditionalGeneration:()=>n.Qwen2VLForConditionalGeneration,Qwen2VLImageProcessor:()=>F.Qwen2VLImageProcessor,Qwen2VLPreTrainedModel:()=>n.Qwen2VLPreTrainedModel,Qwen2VLProcessor:()=>L.Qwen2VLProcessor,Qwen3ForCausalLM:()=>n.Qwen3ForCausalLM,Qwen3Model:()=>n.Qwen3Model,Qwen3PreTrainedModel:()=>n.Qwen3PreTrainedModel,RFDetrForObjectDetection:()=>n.RFDetrForObjectDetection,RFDetrModel:()=>n.RFDetrModel,RFDetrObjectDetectionOutput:()=>n.RFDetrObjectDetectionOutput,RFDetrPreTrainedModel:()=>n.RFDetrPreTrainedModel,RTDetrForObjectDetection:()=>n.RTDetrForObjectDetection,RTDetrImageProcessor:()=>F.RTDetrImageProcessor,RTDetrModel:()=>n.RTDetrModel,RTDetrObjectDetectionOutput:()=>n.RTDetrObjectDetectionOutput,RTDetrPreTrainedModel:()=>n.RTDetrPreTrainedModel,RTDetrV2ForObjectDetection:()=>n.RTDetrV2ForObjectDetection,RTDetrV2Model:()=>n.RTDetrV2Model,RTDetrV2ObjectDetectionOutput:()=>n.RTDetrV2ObjectDetectionOutput,RTDetrV2PreTrainedModel:()=>n.RTDetrV2PreTrainedModel,RawAudio:()=>b.RawAudio,RawImage:()=>C.RawImage,RawVideo:()=>w.RawVideo,RawVideoFrame:()=>w.RawVideoFrame,RepetitionPenaltyLogitsProcessor:()=>k.RepetitionPenaltyLogitsProcessor,ResNetForImageClassification:()=>n.ResNetForImageClassification,ResNetModel:()=>n.ResNetModel,ResNetPreTrainedModel:()=>n.ResNetPreTrainedModel,RoFormerForMaskedLM:()=>n.RoFormerForMaskedLM,RoFormerForQuestionAnswering:()=>n.RoFormerForQuestionAnswering,RoFormerForSequenceClassification:()=>n.RoFormerForSequenceClassification,RoFormerForTokenClassification:()=>n.RoFormerForTokenClassification,RoFormerModel:()=>n.RoFormerModel,RoFormerPreTrainedModel:()=>n.RoFormerPreTrainedModel,RoFormerTokenizer:()=>u.RoFormerTokenizer,RobertaForMaskedLM:()=>n.RobertaForMaskedLM,RobertaForQuestionAnswering:()=>n.RobertaForQuestionAnswering,RobertaForSequenceClassification:()=>n.RobertaForSequenceClassification,RobertaForTokenClassification:()=>n.RobertaForTokenClassification,RobertaModel:()=>n.RobertaModel,RobertaPreTrainedModel:()=>n.RobertaPreTrainedModel,RobertaTokenizer:()=>u.RobertaTokenizer,SamImageProcessor:()=>F.SamImageProcessor,SamImageSegmentationOutput:()=>n.SamImageSegmentationOutput,SamModel:()=>n.SamModel,SamPreTrainedModel:()=>n.SamPreTrainedModel,SamProcessor:()=>L.SamProcessor,SapiensForDepthEstimation:()=>n.SapiensForDepthEstimation,SapiensForNormalEstimation:()=>n.SapiensForNormalEstimation,SapiensForSemanticSegmentation:()=>n.SapiensForSemanticSegmentation,SapiensPreTrainedModel:()=>n.SapiensPreTrainedModel,SeamlessM4TFeatureExtractor:()=>v.SeamlessM4TFeatureExtractor,SegformerFeatureExtractor:()=>F.SegformerFeatureExtractor,SegformerForImageClassification:()=>n.SegformerForImageClassification,SegformerForSemanticSegmentation:()=>n.SegformerForSemanticSegmentation,SegformerImageProcessor:()=>F.SegformerImageProcessor,SegformerModel:()=>n.SegformerModel,SegformerPreTrainedModel:()=>n.SegformerPreTrainedModel,Seq2SeqLMOutput:()=>n.Seq2SeqLMOutput,SequenceClassifierOutput:()=>n.SequenceClassifierOutput,SiglipImageProcessor:()=>F.SiglipImageProcessor,SiglipModel:()=>n.SiglipModel,SiglipPreTrainedModel:()=>n.SiglipPreTrainedModel,SiglipTextModel:()=>n.SiglipTextModel,SiglipTokenizer:()=>u.SiglipTokenizer,SiglipVisionModel:()=>n.SiglipVisionModel,SmolVLMForConditionalGeneration:()=>n.SmolVLMForConditionalGeneration,SmolVLMImageProcessor:()=>F.SmolVLMImageProcessor,SmolVLMProcessor:()=>L.SmolVLMProcessor,SnacDecoderModel:()=>n.SnacDecoderModel,SnacEncoderModel:()=>n.SnacEncoderModel,SnacFeatureExtractor:()=>v.SnacFeatureExtractor,SnacModel:()=>n.SnacModel,SnacPreTrainedModel:()=>n.SnacPreTrainedModel,SpeechT5FeatureExtractor:()=>v.SpeechT5FeatureExtractor,SpeechT5ForSpeechToText:()=>n.SpeechT5ForSpeechToText,SpeechT5ForTextToSpeech:()=>n.SpeechT5ForTextToSpeech,SpeechT5HifiGan:()=>n.SpeechT5HifiGan,SpeechT5Model:()=>n.SpeechT5Model,SpeechT5PreTrainedModel:()=>n.SpeechT5PreTrainedModel,SpeechT5Processor:()=>L.SpeechT5Processor,SpeechT5Tokenizer:()=>u.SpeechT5Tokenizer,SqueezeBertForMaskedLM:()=>n.SqueezeBertForMaskedLM,SqueezeBertForQuestionAnswering:()=>n.SqueezeBertForQuestionAnswering,SqueezeBertForSequenceClassification:()=>n.SqueezeBertForSequenceClassification,SqueezeBertModel:()=>n.SqueezeBertModel,SqueezeBertPreTrainedModel:()=>n.SqueezeBertPreTrainedModel,SqueezeBertTokenizer:()=>u.SqueezeBertTokenizer,StableLmForCausalLM:()=>n.StableLmForCausalLM,StableLmModel:()=>n.StableLmModel,StableLmPreTrainedModel:()=>n.StableLmPreTrainedModel,Starcoder2ForCausalLM:()=>n.Starcoder2ForCausalLM,Starcoder2Model:()=>n.Starcoder2Model,Starcoder2PreTrainedModel:()=>n.Starcoder2PreTrainedModel,StoppingCriteria:()=>f.StoppingCriteria,StoppingCriteriaList:()=>f.StoppingCriteriaList,StyleTextToSpeech2Model:()=>n.StyleTextToSpeech2Model,StyleTextToSpeech2PreTrainedModel:()=>n.StyleTextToSpeech2PreTrainedModel,SummarizationPipeline:()=>o.SummarizationPipeline,SuppressTokensAtBeginLogitsProcessor:()=>k.SuppressTokensAtBeginLogitsProcessor,Swin2SRForImageSuperResolution:()=>n.Swin2SRForImageSuperResolution,Swin2SRImageProcessor:()=>F.Swin2SRImageProcessor,Swin2SRModel:()=>n.Swin2SRModel,Swin2SRPreTrainedModel:()=>n.Swin2SRPreTrainedModel,SwinForImageClassification:()=>n.SwinForImageClassification,SwinForSemanticSegmentation:()=>n.SwinForSemanticSegmentation,SwinModel:()=>n.SwinModel,SwinPreTrainedModel:()=>n.SwinPreTrainedModel,T5ForConditionalGeneration:()=>n.T5ForConditionalGeneration,T5Model:()=>n.T5Model,T5PreTrainedModel:()=>n.T5PreTrainedModel,T5Tokenizer:()=>u.T5Tokenizer,TableTransformerForObjectDetection:()=>n.TableTransformerForObjectDetection,TableTransformerModel:()=>n.TableTransformerModel,TableTransformerObjectDetectionOutput:()=>n.TableTransformerObjectDetectionOutput,TableTransformerPreTrainedModel:()=>n.TableTransformerPreTrainedModel,TemperatureLogitsWarper:()=>k.TemperatureLogitsWarper,Tensor:()=>E.Tensor,Text2TextGenerationPipeline:()=>o.Text2TextGenerationPipeline,TextClassificationPipeline:()=>o.TextClassificationPipeline,TextGenerationPipeline:()=>o.TextGenerationPipeline,TextStreamer:()=>U.TextStreamer,TextToAudioPipeline:()=>o.TextToAudioPipeline,TokenClassificationPipeline:()=>o.TokenClassificationPipeline,TokenClassifierOutput:()=>n.TokenClassifierOutput,TokenizerModel:()=>u.TokenizerModel,TopKLogitsWarper:()=>k.TopKLogitsWarper,TopPLogitsWarper:()=>k.TopPLogitsWarper,TrOCRForCausalLM:()=>n.TrOCRForCausalLM,TrOCRPreTrainedModel:()=>n.TrOCRPreTrainedModel,TranslationPipeline:()=>o.TranslationPipeline,UltravoxModel:()=>n.UltravoxModel,UltravoxPreTrainedModel:()=>n.UltravoxPreTrainedModel,UltravoxProcessor:()=>L.UltravoxProcessor,UniSpeechForCTC:()=>n.UniSpeechForCTC,UniSpeechForSequenceClassification:()=>n.UniSpeechForSequenceClassification,UniSpeechModel:()=>n.UniSpeechModel,UniSpeechPreTrainedModel:()=>n.UniSpeechPreTrainedModel,UniSpeechSatForAudioFrameClassification:()=>n.UniSpeechSatForAudioFrameClassification,UniSpeechSatForCTC:()=>n.UniSpeechSatForCTC,UniSpeechSatForSequenceClassification:()=>n.UniSpeechSatForSequenceClassification,UniSpeechSatModel:()=>n.UniSpeechSatModel,UniSpeechSatPreTrainedModel:()=>n.UniSpeechSatPreTrainedModel,VLChatProcessor:()=>L.VLChatProcessor,VLMImageProcessor:()=>F.VLMImageProcessor,ViTFeatureExtractor:()=>F.ViTFeatureExtractor,ViTForImageClassification:()=>n.ViTForImageClassification,ViTImageProcessor:()=>F.ViTImageProcessor,ViTMAEModel:()=>n.ViTMAEModel,ViTMAEPreTrainedModel:()=>n.ViTMAEPreTrainedModel,ViTMSNForImageClassification:()=>n.ViTMSNForImageClassification,ViTMSNModel:()=>n.ViTMSNModel,ViTMSNPreTrainedModel:()=>n.ViTMSNPreTrainedModel,ViTModel:()=>n.ViTModel,ViTPreTrainedModel:()=>n.ViTPreTrainedModel,VisionEncoderDecoderModel:()=>n.VisionEncoderDecoderModel,VitMatteForImageMatting:()=>n.VitMatteForImageMatting,VitMatteImageProcessor:()=>F.VitMatteImageProcessor,VitMattePreTrainedModel:()=>n.VitMattePreTrainedModel,VitPoseForPoseEstimation:()=>n.VitPoseForPoseEstimation,VitPoseImageProcessor:()=>F.VitPoseImageProcessor,VitPosePreTrainedModel:()=>n.VitPosePreTrainedModel,VitsModel:()=>n.VitsModel,VitsModelOutput:()=>n.VitsModelOutput,VitsPreTrainedModel:()=>n.VitsPreTrainedModel,VitsTokenizer:()=>u.VitsTokenizer,Wav2Vec2BertForCTC:()=>n.Wav2Vec2BertForCTC,Wav2Vec2BertForSequenceClassification:()=>n.Wav2Vec2BertForSequenceClassification,Wav2Vec2BertModel:()=>n.Wav2Vec2BertModel,Wav2Vec2BertPreTrainedModel:()=>n.Wav2Vec2BertPreTrainedModel,Wav2Vec2CTCTokenizer:()=>u.Wav2Vec2CTCTokenizer,Wav2Vec2FeatureExtractor:()=>v.Wav2Vec2FeatureExtractor,Wav2Vec2ForAudioFrameClassification:()=>n.Wav2Vec2ForAudioFrameClassification,Wav2Vec2ForCTC:()=>n.Wav2Vec2ForCTC,Wav2Vec2ForSequenceClassification:()=>n.Wav2Vec2ForSequenceClassification,Wav2Vec2Model:()=>n.Wav2Vec2Model,Wav2Vec2PreTrainedModel:()=>n.Wav2Vec2PreTrainedModel,Wav2Vec2Processor:()=>L.Wav2Vec2Processor,Wav2Vec2ProcessorWithLM:()=>L.Wav2Vec2ProcessorWithLM,WavLMForAudioFrameClassification:()=>n.WavLMForAudioFrameClassification,WavLMForCTC:()=>n.WavLMForCTC,WavLMForSequenceClassification:()=>n.WavLMForSequenceClassification,WavLMForXVector:()=>n.WavLMForXVector,WavLMModel:()=>n.WavLMModel,WavLMPreTrainedModel:()=>n.WavLMPreTrainedModel,WeSpeakerFeatureExtractor:()=>v.WeSpeakerFeatureExtractor,WeSpeakerResNetModel:()=>n.WeSpeakerResNetModel,WeSpeakerResNetPreTrainedModel:()=>n.WeSpeakerResNetPreTrainedModel,WhisperFeatureExtractor:()=>v.WhisperFeatureExtractor,WhisperForConditionalGeneration:()=>n.WhisperForConditionalGeneration,WhisperModel:()=>n.WhisperModel,WhisperPreTrainedModel:()=>n.WhisperPreTrainedModel,WhisperProcessor:()=>L.WhisperProcessor,WhisperTextStreamer:()=>U.WhisperTextStreamer,WhisperTimeStampLogitsProcessor:()=>k.WhisperTimeStampLogitsProcessor,WhisperTokenizer:()=>u.WhisperTokenizer,XLMForQuestionAnswering:()=>n.XLMForQuestionAnswering,XLMForSequenceClassification:()=>n.XLMForSequenceClassification,XLMForTokenClassification:()=>n.XLMForTokenClassification,XLMModel:()=>n.XLMModel,XLMPreTrainedModel:()=>n.XLMPreTrainedModel,XLMRobertaForMaskedLM:()=>n.XLMRobertaForMaskedLM,XLMRobertaForQuestionAnswering:()=>n.XLMRobertaForQuestionAnswering,XLMRobertaForSequenceClassification:()=>n.XLMRobertaForSequenceClassification,XLMRobertaForTokenClassification:()=>n.XLMRobertaForTokenClassification,XLMRobertaModel:()=>n.XLMRobertaModel,XLMRobertaPreTrainedModel:()=>n.XLMRobertaPreTrainedModel,XLMRobertaTokenizer:()=>u.XLMRobertaTokenizer,XLMTokenizer:()=>u.XLMTokenizer,XLMWithLMHeadModel:()=>n.XLMWithLMHeadModel,XVectorOutput:()=>n.XVectorOutput,YolosFeatureExtractor:()=>F.YolosFeatureExtractor,YolosForObjectDetection:()=>n.YolosForObjectDetection,YolosImageProcessor:()=>F.YolosImageProcessor,YolosModel:()=>n.YolosModel,YolosObjectDetectionOutput:()=>n.YolosObjectDetectionOutput,YolosPreTrainedModel:()=>n.YolosPreTrainedModel,ZeroShotAudioClassificationPipeline:()=>o.ZeroShotAudioClassificationPipeline,ZeroShotClassificationPipeline:()=>o.ZeroShotClassificationPipeline,ZeroShotImageClassificationPipeline:()=>o.ZeroShotImageClassificationPipeline,ZeroShotObjectDetectionPipeline:()=>o.ZeroShotObjectDetectionPipeline,bankers_round:()=>B.bankers_round,cat:()=>E.cat,cos_sim:()=>B.cos_sim,dot:()=>B.dot,dynamic_time_warping:()=>B.dynamic_time_warping,env:()=>a.env,full:()=>E.full,full_like:()=>E.full_like,getKeyValueShapes:()=>m.getKeyValueShapes,hamming:()=>b.hamming,hanning:()=>b.hanning,interpolate:()=>E.interpolate,interpolate_4d:()=>E.interpolate_4d,interpolate_data:()=>B.interpolate_data,is_chinese_char:()=>u.is_chinese_char,layer_norm:()=>E.layer_norm,load_image:()=>C.load_image,load_video:()=>w.load_video,log_softmax:()=>B.log_softmax,magnitude:()=>B.magnitude,matmul:()=>E.matmul,max:()=>B.max,mean:()=>E.mean,mean_pooling:()=>E.mean_pooling,medianFilter:()=>B.medianFilter,mel_filter_bank:()=>b.mel_filter_bank,min:()=>B.min,ones:()=>E.ones,ones_like:()=>E.ones_like,permute:()=>E.permute,permute_data:()=>B.permute_data,pipeline:()=>o.pipeline,quantize_embeddings:()=>E.quantize_embeddings,rand:()=>E.rand,read_audio:()=>b.read_audio,rfft:()=>E.rfft,round:()=>B.round,slice:()=>E.slice,softmax:()=>B.softmax,spectrogram:()=>b.spectrogram,stack:()=>E.stack,std_mean:()=>E.std_mean,topk:()=>E.topk,window_function:()=>b.window_function,zeros:()=>E.zeros,zeros_like:()=>E.zeros_like});var a=zt("./src/env.js"),o=zt("./src/pipelines.js"),n=zt("./src/models.js"),u=zt("./src/tokenizers.js"),m=zt("./src/configs.js"),b=zt("./src/utils/audio.js"),C=zt("./src/utils/image.js"),w=zt("./src/utils/video.js"),E=zt("./src/utils/tensor.js"),B=zt("./src/utils/maths.js"),D=zt("./src/base/feature_extraction_utils.js"),v=zt("./src/models/feature_extractors.js"),x=zt("./src/models/auto/feature_extraction_auto.js"),S=zt("./src/base/image_processors_utils.js"),F=zt("./src/models/image_processors.js"),j=zt("./src/models/auto/image_processing_auto.js"),J=zt("./src/base/processing_utils.js"),L=zt("./src/models/processors.js"),N=zt("./src/models/auto/processing_auto.js"),U=zt("./src/generation/streamers.js"),f=zt("./src/generation/stopping_criteria.js"),k=zt("./src/generation/logits_process.js")})();Q.ASTFeatureExtractor;Q.ASTForAudioClassification;Q.ASTModel;Q.ASTPreTrainedModel;Q.AlbertForMaskedLM;Q.AlbertForQuestionAnswering;Q.AlbertForSequenceClassification;Q.AlbertModel;Q.AlbertPreTrainedModel;Q.AlbertTokenizer;Q.AudioClassificationPipeline;Q.AutoConfig;Q.AutoFeatureExtractor;Q.AutoImageProcessor;var QI=Q.AutoModel;Q.AutoModelForAudioClassification;Q.AutoModelForAudioFrameClassification;Q.AutoModelForAudioTextToText;Q.AutoModelForCTC;var FI=Q.AutoModelForCausalLM;Q.AutoModelForDepthEstimation;Q.AutoModelForDocumentQuestionAnswering;Q.AutoModelForImageClassification;Q.AutoModelForImageFeatureExtraction;Q.AutoModelForImageMatting;Q.AutoModelForImageSegmentation;Q.AutoModelForImageTextToText;Q.AutoModelForImageToImage;Q.AutoModelForMaskGeneration;Q.AutoModelForMaskedLM;Q.AutoModelForNormalEstimation;Q.AutoModelForObjectDetection;Q.AutoModelForPoseEstimation;Q.AutoModelForQuestionAnswering;Q.AutoModelForSemanticSegmentation;Q.AutoModelForSeq2SeqLM;Q.AutoModelForSequenceClassification;Q.AutoModelForSpeechSeq2Seq;Q.AutoModelForTextToSpectrogram;Q.AutoModelForTextToWaveform;Q.AutoModelForTokenClassification;Q.AutoModelForUniversalSegmentation;Q.AutoModelForVision2Seq;Q.AutoModelForXVector;Q.AutoModelForZeroShotObjectDetection;Q.AutoProcessor;var DC=Q.AutoTokenizer;Q.AutomaticSpeechRecognitionPipeline;Q.BackgroundRemovalPipeline;Q.BartForConditionalGeneration;Q.BartForSequenceClassification;Q.BartModel;Q.BartPretrainedModel;Q.BartTokenizer;Q.BaseModelOutput;Q.BaseStreamer;Q.BeitFeatureExtractor;Q.BeitForImageClassification;Q.BeitModel;Q.BeitPreTrainedModel;Q.BertForMaskedLM;Q.BertForQuestionAnswering;Q.BertForSequenceClassification;Q.BertForTokenClassification;Q.BertModel;Q.BertPreTrainedModel;Q.BertTokenizer;Q.BitImageProcessor;Q.BlenderbotForConditionalGeneration;Q.BlenderbotModel;Q.BlenderbotPreTrainedModel;Q.BlenderbotSmallForConditionalGeneration;Q.BlenderbotSmallModel;Q.BlenderbotSmallPreTrainedModel;Q.BlenderbotSmallTokenizer;Q.BlenderbotTokenizer;Q.BloomForCausalLM;Q.BloomModel;Q.BloomPreTrainedModel;Q.BloomTokenizer;Q.CLIPFeatureExtractor;Q.CLIPImageProcessor;Q.CLIPModel;Q.CLIPPreTrainedModel;Q.CLIPSegForImageSegmentation;Q.CLIPSegModel;Q.CLIPSegPreTrainedModel;Q.CLIPTextModel;Q.CLIPTextModelWithProjection;Q.CLIPTokenizer;Q.CLIPVisionModel;Q.CLIPVisionModelWithProjection;Q.CamembertForMaskedLM;Q.CamembertForQuestionAnswering;Q.CamembertForSequenceClassification;Q.CamembertForTokenClassification;Q.CamembertModel;Q.CamembertPreTrainedModel;Q.CamembertTokenizer;Q.CausalLMOutput;Q.CausalLMOutputWithPast;Q.ChineseCLIPFeatureExtractor;Q.ChineseCLIPModel;Q.ChineseCLIPPreTrainedModel;Q.ClapAudioModelWithProjection;Q.ClapFeatureExtractor;Q.ClapModel;Q.ClapPreTrainedModel;Q.ClapTextModelWithProjection;Q.ClassifierFreeGuidanceLogitsProcessor;Q.CodeGenForCausalLM;Q.CodeGenModel;Q.CodeGenPreTrainedModel;Q.CodeGenTokenizer;Q.CodeLlamaTokenizer;Q.CohereForCausalLM;Q.CohereModel;Q.CoherePreTrainedModel;Q.CohereTokenizer;Q.ConvBertForMaskedLM;Q.ConvBertForQuestionAnswering;Q.ConvBertForSequenceClassification;Q.ConvBertForTokenClassification;Q.ConvBertModel;Q.ConvBertPreTrainedModel;Q.ConvBertTokenizer;Q.ConvNextFeatureExtractor;Q.ConvNextForImageClassification;Q.ConvNextImageProcessor;Q.ConvNextModel;Q.ConvNextPreTrainedModel;Q.ConvNextV2ForImageClassification;Q.ConvNextV2Model;Q.ConvNextV2PreTrainedModel;Q.DFineForObjectDetection;Q.DFineModel;Q.DFinePreTrainedModel;Q.DPTFeatureExtractor;Q.DPTForDepthEstimation;Q.DPTImageProcessor;Q.DPTModel;Q.DPTPreTrainedModel;Q.DacDecoderModel;Q.DacDecoderOutput;Q.DacEncoderModel;Q.DacEncoderOutput;Q.DacFeatureExtractor;Q.DacModel;Q.DacPreTrainedModel;Q.DataTypeMap;Q.DebertaForMaskedLM;Q.DebertaForQuestionAnswering;Q.DebertaForSequenceClassification;Q.DebertaForTokenClassification;Q.DebertaModel;Q.DebertaPreTrainedModel;Q.DebertaTokenizer;Q.DebertaV2ForMaskedLM;Q.DebertaV2ForQuestionAnswering;Q.DebertaV2ForSequenceClassification;Q.DebertaV2ForTokenClassification;Q.DebertaV2Model;Q.DebertaV2PreTrainedModel;Q.DebertaV2Tokenizer;Q.DecisionTransformerModel;Q.DecisionTransformerPreTrainedModel;Q.DeiTFeatureExtractor;Q.DeiTForImageClassification;Q.DeiTImageProcessor;Q.DeiTModel;Q.DeiTPreTrainedModel;Q.DepthAnythingForDepthEstimation;Q.DepthAnythingPreTrainedModel;Q.DepthEstimationPipeline;Q.DepthProForDepthEstimation;Q.DepthProPreTrainedModel;Q.DetrFeatureExtractor;Q.DetrForObjectDetection;Q.DetrForSegmentation;Q.DetrImageProcessor;Q.DetrModel;Q.DetrObjectDetectionOutput;Q.DetrPreTrainedModel;Q.DetrSegmentationOutput;Q.Dinov2ForImageClassification;Q.Dinov2Model;Q.Dinov2PreTrainedModel;Q.Dinov2WithRegistersForImageClassification;Q.Dinov2WithRegistersModel;Q.Dinov2WithRegistersPreTrainedModel;Q.DistilBertForMaskedLM;Q.DistilBertForQuestionAnswering;Q.DistilBertForSequenceClassification;Q.DistilBertForTokenClassification;Q.DistilBertModel;Q.DistilBertPreTrainedModel;Q.DistilBertTokenizer;Q.DocumentQuestionAnsweringPipeline;Q.DonutFeatureExtractor;Q.DonutImageProcessor;Q.DonutSwinModel;Q.DonutSwinPreTrainedModel;Q.EfficientNetForImageClassification;Q.EfficientNetImageProcessor;Q.EfficientNetModel;Q.EfficientNetPreTrainedModel;Q.ElectraForMaskedLM;Q.ElectraForQuestionAnswering;Q.ElectraForSequenceClassification;Q.ElectraForTokenClassification;Q.ElectraModel;Q.ElectraPreTrainedModel;Q.ElectraTokenizer;Q.EncodecFeatureExtractor;Q.EosTokenCriteria;Q.EsmForMaskedLM;Q.EsmForSequenceClassification;Q.EsmForTokenClassification;Q.EsmModel;Q.EsmPreTrainedModel;Q.EsmTokenizer;Q.ExaoneForCausalLM;Q.ExaoneModel;Q.ExaonePreTrainedModel;Q.FFT;Q.FalconForCausalLM;Q.FalconModel;Q.FalconPreTrainedModel;Q.FalconTokenizer;Q.FastViTForImageClassification;Q.FastViTModel;Q.FastViTPreTrainedModel;Q.FeatureExtractionPipeline;Q.FeatureExtractor;Q.FillMaskPipeline;Q.Florence2ForConditionalGeneration;Q.Florence2PreTrainedModel;Q.Florence2Processor;Q.ForcedBOSTokenLogitsProcessor;Q.ForcedEOSTokenLogitsProcessor;Q.GLPNFeatureExtractor;Q.GLPNForDepthEstimation;Q.GLPNModel;Q.GLPNPreTrainedModel;Q.GPT2LMHeadModel;Q.GPT2Model;Q.GPT2PreTrainedModel;Q.GPT2Tokenizer;Q.GPTBigCodeForCausalLM;Q.GPTBigCodeModel;Q.GPTBigCodePreTrainedModel;Q.GPTJForCausalLM;Q.GPTJModel;Q.GPTJPreTrainedModel;Q.GPTNeoForCausalLM;Q.GPTNeoModel;Q.GPTNeoPreTrainedModel;Q.GPTNeoXForCausalLM;Q.GPTNeoXModel;Q.GPTNeoXPreTrainedModel;Q.GPTNeoXTokenizer;Q.Gemma2ForCausalLM;Q.Gemma2Model;Q.Gemma2PreTrainedModel;Q.Gemma3ForCausalLM;Q.Gemma3Model;Q.Gemma3PreTrainedModel;Q.GemmaForCausalLM;Q.GemmaModel;Q.GemmaPreTrainedModel;Q.GemmaTokenizer;Q.GlmForCausalLM;Q.GlmModel;Q.GlmPreTrainedModel;Q.GraniteForCausalLM;Q.GraniteModel;Q.GranitePreTrainedModel;Q.Grok1Tokenizer;Q.GroundingDinoForObjectDetection;Q.GroundingDinoImageProcessor;Q.GroundingDinoPreTrainedModel;Q.GroundingDinoProcessor;Q.GroupViTModel;Q.GroupViTPreTrainedModel;Q.HeliumForCausalLM;Q.HeliumModel;Q.HeliumPreTrainedModel;Q.HerbertTokenizer;Q.HieraForImageClassification;Q.HieraModel;Q.HieraPreTrainedModel;Q.HubertForCTC;Q.HubertForSequenceClassification;Q.HubertModel;Q.HubertPreTrainedModel;Q.IJepaForImageClassification;Q.IJepaModel;Q.IJepaPreTrainedModel;Q.Idefics3ForConditionalGeneration;Q.Idefics3ImageProcessor;Q.Idefics3PreTrainedModel;Q.Idefics3Processor;Q.ImageClassificationPipeline;Q.ImageFeatureExtractionPipeline;Q.ImageFeatureExtractor;Q.ImageMattingOutput;Q.ImageProcessor;Q.ImageSegmentationPipeline;Q.ImageToImagePipeline;Q.ImageToTextPipeline;var SI=Q.InterruptableStoppingCriteria;Q.JAISLMHeadModel;Q.JAISModel;Q.JAISPreTrainedModel;Q.JinaCLIPImageProcessor;Q.JinaCLIPModel;Q.JinaCLIPPreTrainedModel;Q.JinaCLIPProcessor;Q.JinaCLIPTextModel;Q.JinaCLIPVisionModel;Q.LiteWhisperForConditionalGeneration;Q.LlamaForCausalLM;Q.LlamaModel;Q.LlamaPreTrainedModel;Q.LlamaTokenizer;Q.LlavaForConditionalGeneration;Q.LlavaOnevisionForConditionalGeneration;Q.LlavaOnevisionImageProcessor;Q.LlavaPreTrainedModel;Q.LogitsProcessor;Q.LogitsProcessorList;Q.LogitsWarper;Q.LongT5ForConditionalGeneration;Q.LongT5Model;Q.LongT5PreTrainedModel;Q.M2M100ForConditionalGeneration;Q.M2M100Model;Q.M2M100PreTrainedModel;Q.M2M100Tokenizer;Q.MBart50Tokenizer;Q.MBartForCausalLM;Q.MBartForConditionalGeneration;Q.MBartForSequenceClassification;Q.MBartModel;Q.MBartPreTrainedModel;Q.MBartTokenizer;Q.MPNetForMaskedLM;Q.MPNetForQuestionAnswering;Q.MPNetForSequenceClassification;Q.MPNetForTokenClassification;Q.MPNetModel;Q.MPNetPreTrainedModel;Q.MPNetTokenizer;Q.MT5ForConditionalGeneration;Q.MT5Model;Q.MT5PreTrainedModel;Q.MarianMTModel;Q.MarianModel;Q.MarianPreTrainedModel;Q.MarianTokenizer;Q.Mask2FormerImageProcessor;Q.MaskFormerFeatureExtractor;Q.MaskFormerForInstanceSegmentation;Q.MaskFormerImageProcessor;Q.MaskFormerModel;Q.MaskFormerPreTrainedModel;Q.MaskedLMOutput;Q.MaxLengthCriteria;Q.Metric3DForDepthEstimation;Q.Metric3DPreTrainedModel;Q.Metric3Dv2ForDepthEstimation;Q.Metric3Dv2PreTrainedModel;Q.MgpstrForSceneTextRecognition;Q.MgpstrModelOutput;Q.MgpstrPreTrainedModel;Q.MgpstrProcessor;Q.MgpstrTokenizer;Q.MimiDecoderModel;Q.MimiDecoderOutput;Q.MimiEncoderModel;Q.MimiEncoderOutput;Q.MimiModel;Q.MimiPreTrainedModel;Q.MinLengthLogitsProcessor;Q.MinNewTokensLengthLogitsProcessor;Q.MistralForCausalLM;Q.MistralModel;Q.MistralPreTrainedModel;Q.MobileBertForMaskedLM;Q.MobileBertForQuestionAnswering;Q.MobileBertForSequenceClassification;Q.MobileBertModel;Q.MobileBertPreTrainedModel;Q.MobileBertTokenizer;Q.MobileLLMForCausalLM;Q.MobileLLMModel;Q.MobileLLMPreTrainedModel;Q.MobileNetV1FeatureExtractor;Q.MobileNetV1ForImageClassification;Q.MobileNetV1ForSemanticSegmentation;Q.MobileNetV1ImageProcessor;Q.MobileNetV1Model;Q.MobileNetV1PreTrainedModel;Q.MobileNetV2FeatureExtractor;Q.MobileNetV2ForImageClassification;Q.MobileNetV2ForSemanticSegmentation;Q.MobileNetV2ImageProcessor;Q.MobileNetV2Model;Q.MobileNetV2PreTrainedModel;Q.MobileNetV3FeatureExtractor;Q.MobileNetV3ForImageClassification;Q.MobileNetV3ForSemanticSegmentation;Q.MobileNetV3ImageProcessor;Q.MobileNetV3Model;Q.MobileNetV3PreTrainedModel;Q.MobileNetV4FeatureExtractor;Q.MobileNetV4ForImageClassification;Q.MobileNetV4ForSemanticSegmentation;Q.MobileNetV4ImageProcessor;Q.MobileNetV4Model;Q.MobileNetV4PreTrainedModel;Q.MobileViTFeatureExtractor;Q.MobileViTForImageClassification;Q.MobileViTImageProcessor;Q.MobileViTModel;Q.MobileViTPreTrainedModel;Q.MobileViTV2ForImageClassification;Q.MobileViTV2Model;Q.MobileViTV2PreTrainedModel;Q.ModelOutput;Q.ModernBertForMaskedLM;Q.ModernBertForSequenceClassification;Q.ModernBertForTokenClassification;Q.ModernBertModel;Q.ModernBertPreTrainedModel;Q.Moondream1ForConditionalGeneration;Q.MoonshineFeatureExtractor;Q.MoonshineForConditionalGeneration;Q.MoonshineModel;Q.MoonshinePreTrainedModel;Q.MoonshineProcessor;Q.MptForCausalLM;Q.MptModel;Q.MptPreTrainedModel;Q.MultiModalityCausalLM;Q.MultiModalityPreTrainedModel;Q.MusicgenForCausalLM;Q.MusicgenForConditionalGeneration;Q.MusicgenModel;Q.MusicgenPreTrainedModel;Q.NllbTokenizer;Q.NoBadWordsLogitsProcessor;Q.NoRepeatNGramLogitsProcessor;Q.NomicBertModel;Q.NomicBertPreTrainedModel;Q.NougatImageProcessor;Q.NougatTokenizer;Q.OPTForCausalLM;Q.OPTModel;Q.OPTPreTrainedModel;Q.ObjectDetectionPipeline;Q.Olmo2ForCausalLM;Q.Olmo2Model;Q.Olmo2PreTrainedModel;Q.OlmoForCausalLM;Q.OlmoModel;Q.OlmoPreTrainedModel;Q.OpenELMForCausalLM;Q.OpenELMModel;Q.OpenELMPreTrainedModel;Q.OwlViTFeatureExtractor;Q.OwlViTForObjectDetection;Q.OwlViTImageProcessor;Q.OwlViTModel;Q.OwlViTPreTrainedModel;Q.OwlViTProcessor;Q.Owlv2ForObjectDetection;Q.Owlv2ImageProcessor;Q.Owlv2Model;Q.Owlv2PreTrainedModel;Q.PaliGemmaForConditionalGeneration;Q.PaliGemmaPreTrainedModel;Q.PaliGemmaProcessor;Q.PatchTSMixerForPrediction;Q.PatchTSMixerModel;Q.PatchTSMixerPreTrainedModel;Q.PatchTSTForPrediction;Q.PatchTSTModel;Q.PatchTSTPreTrainedModel;Q.Phi3ForCausalLM;Q.Phi3Model;Q.Phi3PreTrainedModel;Q.Phi3VForCausalLM;Q.Phi3VImageProcessor;Q.Phi3VPreTrainedModel;Q.Phi3VProcessor;Q.PhiForCausalLM;Q.PhiModel;Q.PhiPreTrainedModel;Q.Pipeline;Q.PreTrainedModel;Q.PreTrainedTokenizer;Q.PretrainedConfig;Q.PretrainedMixin;Q.Processor;Q.PvtForImageClassification;Q.PvtImageProcessor;Q.PvtModel;Q.PvtPreTrainedModel;Q.PyAnnoteFeatureExtractor;Q.PyAnnoteForAudioFrameClassification;Q.PyAnnoteModel;Q.PyAnnotePreTrainedModel;Q.PyAnnoteProcessor;Q.QuestionAnsweringModelOutput;Q.QuestionAnsweringPipeline;Q.Qwen2ForCausalLM;Q.Qwen2Model;Q.Qwen2PreTrainedModel;Q.Qwen2Tokenizer;Q.Qwen2VLForConditionalGeneration;Q.Qwen2VLImageProcessor;Q.Qwen2VLPreTrainedModel;Q.Qwen2VLProcessor;Q.Qwen3ForCausalLM;Q.Qwen3Model;Q.Qwen3PreTrainedModel;Q.RFDetrForObjectDetection;Q.RFDetrModel;Q.RFDetrObjectDetectionOutput;Q.RFDetrPreTrainedModel;Q.RTDetrForObjectDetection;Q.RTDetrImageProcessor;Q.RTDetrModel;Q.RTDetrObjectDetectionOutput;Q.RTDetrPreTrainedModel;Q.RTDetrV2ForObjectDetection;Q.RTDetrV2Model;Q.RTDetrV2ObjectDetectionOutput;Q.RTDetrV2PreTrainedModel;var OI=Q.RawAudio;Q.RawImage;Q.RawVideo;Q.RawVideoFrame;Q.RepetitionPenaltyLogitsProcessor;Q.ResNetForImageClassification;Q.ResNetModel;Q.ResNetPreTrainedModel;Q.RoFormerForMaskedLM;Q.RoFormerForQuestionAnswering;Q.RoFormerForSequenceClassification;Q.RoFormerForTokenClassification;Q.RoFormerModel;Q.RoFormerPreTrainedModel;Q.RoFormerTokenizer;Q.RobertaForMaskedLM;Q.RobertaForQuestionAnswering;Q.RobertaForSequenceClassification;Q.RobertaForTokenClassification;Q.RobertaModel;Q.RobertaPreTrainedModel;Q.RobertaTokenizer;Q.SamImageProcessor;Q.SamImageSegmentationOutput;Q.SamModel;Q.SamPreTrainedModel;Q.SamProcessor;Q.SapiensForDepthEstimation;Q.SapiensForNormalEstimation;Q.SapiensForSemanticSegmentation;Q.SapiensPreTrainedModel;Q.SeamlessM4TFeatureExtractor;Q.SegformerFeatureExtractor;Q.SegformerForImageClassification;Q.SegformerForSemanticSegmentation;Q.SegformerImageProcessor;Q.SegformerModel;Q.SegformerPreTrainedModel;Q.Seq2SeqLMOutput;Q.SequenceClassifierOutput;Q.SiglipImageProcessor;Q.SiglipModel;Q.SiglipPreTrainedModel;Q.SiglipTextModel;Q.SiglipTokenizer;Q.SiglipVisionModel;Q.SmolVLMForConditionalGeneration;Q.SmolVLMImageProcessor;Q.SmolVLMProcessor;Q.SnacDecoderModel;Q.SnacEncoderModel;Q.SnacFeatureExtractor;Q.SnacModel;Q.SnacPreTrainedModel;Q.SpeechT5FeatureExtractor;Q.SpeechT5ForSpeechToText;Q.SpeechT5ForTextToSpeech;Q.SpeechT5HifiGan;Q.SpeechT5Model;Q.SpeechT5PreTrainedModel;Q.SpeechT5Processor;Q.SpeechT5Tokenizer;Q.SqueezeBertForMaskedLM;Q.SqueezeBertForQuestionAnswering;Q.SqueezeBertForSequenceClassification;Q.SqueezeBertModel;Q.SqueezeBertPreTrainedModel;Q.SqueezeBertTokenizer;Q.StableLmForCausalLM;Q.StableLmModel;Q.StableLmPreTrainedModel;Q.Starcoder2ForCausalLM;Q.Starcoder2Model;Q.Starcoder2PreTrainedModel;Q.StoppingCriteria;Q.StoppingCriteriaList;var zI=Q.StyleTextToSpeech2Model;Q.StyleTextToSpeech2PreTrainedModel;Q.SummarizationPipeline;Q.SuppressTokensAtBeginLogitsProcessor;Q.Swin2SRForImageSuperResolution;Q.Swin2SRImageProcessor;Q.Swin2SRModel;Q.Swin2SRPreTrainedModel;Q.SwinForImageClassification;Q.SwinForSemanticSegmentation;Q.SwinModel;Q.SwinPreTrainedModel;Q.T5ForConditionalGeneration;Q.T5Model;Q.T5PreTrainedModel;Q.T5Tokenizer;Q.TableTransformerForObjectDetection;Q.TableTransformerModel;Q.TableTransformerObjectDetectionOutput;Q.TableTransformerPreTrainedModel;Q.TemperatureLogitsWarper;var t0=Q.Tensor;Q.Text2TextGenerationPipeline;Q.TextClassificationPipeline;Q.TextGenerationPipeline;var NI=Q.TextStreamer;Q.TextToAudioPipeline;Q.TokenClassificationPipeline;Q.TokenClassifierOutput;Q.TokenizerModel;Q.TopKLogitsWarper;Q.TopPLogitsWarper;Q.TrOCRForCausalLM;Q.TrOCRPreTrainedModel;Q.TranslationPipeline;Q.UltravoxModel;Q.UltravoxPreTrainedModel;Q.UltravoxProcessor;Q.UniSpeechForCTC;Q.UniSpeechForSequenceClassification;Q.UniSpeechModel;Q.UniSpeechPreTrainedModel;Q.UniSpeechSatForAudioFrameClassification;Q.UniSpeechSatForCTC;Q.UniSpeechSatForSequenceClassification;Q.UniSpeechSatModel;Q.UniSpeechSatPreTrainedModel;Q.VLChatProcessor;Q.VLMImageProcessor;Q.ViTFeatureExtractor;Q.ViTForImageClassification;Q.ViTImageProcessor;Q.ViTMAEModel;Q.ViTMAEPreTrainedModel;Q.ViTMSNForImageClassification;Q.ViTMSNModel;Q.ViTMSNPreTrainedModel;Q.ViTModel;Q.ViTPreTrainedModel;Q.VisionEncoderDecoderModel;Q.VitMatteForImageMatting;Q.VitMatteImageProcessor;Q.VitMattePreTrainedModel;Q.VitPoseForPoseEstimation;Q.VitPoseImageProcessor;Q.VitPosePreTrainedModel;Q.VitsModel;Q.VitsModelOutput;Q.VitsPreTrainedModel;Q.VitsTokenizer;Q.Wav2Vec2BertForCTC;Q.Wav2Vec2BertForSequenceClassification;Q.Wav2Vec2BertModel;Q.Wav2Vec2BertPreTrainedModel;Q.Wav2Vec2CTCTokenizer;Q.Wav2Vec2FeatureExtractor;Q.Wav2Vec2ForAudioFrameClassification;Q.Wav2Vec2ForCTC;Q.Wav2Vec2ForSequenceClassification;Q.Wav2Vec2Model;Q.Wav2Vec2PreTrainedModel;Q.Wav2Vec2Processor;Q.Wav2Vec2ProcessorWithLM;Q.WavLMForAudioFrameClassification;Q.WavLMForCTC;Q.WavLMForSequenceClassification;Q.WavLMForXVector;Q.WavLMModel;Q.WavLMPreTrainedModel;Q.WeSpeakerFeatureExtractor;Q.WeSpeakerResNetModel;Q.WeSpeakerResNetPreTrainedModel;Q.WhisperFeatureExtractor;Q.WhisperForConditionalGeneration;Q.WhisperModel;Q.WhisperPreTrainedModel;Q.WhisperProcessor;Q.WhisperTextStreamer;Q.WhisperTimeStampLogitsProcessor;Q.WhisperTokenizer;Q.XLMForQuestionAnswering;Q.XLMForSequenceClassification;Q.XLMForTokenClassification;Q.XLMModel;Q.XLMPreTrainedModel;Q.XLMRobertaForMaskedLM;Q.XLMRobertaForQuestionAnswering;Q.XLMRobertaForSequenceClassification;Q.XLMRobertaForTokenClassification;Q.XLMRobertaModel;Q.XLMRobertaPreTrainedModel;Q.XLMRobertaTokenizer;Q.XLMTokenizer;Q.XLMWithLMHeadModel;Q.XVectorOutput;Q.YolosFeatureExtractor;Q.YolosForObjectDetection;Q.YolosImageProcessor;Q.YolosModel;Q.YolosObjectDetectionOutput;Q.YolosPreTrainedModel;Q.ZeroShotAudioClassificationPipeline;Q.ZeroShotClassificationPipeline;Q.ZeroShotImageClassificationPipeline;Q.ZeroShotObjectDetectionPipeline;Q.bankers_round;Q.cat;Q.cos_sim;Q.dot;Q.dynamic_time_warping;Q.env;Q.full;Q.full_like;Q.getKeyValueShapes;Q.hamming;Q.hanning;Q.interpolate;Q.interpolate_4d;Q.interpolate_data;Q.is_chinese_char;Q.layer_norm;Q.load_image;Q.load_video;Q.log_softmax;Q.magnitude;Q.matmul;Q.max;Q.mean;Q.mean_pooling;Q.medianFilter;Q.mel_filter_bank;Q.min;Q.ones;Q.ones_like;Q.permute;Q.permute_data;var LI=Q.pipeline;Q.quantize_embeddings;Q.rand;Q.read_audio;Q.rfft;Q.round;Q.slice;Q.softmax;Q.spectrogram;Q.stack;Q.std_mean;Q.topk;Q.window_function;Q.zeros;Q.zeros_like;var ae=ae!==void 0?ae:{};ae.expectedDataFileDownloads||(ae.expectedDataFileDownloads=0);var _I=typeof importScripts=="function",_2=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string",Qp=typeof atob=="function"?atob:function(a){var o,n,u,m,b,C,w="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",E="",B=0;a=a.replace(/[^A-Za-z0-9\+\/\=]/g,"");do o=w.indexOf(a.charAt(B++))<<2|(m=w.indexOf(a.charAt(B++)))>>4,n=(15&m)<<4|(b=w.indexOf(a.charAt(B++)))>>2,u=(3&b)<<6|(C=w.indexOf(a.charAt(B++))),E+=String.fromCharCode(o),b!==64&&(E+=String.fromCharCode(n)),C!==64&&(E+=String.fromCharCode(u));while(B<a.length);return E};_2&&(process.argv.length>1&&(Yc=process.argv[1].replace(/\\/g,"/")),process.argv.slice(2),process.on("uncaughtException",function(a){if(!(a instanceof RI))throw a}),process.on("unhandledRejection",function(a){throw a}),ae.inspect=function(){return"[Emscripten Module object]"}),ae.expectedDataFileDownloads++,function(){if(ae.ENVIRONMENT_IS_PTHREAD)return;const a="/usr/share/espeak-ng-data",o=a+"/lang",n=a+"/voices";(function(u){var m=null,b=null;function C(){function w(x,S){if(!x)throw S+new Error().stack}function E(x,S,F){this.start=x,this.end=S,this.audio=F}ae.FS_createPath("/","usr",!0,!0),ae.FS_createPath("/usr","share",!0,!0),ae.FS_createPath("/usr/share","espeak-ng-data",!0,!0),ae.FS_createPath(a,"lang",!0,!0),ae.FS_createPath(o,"aav",!0,!0),ae.FS_createPath(o,"art",!0,!0),ae.FS_createPath(o,"azc",!0,!0),ae.FS_createPath(o,"bat",!0,!0),ae.FS_createPath(o,"bnt",!0,!0),ae.FS_createPath(o,"ccs",!0,!0),ae.FS_createPath(o,"cel",!0,!0),ae.FS_createPath(o,"cus",!0,!0),ae.FS_createPath(o,"dra",!0,!0),ae.FS_createPath(o,"esx",!0,!0),ae.FS_createPath(o,"gmq",!0,!0),ae.FS_createPath(o,"gmw",!0,!0),ae.FS_createPath(o,"grk",!0,!0),ae.FS_createPath(o,"inc",!0,!0),ae.FS_createPath(o,"ine",!0,!0),ae.FS_createPath(o,"ira",!0,!0),ae.FS_createPath(o,"iro",!0,!0),ae.FS_createPath(o,"itc",!0,!0),ae.FS_createPath(o,"jpx",!0,!0),ae.FS_createPath(o,"map",!0,!0),ae.FS_createPath(o,"miz",!0,!0),ae.FS_createPath(o,"myn",!0,!0),ae.FS_createPath(o,"poz",!0,!0),ae.FS_createPath(o,"roa",!0,!0),ae.FS_createPath(o,"sai",!0,!0),ae.FS_createPath(o,"sem",!0,!0),ae.FS_createPath(o,"sit",!0,!0),ae.FS_createPath(o,"tai",!0,!0),ae.FS_createPath(o,"trk",!0,!0),ae.FS_createPath(o,"urj",!0,!0),ae.FS_createPath(o,"zle",!0,!0),ae.FS_createPath(o,"zls",!0,!0),ae.FS_createPath(o,"zlw",!0,!0),ae.FS_createPath(a,"voices",!0,!0),ae.FS_createPath(n,"!v",!0,!0),ae.FS_createPath(n,"mb",!0,!0),E.prototype={requests:{},open:function(x,S){this.name=S,this.requests[S]=this,ae.addRunDependency("fp "+this.name)},send:function(){},onload:function(){var x=this.byteArray.subarray(this.start,this.end);this.finish(x)},finish:function(x){ae.FS_createDataFile(this.name,null,x,!0,!0,!0),ae.removeRunDependency("fp "+this.name),this.requests[this.name]=null}};for(var B=u.files,D=0;D<B.length;++D)new E(B[D].start,B[D].end,B[D].audio||0).open("GET",B[D].filename);function v(x){w(x,"Loading data file failed."),w(x.constructor.name===ArrayBuffer.name,"bad input to processPackageData");var S=new Uint8Array(x);E.prototype.byteArray=S;for(var F=u.files,j=0;j<F.length;++j)E.prototype.requests[F[j].filename].onload();ae.removeRunDependency("datafile_js/espeakng.worker.data")}ae.addRunDependency("datafile_js/espeakng.worker.data"),b?(v(b),b=null):m=v}(async()=>{const w=function(v){if(typeof _2=="boolean"&&_2){var x=Buffer.from(v,"base64");return new Uint8Array(x.buffer,x.byteOffset,x.byteLength)}try{for(var S=Qp(v),F=new Uint8Array(S.length),j=0;j<S.length;++j)F[j]=S.charCodeAt(j);return F}catch(J){throw console.error(Qp),console.error(J),new Error("Converting base64 string to bytes failed.")}}(""),E=new Blob([w]).stream().pipeThrough(new DecompressionStream("gzip")),B=[];for await(const v of E)B.push(v);const D=await new Blob(B).arrayBuffer();m?(m(D),m=null):b=D})(),ae.calledRun?C():(ae.preRun||(ae.preRun=[]),ae.preRun.push(C))})({files:[{filename:a+"/en_dict",start:0,end:167064},{filename:a+"/intonations",start:167064,end:169104},{filename:o+"/aav/vi",start:169104,end:169215},{filename:o+"/aav/vi-VN-x-central",start:169215,end:169358},{filename:o+"/aav/vi-VN-x-south",start:169358,end:169500},{filename:o+"/art/eo",start:169500,end:169541},{filename:o+"/art/ia",start:169541,end:169570},{filename:o+"/art/io",start:169570,end:169620},{filename:o+"/art/jbo",start:169620,end:169689},{filename:o+"/art/lfn",start:169689,end:169824},{filename:o+"/art/piqd",start:169824,end:169880},{filename:o+"/art/py",start:169880,end:170020},{filename:o+"/art/qdb",start:170020,end:170077},{filename:o+"/art/qya",start:170077,end:170250},{filename:o+"/art/sjn",start:170250,end:170425},{filename:o+"/azc/nci",start:170425,end:170539},{filename:o+"/bat/lt",start:170539,end:170567},{filename:o+"/bat/ltg",start:170567,end:170879},{filename:o+"/bat/lv",start:170879,end:171108},{filename:o+"/bnt/sw",start:171108,end:171149},{filename:o+"/bnt/tn",start:171149,end:171191},{filename:o+"/ccs/ka",start:171191,end:171315},{filename:o+"/cel/cy",start:171315,end:171352},{filename:o+"/cel/ga",start:171352,end:171418},{filename:o+"/cel/gd",start:171418,end:171469},{filename:o+"/cus/om",start:171469,end:171508},{filename:o+"/dra/kn",start:171508,end:171563},{filename:o+"/dra/ml",start:171563,end:171620},{filename:o+"/dra/ta",start:171620,end:171671},{filename:o+"/dra/te",start:171671,end:171741},{filename:o+"/esx/kl",start:171741,end:171771},{filename:o+"/eu",start:171771,end:171825},{filename:o+"/gmq/da",start:171825,end:171868},{filename:o+"/gmq/is",start:171868,end:171895},{filename:o+"/gmq/nb",start:171895,end:171982},{filename:o+"/gmq/sv",start:171982,end:172007},{filename:o+"/gmw/af",start:172007,end:172130},{filename:o+"/gmw/de",start:172130,end:172172},{filename:o+"/gmw/en",start:172172,end:172312},{filename:o+"/gmw/en-029",start:172312,end:172647},{filename:o+"/gmw/en-GB-scotland",start:172647,end:172942},{filename:o+"/gmw/en-GB-x-gbclan",start:172942,end:173180},{filename:o+"/gmw/en-GB-x-gbcwmd",start:173180,end:173368},{filename:o+"/gmw/en-GB-x-rp",start:173368,end:173617},{filename:o+"/gmw/en-US",start:173617,end:173874},{filename:o+"/gmw/en-US-nyc",start:173874,end:174145},{filename:o+"/gmw/lb",start:174145,end:174176},{filename:o+"/gmw/nl",start:174176,end:174199},{filename:o+"/grk/el",start:174199,end:174222},{filename:o+"/grk/grc",start:174222,end:174321},{filename:o+"/inc/as",start:174321,end:174363},{filename:o+"/inc/bn",start:174363,end:174388},{filename:o+"/inc/bpy",start:174388,end:174427},{filename:o+"/inc/gu",start:174427,end:174469},{filename:o+"/inc/hi",start:174469,end:174492},{filename:o+"/inc/kok",start:174492,end:174518},{filename:o+"/inc/mr",start:174518,end:174559},{filename:o+"/inc/ne",start:174559,end:174596},{filename:o+"/inc/or",start:174596,end:174635},{filename:o+"/inc/pa",start:174635,end:174660},{filename:o+"/inc/sd",start:174660,end:174726},{filename:o+"/inc/si",start:174726,end:174781},{filename:o+"/inc/ur",start:174781,end:174875},{filename:o+"/ine/hy",start:174875,end:174936},{filename:o+"/ine/hyw",start:174936,end:175301},{filename:o+"/ine/sq",start:175301,end:175404},{filename:o+"/ira/fa",start:175404,end:175494},{filename:o+"/ira/fa-Latn",start:175494,end:175763},{filename:o+"/ira/ku",start:175763,end:175803},{filename:o+"/iro/chr",start:175803,end:176372},{filename:o+"/itc/la",start:176372,end:176669},{filename:o+"/jpx/ja",start:176669,end:176721},{filename:o+"/ko",start:176721,end:176772},{filename:o+"/map/haw",start:176772,end:176814},{filename:o+"/miz/mto",start:176814,end:176997},{filename:o+"/myn/quc",start:176997,end:177207},{filename:o+"/poz/id",start:177207,end:177341},{filename:o+"/poz/mi",start:177341,end:177708},{filename:o+"/poz/ms",start:177708,end:178138},{filename:o+"/qu",start:178138,end:178226},{filename:o+"/roa/an",start:178226,end:178253},{filename:o+"/roa/ca",start:178253,end:178278},{filename:o+"/roa/es",start:178278,end:178341},{filename:o+"/roa/es-419",start:178341,end:178508},{filename:o+"/roa/fr",start:178508,end:178587},{filename:o+"/roa/fr-BE",start:178587,end:178671},{filename:o+"/roa/fr-CH",start:178671,end:178757},{filename:o+"/roa/ht",start:178757,end:178897},{filename:o+"/roa/it",start:178897,end:179006},{filename:o+"/roa/pap",start:179006,end:179068},{filename:o+"/roa/pt",start:179068,end:179163},{filename:o+"/roa/pt-BR",start:179163,end:179272},{filename:o+"/roa/ro",start:179272,end:179298},{filename:o+"/sai/gn",start:179298,end:179345},{filename:o+"/sem/am",start:179345,end:179386},{filename:o+"/sem/ar",start:179386,end:179436},{filename:o+"/sem/he",start:179436,end:179476},{filename:o+"/sem/mt",start:179476,end:179517},{filename:o+"/sem/ti",start:179517,end:179610},{filename:o+"/sit/cmn",start:179610,end:180296},{filename:o+"/sit/cmn-Latn-pinyin",start:180296,end:180457},{filename:o+"/sit/hak",start:180457,end:180585},{filename:o+"/sit/my",start:180585,end:180641},{filename:o+"/sit/yue",start:180641,end:180835},{filename:o+"/sit/yue-Latn-jyutping",start:180835,end:181048},{filename:o+"/tai/shn",start:181048,end:181140},{filename:o+"/tai/th",start:181140,end:181177},{filename:o+"/trk/az",start:181177,end:181222},{filename:o+"/trk/ba",start:181222,end:181247},{filename:o+"/trk/cv",start:181247,end:181287},{filename:o+"/trk/kk",start:181287,end:181327},{filename:o+"/trk/ky",start:181327,end:181370},{filename:o+"/trk/nog",start:181370,end:181409},{filename:o+"/trk/tk",start:181409,end:181434},{filename:o+"/trk/tr",start:181434,end:181459},{filename:o+"/trk/tt",start:181459,end:181482},{filename:o+"/trk/ug",start:181482,end:181506},{filename:o+"/trk/uz",start:181506,end:181545},{filename:o+"/urj/et",start:181545,end:181782},{filename:o+"/urj/fi",start:181782,end:182019},{filename:o+"/urj/hu",start:182019,end:182092},{filename:o+"/urj/smj",start:182092,end:182137},{filename:o+"/zle/be",start:182137,end:182189},{filename:o+"/zle/ru",start:182189,end:182246},{filename:o+"/zle/ru-LV",start:182246,end:182526},{filename:o+"/zle/ru-cl",start:182526,end:182617},{filename:o+"/zle/uk",start:182617,end:182714},{filename:o+"/zls/bg",start:182714,end:182825},{filename:o+"/zls/bs",start:182825,end:183055},{filename:o+"/zls/hr",start:183055,end:183317},{filename:o+"/zls/mk",start:183317,end:183345},{filename:o+"/zls/sl",start:183345,end:183388},{filename:o+"/zls/sr",start:183388,end:183638},{filename:o+"/zlw/cs",start:183638,end:183661},{filename:o+"/zlw/pl",start:183661,end:183699},{filename:o+"/zlw/sk",start:183699,end:183723},{filename:a+"/phondata",start:183723,end:734147},{filename:a+"/phonindex",start:734147,end:773403},{filename:a+"/phontab",start:773403,end:829491},{filename:n+"/!v/Alex",start:829491,end:829619},{filename:n+"/!v/Alicia",start:829619,end:830093},{filename:n+"/!v/Andrea",start:830093,end:830450},{filename:n+"/!v/Andy",start:830450,end:830770},{filename:n+"/!v/Annie",start:830770,end:831085},{filename:n+"/!v/AnxiousAndy",start:831085,end:831446},{filename:n+"/!v/Demonic",start:831446,end:835304},{filename:n+"/!v/Denis",start:835304,end:835609},{filename:n+"/!v/Diogo",start:835609,end:835988},{filename:n+"/!v/Gene",start:835988,end:836269},{filename:n+"/!v/Gene2",start:836269,end:836552},{filename:n+"/!v/Henrique",start:836552,end:836933},{filename:n+"/!v/Hugo",start:836933,end:837311},{filename:n+"/!v/Jacky",start:837311,end:837578},{filename:n+"/!v/Lee",start:837578,end:837916},{filename:n+"/!v/Marco",start:837916,end:838383},{filename:n+"/!v/Mario",start:838383,end:838653},{filename:n+"/!v/Michael",start:838653,end:838923},{filename:n+"/!v/Mike",start:838923,end:839035},{filename:n+"/!v/Mr serious",start:839035,end:842228},{filename:n+"/!v/Nguyen",start:842228,end:842508},{filename:n+"/!v/Reed",start:842508,end:842710},{filename:n+"/!v/RicishayMax",start:842710,end:842943},{filename:n+"/!v/RicishayMax2",start:842943,end:843378},{filename:n+"/!v/RicishayMax3",start:843378,end:843813},{filename:n+"/!v/Storm",start:843813,end:844233},{filename:n+"/!v/Tweaky",start:844233,end:847422},{filename:n+"/!v/UniRobot",start:847422,end:847839},{filename:n+"/!v/adam",start:847839,end:847914},{filename:n+"/!v/anika",start:847914,end:848407},{filename:n+"/!v/anikaRobot",start:848407,end:848919},{filename:n+"/!v/announcer",start:848919,end:849219},{filename:n+"/!v/antonio",start:849219,end:849600},{filename:n+"/!v/aunty",start:849600,end:849958},{filename:n+"/!v/belinda",start:849958,end:850298},{filename:n+"/!v/benjamin",start:850298,end:850499},{filename:n+"/!v/boris",start:850499,end:850723},{filename:n+"/!v/caleb",start:850723,end:850780},{filename:n+"/!v/croak",start:850780,end:850873},{filename:n+"/!v/david",start:850873,end:850985},{filename:n+"/!v/ed",start:850985,end:851272},{filename:n+"/!v/edward",start:851272,end:851423},{filename:n+"/!v/edward2",start:851423,end:851575},{filename:n+"/!v/f1",start:851575,end:851899},{filename:n+"/!v/f2",start:851899,end:852256},{filename:n+"/!v/f3",start:852256,end:852631},{filename:n+"/!v/f4",start:852631,end:852981},{filename:n+"/!v/f5",start:852981,end:853413},{filename:n+"/!v/fast",start:853413,end:853562},{filename:n+"/!v/grandma",start:853562,end:853825},{filename:n+"/!v/grandpa",start:853825,end:854081},{filename:n+"/!v/gustave",start:854081,end:854334},{filename:n+"/!v/ian",start:854334,end:857502},{filename:n+"/!v/iven",start:857502,end:857763},{filename:n+"/!v/iven2",start:857763,end:858042},{filename:n+"/!v/iven3",start:858042,end:858304},{filename:n+"/!v/iven4",start:858304,end:858565},{filename:n+"/!v/john",start:858565,end:861751},{filename:n+"/!v/kaukovalta",start:861751,end:862112},{filename:n+"/!v/klatt",start:862112,end:862150},{filename:n+"/!v/klatt2",start:862150,end:862188},{filename:n+"/!v/klatt3",start:862188,end:862227},{filename:n+"/!v/klatt4",start:862227,end:862266},{filename:n+"/!v/klatt5",start:862266,end:862305},{filename:n+"/!v/klatt6",start:862305,end:862344},{filename:n+"/!v/linda",start:862344,end:862694},{filename:n+"/!v/m1",start:862694,end:863029},{filename:n+"/!v/m2",start:863029,end:863293},{filename:n+"/!v/m3",start:863293,end:863593},{filename:n+"/!v/m4",start:863593,end:863883},{filename:n+"/!v/m5",start:863883,end:864145},{filename:n+"/!v/m6",start:864145,end:864333},{filename:n+"/!v/m7",start:864333,end:864587},{filename:n+"/!v/m8",start:864587,end:864871},{filename:n+"/!v/marcelo",start:864871,end:865122},{filename:n+"/!v/max",start:865122,end:865347},{filename:n+"/!v/michel",start:865347,end:865751},{filename:n+"/!v/miguel",start:865751,end:866133},{filename:n+"/!v/mike2",start:866133,end:866321},{filename:n+"/!v/norbert",start:866321,end:869510},{filename:n+"/!v/pablo",start:869510,end:872652},{filename:n+"/!v/paul",start:872652,end:872936},{filename:n+"/!v/pedro",start:872936,end:873288},{filename:n+"/!v/quincy",start:873288,end:873642},{filename:n+"/!v/rob",start:873642,end:873907},{filename:n+"/!v/robert",start:873907,end:874181},{filename:n+"/!v/robosoft",start:874181,end:874632},{filename:n+"/!v/robosoft2",start:874632,end:875086},{filename:n+"/!v/robosoft3",start:875086,end:875541},{filename:n+"/!v/robosoft4",start:875541,end:875988},{filename:n+"/!v/robosoft5",start:875988,end:876433},{filename:n+"/!v/robosoft6",start:876433,end:876720},{filename:n+"/!v/robosoft7",start:876720,end:877130},{filename:n+"/!v/robosoft8",start:877130,end:877373},{filename:n+"/!v/sandro",start:877373,end:877903},{filename:n+"/!v/shelby",start:877903,end:878183},{filename:n+"/!v/steph",start:878183,end:878547},{filename:n+"/!v/steph2",start:878547,end:878914},{filename:n+"/!v/steph3",start:878914,end:879291},{filename:n+"/!v/travis",start:879291,end:879674},{filename:n+"/!v/victor",start:879674,end:879927},{filename:n+"/!v/whisper",start:879927,end:880113},{filename:n+"/!v/whisperf",start:880113,end:880505},{filename:n+"/!v/zac",start:880505,end:880780},{filename:n+"/mb/mb-af1",start:880780,end:880868},{filename:n+"/mb/mb-af1-en",start:880868,end:880951},{filename:n+"/mb/mb-ar1",start:880951,end:881035},{filename:n+"/mb/mb-ar2",start:881035,end:881119},{filename:n+"/mb/mb-br1",start:881119,end:881251},{filename:n+"/mb/mb-br2",start:881251,end:881387},{filename:n+"/mb/mb-br3",start:881387,end:881519},{filename:n+"/mb/mb-br4",start:881519,end:881655},{filename:n+"/mb/mb-ca1",start:881655,end:881760},{filename:n+"/mb/mb-ca2",start:881760,end:881865},{filename:n+"/mb/mb-cn1",start:881865,end:881957},{filename:n+"/mb/mb-cr1",start:881957,end:882068},{filename:n+"/mb/mb-cz1",start:882068,end:882138},{filename:n+"/mb/mb-cz2",start:882138,end:882220},{filename:n+"/mb/mb-de1",start:882220,end:882364},{filename:n+"/mb/mb-de1-en",start:882364,end:882460},{filename:n+"/mb/mb-de2",start:882460,end:882588},{filename:n+"/mb/mb-de2-en",start:882588,end:882668},{filename:n+"/mb/mb-de3",start:882668,end:882767},{filename:n+"/mb/mb-de3-en",start:882767,end:882863},{filename:n+"/mb/mb-de4",start:882863,end:882992},{filename:n+"/mb/mb-de4-en",start:882992,end:883073},{filename:n+"/mb/mb-de5",start:883073,end:883309},{filename:n+"/mb/mb-de5-en",start:883309,end:883399},{filename:n+"/mb/mb-de6",start:883399,end:883521},{filename:n+"/mb/mb-de6-en",start:883521,end:883595},{filename:n+"/mb/mb-de6-grc",start:883595,end:883678},{filename:n+"/mb/mb-de7",start:883678,end:883828},{filename:n+"/mb/mb-de8",start:883828,end:883899},{filename:n+"/mb/mb-ee1",start:883899,end:883996},{filename:n+"/mb/mb-en1",start:883996,end:884127},{filename:n+"/mb/mb-es1",start:884127,end:884241},{filename:n+"/mb/mb-es2",start:884241,end:884349},{filename:n+"/mb/mb-es3",start:884349,end:884453},{filename:n+"/mb/mb-es4",start:884453,end:884541},{filename:n+"/mb/mb-fr1",start:884541,end:884707},{filename:n+"/mb/mb-fr1-en",start:884707,end:884811},{filename:n+"/mb/mb-fr2",start:884811,end:884914},{filename:n+"/mb/mb-fr3",start:884914,end:885014},{filename:n+"/mb/mb-fr4",start:885014,end:885141},{filename:n+"/mb/mb-fr4-en",start:885141,end:885248},{filename:n+"/mb/mb-fr5",start:885248,end:885348},{filename:n+"/mb/mb-fr6",start:885348,end:885448},{filename:n+"/mb/mb-fr7",start:885448,end:885531},{filename:n+"/mb/mb-gr1",start:885531,end:885625},{filename:n+"/mb/mb-gr2",start:885625,end:885719},{filename:n+"/mb/mb-gr2-en",start:885719,end:885807},{filename:n+"/mb/mb-hb1",start:885807,end:885875},{filename:n+"/mb/mb-hb2",start:885875,end:885958},{filename:n+"/mb/mb-hu1",start:885958,end:886060},{filename:n+"/mb/mb-hu1-en",start:886060,end:886157},{filename:n+"/mb/mb-ic1",start:886157,end:886245},{filename:n+"/mb/mb-id1",start:886245,end:886346},{filename:n+"/mb/mb-in1",start:886346,end:886415},{filename:n+"/mb/mb-in2",start:886415,end:886500},{filename:n+"/mb/mb-ir1",start:886500,end:887253},{filename:n+"/mb/mb-it1",start:887253,end:887337},{filename:n+"/mb/mb-it2",start:887337,end:887424},{filename:n+"/mb/mb-it3",start:887424,end:887566},{filename:n+"/mb/mb-it4",start:887566,end:887711},{filename:n+"/mb/mb-jp1",start:887711,end:887782},{filename:n+"/mb/mb-jp2",start:887782,end:887883},{filename:n+"/mb/mb-jp3",start:887883,end:887970},{filename:n+"/mb/mb-la1",start:887970,end:888053},{filename:n+"/mb/mb-lt1",start:888053,end:888140},{filename:n+"/mb/mb-lt2",start:888140,end:888227},{filename:n+"/mb/mb-ma1",start:888227,end:888325},{filename:n+"/mb/mb-mx1",start:888325,end:888445},{filename:n+"/mb/mb-mx2",start:888445,end:888565},{filename:n+"/mb/mb-nl1",start:888565,end:888634},{filename:n+"/mb/mb-nl2",start:888634,end:888730},{filename:n+"/mb/mb-nl2-en",start:888730,end:888821},{filename:n+"/mb/mb-nl3",start:888821,end:888906},{filename:n+"/mb/mb-nz1",start:888906,end:888974},{filename:n+"/mb/mb-pl1",start:888974,end:889073},{filename:n+"/mb/mb-pl1-en",start:889073,end:889155},{filename:n+"/mb/mb-pt1",start:889155,end:889286},{filename:n+"/mb/mb-ro1",start:889286,end:889373},{filename:n+"/mb/mb-ro1-en",start:889373,end:889454},{filename:n+"/mb/mb-sw1",start:889454,end:889552},{filename:n+"/mb/mb-sw1-en",start:889552,end:889645},{filename:n+"/mb/mb-sw2",start:889645,end:889747},{filename:n+"/mb/mb-sw2-en",start:889747,end:889846},{filename:n+"/mb/mb-tl1",start:889846,end:889931},{filename:n+"/mb/mb-tr1",start:889931,end:890016},{filename:n+"/mb/mb-tr2",start:890016,end:890130},{filename:n+"/mb/mb-us1",start:890130,end:890300},{filename:n+"/mb/mb-us2",start:890300,end:890478},{filename:n+"/mb/mb-us3",start:890478,end:890658},{filename:n+"/mb/mb-vz1",start:890658,end:890802}]})}();var Fp=Object.assign({},ae),Yc="./this.program",Z0=ae.print||console.log.bind(console),uo=ae.printErr||console.warn.bind(console);Object.assign(ae,Fp),Fp=null,ae.arguments&&ae.arguments,ae.thisProgram&&(Yc=ae.thisProgram),ae.quit&&ae.quit,ae.wasmBinary&&ae.wasmBinary,ae.noExitRuntime;var _0,fo={Memory:function(a){this.buffer=new ArrayBuffer(65536*a.initial)},Module:function(a){},Instance:function(a,o){this.exports=function(n){for(var u,m=new Uint8Array(123),b=25;b>=0;--b)m[48+b]=52+b,m[65+b]=b,m[97+b]=26+b;function C(L,N,U){for(var f,k,e=0,d=N,y=U.length,ee=N+(3*y>>2)-(U[y-2]=="=")-(U[y-1]=="=");e<y;e+=4)f=m[U.charCodeAt(e+1)],k=m[U.charCodeAt(e+2)],L[d++]=m[U.charCodeAt(e)]<<2|f>>4,d<ee&&(L[d++]=f<<4|k>>2),d<ee&&(L[d++]=k<<6|m[U.charCodeAt(e+3)])}m[43]=62,m[47]=63;var w=new ArrayBuffer(16),E=new Int32Array(w),B=new Float32Array(w),D=new Float64Array(w);function v(L){return E[L]}function x(L,N){E[L]=N}function S(){return D[0]}function F(L){D[0]=L}function j(){throw new Error("abort")}function J(L){B[2]=L}return function(L){var N=L.a,U=N.a.buffer,f=new Int8Array(U),k=new Int16Array(U),e=new Int32Array(U),d=new Uint8Array(U),y=new Uint16Array(U),ee=new Uint32Array(U),T=new Float64Array(U),O=Math.imul,we=Math.fround,$=Math.abs,be=Math.clz32,Ce=Math.min,Ee=Math.floor,Be=Math.ceil,ve=N.b,Ne=N.c,Fe=N.d,le=N.e,Ae=N.f,pe=N.g,oe=N.h,Ge=N.i,nA=N.j,Je=N.k,aA=N.l,kA=N.m,ze=N.n,de=N.o,Se=N.p,ge=N.q,He=N.r,Xe=N.s,AA=N.t,qe=N.u,H=294656,cA=0,fA=0,he=0;function bA(A){var t,r=0,s=0,i=0,l=0,c=0,g=0,p=0,I=0,h=0,M=0,P=0,z=0,Y=0,V=0,X=0,te=0,ne=0,me=0,ke=0,ye=0,Pe=0,_e=0,Ke=0,lA=0,mA=0,GA=0,NA=0,JA=0,pt=0,Mt=0,Dt=0,Yt=0,$t=0,fr=0,er=0,Er=0,zr=0,Kr=0,ss=0,as=0,hs=0,ra=0,sa=0,qs=0,Cn=0,Rn=0,Ja=0,jn=0,Wn=0,xo=0,Ui=0,yo=0,Do=0;if(H=t=H-16|0,(0|A)!=2)if(A=e[33283],e[A>>2]!=e[A+4>>2]){if(rs(e[e[32972]+60>>2]),V=e[47192],as=t+12|0,Cn=t+8|0,H=p=H-6832|0,e[p+6816>>2]=0,e[p+6808>>2]=32,e[p+6800>>2]=0,V){e[47351]=0,e[47350]=0,e[47352]=0,f[189076]=0,A=e[33284],e[47353]=(0|A)>0?A:0,e[47355]=e[47354]+1,Ve(lA=p+5184|0,0,1600),zr=p+6800|0,H=c=H-2608|0,e[c+2156>>2]=32,e[c+2148>>2]=0,d[134760]&&(f[190280]=0,f[134760]=0),e[V+8216>>2]=0,e[V+8220>>2]=0,e[V+288>>2]=0,e[p+780>>2]=0,f[189360]=0;e:if(A=e[33691])e[c+2152>>2]=A;else{A:{r:{if(!(r=e[33285])){if(A=e[33283],e[A>>2]==e[A+4>>2]){e[c+2152>>2]=0;break e}if(!(r=e[33285]))break r}e[33285]=0;break A}e[33284]=e[33284]+1,A=e[33283],r=0|KA[e[A+8>>2]](A)}e[c+2152>>2]=r}Wn=lA+2|0,Pe=32;e:{for(;;){ye=Pe;A:{r:{a:{if(r=e[33691],(i=e[33285])?A=0:(i=e[33285],A=e[33283],A=e[A>>2]==e[A+4>>2]),r|!A|i||!(e[32524]<0)){if(!MA(e[c+2156>>2])){if((i=(0|(A=e[49828]))>0)&(0|(r=A))<(0|(A=e[33284])))break a;if(!((0|(r=e[49845]))<=0|(0|A)<(0|r))){e[49845]=0,f[134760]=1,e[33285]=e[c+2152>>2],s=16384;break e}}Pe=e[c+2156>>2],e[c+2156>>2]=e[c+2152>>2];n:{o:{c:{u:{l:{if((0|(r=e[32524]))>=0){if(d[r+134736|0])break l;e[32524]=-1}if(r=e[33285])break c;if(A=e[33283],e[A>>2]!=e[A+4>>2])break u;r=32;break n}e[33691]|r||(e[c+2156>>2]=f[134736],r=1),e[32524]=r+1,r=f[r+134736|0];break n}if(!(r=e[33285]))break o}e[33285]=0;break n}e[33284]=e[33284]+1,A=e[33283],r=0|KA[e[A+8>>2]](A)}e[c+2152>>2]=r,e[33691]=0;n:if(!(I|!e[47203])){o:{if((0|(A=e[c+2156>>2]))!=60){if((0|r)!=35&r-97>>>0>25|(0|A)!=38)break n;for(i=e[33285],l=0;;){c:{if(e[c+2156>>2]=r,!i){if(A=e[33283],e[A>>2]==e[A+4>>2])break c;r=e[c+2156>>2]}if(!(!((r=!!(0|MA(r)))|(0|(A=e[c+2156>>2]))==35)|l>>>0>19)){f[(c+112|0)+l|0]=A,l=l+1|0,(r=e[33285])?(e[33285]=0,i=0):(e[33284]=e[33284]+1,A=e[33283],r=0|KA[e[A+8>>2]](A),i=e[33285]);continue}}break}f[(c+112|0)+l|0]=0;c:{u:{if(!(r=e[33285])){if(r=0,A=e[33283],e[A>>2]==e[A+4>>2])break c;if(!(r=e[33285]))break u}e[33285]=0;break c}e[33284]=e[33284]+1,A=e[33283],r=0|KA[e[A+8>>2]](A)}e[c+2152>>2]=r,e[c+100>>2]=e[c+2156>>2],e[c+104>>2]=r,e[c+96>>2]=c+112,iA(134736,84252,c+96|0);c:{if(e[c+2156>>2]==59){l=c+2156|0,Y=c+2152|0,H=i=H-32|0;u:if(d[0|(r=c+112|0)]!=35)A=-1,(0|(r=As(130752,r)))!=-1&&(e[l>>2]=r,e[Y>>2]||(e[Y>>2]=32),A=r);else{if(d[0|(A=r+1|0)]==120){e[i>>2]=l,A=$A(r+2|0,90005,i);break u}e[i+16>>2]=l,A=$A(A,90070,i+16|0)}if(H=i+32|0,(0|A)>0)break c}e[32524]=0,e[c+2156>>2]=38,e[c+2152>>2]=32;break n}if((0|(A=e[c+2156>>2]))>32)break n;if(!(r=e[33692]-20|0)|(0|r)==16)break o;break n}if((0|r)!=47&&!FA(r)&&(0|(A=e[c+2152>>2]))!=63&&(0|A)!=33)break n;if((0|(A=e[c+2148>>2]))>780){e[33691]=e[c+2156>>2],f[0|(A=A+189424|0)]=32,f[A+1|0]=0,e[33285]=e[c+2152>>2],s=16384;break e}for(Y=e[33285],l=0,r=e[c+2152>>2];e[c+2156>>2]=r,i=0,Y||(A=e[33283],i=e[A>>2]==e[A+4>>2],r=e[c+2156>>2]),!((0|r)==62|i|l>>>0>499);)e[(c+144|0)+(l<<2)>>2]=r,l=l+1|0,(r=e[33285])?(Y=0,e[33285]=0):(e[33284]=e[33284]+1,A=e[33283],r=0|KA[e[A+8>>2]](A),Y=e[33285]);e[(i=c+144|0)+(l<<2)>>2]=0,e[c+2152>>2]=32,_e=c+2148|0,ye=e[32525],r=0,H=ke=H-560|0;c:if(W(i,84333,3)&&W(i,84477,4)){for(A=(i+(Oi(i)<<2)|0)-4|0,(0|(mA=e[A>>2]))==47&&(e[A>>2]=32);;){if(A=e[i+(r<<2)>>2]){if(ar(A))A=r;else if(f[(ke+512|0)+r|0]=Ms(A<<24>>24),A=39,(0|(r=r+1|0))!=39)continue}else A=r;break}if(f[(ke+512|0)+A|0]=0,d[ke+512|0]!=47){if((0|(Y=As(130480,ke+512|0)))!=16&&(r=e[_e>>2],e[_e>>2]=r+1,f[r+189424|0]=32),(0|mA)==47&&(r=0,!(502241>>>Y&1)))break c}else(0|(r=As(130480,ke+512|1)))!=16&&(l=e[_e>>2],e[_e>>2]=l+1,f[l+189424|0]=32),Y=r+32|0;l=i+(A<<2)|0,A=e[33708],I=O(A,76)+133076|0,r=262174;u:{l:{i:{p:switch(Y-1|0){case 33:C:if(!((0|A)<=1)){for(;;){if(e[O(r=A-1|0,76)+133152>>2]==2)break C;if(e[33708]=r,i=A>>>0>2,A=r,!i)break}A=1}r=rr(l,34,A);break c;case 32:C:if(!((0|A)<=1)){for(;;){if(e[O(r=A-1|0,76)+133152>>2]==1)break C;if(e[33708]=r,i=A>>>0>2,A=r,!i)break}A=1}r=rr(l,33,A)+524328|0;break c;case 9:(0|(r=e[33709]))<=18&&(e[33709]=r+1),e[(A=(I=r<<6)+134912|0)>>2]=10,e[A+4>>2]=-1,e[A+8>>2]=-1,e[A+52>>2]=-1,e[A+56>>2]=-1,e[A+44>>2]=-1,e[A+48>>2]=-1,e[A+36>>2]=-1,e[A+40>>2]=-1,e[A+28>>2]=-1,e[A+32>>2]=-1,e[A+20>>2]=-1,e[A+24>>2]=-1,e[A+12>>2]=-1,e[A+16>>2]=-1,e[A+60>>2]=-1,A=Pt(l,88301),i=Pt(l,88390),UA(A,88479)?UA(A,88528)||(e[28+(134912+(r<<6)|0)>>2]=Hs(i,130224)):e[24+(I+134912|0)>>2]=Hs(i,130192),Lr(_e,e[33709]);break i;case 2:for((0|(A=e[33709]))<=18&&(e[33709]=A+1),e[(A=(Rn=A<<6)+134912|0)>>2]=3,e[A+4>>2]=-1,e[A+8>>2]=-1,e[A+52>>2]=-1,e[A+56>>2]=-1,e[A+44>>2]=-1,e[A+48>>2]=-1,e[A+36>>2]=-1,e[A+40>>2]=-1,e[A+28>>2]=-1,e[A+32>>2]=-1,e[A+20>>2]=-1,e[A+24>>2]=-1,e[A+12>>2]=-1,e[A+16>>2]=-1,e[A+60>>2]=-1,Dt=1;;){if(i=Pt(l,e[(Yt=Dt<<2)+130448>>2])){mA=0,A=e[Yt+131072>>2];C:if(Y=e[A>>2])for(;;){for(r=0;I=f[r+Y|0],(ye=e[(r<<2)+i>>2])&&(r=r+1|0,(0|I)==(0|ye)););h:switch(ye-34|0){case 0:case 5:if(!I)break C;break;default:break h}if(!(Y=e[A+((mA=mA+1|0)<<3)>>2]))break}xo=Yt+(Rn+134912|0)|0;C:if((0|(A=e[4+(A+(mA<<3)|0)>>2]))>=0)A=(0|O(A,e[4+(Yt+134912|0)>>2]))/100|0;else{for(;i=(A=i)+4|0,ar(e[A>>2]););for(Ja=e[A>>2]==43,i=((jn=e[(A=A+(Ja<<2)|0)>>2]==45)<<2)+A|0,mA=ke+96|0,H=Y=(H=I=H-16|0)-224|0,Ve(Y+16|0,0,144),A=Y+160|4,e[Y+24>>2]=A,e[Y+60>>2]=A,e[Y+92>>2]=-1,e[Y+64>>2]=60,e[Y+20>>2]=A,e[Y+48>>2]=19,r=i;r=(A=r)+4|0,ye=(ye=e[A>>2])?Sr(124960,ye):0;);e[Y+100>>2]=A,ps(r=Y+16|0,0,0),ZA(Y,r,1,1),r=e[Y+8>>2],Ui=e[Y+12>>2],ye=e[Y>>2],yo=e[Y+4>>2],mA&&(Do=mA,mA=e[Y+136>>2]+(e[Y+20>>2]-e[Y+60>>2]|0)|0,e[Do>>2]=mA?A+(mA<<2)|0:i),e[(A=I)+8>>2]=r,e[A+12>>2]=Ui,e[A>>2]=ye,e[A+4>>2]=yo,H=Y+224|0,me=Ca(e[A>>2],e[A+4>>2],e[A+8>>2],e[A+12>>2]),H=A+16|0;h:{r=100;b:if((0|(A=i))!=(0|(i=e[ke+96>>2]))){r=jn?-1:Ja;m:{if((0|(A=e[i>>2]))!=115){if((0|A)!=37)break m;if($(me=r?+(0|r)*me+100:me)<2147483648){r=~~me;break b}r=-2147483648;break b}if(e[i+4>>2]==116){F(+(pt=me*+(0|r)/12)),A=0|v(1),v(0);B:{if((r=(A=A>>>20&2047)-969|0)>>>0>=63){if(me=pt+1,(0|r)<0)break B;if(F(+pt),r=0|v(1),i=0|v(0),!(A>>>0<1033)){if(me=0,!i&(0|r)==-1048576||(me=pt+1,A>>>0>=2047))break B;if((0|r)>0|(0|r)>=0){T[(A=H-16|0)+8>>3]=3105036184601418e216,me=3105036184601418e216*T[A+8>>3];break B}if(!(r>>>0<3230714880)){T[(A=H-16|0)+8>>3]=12882297539194267e-247,me=12882297539194267e-247*T[A+8>>3];break B}}I=A,A=!(i<<1)&(0|(A=r<<1|i>>>31))==-2129002496|A>>>0<2165964800?I:0}hs=(pt=(me=pt-((Kr=(me=T[14416])+pt)-me))*me)*pt*(me*T[14421]+T[14420]),pt*=me*T[14419]+T[14418],me*=T[14417],F(+Kr),v(1),I=0|v(0),me=hs+(pt+(me+T[(i=I<<4&2032)+115376>>3])),ye=e[(i=i+115384|0)>>2],Y=e[i+4>>2],i=(r=ye)+(ye=0)|0,r=(I<<13)+Y|0,r=i>>>0<ye>>>0?r+1|0:r,A?(x(0,0|i),x(1,0|r),me=(pt=+S())*me+pt):-2147483648&I?(x(0,0|i),x(1,r+1071644672|0),(me=(Kr=(pt=+S())*me)+pt)<1&&(e[(A=H-16|0)+8>>2]=0,e[A+12>>2]=1048576,T[A+8>>3]=22250738585072014e-324*T[A+8>>3],me=(me=(hs=me+1)+(Kr+(pt-me)+(me+(1-hs)))+-1)==0?0:me),me*=22250738585072014e-324):(x(0,0|i),x(1,r+-1048576|0),me=(pt=+S())*me+pt,me+=me)}if($(me*=100)<2147483648){r=~~me;break b}r=-2147483648;break b}}if((0|Dt)!=1)break h;if(r)r=(A=$(me=me*+(0|r)*100)<2147483648?~~me:-2147483648)+100|0;else{if($(me*=100)<2147483648){r=~~me;break b}r=-2147483648}}A=(0|O(r,e[Yt+134848>>2]))/100|0;break C}A=$(me)<2147483648?~~me:-2147483648,r&&(A=e[Yt+134848>>2]+O(A,r)|0)}e[xo+4>>2]=A}if((0|(Dt=Dt+1|0))==5)break}Lr(_e,e[33709]);break i;case 11:(0|(r=e[33709]))<=18&&(e[33709]=r+1),e[(A=134912+(r<<6)|0)>>2]=12,e[A+4>>2]=-1,e[A+8>>2]=-1,e[A+52>>2]=-1,e[A+56>>2]=-1,e[A+44>>2]=-1,e[A+48>>2]=-1,e[A+36>>2]=-1,e[A+40>>2]=-1,e[A+28>>2]=-1,e[A+32>>2]=-1,e[A+20>>2]=-1,e[A+24>>2]=-1,e[A+12>>2]=-1,e[A+16>>2]=-1,e[A+60>>2]=-1,A=(A=Pt(l,88658))?Hs(A,130400):3,i=134912+(r<<6)|0,e[e[47192]+148>>2]!=1?(e[52+(134912+(r<<6)|0)>>2]=A,A=d[A+102776|0]):(e[20+(134912+(r<<6)|0)>>2]=d[A+102764|0],A=d[A+102770|0]),e[i+12>>2]=A,Lr(_e,e[33709]);break i;case 34:case 41:case 43:if(!((0|(A=e[33709]))<=0)){if(l=Y-32|0,Y=0,i=0,r=0,A>>>0>=4)for(I=-4&A,mA=0;Dt=2|r,Yt=1|r,i=(0|l)==e[134912+((ye=3|r)<<6)>>2]?ye:(0|l)==e[134912+(Dt<<6)>>2]?Dt:(0|l)==e[134912+(Yt<<6)>>2]?Yt:(0|l)==e[134912+(r<<6)>>2]?r:i,r=r+4|0,(0|I)!=(0|(mA=mA+4|0)););if(I=3&A)for(;i=(0|l)==e[134912+(r<<6)>>2]?r:i,r=r+1|0,(0|I)!=(0|(Y=Y+1|0)););(0|i)<=0||(e[33709]=i,A=i)}Lr(_e,A);break i;case 7:if(A=Pt(l,88741),r=Pt(l,88860),(0|Hs(A,130176))!=1)break i;A=e[_e>>2],e[_e>>2]=A+1,f[A+189424|0]=91,A=e[_e>>2],e[_e>>2]=A+1,f[A+189424|0]=91,A=rn((A=e[_e>>2])+189424|0,r,800-A|0)+e[_e>>2]|0,e[_e>>2]=A+1,f[A+189424|0]=93,A=e[_e>>2],e[_e>>2]=A+1,f[A+189424|0]=93;break i;case 35:e[33692]==36&&(f[e[_e>>2]+189424|0]=0,(i=As(131104,r=(A=e[33707])+189424|0))&&(e[_e>>2]=dr(i,r)+A)),A=e[_e>>2],e[_e>>2]=A+1,f[A+189424|0]=1,A=e[_e>>2],e[_e>>2]=A+1,f[A+189424|0]=89,e[33692]=0;break i;case 8:if(!(A=Pt(l,89299)))break i;f[134824]=1,r=e[_e>>2],e[_e>>2]=rn(r+189424|0,A,800-r|0)+e[_e>>2];break i;case 13:f[134824]=1;break i;case 40:case 45:f[134824]=0;break i;case 4:if(!(A=Pt(l,89360)))break i;if(rn(ke+352|0,A,160),d[ke+352|0]&&!Ut(199328,ke+352|0)){f[134760]=1,f[199328]=0,r=16384;break c}if((0|(A=un(ke+352|0)))<0)break i;e[ke+20>>2]=A,e[ke+16>>2]=1,iA(A=ke+352|0,89460,ke+16|0),yA(e[_e>>2]+189424|0,A),e[_e>>2]=e[_e>>2]+CA(A);break i;case 10:(0|(r=e[33709]))<=18&&(e[33709]=r+1),e[(A=134912+(r<<6)|0)>>2]=11,e[A+4>>2]=-1,e[A+8>>2]=-1,e[A+52>>2]=-1,e[A+56>>2]=-1,e[A+44>>2]=-1,e[A+48>>2]=-1,e[A+36>>2]=-1,e[A+40>>2]=-1,e[A+28>>2]=-1,e[A+32>>2]=-1,e[A+20>>2]=-1,e[A+24>>2]=-1,e[A+12>>2]=-1,e[A+16>>2]=-1,e[A+60>>2]=-1;C:if(A=Pt(l,89514)){if(rn(ke+352|0,A,160),e[34441]){if((0|(A=un(ke+352|0)))<0||0|KA[e[34441]](1,A+e[33282]|0,ye))break C;e[ke+68>>2]=A,e[ke+64>>2]=1,iA(ke+352|0,89658,ke- -64|0)}else{if(!ye|d[ke+352|0]==47?A=tn(ke+352|0):(e[ke+48>>2]=ye,e[ke+52>>2]=ke+352,iA(A=ke+96|0,89564,ke+48|0),A=tn(A)),(0|A)<0)break C;e[ke+36>>2]=A,e[ke+32>>2]=1,iA(ke+352|0,89623,ke+32|0)}A=ke+352|0,yA(e[_e>>2]+189424|0,A),e[_e>>2]=e[_e>>2]+CA(A),e[4+(134912+(r<<6)|0)>>2]=1}if(Lr(_e,e[33709]),(0|mA)==47){$a(11,_e),r=16384;break c}f[134772]=1,r=16384;break c;case 42:$a(43,_e),f[134772]=0,r=16384;break c;case 12:C:{if(A=Pt(l,89714)){if(r=16384,(I=(0|(A=Hs(A,130336)))<0?2:A)>>>0<=2&&(A=e[_e>>2],e[ke+84>>2]=I,e[ke+80>>2]=1,iA(A+189424|0,89770,ke+80|0),e[_e>>2]=e[_e>>2]+3,r=0),A=e[102784+(I<<2)>>2],!(i=Pt(l,89907)))break C;break l}if(r=16384,i=Pt(l,89907))break l;A=21;break u}if(I>>>0<3)break i;break u;case 0:(A=Pt(l,89965))&&(rn(r=ke+352|0,A,160),un(r)),r=rr(l,1,e[33708])?147456:0;break c;case 1:r=rr(l,2,A)?147456:0;break c;case 5:r=0,e[I>>2]==6&&(r=rr(l,38,A),A=e[33708]),r=524358+(rr(l,6,A)|r)|0;break c;case 6:r=0,(0|(i=e[I>>2]))==6&&(r=rr(l,38,A),i=e[I>>2]),(0|i)==7&&(r=rr(l,39,e[33708])|r),r=524358+(r|rr(l,7,e[33708]))|0;break c;case 37:if(r=524328,e[I>>2]!=6)break c;r=rr(l,38,A)+524328|0;break c;case 38:if(r=524358,(-2&e[I>>2])!=6)break c;r=rr(l,39,A)+524358|0;break c;case 14:case 46:break c;case 3:break p;default:break i}A=Pt(l,88893),r=Pt(l,88992),i=Pt(l,89153),l=Hs(A,130272),r=Hs(r,130320),A=Es(i,0),e[ke>>2]=1,i=(0|A)<2?193:A- -64|0,r=(0|(A=(0|r)==1?19:l))==64?i:A,e[ke+4>>2]=r,iA(A=ke+352|0,89230,ke),yA(e[_e>>2]+189424|0,A),A=e[_e>>2]+CA(A)|0,e[_e>>2]=A,e[33707]=A,e[33692]=r}r=0;break c}A=Es(i,1),i=e[33722],Ze(1,e[33713]),(0|(A=(0|(i=(0|O(A,i))/100<<8))/(0|O(e[36429],10))|0))<=199&&(A=(0|i)/(0|O(e[36428],10))|0),r=r||16384}i=A>>>5|0,l=A,r=((A=(0|A)>4095)?i>>>0>=4095?4095:i:l)+(A?8388608|r:r)|0}if(H=ke+560|0,r){if(A=e[c+2148>>2]+189424|0,f[0|A]=32,f[A+1|0]=0,!(131072&r)){s=r;break e}yA(189360,134784),s=r;break e}e[c+2156>>2]=32;c:{u:{if(!(r=e[33285])){if(I=0,A=e[33283],e[A>>2]==e[A+4>>2])continue;if(!(r=e[33285]))break u}e[33285]=0;break c}e[33284]=e[33284]+1,A=e[33283],r=0|KA[e[A+8>>2]](A)}e[c+2152>>2]=r,I=0;continue}e[c+2156>>2]=A+57344}if(d[134824])continue;if(i=e[c+2156>>2],!((0|(A=e[c+2152>>2]))!=10|e[47268]!=-1)){(0|(s=Gr(i)))==16384?(A=e[c+2148>>2],k[lA+(A<<1)>>1]=e[33284]-e[47353],e[zr>>2]=A,s=524328,A=dr(e[c+2156>>2],A+189424|0)+e[c+2148>>2]|0):A=e[c+2148>>2],f[0|(A=A+189424|0)]=32,f[A+1|0]=0;break e}n:if((0|i)==1){if((0|A)!=66){if((0|A)!=86)break n;for(A=e[c+2148>>2],e[c+2148>>2]=A+1,f[A+189424|0]=0;;){o:{c:{u:{if(!(r=e[33285])){if(A=e[33283],e[A>>2]==e[A+4>>2])break o;if(!(r=e[33285]))break u}e[33285]=0;break c}e[33284]=e[33284]+1,A=e[33283],r=0|KA[e[A+8>>2]](A)}if(e[c+2156>>2]=r,!(ar(r)||(0|(A=e[c+2148>>2]))>=799)){e[c+2148>>2]=A+1,f[A+189424|0]=e[c+2156>>2];continue}}break}f[e[c+2148>>2]+189424|0]=0,s=147456;break e}r=e[c+2148>>2],f[0|(A=r+189424|0)]=32,f[A+1|0]=32,f[A+2|0]=32,f[A+3|0]=0,e[c+2148>>2]=r+3;o:{c:{u:{l:{i:{p:{if(!(r=e[33285])){if(A=e[33283],e[A>>2]==e[A+4>>2])break l;if(!(r=e[33285]))break p}e[33285]=0;break i}e[33284]=e[33284]+1,A=e[33283],r=0|KA[e[A+8>>2]](A)}if(e[c+2152>>2]=r,i=0,(0|r)!=48)break u;break c}r=e[c+2152>>2]}if(e[47208]=0,e[47201]=1,(0|r)==49)break o;for(i=e[33285],l=0;;){u:{if(!i){if(A=e[33283],e[A>>2]==e[A+4>>2])break u;r=e[c+2152>>2]}if(!(ar(r)|l>>>0>58)){e[188832+(l<<2)>>2]=e[c+2152>>2],(r=e[33285])?(e[33285]=0,i=0):(e[33284]=e[33284]+1,A=e[33283],r=0|KA[e[A+8>>2]](A),i=e[33285]),l=l+1|0,e[c+2152>>2]=r,A=e[c+2148>>2],e[c+2148>>2]=A+1,f[A+189424|0]=32;continue}}break}i=2,e[188832+(l<<2)>>2]=0}e[47201]=i}o:{if(!(r=e[33285])){if(A=e[33283],e[A>>2]==e[A+4>>2])continue;if(!(r=e[33285]))break o}e[33285]=0,e[c+2152>>2]=r;continue}e[33284]=e[33284]+1,A=e[33283],e[c+2152>>2]=KA[e[A+8>>2]](A);continue}fr=fr+1|0,r=0,A=e[V+340>>2];n:if(l=y[A>>1]){for(;;){if((65535&l)!=(0|i)){if(l=y[A+((r=r+2|0)<<1)>>1])continue;break n}break}o:switch(0|(A=y[A+(r<<1|2)>>1])){case 1:continue;case 0:break n;default:break o}e[c+2156>>2]=A,i=A}MA(i)?(te=1,r=e[c+2156>>2]):NA?(e[33285]=e[c+2152>>2],r=1328,e[c+2156>>2]=1328,e[c+2152>>2]=32,NA=0):(0|(r=e[c+2156>>2]))!=3851?(NA=0,(0|r)!=3405|e[c+2152>>2]!=8205||(r=3406,e[c+2156>>2]=3406)):(r=32,e[c+2156>>2]=32,NA=0);n:if(Bs(r)){if(e[V+8216>>2]=e[V+8216>>2]+1,e[33692]|e[47200]!=2||Bs(Pe)||(e[c+2544>>2]=0,e[c+2548>>2]=0,e[c+2304>>2]=84731,!gA(V,c+2304|0,c+2160|0,c+2544|0,0,0))||(Lt(V,A=c+2160|0,c+2544|0,-1,0),os(r=A,A=c+2336|0),e[c+80>>2]=A,iA(r=c+2240|0,85451,c+80|0),A=e[c+2148>>2],(0|(r=CA(r)+A|0))>=800))break n;yA(A+189424|0,c+2240|0),e[c+2148>>2]=r}else FA(e[c+2156>>2])&&(e[V+8220>>2]=e[V+8220>>2]+1);if(r=e[c+2152>>2],A=e[c+2156>>2],e[47204])if((0|I)>0)I=I-1|0;else{if(!((0|A)!=91|(0|r)!=91)){i=0,I=-1;break A}I=(0|A)==93&&(0|r)==93?2:I}if((0|A)==10){for(i=e[33285],l=0;;){n:{if(!i){if(A=e[33283],e[A>>2]==e[A+4>>2])break n;r=e[c+2152>>2]}if(ar(r)){l=(e[c+2152>>2]==10)+l|0,(r=e[33285])?(e[33285]=0,i=0):(e[33284]=e[33284]+1,A=e[33283],r=0|KA[e[A+8>>2]](A),i=e[33285]),e[c+2152>>2]=r;continue}}break}if((0|l)>0){s&&Ve(A=er+189424|0,32,_A(c+2336|0,A)),A=e[c+2148>>2]+189424|0,f[0|A]=32,f[A+1|0]=0,e[33285]=e[c+2152>>2],s=e[47203]?524358:O((0|l)>=3?3:l,30)+524328|0;break e}if(A=e[47268]<(0|fr),fr=0,!A){A=e[c+2148>>2]+189424|0,f[0|A]=32,f[A+1|0]=0,e[33285]=e[c+2152>>2],s=262174;break e}}if(i=0,e[33692]|I)break A;if(A=0,!s)break r;if(ar(e[c+2156>>2])){A=s;break r}if(Bt(e[c+2156>>2])&&ce(e[c+2156>>2]))break r;e[33691]=e[c+2156>>2],f[0|(A=er+189424|0)]=32,f[A+1|0]=0,e[33285]=e[c+2152>>2];break e}NA&&(e[c+2148>>2]=dr(1328,e[c+2148>>2]+189424|0)+e[c+2148>>2]),s&&Ve(A=er+189424|0,32,_A(c+2336|0,A)),A=e[c+2148>>2]+189424|0,f[0|A]=32,f[A+1|0]=0}s=589864;break e}if(!((0|(r=e[c+2156>>2]))!=46|e[c+2152>>2]!=46)){r:{a:{n:{if(!(r=e[33285])){if(r=e[33283],e[r>>2]==e[r+4>>2])break r;if(!(r=e[33285]))break n}e[33285]=0;break a}e[33284]=e[33284]+1,r=e[33283],r=0|KA[e[r+8>>2]](r)}if(g=r,(0|r)==46)for(e[c+2152>>2]=32,e[c+2156>>2]=8230,g=e[33285];;){a:{n:{if(!g){if(r=e[33283],e[r>>2]==e[r+4>>2]){g=46;break r}if(!(g=e[33285]))break n}e[33285]=0,r=0;break a}e[33284]=e[33284]+1,r=e[33283],g=0|KA[e[r+8>>2]](r),r=e[33285]}if((0|g)!=46)break r;e[c+2152>>2]=32,e[c+2156>>2]=8230,g=r}}(0|(r=e[c+2156>>2]))!=8230?e[33285]=g:(e[c+2152>>2]=g,r=8230)}if(mA=0,(0|(Y=Gr(r)))!=16384){r:if(536621&Y)for(r=e[33285];;){if(!r&&(r=e[33283],e[r>>2]==e[r+4>>2])||!(536621&Gr(e[c+2152>>2])))break r;(g=e[33285])?(e[33285]=0,r=0):(e[33284]=e[33284]+1,r=e[33283],g=0|KA[e[r+8>>2]](r),r=e[33285]),e[c+2152>>2]=g}if(1048576&Y){e[p+780>>2]=Y>>>12&15,NA=1,I=0,s=A;continue}(ar(e[c+2152>>2])|32768&Y||mn(e[c+2152>>2])||(0|(r=e[c+2152>>2]))==63||(l=0,e[33285]||(r=e[33283],l=e[r>>2]==e[r+4>>2],r=e[c+2152>>2]),l||(0|r)==1))&&(mA=1)}if((0|(r=e[c+2156>>2]))==57404&&(e[c+2156>>2]=60,r=60),e[47201]){s=0;r:if(!(1<<(l=Vr(r))&1879048255&&l>>>0<=30)){if(!((l=Vr(r))>>>0>27)){if(116672&(I=1<<l))break r;if(134227968&I){s=!(1024&rA(r,l));break r}}s=1}if(!(d[134772]|!s)&&(e[47201]==1||Sr(188832,e[c+2156>>2]))){e[V+288>>2]=0,i=e[c+2156>>2],f[c+2336|0]=0,I=e[c+2152>>2],r=0;r:{a:if(!((0|(s=e[34064]))<=0))for(;;){if((0|i)==e[136272+(r<<4)>>2]){if(e[136276+(r<<4)>>2])break r;if(Jr(0,r))break a;break r}if((0|s)==(0|(r=r+1|0)))break}r=-1}r:if((0|r)>=0)e[c>>2]=r,iA(c+2336|0,86007,c),e[33285]=I;else if((l=!mA)|(0|i)!=46|(0|I)==46||(e[c+2600>>2]=0,e[c+2604>>2]=0,e[c+2540>>2]=86036,!gA(V,c+2540|0,c+2544|0,c+2600|0,0,0))?r=qr(c+2240|0,V,i,0):(Lt(V,r=c+2544|0,c+2600|0,-1,0),os(s=r,r=c+2160|0),e[c+64>>2]=r,iA(r=c+2304|0,85451,c- -64|0)),s=r,l|!e[c+2148>>2]|2&d[V+76|0]){for(r=e[33285],l=1;;){a:{n:{if(!r){if(r=e[33283],e[r>>2]==e[r+4>>2]|(0|i)==60|(0|i)!=(0|I))break a;if(l=l+1|0,I=e[33285])break n;e[33284]=e[33284]+1,r=e[33283],I=0|KA[e[r+8>>2]](r),r=e[33285];continue}if((0|i)==60|(0|i)!=(0|I))break a;I=r,l=l+1|0}r=0,e[33285]=0;continue}break}if(e[c+2152>>2]=I,mA&&(e[33285]=I),(0|l)==1){e[c+16>>2]=s,iA(c+2336|0,86219,c+16|0);break r}if((0|l)<=3){if(f[c+2336|0]=0,(0|(r=e[50786]))<=299&&(e[c+2336>>2]=d[86728]|d[86729]<<8|d[86730]<<16|d[86731]<<24,k[c+2340>>1]=d[86732]|d[86733]<<8),(0|l)>0){for(;e[c+32>>2]=s,iA(r=c+2160|0,86219,c+32|0),I=l>>>0>1,Ur(c+2336|0,r),l=l-1|0,I;);r=e[50786]}if((0|r)>299)break r;e[c+2160>>2]=d[86857]|d[86858]<<8|d[86859]<<16|d[86860]<<24,r=d[86860]|d[86861]<<8|d[86862]<<16|d[86863]<<24,f[c+2163|0]=r,f[c+2164|0]=r>>>8,f[c+2165|0]=r>>>16,f[c+2166|0]=r>>>24,Ur(c+2336|0,c+2160|0);break r}e[c+56>>2]=s,e[c+52>>2]=l,e[c+48>>2]=s,iA(c+2336|0,86932,c+48|0)}else e[33691]=i,e[33285]=I,k[c+2336>>1]=32;if(l=CA(s=c+2336|0),yA((r=e[c+2148>>2])+189424|0,s),e[c+2148>>2]=r+l,mA){if((0|i)==45){s=16384;break e}if(s=Gr(i),!(2&d[V+76|0]|(0|r)<=0)){s=(-32769&s)==266270?262148:(28672&s)==4096?266244:262148;break e}if(!(524288&s)){s=(28672&s)==4096?266244:262148;break e}if((0|s)>=0)break e}i=e[c+2156>>2]}}if(i|!(2097152&Y)||(r=yA(e[c+2148>>2]+189424|0,qr(c+2336|0,V,e[c+2156>>2],1)),d[0|r]?(e[c+2148>>2]=e[c+2148>>2]+CA(r),Y&=-28673,i=e[c+2156>>2]):i=0),I=0,mA){r:if(ar(g=e[c+2152>>2]))for(l=e[33285],r=0;;){if(!l&&(s=e[33283],e[s>>2]==e[s+4>>2])||!ar(g))break r;r=((0|g)==10)+r|0,(g=e[33285])?(e[33285]=0,l=0):(e[33284]=e[33284]+1,s=e[33283],g=0|KA[e[s+8>>2]](s),l=e[33285])}else r=0;s=(0|(I=e[c+2156>>2]))==46&&(0|r)<2?4194304|Y:Y;r:{if(!r){l=1,(0|I)!=44|(0|Pe)!=46|e[V+212>>2]!=26741|ye-48>>>0>=10||g-48>>>0>=10&&!ce(g)||(e[c+2156>>2]=1367,l=0),(0|(Y=e[c+2156>>2]))!=46|(0|g)!=39||(I=l,Y=e[33283],(0|(ke=e[Y>>2]))==e[Y+4>>2]?l=0:(l=0|KA[e[Y+8>>2]](Y),e[Y>>2]=ke),Y=e[c+2156>>2],l=(0|l)!=115&I);a:if((0|Y)!=46)l&=te;else{n:if(1&f[V+106|0]){if(!(Pe-48>>>0<10)&&((I=Pe-73|0)>>>0>15|!(1<<I&40969)||!(1<<(I=ye-73|0)&40969&&I>>>0<=15||ar(ye))))break n;l=Pe-48>>>0>=10?0:!ce(g)&(0|g)!=45&l}if(ce(g)&&(l=d[V+208|0]!=0&l),te){Y=e[c+2156>>2];break a}Y=32,e[c+2156>>2]=32,l=0}if(!(!l|(0|Y)!=46|!e[47203]|(0|g)!=60)){er=e[c+2148>>2],A=s;break r}if(!l)break r}if(A=e[c+2148>>2]+189424|0,f[0|A]=32,f[A+1|0]=0,e[33285]=g,Pe-48>>>0<10&&(s=Bt(g)?s:-4194305&s),(0|r)<2)break e;s=(0|s)==536621?536656:(0|s)==532520?532555:524358;break e}(e[33285]||(I=0,r=e[33283],e[r>>2]!=e[r+4>>2]))&&(I=0,ar(e[c+2152>>2])&&(e[33285]=g))}s=A}if(e[33712]!=1){if((0|i)!=(0|(r=e[c+2156>>2])))l=e[c+2148>>2],(0|r)==57404&&(r=60,e[c+2156>>2]=60);else{A:{if(mn(i))r=57384;else{if(r=45,e[c+2156>>2]==45)break A;r=32}e[c+2156>>2]=r}l=e[c+2148>>2]}e[c+2148>>2]=dr(r,l+189424|0)+e[c+2148>>2],ar(e[c+2156>>2])||mn(e[c+2156>>2])||(A=e[c+2148>>2],k[lA+(A<<1)>>1]=e[33284]-e[47353],(0|A)<=(l+1|0)||Ve(Wn+(l<<1)|0,255,A+~l<<1)),r=e[c+2148>>2],e[zr>>2]=r;A:{r:{if((0|r)>725){if(!Bt(e[c+2156>>2]))break r;r=e[c+2148>>2]}if((0|r)<796)continue;break A}if(r=e[c+2148>>2],!(e[c+2156>>2]-48>>>0>=10)&&(0|r)<796)continue}break}}f[0|(A=r+189424|0)]=32,f[A+1|0]=0,e[33285]=e[c+2152>>2],s=16384}H=c+2608|0,NA=s,as&&(A=e[p+780>>2],e[as>>2]=A||NA>>>12&7),A=(p+5184|0)+(e[p+6800>>2]<<1)|0,k[A+6>>1]=0,k[A+2>>1]=0,k[A+4>>1]=32767,Y=O(4095&NA,8388608&NA?320:10),s=189424;e:{A:{r:if(A=d[189424]){for(;;){if(!!(255&(A=A<<24>>24))&A>>>0<33){if(A=d[0|(s=s+1|0)])continue;break r}break}if(d[0|s])break A}Y=(0|(r=Y-(A=e[47566])|0))>0?r:0,e[47566]=Y+A,NA=d[190268]?524288|NA:NA,e[V+8240>>2]=NA;break e}e[47566]=Y,A=d[190268],e[V+8240>>2]=NA,A&&(JA=1,e[47568]=e[47568]+1,(0|(A=e[47569]))<=0||(A=A-1|0,e[47569]=A,A||(f[190280]=0)))}e[49572]=1,e[47572]=655360,e[47573]=0,e[V+8184>>2]=0,e[V+8188>>2]=0,A=0,e[V+288>>2]=0,e[(r=V- -8192|0)>>2]=0,e[r+4>>2]=0,e[V+8200>>2]=0,e[V+8224>>2]=0,e[V+8228>>2]=0,e[(r=V+8232|0)>>2]=0,e[r+4>>2]=0,f[p+786|0]=32,k[p+784>>1]=8192,e[p+6812>>2]=32,k[p+1588>>1]=3,e[p+1584>>2]=0,s=0;e:if(!((0|(r=e[p+6800>>2]))<=0)){for(;;){if(k[(p+5184|0)+(s<<1)>>1]>0)break e;if((0|r)==(0|(s=s+1|0)))break}s=r}if(r=y[(p+5184|0)+(s<<1)>>1],k[p+1592>>1]=r,r)for(;A=!!(65535&~r)+A|0,r=y[(p+5184|0)+((s=s+1|0)<<1)>>1];);for(f[p+1594|0]=A,l=3,lA=1,s=0;;){ye=e[p+6808>>2],sr(p+6808|0,(_e=(p+784|0)+l|0)-1|0),!d[V+170|0]|e[p+6808>>2]-48>>>0>=10||Bt(ye)&&(e[p+6808>>2]=97),ne?e[p+6812>>2]=ne:M&&sr(p+6812|0,M+189423|0),r=M;e:{A:if(s||(r=_A(p+6816|0,M+189424|0)+M|0,s=e[p+6816>>2])){if(te=_A(p+6804|0,A=r+189424|0),(0|s)==1){if(i=r-1|0,ne=32,Pe=0,e[p+6812>>2]!=32){r=i,A=32;break A}M=0,s=r;r:{a:switch(d[0|A]-43|0){case 0:s=r+1|0,M=64;break r;case 2:break a;default:break r}s=r+1|0,M=96}if(f[0|(A=s+189424|0)]-48>>>0>=10)g=s+1|0,te=-1;else{for(te=Us(A);s=(A=s)+1|0,f[A+189424|0]-48>>>0<10;);g=s,s=A}if((0|(ne=e[47350]))>247)A=0;else if(A=0,!((0|(s=f[s+189424|0]))<0)&&(s=ba(84868,255&s,14))){r=(A=s-84868|0)+1|0,(0|te)==-1&&(te=e[105536+(r<<2)>>2],M=0);r:{a:switch(A-8|0){case 0:e[49574]=0,e[49573]=te;break r;case 4:break a;default:break r}(0|te)>=3?f[199304]=1:f[199304]=0}A=1,e[47350]=ne+1,e[198304+(ne<<2)>>2]=(r+M|0)+(te<<8),r=g}ne=e[p+6812>>2],Ve(i+189424|0,32,r-i|0),ss=A+ss|0,s=0;break e}ne=0,(0|s)==32|e[49573]!=36?(Pe=0,A=s):(e[p+6812>>2]!=32|e[p+6804>>2]!=32||(e[49573]=20),Pe=0,A=pn(s,V))}else e[p+6804>>2]=32,Pe=1,ne=0,te=0,A=32;A:if($t){if($t=1,lA=8,s=0,(0|A)!=93|e[p+6804>>2]!=93)break A;r=r+1|0,A=32,$t=0}else if((240&(s=e[49573]))!=64)if($t=0,16&s)s=0;else{r:{a:{n:{o:{if(!((0|(g=(0|A)==8242||(0|A)==8217||(0|A)==146||(0|A)==180?39:A))!=8216&(0|g)!=63))if(Bt(e[p+6808>>2])){if(g=A,Bt(e[p+6804>>2])){g=39;break o}}else g=A;c:{if((0|g)!=1367){if((0|g)==1328){z|=1024,g=32;break o}if((A=g-44032|0)>>>0>11183)break o;if(i=((s=((I=65535&A)>>>0)/28|0)>>>0)%21|0,A=A-O(s,28)&65535,g-50500>>>0>587)break c;s=A?A+4519|0:0,i=i+4449|0;break a}z|=131072,er=e[p+6804>>2],A=e[p+6812>>2],g=32;break n}s=50500+(A+O(i,28)|0)|0,i=(I>>>0)/588|4352;break a}if(er=e[p+6804>>2],A=e[p+6812>>2],!((s=g-12592|0)>>>0>51)){i=4352|d[s+103296|0],s=0;break a}}c=r+189424|0;n:if(!((0|(s=e[V+212>>2]))!=28268&(0|s)!=24934|(0|g)!=39)&&!FA(A)&&(_A(p+6820|0,c+1|0),gn(e[p+6820>>2]))){i=601,s=0;o:switch(er-110|0){case 6:break a;case 0:break o;default:break n}if(e[V+212>>2]!=24934)break a;f[0|c]=32;break a}if(e[p+6824>>2]=32,(0|(A=e[49897]))>0)e[49897]=A-1,s=0;else{if(!g){s=0,i=0;break r}n:{o:{c:{u:if((mA=e[V+180>>2])&&(I=g,(ke=Bs(g))&&(I=pn(g,V)),!fi(mA)))for(;;){e[p+16>>2]=0,e[p+624>>2]=I,A=_A(p+16|0,mA)+mA|0;l:if(e[p+624>>2]==e[p+16>>2]){if(d[0|A]){for(i=1,Dt=0,s=c;Yt=_A(p+16|0,A),fr=_A(p+624|0,s),zr=pn(e[p+624>>2],V),e[p+624>>2]=zr,s=s+fr|0,Dt=(fr=(0|zr)==e[p+16>>2])+Dt|0,i&=fr,d[0|(A=A+Yt|0)];);if(!i)break l;e[49897]=Dt}if(!(A=A+1|0))break u;if(8&d[188788]&&(e[p>>2]=mA,e[p+4>>2]=A,Kt(e[47195],85187,p)),A=_A(p+6828|0,A)+A|0,d[0|A])break c;s=0;break o}for(;s=A,A=A+1|0,d[0|s];);for(;d[0|(s=(A=s)+1|0)];);if(fi(mA=A+2|0))break}s=0,i=g;break n}_A(p+6824|0,A),ke&&Bs(er)&&(e[p+6824>>2]=Ua(e[p+6824>>2])),s=e[p+6824>>2]}i=e[p+6828>>2],z|=2097152,ke&&(i=Ua(i))}if((0|i)!=8)break a}i=r;break e}s?e[p+6804>>2]=s:s=0}Bt(i)||gn(i)||Sr(e[V+336>>2],i)||!Bt(e[p+6808>>2])|!(!d[V+170|0]|i-48>>>0>=10)&e[p+6804>>2]-48>>>0>=10||(i=32,Ke=1);r:{a:{n:{o:{c:{if(e[p+6808>>2]-48>>>0<10){if(i-48>>>0<10){A=P;break c}if(1<<(A=i-32|0)&20481&&A>>>0<=14)break o;Ke=1}else if(A=0,e[p+6812>>2]!=44||(A=P,(0|i)!=44))break c;i=32;break o}if((0|i)==91&&((0|(g=e[p+6804>>2]))==2||(i=91,(0|g)==91&&e[47204])))break n;P=A}if(Bt(i)){o:{c:{u:{if(Bt(e[p+6808>>2])){if(!d[V+171|0]||(A=e[p+6808>>2],!((0|i)>12352)&&(0|A)<12353))break u}else A=e[p+6808>>2];if(Er=Sr(e[V+336>>2],A)?Er:0,(0|(A=e[p+6808>>2]))!=32&&!Sr(e[V+336>>2],A)){A=32,X=mn(e[p+6808>>2])?X:256|X;break c}z=Bs(i)?2|z:z,e[p+6808>>2]!=32|f[_e-2|0]-48>>>0>=10|e[p+6812>>2]-48>>>0<10||(f[(p+784|0)+l|0]=32,A=1588+(O(GA,12)+p|0)|0,k[A>>1]=y[A>>1]+1,l=l+1|0)}if(A=32,(0|i)==32)break o;if(Er=Er+1|0,(0|(g=e[V+600>>2]))<=0){A=i;break o}if(!((0|i)<=591&(0|(I=e[p+6808>>2]))>=(0|g))){if((0|i)<(0|g)){A=i;break o}if((0|Er)<2){A=i;break o}if(!((0|I)<=591)){A=i;break o}}if(!Bt(I)){A=i;break o}z|=16384,X|=128}Ke=1}if(ra=ra+1|0,Bs(A)){if(g=pn(A,V),e[V- -64>>2]){A=sa?g:712,s=sa?s:g,sa=1;break A}if(ce(e[p+6812>>2])){if(e[p+6808>>2]==32){A=g;break A}if(A=32,e[V+212>>2]!=26465)break r;for(i=85240,I=(p+784|0)+l|0,te=0;;){if(c=CA(i),d[0|(ye=I-c|0)]==32&&!Hr(ye+1|0,i,c=c-1|0)){if((0|(i=f[i+c|0]))==(0|g)){A=g;break A}if((0|i)==65&&nn(V,g)){A=g;break A}}if(i=e[131184+((te=te+1|0)<<2)>>2],(0|te)==11)break}break r}if(A=32,(0|g)==32)break A;if(!Bs(e[p+6812>>2])){A=g;break A}if(!ce(e[p+6804>>2])){A=g;break A}if(_A(p+16|0,189424+(r+te|0)|0),!(e[V+212>>2]!=28268|(0|Er)!=2|(0|g)!=106|e[p+6812>>2]!=73)){A=g;break A}if(e[p+6808>>2]==32){A=g;break A}if(!Bt(e[p+16>>2])){A=g;break A}X|=256,ne=32,Ke=1;break A}if(!lA){lA=0;break A}if((0|Er)<3){lA=0;break A}if((0|A)!=115){lA=0;break A}if(e[V+212>>2]!=25966){lA=0;break A}if(e[p+6804>>2]!=32){lA=0;break A}if(lA|=4,A=32,d[(i=l+p|0)+783|0]!=39)break A;f[i+783|0]=32;break A}A=32;o:{c:{u:{l:{i:switch(i-39|0){default:if((0|i)==95)break A;case 1:case 2:case 3:case 4:case 5:if(i-48>>>0>=10||d[V+170|0]&&Bt(e[p+6808>>2])&&!((g=e[p+6804>>2])-48>>>0<10|g-2406>>>0<10))break o;if((0|(I=e[p+6808>>2]))==32)break c;if(g=e[p+6808>>2],I-48>>>0<10)break u;if((0|(I=g))==(0|(g=e[V+128>>2])))break l;Ke=1;break A;case 6:if(!gn(e[p+6812>>2])&&Bt(e[p+6804>>2])){if(e[p+6808>>2]!=32){Ke=1;break A}if(z|=128,(0|GA)<=0)break A;i=1572+(O(GA,12)+p|0)|0,e[i>>2]=16384|e[i>>2];break A}if(i=e[p+6804>>2],!(e[p+6812>>2]!=32|(0|i)!=32)){Mt=4;break A}if((0|i)==45){r=r+1|0,Mt=4;break A}if(A=45,e[p+6808>>2]!=32||!Bt(ye)||Bt(e[p+6812>>2]))break A;f[(p+784|0)+l|0]=32,i=1588+(O(GA,12)+p|0)|0,k[i>>1]=y[i>>1]+1,l=l+1|0;break A;case 7:if(e[p+6808>>2]==46){Ke=1;break A}if(A=46,(0|GA)<=0||(i=1572+(O(GA,12)+p|0)|0,1&f[i+1|0])||!Bt(e[p+6812>>2]))break A;e[i>>2]=65536|e[i>>2],A=(A=gn(e[p+6804>>2]))||e[p+6804>>2]==45?32:46;break A;case 0:break i}i:{if((0|(g=e[p+6812>>2]))!=46||(i=115,e[p+6804>>2]!=115)){if(!MA(g))break i;i=e[p+6804>>2]}if(Bt(i))break a}if(1&(i=e[V+88>>2])){if(Bt(e[p+6804>>2]))break a;i=e[V+88>>2]}if(2&i&&Bt(e[p+6812>>2]))break a;if(!(!Sr(e[V+332>>2],e[p+6812>>2])|(0|ye)!=32)){r=(e[p+6804>>2]==32)+r|0;break a}if(g=(0|(i=e[p+6808>>2]))!=115|qs,qs=0,!(1&g))break A;qs=!!(0|gn(i)),Mt=4;break A}if((0|g)==44&P){Ke=1;break A}P=1;break o}if((0|g)!=32)break o}Bt(ye)&&(Bt(e[p+6812>>2])||(f[(p+784|0)+l|0]=32,A=1588+(O(GA,12)+p|0)|0,k[A>>1]=y[A>>1]+1,l=l+1|0))}A=i;break A}$t=1,i=r+1|0,P=A;break e}A=39,qs=0;break A}Ke=1,ne=32}else{if(A-48>>>0<10){s=0,i=(0|(g=e[49574]+1|0))>(15&e[49573]),e[49574]=i?0:g,A=i?32:A,Ke|=i,$t=0;break A}s=0,e[49574]=0,A=(i=e[p+6808>>2]-48>>>0<10)?32:A,Ke|=i,$t=0}if(gn(A)){if(e[p+6808>>2]==32){z|=262144,i=r;break e}if(i=e[p+6816>>2]-9>>>0<2,I=1&Ke){te=0;A:if(!((0|h)>(0|(A=r-1|0))))for(;;){if(!(g=k[(p+5184|0)+(A<<1)>>1]))break A;if(te=((0|g)>0)+te|0,!((0|h)<=(0|(A=A-1|0))))break}f[1594+(O(GA,12)+p|0)|0]=te}if(X=i?262144|X:X,f[(p+784|0)+l|0]=32,A=l+1|0,!((0|GA)>298||(i=(p+1584|0)+O(GA,12)|0,(0|(g=y[i+4>>1]))>=(0|A)))){if((0|ss)<=0?h=e[i>>2]:(h=198300+(e[47350]<<2)|0,e[h>>2]=128|e[h>>2],ss=0,h=64|e[i>>2]),c=e[47352],f[i+6|0]=c,e[i>>2]=h|(ra?lA:-2&lA)|(d[199304]?2048:0)|z,(0|c)>0){for(;z=(h=p+784|0)+A|0,h=h+(A=A-1|0)|0,f[0|z]=d[0|h],(0|A)>(0|g););f[0|h]=32,k[i+4>>1]=g+1,A=l+2|0}g=(p+1584|0)+O(GA=GA+1|0,12)|0,e[g>>2]=0,k[g+4>>1]=A,l=r;A:if(!((0|(i=e[p+6800>>2]))<=(0|r))){for(;;){if(k[(p+5184|0)+(l<<1)>>1]>0)break A;if((0|i)==(0|(l=l+1|0)))break}l=i}if(te=y[(p+5184|0)+(l<<1)>>1],k[g+8>>1]=te,ra=0,i=0,te)for(;i=!!(65535&~te)+i|0,te=y[(p+5184|0)+((l=l+1|0)<<1)>>1];);f[g+10|0]=i,e[47352]=0,lA=1,z=X,X=0,sa=0}Ke=0,s=I?0:s,i=I?M:r}else(0|l)>795?(i=r,r=h,A=l):(A=dr(A,(p+784|0)+l|0)+l|0,i=r,r=h);e[47352]<(0|Mt)&&(e[47352]=Mt),Mt=0,h=r,l=A}if(Pe||(M=i,!((0|l)<799)))break}(0|ss)<=0|GA||(A=198300+(e[47350]<<2)|0,e[A>>2]=128|e[A>>2],e[p+1584>>2]=64|e[p+1584>>2],GA=1),A=(p+784|0)+l|0,e[V+8204>>2]=A-1,r=0,f[0|A]=0,f[p+1590|0]=0,f[1590+(O(GA,12)+p|0)|0]=8;e:if((0|GA)<=0)e[p+1584>>2]=512|e[p+1584>>2],l=e[49572];else{A=GA-1|0;A:if((0|GA)!=1)for(s=A;;){if(!mn(f[y[1588+(O(s,12)+p|0)>>1]+(p+784|0)|0])){r=s;break A}if(g=(0|s)>1,s=s-1|0,!g)break}if(r=(p+1584|0)+O(r,12)|0,e[r>>2]=16|e[r>>2],4194304&NA&&(A=(p+1584|0)+O(A,12)|0,256&(r=e[A>>2])||(e[A>>2]=65536|r)),e[p+1584>>2]=512|e[p+1584>>2],!((0|GA)<=0|(0|(l=e[49572]))>990))for(g=3|(A=p+624|0),I=2|A,ne=p+754|0,Pe=!(4194304&NA),M=0,h=0;;){e[47354]=e[47354]+1;A:{if((0|(A=e[49827]))<=0||(A=A-1|0,e[49827]=A,A)){if(d[190280])break A}else f[190280]=0;A=y[1588+(O(M,12)+p|0)>>1]+(p+784|0)|0;r:if(!(f[0|A]-48>>>0>=10)&&(r=p+624|0,s=A,e[V+112>>2]!=1227133512)){for(;;){a:{if(f[0|s]-48>>>0<10)f[0|r]=d[0|s],r=r+1|0,s=s+1|0;else{if(e[V+124>>2]!=f[0|s]|d[s+1|0]!=32||(l=s+2|0,d[s+3|0]==32|f[0|l]-48>>>0>=10|d[s+4|0]==32))break a;M=M+1|0,s=l}if(r>>>0<ne>>>0)continue;break r}break}Ve(A+(r=r-(P=p+624|0)|0)|0,32,(s=(l=s-A|0)-r|0)>>>0<=l>>>0?s:0),rt(A,P,r)}for(r=0;s=r,r=r+1|0,f[A+s|0]-48>>>0<10;);r:if(s-5>>>0<=27){for(f[p+626|0]=32,k[p+624>>1]=8224,d[0|A]!=48&e[V+132>>2]>=(0|s)||(r=(p+1584|0)+O(M,12)|0,e[r>>2]=524288|e[r>>2]),X=(p+1584|0)+O(M,12)|0,te=0,l=g;r=A,!((A=f[0|A])-48>>>0>=10&(0|A)!=e[V+128>>2])&&(f[0|l]=A,A=l+1|0,P=s,(0|(s=s-1|0))<=0?l=A:e[V+112>>2]>>>s&1?(c=e[X+4>>2],z=(p+16|0)+O(te,12)|0,e[z>>2]=e[X>>2],e[z+4>>2]=c,e[z+8>>2]=e[X+8>>2],te=te+1|0,(0|(z=e[V+124>>2]))!=32&&(f[l+1|0]=z,A=l+2|0),f[0|A]=32,l=A+1|0,8&d[X+2|0]||((Mt=e[V+112>>2])>>>P-2&1&&(f[A+1|0]=48,f[A+2|0]=48,Mt=e[V+112>>2],l=A+3|0),Mt>>>P-3&1&&(f[0|l]=48,l=l+1|0))):l=A,A=r+1|0,l>>>0<ne>>>0););if(s=e[X+4>>2],A=(p+16|0)+O(te,12)|0,e[A>>2]=e[X>>2],e[A+4>>2]=s,s=e[X+20>>2],e[A+16>>2]=e[X+16>>2],e[A+20>>2]=s,s=e[X+12>>2],e[A+8>>2]=e[X+8>>2],e[A+12>>2]=s,s=1,(0|te)>0)for(;A=(p+16|0)+O(s,12)|0,e[A>>2]=-262209&e[A>>2],(0|te)>=(0|(s=s+1|0)););if(A=d[r+4|0]|d[r+5|0]<<8|d[r+6|0]<<16|d[r+7|0]<<24,s=d[0|r]|d[r+1|0]<<8|d[r+2|0]<<16|d[r+3|0]<<24,f[0|l]=s,f[l+1|0]=s>>>8,f[l+2|0]=s>>>16,f[l+3|0]=s>>>24,f[l+4|0]=A,f[l+5|0]=A>>>8,f[l+6|0]=A>>>16,f[l+7|0]=A>>>24,A=d[r+12|0]|d[r+13|0]<<8|d[r+14|0]<<16|d[r+15|0]<<24,r=d[r+8|0]|d[r+9|0]<<8|d[r+10|0]<<16|d[r+11|0]<<24,f[l+8|0]=r,f[l+9|0]=r>>>8,f[l+10|0]=r>>>16,f[l+11|0]=r>>>24,f[l+12|0]=A,f[l+13|0]=A>>>8,f[l+14|0]=A>>>16,f[l+15|0]=A>>>24,f[l+16|0]=0,l>>>0<=g>>>0)break r;for(A=d[X+6|0],te=0,s=g;;){for(h=re(V,s,(p+16|0)+O(te,12)|0,255&A);A=d[0|s],s=s+1|0,(0|A)!=32;);if(A=0,f[X+6|0]=0,te=te+1|0,!(s>>>0<l>>>0))break}}else{if(e[47352]=0,h=re(V,A,r=(p+1584|0)+O(M,12)|0,d[r+6|0]),(0|(s=e[47352]))>d[r+18|0]&&(f[r+18|0]=s,e[47352]=0),!(!(4096&h)|d[0|A]==32))for(;Ve(p+624|0,0,150),e[p+624>>2]=538976288,e[p+628>>2]=538976288,f[p+632|0]=32,re(V,rt(I,A,s=_A(p+16|0,A)),r,0),d[0|(A=A+s|0)]!=32;);50331648&h&&(Y=(A=Pe|(~e[33264]+GA|0)!=(0|M))?Y:10,A|!as||(e[as>>2]=4,Y=10))}if(128&h&&!((0|(r=e[33264]))<=0)){if(A=0,s=r,l=3&r)for(;P=(p+1584|0)+O(s+M|0,12)|0,e[P>>2]=1048576|e[P>>2],s=s-1|0,(0|l)!=(0|(A=A+1|0)););if(r>>>0>=4)for(;A=(p+1584|0)+O(s+M|0,12)|0,e[A>>2]=1048576|e[A>>2],e[(r=A-12|0)>>2]=1048576|e[r>>2],e[(r=A-24|0)>>2]=1048576|e[r>>2],e[(A=A-36|0)>>2]=1048576|e[A>>2],s=s-4|0;);e[33264]=s}}if(l=e[49572],(0|GA)<=(0|(M=M+1|0)))break e;if(!((0|l)<991))break}}if((0|(s=e[47351]))<(0|(g=e[47350]))){for(ne=e[47202],Pe=e[49846],te=e[47352];;){A=(r=e[198304+(s<<2)>>2])>>8;e:{A:switch((31&r)-9|0){case 0:ne=A;break e;case 4:Pe=A;break e;case 3:break A;default:break e}te=r>>>0>=256?A+te|0:0}if(!(!(128&r)&(0|g)>(0|(s=s+1|0))))break}e[47352]=te,e[47351]=s,e[49846]=Pe,e[47202]=ne}e[49572]=l+2,e[(A=190288+(l<<3)|0)>>2]=589824,k[A+4>>1]=i,e[A+8>>2]=589824,k[A+12>>1]=i,r=GA&&e[47199]?Y:10,e[33285]?A=0:(A=e[33283],A=e[A>>2]==e[A+4>>2]),Y=A?r:Y,M=JA,g=0,GA=0,H=I=H-32192|0,e[I+24>>2]=0,e[I+28>>2]=0,e[I+16>>2]=0,e[I+20>>2]=0,e[I+8>>2]=0,e[I+12>>2]=0,e[I>>2]=0,e[I+4>>2]=0,i=e[49572],c=y[190284+(i<<3)>>1];e:{if((0|(s=i-3|0))<0)A=s;else{for(;;){if(g=(0|(r=127&d[(A=190288+(s<<3)|0)+3|0]))<(0|g)?g:r,y[A+4>>1])A=s;else if(A=-1,r=(0|s)>0,s=s-1|0,r)continue;break}if(g>>>0>3)break e}for(;;){if((0|(A=A-1|0))<0)break e;if(64&d[0|(r=190288+(A<<3)|0)]){f[r+3|0]=4;break e}if(!(d[r+3|0]<4))break}}if(A=e[V+292>>2],s=0,(0|i)<=0)g=0;else for(P=-1,g=0;;){r=A,e[V+292>>2]!=(0|A)&&(k[(A=190288+(s<<3)|0)>>1]=32|y[A>>1]),(0|g)>0&&(X=e[(h=190288+(s<<3)|0)+4>>2],e[(l=(A=s-g<<3)+190288|0)>>2]=e[h>>2],e[l+4>>2]=X,(0|P)!=-1&&(k[4+(A+190288|0)>>1]=P),P=-1);e:{if(d[2+((l=s<<3)+190288|0)|0]==21){if(A=d[(h=l+190288|0)+7|0],2&d[0|h])break e;A:if((0|A)!=(0|r)){if(h=d[10+(l+190288|0)|0]-9|0){if((0|h)==12)break A;break e}if(d[18+(l+190288|0)|0]!=21)break e}(0|P)==-1&&(P=(A=y[4+(l+190288|0)>>1])||-1),g=g+1|0}A=r}if((0|i)==(0|(s=s+1|0)))break}if(e[49572]=i-g,rs(A),(r=e[V+36>>2])&&!((0|(A=(g=e[49572])-1|0))<0))for(ne=256&r,z=4&r,Pe=8&r,X=15&r,Ke=16&r,JA=2&r,r=r>>>8&1,s=0;;){if(l=g,i=s,g=A,(0|(A=d[(h=(lA=A<<3)+190288|0)+2|0]))==21){e:{A:{if((0|(s=l-2|0))>=0)for(;;){if(d[2+((A=s<<3)+190288|0)|0]==21)break A;if(A=(0|s)>0,s=s-1|0,!A)break}A=e[V+292>>2];break e}A=d[7+(A+190288|0)|0]}rs(A),A=d[h+2|0]}if(s=i,(A=e[144464+((255&A)<<2)>>2])&&(s=r,!(32&d[0|h]))){s=d[A+11|0],P=0,JA&&((0|(l=d[0|A]))!=118&(0|l)!=82||(i=Ke?0:i,P=1));e:{A:{r:{a:switch((l=253&s)-4|0){case 1:break r;case 0:break a;default:break A}if(X&&(s=1,!i)||(0|(s=i))!=2||(s=2,!(A=d[A+13|0])))break e;f[h+2|0]=A;break e}if(X&&(s=2,!i)||(0|(s=i))!=1||(s=1,!(A=d[A+13|0])))break e;f[h+2|0]=A;break e}s=0,Pe&&(s=l?i:0)}s=A=P?0:s,y[4+(lA+190288|0)>>1]&&(s=A=z?0:A,ne&&(s=A||1))}if(!((0|(A=g-1|0))>=0))break}if(rs(e[V+292>>2]),e[49572]<=0)Ke=-2,s=0;else{for(s=-1,i=0,h=0,Pe=0;;){A=h<<3,(0|s)!=-1&&(k[4+(A+190288|0)>>1]=s),d[(P=A+190288|0)+2|0]==21&&rs(d[7+(A+190288|0)|0]),X=e[49572];e:{if(!(32&d[0|(l=A+190288|0)])){i=(0|(r=X-1|0))>(0|h)?e[144464+(d[10+(A+190288|0)|0]<<2)>>2]:i,!(y[l+12>>1]|(0|r)==(0|h))&&(te=0,d[i+11|0]|!i)||(te=1),g=d[P+2|0];A:if(!((0|(Ke=e[49848]))<=0))for(r=A+190288|0,s=0;;){if(ne=O(s,3),d[ne+199408|0]==(255&g)&&!((z=d[2+(ne+199408|0)|0])&(1^te)|(4&d[r+3|0]?2&z:0)|(y[r+4>>1]?0:4&z))){if(g=d[1+(ne+199408|0)|0],f[P+2|0]=g,!(2&d[e[144464+(g<<2)>>2]+4|0])|d[r+3|0]<2)break A;f[r+3|0]=0;break A}if((0|Ke)==(0|(s=s+1|0)))break}if(!(255&g)){s=y[4+(A+190288|0)>>1];break e}}s=e[l+4>>2],A=(I+32|0)+(Pe<<5)|0,r=e[l>>2],e[A>>2]=r,e[A+4>>2]=s,r=e[144464+(r>>>14&1020)>>2],e[A+8>>2]=r,f[A+17|0]=d[r+11|0],Pe=Pe+1|0,s=-1}if(!((0|Pe)<1e3&(0|X)>(0|(h=h+1|0))))break}if(g=0,s=0,!((0|(Ke=Pe-2|0))<=0))for(;;){e:if(y[4+((I+32|0)+(g<<5)|0)>>1]){for(r=(0|g)>(0|Ke)?g:Ke,s=0,A=g;;){if((0|A)!=(0|r)){if(s=(0|s)>(0|(l=d[3+((i=I+32|0)+(A<<5)|0)|0]))?s:l,!y[4+(i+((A=A+1|0)<<5)|0)>>1])continue}else A=r;break}if((0|A)<=(0|g))break e;if(r=~g+A|0,i=0,l=A-g&7)for(;f[6+((I+32|0)+(g<<5)|0)|0]=s,g=g+1|0,(0|l)!=(0|(i=i+1|0)););if(r>>>0<7)break e;for(;f[(r=(I+32|0)+(g<<5)|0)+6|0]=s,f[r+38|0]=s,f[r+70|0]=s,f[r+102|0]=s,f[r+134|0]=s,f[r+166|0]=s,f[r+198|0]=s,f[r+230|0]=s,(0|(g=g+8|0))!=(0|A););}else A=g+1|0;if(g=A,!((0|Ke)>(0|A)))break}}for(e[I+40>>2]=e[36125],rs(e[V+292>>2]),ye=(0|s)<4,h=1,ne=1,X=0,r=0,s=0,JA=0;;){e:{A:{r:{a:{if(r){if(i=(A=I+32|0)+((P=s-1|0)<<5)|0,X=d[2+(A+(s<<5)|0)|0],(0|P)>0){if(A=h-(s=(0|h)>0)|0,P>>>0>=(g=s?h:2)>>>0)for(;l=(s=(I+32|0)+(g<<5)|0)-32|0,h=e[s+12>>2],e[l+8>>2]=e[s+8>>2],e[l+12>>2]=h,h=e[s+4>>2],e[l>>2]=e[s>>2],e[l+4>>2]=h,h=e[s+28>>2],e[l+24>>2]=e[s+24>>2],e[l+28>>2]=h,h=e[s+20>>2],e[l+16>>2]=e[s+16>>2],e[l+20>>2]=h,(0|P)>=(0|(g=g+1|0)););h=A}te=e[144464+(X<<2)>>2],e[i>>2]=0,e[i+4>>2]=0,e[i+24>>2]=0,e[i+28>>2]=0,e[i+16>>2]=0,e[i+20>>2]=0,e[i+8>>2]=0,e[i+12>>2]=0,f[i+2|0]=r,A=e[144464+(r<<2)>>2],e[i+8>>2]=A,X=i}else{if((0|s)>=(0|Ke)|(0|JA)>=997)break a;l=d[(i=(g=s<<5)+(I+32|0)|0)+2|0],A=e[144464+(l<<2)>>2],e[i+8>>2]=A,P=y[i+4>>1],(0|l)==21&&rs(d[7+(g+(I+32|0)|0)|0]),h=P?s:h,te=e[144464+(d[i+34|0]<<2)>>2],e[i+40>>2]=te,P=s}if(!A){r=0,s=P+1|0;continue}if(VA(V,256,i,I+32040|0,I),(0|(s=e[I+32052>>2]))>0&&(g=(I+32|0)+(P<<5)|0,te=e[144464+(s<<2)>>2],e[g+40>>2]=te,f[g+34|0]=s,f[g+49|0]=d[te+11|0]),s=0,r)r=A;else if((0|(g=e[I+32056>>2]))<=0)r=A;else{r=e[144464+(g<<2)>>2],e[i+8>>2]=r,s=d[i+2|0],f[i+2|0]=g,g=y[i>>1];n:if(d[r+11|0]!=2)k[i>>1]=65531&g;else{if(k[i>>1]=4|g,d[A+11|0]==2)break n;f[i+3|0]=0}VA(V,256,i,I+32040|0,I)}if((0|(l=e[I+32048>>2]))<=0)g=r;else{if(g=e[144464+(l<<2)>>2],f[i+2|0]=l,e[i+8>>2]=g,A=d[g+11|0],Pe=1,(0|l)==1){lA=(0|A)==2;break A}l=y[i>>1];n:if((0|A)!=2)k[i>>1]=65531&l;else{if(k[i>>1]=4|l,d[r+11|0]==2)break n;f[i+3|0]=0}VA(V,256,i,I+32040|0,I)}if(lA=0,(0|(A=d[g+11|0]))!=2){Pe=0;break A}if(lA=1,Pe=0,A=2,d[i+3|0]>1){GA=0;break A}l=i+3|0,GA=GA+1|0,r=i;n:{if(8&(z=e[V+12>>2])){for(;;){o:switch(z=r,r=r+32|0,d[z+49|0]){case 0:break A;case 2:break o;default:continue}break}if(d[0|(r=z+35|0)]>1)break A;if(d[i+6|0]<=3&&(f[0|l]=0),d[z+38|0]<4)break n;break A}if(1&GA|(0|GA)<2)break A;if(2&z)break r;if(ye)r=l;else if(r=l,y[i+36>>1])break r}f[0|r]=0;break A}e[36423]=JA+2,k[(A=145840+(JA<<5)|0)>>1]=0,f[A+2|0]=9,f[A+20|0]=2,e[A+12>>2]=Y,k[A+4>>1]=c,f[A+17|0]=0,f[A+18|0]=0,e[A+8>>2]=e[36125],k[A+32>>1]=0,f[A+34|0]=9,f[A+52|0]=0,e[A+44>>2]=0,k[A+36>>1]=0,f[A+49|0]=0,f[A+50|0]=0,e[A+40>>2]=e[36126],rs(e[V+292>>2]),H=I+32192|0;break e}GA=1}if(!(8&(r=y[i+32>>1]))|(0|P)<=0||(l=d[te+11|0])>>>0>15|!(1<<l&457)||(s=d[te+10|0],k[i+32>>1]=8^r),ke=y[i+36>>1]){A:if(r=e[V+4>>2]){r:switch(0|A){default:s=512&r?11:s;break;case 0:break A;case 2:break r}if(d[te+11|0]==2){(l=12&r)&&(s=(0|l)!=12?23:11);r:if(lA){a:switch(3&r){case 2:s=10;break r;case 0:break r;default:break a}s=23}d[i+35|0]<4||(s=256&r?10:s)}}if(!((0|i)==(0|X)|(0|JA)<=0)){A:{r:{a:switch(0|(r=7&e[V>>2])){case 0:break A;case 1:break a;default:break r}if(s-12>>>0>4294967293)break A}s=d[r+101916|0]}s=e[47205]>0?24:s}}if(e[i+72>>2]=e[144464+(d[i+66|0]<<2)>>2],r=e[I+32060>>2],r=s||r||s,!Pe){f[(l=(z=JA<<5)+145840|0)+17|0]=A,e[l+8>>2]=g,f[l+16|0]=0,k[l>>1]=y[i>>1],f[l+3|0]=15&d[i+3|0],f[l+6|0]=d[i+6|0],s=d[i+7|0],k[l+4>>1]=0,f[l+7|0]=s,Pe=d[g+10|0],f[l+2|0]=Pe;A:if(s=y[i+4>>1]){if(k[l+4>>1]=s,M=1&M?5:1,f[(i=z+145840|0)+20|0]=M,s=ne,ne=0,!s){M=0;break A}f[i+20|0]=8|M,M=0}else f[20+(z+145840|0)|0]=0;e[(s=z+145840|0)+12>>2]=e[I+32084>>2]<<1,!ke|(0|Pe)!=24||(0|(i=e[47205]))<=0||(e[l+8>>2]=e[36126],e[s+12>>2]=O(i,14)),(1<<A&428?A>>>0<=8:0)|2&d[g+7|0]&&(e[s+12>>2]=128,f[l+16|0]=0),f[(A=z+145840|0)+21|0]=255,f[A+22|0]=255,k[A+18>>1]=5120,JA=JA+1|0}s=P+1|0;continue}break}k[88922]=1,e[44462]=0,ss&&(k[145776+(e[36423]<<5)>>1]=2,A=198304+(e[47350]<<2)|0,e[A>>2]=128,e[(A=A-4|0)>>2]=128|e[A>>2]),f[190268]=NA>>>19&1,Cn&&(e[Cn>>2]=NA<<14>>31&189360)}H=p+6832|0,Ke=e[47192],lA=e[t+12>>2],r=0,l=0,h=0,z=0,X=0,Mt=0,Y=0,H=c=H-6e3|0;e:if(!((0|(i=(JA=e[36423])-1|0))<=0)){for(;f[2+(c+O(r,6)|0)|0]=0,4&d[(A=r<<5)+145840|0]?(s=c+O(z,6)|0,f[s+1|0]=0,A=A+145840|0,f[s+3|0]=d[A+49|0],A=d[A+3|0],f[0|s]=A,z=z+1|0,Mt=(A>>>0>3)+Mt|0):d[e[8+(A+145840|0)>>2]+10|0]!=27|(0|z)<=0||(A=(c+O(z,6)|0)-4|0,f[0|A]=4|d[0|A]),(0|i)!=(0|(r=r+1|0)););if(f[c+O(z,6)|0]=0,z)if(e[Ke+148>>2]==1){if(!((0|JA)<=0)){for(A=-2&JA,s=1&JA,r=145840;h=d[r+17|0]==2&&d[r+3|0]>3?l:h,h=d[r+49|0]==2&&d[r+35|0]>3?1|l:h,r=r- -64|0,l=l+2|0,(0|A)!=(0|(X=X+2|0)););!s|d[r+17|0]!=2||(h=d[r+3|0]>3?l:h)}if(f[(g=(A=h<<5)+145840|0)+3|0]=7,e[Ke+212>>2]==30313&&(d[(A=A+145840|0)+7|0]||(f[A+7|0]=Z(55),JA=e[36423])),!((0|JA)<=0)){for(X=0,r=145840,A=145840,l=P=e[36125],i=0,ne=1;;){if(d[r+17|0]?M=e[36125]:(M=e[36125],P=(s=d[e[r+8>>2]+14|0]>50)?M:P,ne|=s),s=d[r+20|0]?M:l,4&d[0|r]){M=d[r+7|0],l=e[144464+(M<<2)>>2];A:{if((0|(z=e[Ke+212>>2]))==6840683){if(e[s>>2]!=49||(z=e[l>>2]-49|0)>>>0>5|!(1<<z&41))break A;f[A+7|0]=Z(50),z=e[Ke+212>>2]}if(!((0|z)!=6516078&(0|z)!=31336)){z=0,M||(i=Z(1&(z=i|ne)?13621:12593),f[r+7|0]=i,l=e[144464+(i<<2)>>2]),(0|h)!=(0|X)|(1024|e[l>>2])!=13621||(f[g+3|0]=6),e[P>>2]==3420466&&(f[A+7|0]=Z(e[l>>2]==3420466?13619:12594));r:{if(e[s>>2]==12597){if((0|(M=e[l>>2]))!=12597)break r;f[A+7|0]=Z(13109)}M=e[l>>2]}i=z,(0|M)==12593&&((0|(M=e[P>>2]))==13621&&(f[r+7|0]=Z(12850),M=e[P>>2]),(0|M)==13619&&(f[r+7|0]=Z(13107),M=e[P>>2]),(0|M)==3420466&&(f[r+7|0]=Z(13364)),f[r+3|0]=0)}}ne=0,P=l,A=r}else l=s;if(r=r+32|0,!((0|(X=X+1|0))<(0|(s=e[36423]))))break}if(l=0,r=145840,!((0|s)<=0))for(;4&d[0|r]&&((A=d[r+7|0])||(f[r+7|0]=17,A=17),A=e[144464+(A<<2)>>2],f[r+21|0]=d[A+12|0],f[r+22|0]=d[A+13|0]),r=r+32|0,(0|s)!=(0|(l=l+1|0)););}}else{if(A=e[Ke+152>>2],A=Ke+O(ye=(0|A)>7?1:A,6)|0,V=d[0|(ye?A+637:Ke+157)],NA=d[0|(ye?636+(A+lA|0):156+(Ke+lA|0))],f[133068]=(0|lA)==4,!((0|z)<=0)){for(Pe=z-1|0,te=lA-1>>>0>1,s=0,i=0;;){p=c+O(i,6)|0,Y=((A=d[0|p])<<24>>24>3)+Y|0;A:if((0|A)==6){A=i-3|0,r=i;r:{for(;;){if((0|r)<=(0|s)|(0|A)>=(0|r))break r;a:switch(g=c+O(r=r-1|0,6)|0,d[0|g]-4|0){case 2:break r;case 0:break a;default:continue}break}f[0|g]=3}r=i;r:{for(;;){if((0|z)<=(0|(r=r+1|0)))break r;a:switch(d[c+O(r,6)|0]-4|0){case 0:break r;case 2:break a;default:continue}break}f[p+2|0]=2,f[0|p]=5,A=s;break A}if(d[0|p]==6){f[p+2|0]=2,I=0;r:if((0|z)<=(0|(A=i+1|0)))g=i,$t=0;else if($t=1,(0|(l=f[c+O(A,6)|0]))>4)g=i;else{for(h=(Mt-Y|0)>1,g=i;;){if(r=A,(255&l)==4&&(A=h+1|0,h=1,!((0|A)<=1))){A=r;break r}if($t=(0|z)>(0|(A=r+1|0)),(0|A)==(0|z))break;if(g=r,(0|(l=f[c+O(A,6)|0]))>4)break r}g=Pe,A=z}l=-1,M=0,h=0,ne=-1,X=0,P=-1;r:{if((0|(r=s))<(0|A)){for(;l=(ke=(0|(P=f[c+O(r,6)|0]))>3)&&(0|l)<0?r-s|0:l,I=(X=(0|h)>(0|P))?I:(0|h)<(0|P)?r:M,ne=ke?r:ne,M=X?M:r,ke=(0|r)!=(0|g),h=X?h:P,r=r+1|0,ke;);if(X=M,P=ne,(0|l)>=0)break r}l=A,M=X,ne=P}e[33269]=g-M,e[33268]=l,e[33270]=M,e[33271]=I;r:if(d[133068])e[33270]=A,e[33271]=A;else if((0|ne)>=0){if((0|A)!=(0|z))break r;f[c+O(ne,6)|0]=7}else f[c+O(M,6)|0]=7;De(c,ye,s,A,NA),!$t&!!(0|lA)||(NA=te?d[Ke+156|0]:d[Ke+157|0])}else A=s}else A=s;if((0|A)>=(0|i))s=A;else if(4&d[p+2|0]){for(s=i+1|0,l=-1,ne=0,M=0,h=0,r=A,I=-1;l=(X=(0|(g=f[c+O(r,6)|0]))>3)&&(0|l)<0?r-A|0:l,ne=(P=(0|g)<(0|h))?ne:(0|g)>(0|h)?r:M,I=X?r:I,M=P?M:r,X=(0|r)!=(0|i),h=P?h:g,r=r+1|0,X;);e[33269]=i-M,e[33270]=M,e[33271]=ne,e[33268]=(0|l)<0?s:l,d[133068]?(e[33270]=s,e[33271]=s):(0|I)>=0?f[c+O(I,6)|0]=7:f[c+O(M,6)|0]=7,De(c,ye,A,s,V)}else s=A;if((0|z)==(0|(i=i+1|0)))break}if(!((0|s)>=(0|z))){for(l=-1,ne=0,M=0,h=0,r=s,I=-1;l=(g=(0|(A=f[c+O(r,6)|0]))>3)&&(0|l)<0?r-s|0:l,ne=(i=(0|A)<(0|h))?ne:(0|A)>(0|h)?r:M,I=g?r:I,M=i?M:r,h=i?h:A,(0|z)!=(0|(r=r+1|0)););e[33270]=M,e[33271]=ne,e[33269]=~M+z,e[33268]=(0|l)<0?z:l,d[133068]?(e[33270]=z,e[33271]=z):(0|I)>=0?f[c+O(I,6)|0]=7:f[c+O(M,6)|0]=7,De(c,ye,s,z,NA)}}if((0|JA)<=0)break e;for(r=0,X=0;;){if(P=s=(g=r<<5)+145840|0,A=c+O(X,6)|0,l=d[0|A],f[s+3|0]=l,4&d[0|s]){i=g+145840|0,s=d[A+4|0],f[i+21|0]=s,h=d[A+5|0],f[i+16|0]=0,f[i+22|0]=h;A:{if(1&(M=d[A+2|0]))A=2;else{if(l>>>0<6)break A;A=d[A+1|0]}f[i+16|0]=A}s>>>0<=(255&h)>>>0?(A=h,h=s):(f[i+21|0]=h,f[i+22|0]=s,A=s),(s=d[7+(g+145840|0)|0])&&(A=(255&A)+(255&h)>>>1|0,s=e[144464+(s<<2)>>2],f[i+22|0]=A+d[s+13|0],f[i+21|0]=A+d[s+12|0]),2&M&&(f[P+3|0]=8|l),X=X+1|0}if((0|JA)==(0|(r=r+1|0)))break}}}if(H=c+6e3|0,X=e[47192],r=0,te=0,I=0,Y=0,H=c=H-160|0,e[36423]>=2)for(lA=e[30450],l=1;;){if(l=(A=l)+1|0,z=d[(i=(h=A<<5)+145840|0)+3|0],2&(M=y[i>>1])){for(;(31&(g=e[198304+(Y<<2)>>2]))==2&&(WA(127&g,g>>>8|0),e[36432]=110,e[36433]=100,e[36434]=450,e[36430]=5,M=e[50786],P=e[32972],(0|(s=e[P+84>>2]))>0&&(M=(0|O(s,M))/100|0),ne=d[((0|(s=(0|M)>=359?359:M))<=80?80:s)+101856|0],s=(0|(s=(0|M)>=450?450:M))>399?6:(0|s)>379?7:ne,e[32526]=(0|O(s,e[P+72>>2]))/256,e[32527]=(0|O(s,e[P+76>>2]))/256,e[32528]=(0|O(s,e[P+80>>2]))/256,s>>>0>7||(P=s-1|0,e[32528]=P,e[32526]=s,e[32527]=P)),Y=Y+1|0,!(128&g););M=y[i>>1]}P=l<<5,ne=A-1|0,s=7&z;e:{A:{r:{a:{n:{o:{c:{u:{l:{i:switch(NA=d[17+(h+145840|0)|0],0|(g=4&M?2:NA)){case 2:break n;case 3:case 8:break o;case 5:break c;case 6:case 7:break u;case 4:break l;case 0:break i;default:break e}r=0;break e}if((0|(A=d[17+(145840+(ne<<5)|0)|0]))!=6?(s=(0|A)==4?60:e[34063]>0||s>>>0<4?48:60,f[18+(h+145840|0)|0]=s):(s=25,f[18+(h+145840|0)|0]=25),!(16&d[0|X])|!d[20+(h+145840|0)|0]||(f[18+(h+145840|0)|0]=60,s=60),64&d[e[8+(h+145840|0)>>2]+6|0]&&(s=s+30|0,f[18+(h+145840|0)|0]=s),r=0,!(8&M))break e;f[18+(h+145840|0)|0]=d[X+164|0]+s;break e}!(i=d[(A=h+145840|0)+20|0])|1&f[e[A+8>>2]+7|0]&d[17+(145840+(ne<<5)|0)|0]==2||(f[18+(h+145840|0)|0]=15),s=d[17+(P+145840|0)|0],8&d[e[8+(h+145840|0)>>2]+4|0]|s|d[17+(145840+(ne<<5)|0)|0]!=8||(f[18+(h+145840|0)|0]=25),64&d[e[8+((A=ne<<5)+145840|0)>>2]+5|0]&&(f[18+(h+145840|0)|0]=30),!i|!(16&e[X>>2])||(f[18+(h+145840|0)|0]=30);u:if(d[20+(P+145840|0)|0]|!(32&d[e[8+(h+145840|0)>>2]+4|0])|(0|s)!=4)e[12+(h+145840|0)>>2]=256;else{if(i=h+145840|0,d[17+(A+145840|0)|0]==2){e[i+12>>2]=200;break u}e[i+12>>2]=150}if((0|g)!=7||(te|=(0|s)==2,(254&d[17+(A+145840|0)|0])!=2))break e;e[12+(h+145840|0)>>2]=e[12+(A+145840|0)>>2]+255>>>1;break e}(254&(s=d[17+((A=ne<<5)+145840|0)|0]))==6|(0|s)==3|32&e[e[8+(A+145840|0)>>2]+4>>2]&&(f[18+(h+145840|0)|0]=30);c:if((254&(i=d[17+(P+145840|0)|0]))==2){te=d[20+(P+145840|0)|0]&&(0|i)!=2?te:1,f[(i=h+145840|0)+18|0]=40,z=0;u:{l:switch(0|s){case 0:if((A=e[12+(A+145840|0)>>2])>>>0>39)break u;z=40-A|0;break u;case 2:break u;default:break l}if(d[20+(h+145840|0)|0])break c;z=20;l:switch(s-3|0){case 1:if(z=0,!(8&d[e[8+(A+145840|0)>>2]+4|0]))break u;break c;case 0:break u;case 5:break l;default:break c}z=12}f[i+18|0]=z}if(!(16&d[0|X])|!d[20+(h+145840|0)|0]||d[(A=h+145840|0)+18|0]>19)break e;f[A+18|0]=20;break e}i=d[X+296|0],g=s=h+145840|0,e[s+12>>2]=256,f[s+19|0]=i;o:if(d[s+20|0]){M=25;c:switch(d[17+(145840+(ne<<5)|0)|0]-2|0){case 0:if(M=12,1&f[e[8+(h+145840|0)>>2]+7|0])break o;break;case 1:break c;default:break o}f[18+(h+145840|0)|0]=M}if((0|(P=d[17+(P+145840|0)|0]))==2){I=1;break e}if(f[(i=h+145840|0)+22|0]=r,(254&d[17+((s=ne<<5)+145840|0)|0])==2)break a;if(s=r,(0|(g=e[36423]))<=(0|A))break A;for(;;){if(d[17+((s=A<<5)+145840|0)|0]==2){s=d[22+(s+145840|0)|0],f[i+22|0]=s;break A}if((0|g)==(0|(A=A+1|0)))break}break r}if(Ke=h+145840|0,Pe=s^s>>>0<2,s=(JA=8&z)?25:d[296+(Pe+X|0)|0]-I|0,f[Ke+19|0]=s,(e[36423]-3|0)>(0|A)||(0|(g=255&s))<=(0|(s=e[X+52>>2]))||(f[Ke+19|0]=s),s=0,z=0,!(M=d[i+52|0]))for(;g=e[i+40>>2],z=d[i+49|0]==2?(~e[g+4>>2]>>>20&1)+z|0:z,s=d[g+10|0]==27?2:s,g=i,i=i+32|0,!(M=d[g+84|0]););g=Ke+96|0,A=(ye=A+2<<5)+145840|0,e[34063]=z,p=d[e[i+40>>2]+10|0],P=P+145840|0,d[17+(ye+145840|0)|0]|d[e[P+8>>2]+10|0]!=23?(i=g,g=A,A=P):i=h+145968|0,P=d[e[g+8>>2]+15|0];n:if(z)P=d[e[X+96>>2]+(d[e[A+8>>2]+15|0]+O(P,10)|0)|0],d[A+17|0]!=8|(254&d[g+17|0])!=4||(P=8&d[e[i+8>>2]+4|0]?P-15|0:P);else{if(V=e[X+100>>2],ye=d[e[A+8>>2]+15|0],i=d[A+20|0],P=d[V+(ye+O(i|d[g+20|0]?(0|P)==1:P,10)|0)|0],!i|!(32&d[0|X]))break n;P=d[1+(V+O(ye,10)|0)|0]+P>>>1|0}i=M>>>1|0,ye=!z,M=(0|(P=(0|O(e[130104+(z?(0|z)==1?4:8:0)>>2],P))/128|0))<=8?8:P;n:if((0|Pe)!=7)JA&&(M=e[X+200>>2]+M|0);else{if(M=(P=e[X+200>>2])+M|0,!JA)break n;M=((0|P)/2|0)+M|0}P=i&ye|(0|p)==27,(i=y[304+(X+(Pe<<1)|0)>>1])||(i=y[X+316>>1]),M=O(i<<16>>16,M),(z=d[(i=h+145840|0)+7|0])&&(Pe=d[e[144464+(z<<2)>>2]+14|0])&&(M=(0|O(M,Pe))/100|0),(P|(0|s)==2)==1&&(2097152&(s=e[X+12>>2])||(M=(0|O(262144&s?282:256+((280-(d[e[8+(h+145840|0)>>2]+14|0]<<1)|0)/3|0)&65535,M))/256|0)),Pe=h+145840|0,s=O(e[32526],e[X+196>>2]),JA=(0|NA)!=2?256:(0|((0|s)>(0|M)?M:s))/128|0,e[Pe+12>>2]=JA,(s=d[Pe+16|0])>>>0>=19&&(di(84371,28,lA),f[Pe+16|0]=0,z=d[i+7|0],s=0),M=s+1|0,(s=255&z)?(ln(s,c+8|0),s=zi(e[c+132>>2])):s=e[129280+((255&M)<<2)>>2],P=h+145840|0,1&(I|te)&&(i=(h=ne<<5)+145840|0,I=d[0|s],s=d[P+21|0],s=((0|O(I,d[P+22|0]-s|0))/256|0)+s|0,f[i+22|0]=s,r=(s-(r=(0|s)==255?255:r)|0)>16?s-16|0:r,f[i+21|0]=r,i=0,(0|r)<(0|s)&&(f[Pe+16|0]=M,i=2),e[(r=h+145840|0)+12>>2]=JA,f[r+16|0]=i,s=d[Ke+19|0],f[r+19|0]=d[r+17|0]!=3&&s>>>0>18?18:s),r=(0|NA)!=2,i=-2&(s=y[A>>1]),k[A>>1]=i;n:{o:{c:switch(d[A+17|0]-3|0){case 5:if(d[g+17|0]==2)break n;i=1|s;break o;case 0:break c;default:break n}if(k[A>>1]=1|s,d[g+17|0]!=2&&e[e[A+8>>2]>>2]!=12146)break n}k[A>>1]=i}r?(0|(A=r<<4))<=((s=d[P+22|0])-(i=d[P+21|0])|0)||(i=(0|(A=s-A|0))>0?A:0,f[P+21|0]=i):(s=d[P+22|0],i=d[P+21|0]),A=255&i,r=((0|O(d[e[129280+(d[Pe+16|0]<<2)>>2]+127|0],s-A|0))/256|0)+A|0,I=0,te=0;break e}i=e[12+(s+145840|0)>>2],e[g+12>>2]=i,(0|NA)==3&&(i=e[32526],e[g+12>>2]=i),s=r;a:switch(P-5|0){case 0:e[g+12>>2]=(O(i,160)>>>0)/100;break r;case 2:break a;default:break A}e[g+12>>2]=(O(i,120)>>>0)/100}s=r}te=0,f[(A=h+145840|0)+16|0]=0,i=A,s=(A=255&s)-16|0,f[i+21|0]=A>>>0>=s>>>0?s:0}if(!(e[36423]>(0|l)))break}if(H=c+160|0,15&(i=e[47197])|e[36456]){A=0,g=0,H=s=H-80|0;e:if((r=e[33222])||(e[33223]=500,r=tt(500),e[33222]=r,r)){if(!((e[36423]-2|0)<2)){for(A=i>>8,X=128&i?0:A,z=A&i<<24>>31,P=2&i,i=s+32|1,h=1;;){if(Ss(s,e[(l=(ne=h<<5)+145840|0)+8>>2],l,P,s+72|0),A=s+32|0,(13&(r=d[l+20|0]))==1&&(f[s+32|0]=32,A=i),!X|(0|X)!=32&!!(0|r)|h>>>0<2||(_A(s+76|0,s),e[s+76>>2]-880>>>0>4294967103||(A=dr(X,A)+A|0)),4&d[0|l]&&((r=d[3+(ne+145840|0)|0])>>>0<2||(r=r>>>0>=5?5:r,r=P?r>>>0>3?712:716:f[r+94144|0],e[s+76>>2]=r,A=dr(r,A)+A|0)),M=0,e[s+72>>2]=0,d[0|(r=s)])for(;r=_A(s+76|0,r)+r|0,e[s+72>>2]>>>M-1&1|!z|(0|M)<=0||(I=e[s+76>>2])-880>>>0>4294967103||ci(I)&&(A=dr(z,A)+A|0),M=M+1|0,A=dr(e[s+76>>2],A)+A|0,d[0|r];);if(d[e[l+8>>2]+10|0]!=21&&(8&(r=y[l>>1])&&(A=Ss(A,e[36128],l,P,0),r=y[l>>1]),!(4&r)|d[17+(ne+145840|0)|0]==2||(A=Ss(A,e[36136],l,P,0)),(r=d[7+(ne+145840|0)|0])&&(A=Ss(A,e[144464+(r<<2)>>2],l,P,0))),(A=(l=A-(s+32|0)|0)+g|0)>>>0<ee[33223])r=e[33222];else{if(r=A+500|0,e[33223]=r,!(r=Tt(e[33222],r))){e[33223]=0,r=86135;break e}e[33222]=r}if(f[(M=l)+(l=s+32|0)|0]=0,yA(r+g|0,l),g=A,!((0|(h=h+1|0))<(e[36423]-2|0)))break}if(!r){r=86135;break e}}f[A+r|0]=0}else e[33223]=0,r=86135;H=s+80|0,15&d[188788]&&(e[t>>2]=r,Kt(e[47195],84367,t)),(A=e[36456])&&KA[0|A](r)}d[190280]?(e[36423]=0,A=1):(wA(0),(A=e[t+8>>2])?(H=r=H+-64|0,Qt(r,A,60),en(r,1),s=0,(A=ot(r,0))&&(s=A,d[202976]&&(s=ot(202976,2))),H=r- -64|0,e[44468]=s):s=e[44468],A=1,s&&(r=e[32972],(s=tt(1344))&&(r=rt(s,r,1344),s=216192+(e[50758]<<4)|0,e[s>>2]=11,e[s+8>>2]=r,r=e[50758]+1|0,e[50758]=(0|r)<=169?r:0),e[44468]=0))}else A=0,f[190280]=0;else A=0,e[36423]=0,e[50758]=0,e[50757]=0;return H=t+16|0,A}function rA(A,t){var r=0,s=0,i=0,l=0;r=1073741825;e:{A:{r:{a:{n:{o:{c:{u:{l:{i:{p:{C:{h:{b:{m:{B:{I:{x:{L:{_:{U:{y:{M:{Q:{F:{Ae:{R:{q:{z:{oe:{j:{Fe:{K:{f:{g:{re:{k:{se:{w:{s:{tA:{te:{t:{pe:{W:{me:{be:{rA:{de:{N:{Se:{v:{Oe:{$:{Ie:{we:{ze:{Ne:{Le:{_e:{Re:{je:{We:{ke:{sA:{ae:{Ye:{Ve:{Ee:{He:{G:{Me:{Y:{mA:{hA:{CA:{bA:{IA:{wA:{kA:{EA:{MA:{vA:{BA:{xA:{yA:{DA:{TA:{PA:{GA:{QA:{FA:{SA:{OA:{zA:{NA:{LA:{_A:{RA:{jA:{WA:{YA:{VA:switch(0|t){case 0:t=A-9>>>0<5?1073741825:0,t=(A=(0|A)==133)?1073741825:t;break F;case 1:d:{S:{P:{O:{D:{T:{X:{V:{Z:{ee:{ne:{le:{fe:{ge:{if((0|(t=-256&A))<=2047){if(!t)break ge;if((0|t)==1536)break fe;if((0|t)!=1792||(r=0,s=1,(0|A)!=1807))break d;break t}if((0|t)<=69631){if((0|t)==2048)break le;if((0|t)!=8192)break d;switch(r=131076,A-8204|0){case 1:break ne;case 0:break t;default:break ee}}if((0|t)==69632)break Z;if((0|t)!=917504)break d;switch(r=8388608,A-917505|0){case 62:break P;case 58:break O;case 57:break D;case 45:break T;case 43:break X;case 32:break V;case 0:break t;default:break S}}if(r=16,(0|A)!=173)break d;break t}if(r=0,s=1,A-1536>>>0<6)break t;s=(0|A)==1757,t=(A=(0|A)==1564)?2:0;break Q}if(r=0,s=1,(0|A)!=2274)break d;break t}return he=64,4}if(r=1073741826,(-2&A)==8206)break t;if(A-8234>>>0<5)return he=0,2;if(r=128,A-8289>>>0<4||(r=2,A-8294>>>0<4))break t;if(r=8388608,A-8298>>>0>=6)break d;break t}t=!(A-69821&-17),A=0;break M}he=536870976;break y}he=268435520;break y}he=-2147483584;break y}he=134217792;break y}he=67108928;break y}he=1073741888;break y}if(r=131072,s=64,A-917536>>>0<96)break t}break s;case 2:d:{S:{P:{O:{D:{T:{X:{if((0|(t=-256&A))<=130303){if((0|t)<=127743){if((0|t)<=64767){if((0|t)<=11007){if((0|t)==8192)break X;if((0|t)!=9216)break d;if(A-9255>>>0>=25)break T;break w}if((0|t)==11008)break D;if((0|t)!=11776||(r=-2147483648,A-11845>>>0>=59))break d;break t}if((0|t)<=126975){if((0|t)==64768)break O;if((0|t)!=65280||(r=4194304,A-65520>>>0>=9))break d;break t}if((0|t)==126976|(0|t)==127232|(0|t)==127488)break te;break d}if((0|t)<=129023){if((0|t)<=128255){if((0|t)==127744|(0|t)==128e3)break te;break d}if((0|t)==128256|(0|t)==128512|(0|t)==128768)break te;break d}if((0|t)<=129535){if((0|t)==129024|(0|t)==129280)break te;break d}if((0|t)==129536|(0|t)==129792|(0|t)==130048)break te;break d}if((0|t)<=919039){if((0|t)<=917759){if((0|t)<=130815){if((0|t)==130304)break te;if((0|t)!=130560)break d;break te}if((0|t)==130816)break te;if((0|t)!=917504)break d;if((-128&A)!=917632)break P;break se}if((0|t)<=918271){if((0|t)==917760)break S;if(r=4194304,(0|t)!=918016)break d;break t}if((0|t)==918272|(0|t)==918528)break se;if(r=4194304,(0|t)!=918784)break d;break t}if((0|t)<=920319){if((0|t)<=919551){if((0|t)==919040)break se;if(r=4194304,(0|t)!=919296)break d;break t}if((0|t)==919552|(0|t)==919808)break se;if(r=4194304,(0|t)!=920064)break d;break t}if((0|t)<=920831){if((0|t)==920320)break se;if(r=4194304,(0|t)!=920576)break d;break t}if((0|t)==920832|(0|t)==921088)break se;if(r=4194304,(0|t)!=921344)break d;break t}if(r=4194304,(0|A)!=8293)break d;break t}if(r=-2147483648,A-9291>>>0>=21)break d;break t}if((-16&A)==11248|A-11219>>>0<25|(0|A)==11209|A-11194>>>0<3||(0|(t=-2&A))==11124)break w;if(r=-2147483648,(0|t)!=11158)break d;break t}if(r=65536,A-64976>>>0>=32)break d;break t}if((0|A)==917504)break se;if(r=4194304,A-917506>>>0>=30)break d;break t}if(r=4194304,A>>>0>917999)break t}t=(A=!(65534&~A))>>>16|0,A<<=16;break M;case 6:d:{S:{P:{O:{D:{T:{X:{V:{Z:{ee:{ne:{le:{if((0|(t=-256&A))<=7679){if((0|t)<=767){if(!t)break le;if((0|t)==256)break ne;if((0|t)!=512)break s;if((0|A)!=585)break ee;break U}if((0|t)==768)break Z;if((0|t)==1024)break V;if((0|t)!=7424||(r=16777216,(0|A)!=7574))break s;break t}if((0|t)<=119807){if((0|t)==7680)break X;if((0|t)==8448)break T;if((0|t)!=65280||(r=256,A-65345>>>0>=6))break s;break t}if((0|t)<=120319){if((0|t)==119808)break D;if((0|t)!=120064)break s;if(A>>>0>=120070)break O;break k}if((0|t)==120320)break P;if((0|t)!=120576)break s;if(A>>>0>=120597)break S;break k}if(r=768,A-97>>>0<6)break t;if(r=16777216,A-105>>>0>=2)break s;break t}r=(t=(0|A)==329)>>>9|0,t=(A=(0|A)==303)?16777216:t<<23;break _}if((0|A)==616)break U;if(r=16777216,(0|A)!=669)break s;break t}r=128;Z:switch(A-976|0){case 35:break d;case 0:case 1:case 2:case 5:case 32:case 33:break t;default:break Z}if((-2&A)!=1012)break s;break t}s=(A=!(A-1110&-3))>>>8|0,A<<=24;break L}s=(t=(0|A)==7883)>>>8|0,t=(A=(0|A)==7725)?16777216:t<<24;break Q}if(A-8458>>>0<10)break k;if((t=A-8495|0)>>>0<11)break YA;break pe}if((0|(t=-2&A))==119842)break re;if(A-119808>>>0<85)break k;if(A-119894>>>0<2|A-119946>>>0<2)break re;if((0|A)==119995|A-119896>>>0<69|A-119982>>>0<12)break k;if((0|t)==119998)break re;if(A-119997>>>0<7)break k;if(r=16777344,(0|t)==120050)break t;if(r=128,A>>>0<=120004)break s;break t}if((-2&A)==120102)break re;if(A-120094>>>0<28)break k;O:{if((0|A)<=120257){if(A-120154>>>0<2)break re;if(r=16777344,A-120206>>>0>=2)break O;break t}if(A-120258>>>0<2)break re;if(r=16777344,A-120310>>>0<2)break t}if(r=128,A>>>0<=120145)break s;break t}if(A-120362>>>0<2|A-120414>>>0<2)break re;if(r=16777344,A-120466>>>0<2)break t;if(A-120540>>>0<31|A>>>0>120571|A>>>0<120486)break k;if(r=128,A-120514>>>0>=25)break s;break t}if(A-120772>>>0<8|A-120746>>>0<25|A-120714>>>0<31|A-120688>>>0<25||(0|A)!=120597&A>>>0<120629|A-120656>>>0<31)break k;if(r=128,A-120630>>>0<25)break t;break s}break U;case 7:d:{S:{P:{O:{D:{T:{X:{V:{Z:{ee:{ne:{le:{fe:{ge:{E:{ce:{J:{H:{ie:{ue:{ve:{Be:{if((0|(t=-256&A))<=11263){if((0|t)<=3583){if((0|t)<=1535){if((0|t)==512)break Be;if((0|t)==768)break ve;if((0|t)!=1280||(r=4096,(0|A)!=1369))break s;break t}if((0|t)==1536)break ue;if((0|t)==1792)break ie;if((0|t)!=2304||(r=4096,(0|A)!=2417))break s;break t}if((0|t)<=7167){if((0|t)==3584)break H;if((0|t)==6144)break J;if((0|t)!=6656||(r=8192,(0|A)!=6823))break s;break t}if((0|t)==7168)break ce;if((0|t)==7424)break E;if((0|t)!=8192)break s;if(r=16793600,!(t=A-8305|0))break t;if((0|t)==14)break ge;break fe}if((0|t)<=43263){if((0|t)<=40959){if((0|t)==11264)break le;if((0|t)==11776)break ne;if((0|t)!=12288)break s;switch(r=8192,A-12293|0){case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 10:case 11:case 12:case 13:case 14:case 15:case 16:case 17:case 18:case 19:case 20:case 21:case 22:case 23:case 24:case 25:case 26:case 27:case 28:case 29:case 30:case 31:case 32:case 33:case 34:case 35:case 36:case 37:case 38:case 39:case 40:case 41:case 42:case 43:break Z;case 0:case 44:case 45:case 46:case 47:case 48:break t;default:break ee}}if((0|t)==40960)break V;if((0|t)==42496)break X;if((0|t)!=42752)break s;if(A-42775>>>0>=9)break T;break g}if((0|t)<=65279){if((0|t)==43264)break D;if((0|t)==43520)break O;if((0|t)!=43776||(r=20480,(-4&A)!=43868))break s;break t}if((0|t)==65280)break P;if((0|t)==92928)break S;if((0|t)!=93952)break s;if(r=4096,A-94099>>>0<13)break t;if(r=8192,(-2&A)!=94176)break s;break t}if(r=16797696,(0|A)==690)break t;if(A-688>>>0<9)return he=0,20480;if(A-697>>>0<7)break g;if((0|(t=-2&A))==704)return he=0,20480;if(r=4096,A-710>>>0<10||(r=12288,(0|t)==720)||(r=20480,A-736>>>0<5))break t;r=(A=(-3&A)==748)>>>20|0,A<<=12;break x}t=(0|A)==890?20480:0,t=(A=(0|A)==884)?4096:t;break F}if(r=8192,(0|A)==1600)break t;if(r=4096,A-1765>>>0>=2)break s;break t}if(r=4096,(-2&A)==2036)break t;if(r=8192,(0|A)!=2042)break s;break t}t=(A=!(A-3654&-129))>>>19|0,A<<=13;break M}if(r=8192,(0|A)!=6211)break s;break t}if(r=12288,(0|A)==7291)break t;if(r=4096,A-7288>>>0>=6)break s;break t}if(r=16797696,(0|A)==7522||(r=20480,A-7468>>>0<63))break t;r=16384;E:switch(A-7588|0){default:if((0|A)==7544)break t;case 1:case 2:case 3:if(A-7579>>>0>=37)break s;break t;case 0:case 4:break E}return he=0,16793600}return he=0,16384}if(r=16384,A-8336>>>0>=13)break s;break t}t=(r=(0|A)==11389)>>>18|0,r=(A=(0|A)==11388)?16793600:r<<14;break I}if(r=-2147479552,(0|A)!=11823)break s;break t}if(A-12445>>>0<2)break t;if((0|A)==12540)break d}if(A-12541>>>0>=2)break s;break t}if(r=8192,(0|A)!=40981)break s;break t}if((0|A)==42508)break B;if((0|A)==42623)break g;if(r=20480,(-2&A)!=42652)break s;break t}if((0|A)==42864)return he=0,16384;if((0|A)==42888)break g;if(r=20480,(-2&A)!=43e3)break s;break t}r=(t=(0|A)==43494)>>>19|0,t=(A=(0|A)==43471)?8192:t<<13;break _}if((0|A)==43632||(0|A)==43741)break B;if(r=8192,A-43763>>>0>=2)break s;break t}if(r=12288,(0|A)==65392)break t;if(r=135168,(-2&A)!=65438)break s;break t}if(r=8192,(-2&A)==92994)break t;break s}return he=0,12288;case 8:r=128;d:{S:{P:{O:{D:{T:{X:{V:{Z:{if((0|(t=-256&A))<=12543){if((0|t)<=5887){if((0|t)<=3583){if(!t)break Z;if((0|t)!=1536||(t=8388608,(0|A)!=1651))break v;break de}if((0|t)==3584)break V;if((0|t)!=4352||(r=4194304,A-4447>>>0>=2))break v;break N}if((0|t)<=8447){if((0|t)==5888)break X;if((0|t)!=6400||(t=A-6581|0)>>>0>=6)break v;r=e[(t=81432+(t<<3)|0)>>2],s=e[t+4>>2];break N}if((0|t)==8448)break T;if((0|t)!=12288||(t=2048,(0|A)!=12294))break v;break de}if((0|t)<=68863){if((0|t)<=63999){if((0|t)==12544)break D;if((0|t)!=43520)break v;if((t=A-43701|0)>>>0<8)break S;break Se}if((0|t)==64e3)break d;if((0|t)!=65280||(t=4194304,(0|A)!=65440))break v;break de}if((0|t)<=100095){if((0|t)==68864)break O;if((0|t)!=70400||(r=8192,(0|A)!=70493))break v;break be}if((0|t)==100096)break P;if((0|t)!=126464)break v;break N}s=(t=!(A-170&-17))>>>18|0,r=t<<14;break N}if(r=33554432,A-3648>>>0<5)break N;if(t=0,l=33554432,(0|A)==3759)break de;if(A-3776>>>0>=5)break v;break N}if(r=8388608,A-6051>>>0>=2)break v;break N}if(A-8501>>>0>=4)break v;break N}if(t=4194304,(0|A)!=12644)break v;break de}if(r=4096,(-2&A)!=68898)break v;break N}if(r=2048,A-100333>>>0<5)break N;break v}if(r=33554432,!(211>>>t&1))break Se;break N}if((t=A-64014|0)>>>0>=28)break v;r=e[(t=81480+(t<<3)|0)>>2],s=e[t+4>>2];break N;case 10:d:{S:{P:{O:{D:{T:{if((0|(t=-256&A))<=119807){if((0|t)<=8447){if(!t)break T;if((0|t)!=768)break s;switch(r=128,A-976|0){case 0:case 1:case 2:case 36:case 37:break t;default:break s}}if((0|t)==8448)break D;if((0|t)!=65280||(r=256,A-65313>>>0>=6))break s;break t}if((0|t)<=120319){if((0|t)==119808)break O;if((0|t)!=120064)break s;if(A>>>0>=120070)break P;break k}if((0|t)==120320)break S;if((0|t)!=120576)break s;if(A-120772>>>0>=8)break d;break k}if(r=768,A-65>>>0>=6)break s;break t}r=128;D:switch(A-8450|0){case 0:case 5:break t;default:break D}if(A-8458>>>0<10)break k;if((t=A-8469|0)>>>0<20)break WA;if((-4&A)==8508)break t;break Oe}if(A-119982>>>0<12|A>>>0>120004|A-119977>>>0<4|A-119973>>>0<2||(0|A)==119970|(-2&A)==119966|A-119808>>>0<85)break k;if(r=128,A-119894>>>0>=71)break s;break t}if(A-120138>>>0<7|A>>>0>120145|(0|A)==120134|A-120128>>>0<5||A-120123>>>0<4|A-120094>>>0<28|(0|A)!=120070&A>>>0<120075|A-120086>>>0<7)break k;if(r=128,A-120077>>>0>=8)break s;break t}if(A-120540>>>0<31|A>>>0<120486)break k;if(r=128,A-120488>>>0>=25)break s;break t}if(A-120714>>>0<31|A-120598>>>0<31)break k;if(r=128,A-120656>>>0<31)break t;break s;case 11:d:{S:{P:{O:{D:{T:{X:{V:{Z:{ee:{ne:{le:{fe:{ge:{E:{ce:{J:{if((0|(t=-256&A))<=43263){if((0|t)<=3839){if((0|t)<=3071){if((0|t)==2304)break J;if((0|t)!=2816)break f;if((0|A)>3005)break E;if((0|A)!=2878)break ce;return he=0,132096}if((0|t)==3072)break ge;if((0|t)!=3328)break f;switch(r=132096,A-3535|0){case 0:case 16:break t;case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 10:case 11:case 12:case 13:case 14:case 15:break f;default:break fe}}if((0|t)<=6911){if((0|t)==3840)break le;if((0|t)!=4096)break f;if(r=1024,A-4139>>>0<2)break t;switch(A-4145|0){case 0:case 7:case 10:case 11:case 37:case 38:case 49:case 54:case 55:case 82:case 83:break t;case 86:case 87:case 88:case 89:case 90:case 91:case 94:case 105:case 106:break d;default:break ne}}if((0|t)==6912)break ee;if((0|t)==7168)break Z;if((0|t)!=12288||(r=135168,(-2&A)!=12334))break f;break t}if((0|t)<=70399){if((0|t)<=43775){if((0|t)==43264)break V;if((0|t)!=43520)break f;return he=0,A-43643&-3?1024:4096}if((0|t)==43776)break X;if((0|t)==69888)break T;if((0|t)!=70144||(r=4096,(0|A)!=70197))break f;break t}if((0|t)<=70911){if((0|t)==70400)break D;if((0|t)!=70656)break f;t=(0|A)==70845?132096:1024,t=(A=(0|A)==70832)?132096:t;break F}if((0|t)==70912)break O;if((0|t)==71168)break P;if((0|t)!=119040)break f;switch(r=131072,A-119141|0){case 8:break g;case 1:break s;case 0:break t;default:break S}}t=(0|A)==2519?132096:1024,t=(A=(0|A)==2494)?132096:t;break F}if(r=132096,(0|A)!=2903)break f;break t}if((0|A)==3006)return he=0,132096;if(r=132096,(0|A)!=3031)break f;break t}if((A=A-3266|0)>>>0>20||(r=132096,!(1<<A&1572865)))break f;break t}if((0|A)==3390)break t;if((0|A)!=3415)break f;break t}if(r=4096,(-2&A)!=3902)break f;break t}r=(A=(0|A)==4252)>>>22|0,A<<=10;break x}r=1024;ee:switch(A-6965|0){default:if((0|A)==6916)break t;break;case 0:case 6:break t;case 1:case 2:case 3:case 4:case 5:break ee}if(A-6973>>>0<5)break t;ee:switch(A-6979|0){case 1:break g;case 0:break t;default:break ee}if((0|A)==7042|(0|A)==7073|(-2&A)==7078)break t;if((0|A)==7082)break g;if((0|A)==7143|A-7146>>>0<3)break t;r=(A=(0|A)==7150)>>>22|0,A<<=10;break x}t=(0|A)==7415?4096:1024,t=(A=(0|A)==7393)?4096:t;break F}t=(0|A)==43456?4096:1024,t=(A=(0|A)==43347)?4096:t;break F}if(r=4096,(0|A)!=44012)break f;break t}if(r=4096,(0|A)!=70080)break f;break t}r=132096;D:switch(A-70462|0){case 0:case 25:break t;case 15:break D;default:break f}break g}if(r=132096,(0|A)!=71087)break f;break t}if(r=4096,(0|A)!=71350)break f;break t}if(r=135168,A-119150>>>0<5)break t;break f}break g;case 12:t=((0|A)==8419)<<6,A=0;break M;case 13:d:{S:{P:{O:{D:{T:{X:{V:{Z:{ee:{ne:{le:{fe:{ge:{E:{ce:{J:{H:{ie:{ue:{ve:{Be:{Ue:{xe:{Ke:{aA:{Xe:{nA:{Ze:{iA:{oA:{ye:{Je:{qe:{lA:{De:{Te:{cA:{$e:{uA:{eA:{he:{Pe:{Ge:{Qe:{AA:{dA:{Ce:{fA:{gA:{pA:{if((0|(t=-256&A))<=43775){if((0|t)<=5887){if((0|t)<=2559){if((0|t)<=1535){if((0|t)==768)break pA;if((0|t)==1024)break gA;if((0|t)!=1280)break s;if(A-1425>>>0>=17)break fA;break g}if((0|t)<=2047){if((0|t)==1536)break Ce;if((0|t)!=1792)break s;if(r=1024,(0|A)==1809)break t;if((-16&A)!=1840)break dA;return he=0,5120}if((0|t)==2048)break AA;if((0|t)!=2304)break s;if(A>>>0>=2307)break Qe;break f}if((0|t)<=3583){if((0|t)<=3071){if((0|t)==2560)break Ge;if((0|t)!=2816)break s;switch(r=1024,A-2876|0){case 0:break g;case 3:break t;case 1:case 2:break he;default:break Pe}}if((0|t)==3072)break eA;if((0|t)!=3328)break s;if((0|(t=-2&A))!=3328)break uA;break f}if((0|t)<=4095){if((0|t)==3584)break $e;if((0|t)!=3840)break s;if((0|(t=-2&A))!=3864)break cA;break g}if((0|t)==4096)break Te;if((0|t)!=4864||(r=1024,(0|A)!=4959))break s;break t}if((0|t)<=8191){if((0|t)<=6655){if((0|t)==5888)break De;if((0|t)==6144)break lA;if((0|t)!=6400)break s;if((t=A-6432|0)>>>0<=18&&(r=1024,1<<t&262535))break t;if(r=4096,A-6457>>>0>=3)break s;break t}if((0|t)<=7167){if((0|t)==6656)break qe;if((0|t)!=6912)break s;if(r=1024,(-4&A)==6912)break t;if((0|A)!=6964)break Je;break g}if((0|t)==7168)break ye;if((0|t)!=7424)break s;if(r=4096,A-7620>>>0<12||(r=1024,A-7655>>>0<14))break t;if((A=A-7669|0)>>>0>=11)break s;t=e[(A=82104+(A<<3)|0)>>2];break m}if((0|t)<=42495){if((0|t)<=11519){if((0|t)==8192)break oA;if((0|t)!=11264||(r=4096,A-11503>>>0>=3))break s;break t}if((0|t)==11520)break iA;if((0|t)!=12288)break s;if(A-12330>>>0>=4)break Ze;break g}if((0|t)<=43263){if((0|t)==42496)break nA;if((0|t)!=43008)break s;if(A-43045>>>0>=2)break Xe;break f}if((0|t)==43264)break aA;if((0|t)!=43520)break s;switch(r=1024,A-43561|0){case 83:case 150:case 152:break g;case 0:case 1:case 2:case 3:case 4:case 5:case 8:case 9:case 12:case 13:case 26:case 35:case 135:case 137:case 138:case 139:case 142:case 143:case 149:break t;default:break Ke}}if((0|t)<=71423){if((0|t)<=69375){if((0|t)<=66047){if((0|t)==43776)break xe;if((0|t)==64256)break Ue;if((0|t)!=65024)break s;if(r=536870912,A-65024>>>0<15||(s=64,(0|A)==65039))break t;if(r=4096,s=0,(-16&A)!=65056)break s;break t}if((0|t)<=68095){if((0|t)==66048)break Be;if((0|t)!=66304||(r=1024,A-66422>>>0>=5))break s;break t}if((0|t)==68096)break ve;if((0|t)!=68864||(r=5120,(-4&A)!=68900))break s;break t}if((0|t)<=70399){if((0|t)<=69887){if((0|t)==69376)break ue;if((0|t)!=69632)break s;if(A-69688>>>0>=14)break ie;break f}if((0|t)==69888)break H;if((0|t)!=70144)break s;if(r=1024,A-70191>>>0<3)break t;switch(A-70196|0){case 2:break g;case 0:case 3:case 10:break t;case 1:case 4:case 5:case 6:case 7:case 8:case 9:break ce;default:break J}}if((0|t)<=70911){if((0|t)==70400)break E;if((0|t)!=70656)break s;if((-8&A)!=70712)break ge;break f}if((0|t)==70912)break fe;if((0|t)!=71168)break s;if(r=1024,A-71219>>>0<8)break t;switch(A-71229|0){case 2:break g;case 0:case 3:break t;case 1:break ne;default:break le}}if((0|t)<=92927){if((0|t)<=72703){if((0|t)==71424)break zA;if((0|t)==71680)break ee;if((0|t)!=72192)break s;if(A-72193>>>0>=10)break Z;break f}if((0|t)<=73215){if((0|t)==72704)break V;if((0|t)!=72960)break s;if((t=A-73009|0)>>>0<19)break SA;break $}if((0|t)==73216)break X;if((0|t)!=92672||(r=4096,A-92912>>>0>=5))break s;break t}if((0|t)<=122879){if((0|t)<=113663){if((0|t)==92928)break T;if((0|t)!=93952||(r=4096,A-94095>>>0>=4))break s;break t}if((0|t)==113664)break D;if((0|t)!=119040)break s;switch(r=4096,A-119143|0){case 0:case 1:case 2:case 20:case 21:case 22:case 23:case 24:case 25:case 26:case 27:case 30:case 31:case 32:case 33:case 34:case 35:case 36:case 67:case 68:case 69:case 70:break t;default:break s}}if((0|t)<=125183){if((0|t)==122880)break O;if((0|t)!=124928||(r=4096,A-125136>>>0>=7))break s;break t}if((0|t)==125184)break P;if((0|t)!=917760||(r=536870912,A-917760>>>0>=240))break s;break t}if(A-768>>>0<69)break g;if(r=21504,(0|A)==837)break t;if(A-838>>>0<9)break g;if(r=4194304,(0|A)==847)break t;if((-8&A)==848)break g;if(r=4096,A-861>>>0>=6)break s;break t}if(r=4096,A-1155>>>0>=5)break s;break t}if(r=4096,A-1443>>>0<13||(r=5120,A-1456>>>0<14))break t;if((A=A-1471|0)>>>0>=9)break s;t=e[(A=81944+(A<<3)|0)>>2];break m}if(A-1552>>>0<11)break f;if(r=5120,A-1611>>>0<8)break t;if(A-1619>>>0<4)break f;Ce:switch(A-1623|0){case 1:break g;case 0:break t;case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 25:case 127:case 128:case 129:case 130:case 131:case 132:case 133:break f;default:break Ce}if(r=4096,A-1759>>>0<2)break t;if((t=A-1761|0)>>>0<8)break jA;break Ie}if(A-1856>>>0<11)break g;if(r=5120,A-1958>>>0<11)break t;if(r=4096,A-2027>>>0>=9)break s;break t}r=1024;AA:switch((-2&A)-2070|0){case 2:break g;case 0:break t;default:break AA}if(A-2260>>>0<12|A-2089>>>0<4|A-2075>>>0<9|A-2085>>>0<3)break f;if(A-2275>>>0<7)return he=0,5120;if(r=4096,A-2282>>>0<6||(r=5120,A-2288>>>0<15))break t;if(r=1024,(0|A)!=2303)break s;break t}r=1024;Qe:switch(A-2362|0){case 2:break g;case 0:break t;default:break Qe}if(A-2369>>>0<8)break f;r=4096;Qe:switch(A-2381|0){case 0:case 4:case 5:case 6:case 7:case 111:break t;case 8:case 9:case 10:case 21:case 22:case 52:break f;default:break Qe}if(A-2497>>>0<4)break f;if((0|A)==2509)break t;if(r=1024,(-2&A)!=2530)break s;break t}if(A-2561>>>0<2)break f;r=4096;Ge:switch(A-2620|0){case 0:case 17:case 128:case 145:break t;case 5:case 6:case 11:case 12:case 15:case 16:case 21:case 52:case 53:case 57:case 69:case 70:case 133:case 134:case 135:case 136:case 137:case 139:case 140:case 166:case 167:case 190:case 191:case 192:break f;default:break Ge}if(A-2813>>>0>=3)break s;break t}if((0|A)==2817)break f}if(A-2881>>>0<4)break f;r=4096;he:switch(A-2893|0){case 0:break t;case 9:break f;default:break he}if((-2&A)==2914)break f;r=1024;he:switch(A-3008|0){default:if((0|A)!=2946)break s;break t;case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 10:case 11:case 12:break s;case 0:break t;case 13:break he}break g}r=1024;eA:switch(A-3072|0){case 77:case 188:case 205:break g;case 0:case 62:case 63:case 64:case 70:case 71:case 72:case 74:case 75:case 76:case 85:case 86:case 98:case 99:case 129:case 191:case 198:case 204:break t;default:break eA}if((-2&A)!=3298)break s;break t}if(r=4096,A-3387>>>0<2)break t;if(A-3393>>>0<4)break f;if((0|A)==3405)break t;if((0|t)==3426)break f;switch(A-3530|0){case 0:break t;case 8:case 9:case 10:case 12:break f;default:break s}}if((t=A-3633|0)>>>0<10)break RA;break we}if((r=A-3893|0)>>>0>4|!(1<<r&21))break ze;break g}r=1024;Te:switch(A-4141|0){case 10:case 12:case 13:break g;case 0:case 1:case 2:case 3:case 5:case 6:case 7:case 8:case 9:case 16:case 17:case 43:case 44:case 49:case 50:case 51:case 68:case 69:case 70:case 71:case 85:case 88:case 89:break t;default:break Te}t=(r=(0|A)==4253)>>>22|0,r=(A=(0|A)==4237)?4096:r<<10;break I}r=1024;De:{Te:switch(A-5906|0){case 0:case 1:case 32:case 33:break t;case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 10:case 11:case 12:case 13:case 14:case 15:case 16:case 17:case 18:case 19:case 20:case 21:case 22:case 23:case 24:case 25:case 26:case 27:case 28:case 29:case 30:case 31:break De;default:break Te}switch(A-5970|0){case 0:case 1:case 32:case 33:break t;default:break De}}if(r=4194304,(-2&A)==6068)break t;if((t=A-6071|0)>>>0<16)break _A;break Ne}if(r=536870912,A-6155>>>0<3||(r=67109888,A-6277>>>0<2))break t;if(r=1024,(0|A)!=6313)break s;break t}if(A-6679>>>0<2)break f;r=1024;qe:switch(A-6683|0){case 0:case 59:case 61:case 62:case 63:case 64:case 65:case 66:case 67:case 71:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 88:case 89:break t;default:break qe}if(r=4096,A-6832>>>0<14)break t;if((A=A-6773|0)>>>0>=11)break s;t=e[(A=82016+(A<<3)|0)>>2];break m}if(A-6966>>>0<5)break t;Je:switch(A-6972|0){case 0:case 6:break t;default:break Je}if(A-7019>>>0<9)break g;switch(A-7040|0){case 43:break g;case 0:case 1:case 34:case 35:case 36:case 37:case 40:case 41:case 44:case 45:case 104:case 105:case 109:case 111:case 112:case 113:break t;default:break s}}if(r=1024,A-7212>>>0<8)break t;r=12288;ye:switch(A-7222|0){case 1:break g;case 0:break t;default:break ye}if(A-7380>>>0<13)break g;r=4096;ye:switch(A-7376|0){case 0:case 1:case 2:case 18:case 19:case 20:case 21:case 22:case 23:case 24:case 29:case 36:break t;default:break ye}if((-2&A)!=7416)break s;break t}if(r=128,A-8400>>>0<13)break t;if((A=A-8417|0)>>>0>=15)break s;t=e[(A=82192+(A<<3)|0)>>2];break m}if(r=1024,(-32&A)!=11744)break s;break t}if(r=4096,A-12441>>>0>=2)break s;break t}if((0|A)==42607)break g;if(A-42612>>>0<8)break f;if((0|(A&=-2))==42620)break g;if((0|A)==42654)break d;if(r=4096,(0|A)!=42736)break s;break t}r=4096;Xe:switch(A-43204|0){case 0:break t;case 1:break f;default:break Xe}if(A-43232>>>0>=18)break s;break t}if(A-43302>>>0<5)break f;if(A-43307>>>0<3)break g;if(A-43335>>>0<11|A-43392>>>0<3)break f;if(r=4096,(0|A)==43443||(r=1024,A-43446>>>0<4))break t;s=(t=(0|A)==43493)>>>20|0,t=(A=(0|A)==43452)?1024:t<<12;break Q}if((-2&A)==43756)break t;if(r=4096,(0|A)!=43766)break s;break t}r=1024;xe:switch(A-44005|0){case 0:case 3:break t;case 8:break xe;default:break s}break g}if(r=5120,(0|A)!=64286)break s;break t}if(r=4096,(0|A)!=66272)break s;break t}if((-4&A)==68108)break f;if((t=A-68097|0)>>>0<6)break LA;break Le}if(r=4096,A-69446>>>0>=11)break s;break t}if(A-69811>>>0<4)break f;if(r=1024,(0|A)==69633)break t;if(r=4096,A-69817>>>0>=2)break s;break t}r=1024;H:switch(A-69888|0){case 51:case 52:case 115:break g;case 0:case 1:case 2:case 39:case 40:case 41:case 42:case 43:case 45:case 46:case 47:case 48:case 49:case 50:break t;default:break H}if((-2&A)==70016|A-70070>>>0<9)break t;if(r=4096,A-70090>>>0>=3)break s;break t}if((0|A)==70367)break t}if(A-70371>>>0<6)break t;if(r=4096,A-70377>>>0>=2)break s;break t}if((-2&A)==70400)break f;r=4096;E:switch(A-70460|0){case 0:case 42:case 43:case 44:case 45:case 46:case 47:case 48:case 52:case 53:case 54:case 55:case 56:break t;case 4:break E;default:break s}break f}if((0|A)==70722)break g;if(A-70723>>>0<2)break f;if((t=A-70835|0)>>>0<=13)break S;break _e}if((t=A-71090|0)>>>0<12)break NA;break Re}switch(A-71339|0){case 0:case 2:break t;default:break ne}}if(A-71344>>>0<6)break t;if(r=4096,(0|A)!=71351)break s;break t}if(r=1024,A-71727>>>0<10)break t;if(r=4096,A-71737>>>0>=2)break s;break t}if((0|A)==72244)break g;if(A-72245>>>0<10)break f;if(r=4096,(0|A)==72263)break t;if(A-72273>>>0<11)break f;if(r=1024,A-72330>>>0<13)break t;r=(t=(0|A)==72345)>>>20|0,t=(A=(0|A)==72344)?8192:t<<12;break _}if((t=A-72752|0)>>>0<16)break OA;break je}if(r=1024,A-73459>>>0>=2)break s;break t}if(r=1024,A-92976>>>0>=7)break s;break t}if(r=1024,(0|A)!=113822)break s;break t}if(r=1024,A-122888>>>0<17)break t;if((A=A-122880|0)>>>0>=43)break s;t=e[(A=82816+(A<<3)|0)>>2];break m}if(r=12288,A-125252>>>0<3||(r=1024,(0|A)==125255)||(r=4096,A-125256>>>0<3))break t;break s}if(!(1<<t&12479))break _e;break f}break f;case 14:d:{if((0|(t=-256&A))!=120576){if((0|t)!=65280){if(t||(r=768,s=66,A-48>>>0>=10))break d;break t}if(r=256,A-65296>>>0>=10)break d;break t}if(r=128,A-120782>>>0<50)break t}break s;case 15:d:{if((0|(t=-256&A))!=12288){if((0|t)!=8448)break d;t=(A=(0|(r=-16&A))==8560)>>>18|0,s=A<<14,r=(A=(0|r)==8544)?32768:s;break I}if(A-12321>>>0<9||A-12344>>>0<3)return he=0,2048;if(r=2048,(0|A)==12295)break t}break s;case 16:d:{S:{P:{if((0|(t=-256&A))<=9215){if((0|t)==4864)break P;if((0|t)!=6400||(r=134217728,(0|A)!=6618))break d;break t}if((0|t)==9216)break S;if((0|t)!=127232)break d;if(r=0,s=-2147483648,(0|A)==127232)break t;if(s=268435456,A-127233>>>0>=10)break d;break t}if(r=134217728,A-4969>>>0>=9)break d;break t}if(r=0,s=-2147483648,A-9352>>>0<20)break t}break s;case 17:s=(A=(0|A)==8256)>>>25|0,A<<=7;break L;case 18:d:{S:{P:{O:{if((0|(t=-256&A))<=11775){if((0|t)<=6143){if(r=-2147483624,!t)break t;if((0|t)!=1280||(r=24,(0|A)!=1418))break d;break t}if((0|t)==6144)break O;if((0|t)!=8192)break d;if(r=-2147483624,(-2&A)==8208)break t;A=A-8211>>>0<2,t=-2147483640;break b}if((0|t)<=65023){if((0|t)==11776)break P;if((0|t)!=12288)break d;t=(0|A)==12336,r=(A=(0|A)==12316)||t?-2147483640:8,he=A?0:t?130:0;break h}if((0|t)==65024)break S;if((0|t)!=65280||(r=24,(0|A)!=65293))break d;break t}if(r=24,(0|A)!=6150)break d;break t}if(r=-2147483624,(0|A)==11799)break t;A=(-2&A)==11834,t=-2147483640;break b}if(r=8,s=8388608,A-65073>>>0<2||(r=152,s=0,(0|A)==65123))break t}return he=0,8;case 19:d:{S:{P:{O:{D:{T:{if((0|(t=-256&A))<=11775){if((0|t)<=8959){if(t)break T;break w}if((0|t)==8960)break D;if((0|t)==9984)break O;if((0|t)!=10496)break s;break K}if((0|t)<=64767){if(r=-2147483648,(0|t)==11776)break t;if((0|t)!=12288)break s;switch(r=-2147483616,A-12301|0){case 0:case 2:break t;default:break P}}if((0|t)==64768)break S;if((0|t)==65024)break d;if((0|t)!=65280)break s;if(r=32,(0|A)==65379)break t;break s}if((0|t)!=8192)break s;T:switch(A-8318|0){default:if(r=-2147483648,(0|A)!=8262)break s;break t;case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 10:case 11:case 12:case 13:case 14:case 15:break s;case 0:case 16:break T}break k}r=-2147483520;D:switch(A-8969|0){case 1:break s;case 0:case 2:break t;default:break D}if((0|A)!=9002)break s;return he=0,-2139095040}if(r=-2147483520,(0|A)==10182)break t;break Fe}return he=0,(-2&A)==12318?-2147483616:-2147483648}if(r=-2147483648,(0|A)!=64830)break s;break t}s=(A=!(A-65090&-3))>>>27|0,A<<=5;break L;case 20:case 21:if(!(A&=-256))break C;if(r=-2147483616,(0|A)==8192)break t;break tA;case 22:d:{S:{P:{O:{D:{T:{X:{V:{Z:{ee:{ne:{le:{fe:{ge:{E:{ce:{J:{H:{ie:{ue:{ve:{Be:{Ue:{xe:{Ke:{aA:{Xe:{nA:{Ze:{iA:{oA:{ye:{Je:{qe:{lA:{De:{Te:{cA:{$e:{uA:{eA:{he:{Pe:{Ge:{Qe:{AA:{dA:{Ce:{if((0|(t=-256&A))<=43519){if((0|t)<=5887){if((0|t)<=2303){if((0|t)<=1535){if(!t)break Ce;if((0|t)==768)break dA;if((0|t)!=1280)break s;if(r=0,s=538968064,A-1371>>>0<2)break t;switch(s=268435456,A-1373|0){case 0:break t;case 1:break Qe;default:break AA}}if((0|t)==1536)break Pe;if((0|t)==1792)break he;if((0|t)!=2048)break s;if((t=A-2103|0)>>>0<8)break QA;break We}if((0|t)<=3839){if((0|t)==2304)break eA;if((0|t)==3328)break uA;if((0|t)!=3584||(r=64,(-2&A)!=3674))break s;break t}if((0|t)<=4863){if((0|t)==3840)break $e;if((0|t)!=4096)break s;if(r=268435520,(-2&A)==4170)break t;if(r=0,s=16777216,(0|A)!=4347)break s;break t}if((0|t)==4864)break cA;if((0|t)!=5632)break s;switch(r=64,A-5741|0){case 1:break n;case 0:break t;default:break Te}}if((0|t)<=11263){if((0|t)<=6655){if((0|t)==5888)break De;if((0|t)==6144)break PA;if((0|t)!=6400)break s;t=(0|A)==6469,r=(A=(0|A)==6468)||t?268435520:0,he=A?536870912:t?1073741824:0;break h}if((0|t)<=7167){if((0|t)==6656)break lA;if((0|t)!=6912)break s;if((0|(t=-2&A))!=7002)break qe;break j}if((0|t)==7168)break Je;if((0|t)!=8192)break s;switch(r=-2147483520,A-8214|0){case 1:break w;case 0:break t;case 16:break ye;default:break oA}}if((0|t)<=41983){if((0|t)==11264)break iA;if((0|t)==11776)break Ze;if((0|t)!=12288)break s;switch(r=-2147483584,s=272629760,A-12289|0){case 2:break w;case 0:break t;case 1:break Xe;default:break nA}}if((0|t)<=43007){if((0|t)==41984)break aA;if((0|t)!=42496)break s;switch(r=64,s=268435456,A-42739|0){case 4:break o;case 0:break n;case 3:break r;case 2:break t;case 1:break xe;default:break Ke}}if((0|t)==43008)break Ue;if((0|t)!=43264)break s;switch(r=4096,A-43310|0){case 0:break t;case 1:break j;default:break Be}}if((0|t)<=70655){if((0|t)<=67839){if((0|t)<=65279){if((0|t)==43520)break ve;if((0|t)==43776)break ue;if((0|t)!=65024)break s;if(r=0,s=268435456,(0|(l=-2&A))==65040)break t;if((t=A-65042|0)>>>0<8)break DA;break ke}if((0|t)==65280)break ie;if((0|t)==66304)break H;if((0|t)!=67584||(r=64,(0|A)!=67671))break s;break t}if((0|t)<=69375){if((0|t)==67840)break J;if((0|t)==68096)break ce;if((0|t)!=68352)break s;switch(r=64,A-68410|0){case 0:case 1:case 2:case 3:case 4:case 5:case 95:case 96:case 97:case 98:break t;default:break s}}if((0|t)<=69887){if((0|t)==69376)break E;if((0|t)!=69632)break s;if(A-69703>>>0>=2)break ge;break j}if((0|t)==69888)break fe;if((0|t)!=70144)break s;if((t=A-70200|0)>>>0<=4)break le;if((0|A)!=70313)break s;break j}if((0|t)<=74751){if((0|t)<=71423){if((0|t)==70656)break ne;if((0|t)==70912)break ee;if((0|t)!=71168||(r=268435520,A-71233>>>0>=2))break s;break t}if((0|t)<=72703){if((0|t)==71424)break Z;if((0|t)!=72192)break s;if(A-72258>>>0>=2)break V;break j}if((0|t)==72704)break X;if((0|t)!=73216||(r=268435520,A-73463>>>0>=2))break s;break t}if((0|t)<=93695){if((0|t)==74752)break T;if((0|t)==92672)break O;if((0|t)!=92928)break s;if(r=268435520,A-92983>>>0<2)break t;t=(0|A)==92996?268435520:0,t=(A=(0|A)==92985)?64:t;break F}if((0|t)<=121343){if((0|t)==93696)break D;if((0|t)!=113664||(r=268435520,s=-2147483648,(0|A)!=113823))break s;break t}if((0|t)==121344)break yA;if((0|t)!=125184)break s;r=((0|A)==125279)<<30,t=0,he=(A=(0|A)==125278)?536870912:r;break i}r=-1879048128,s=536870912;Ce:{fA:{gA:{pA:{HA:switch(A-33|0){default:switch(A-183|0){case 1:case 2:case 3:case 4:case 5:case 6:case 7:break Ce;case 8:break gA;case 0:break pA;default:break fA}case 2:case 9:he=66;break u;case 11:return he=268435456,-2147483584;case 13:return he=-2147483648,-1879048128;case 25:return he=134217728,-2147483584;case 26:return he=67108864,-2147483584;case 1:case 6:break C;case 0:break t;case 3:case 4:case 5:case 7:case 8:case 10:case 12:case 14:case 15:case 16:case 17:case 18:case 19:case 20:case 21:case 22:case 23:case 24:case 27:case 28:case 29:break Ce;case 30:break HA}return he=1073741824,-1879048128}return he=0,134230016}he=1078984704;break u}if((0|A)==161)break sA}break w}t=(0|A)==903,r=(A=(0|A)==894)?64:t?134217792:0,he=A?1073741824:t?67108864:0;break h}if((0|A)==1417)break Ge;if((0|A)!=1475)break s;break oe}he=1075838976;break c}he=-2143289344;break a}r=64,s=268435456;Pe:switch(A-1548|0){case 15:break r;case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 10:case 11:case 12:case 13:case 14:case 16:case 17:break s;case 0:break t;case 19:break Pe;case 18:break j;default:break P}break o}if((t=A-1792|0)>>>0<6)break FA;if(r=64,s=134217728,(-2&A)==1798)break t;s=67108864;he:{Pe:{Ge:switch(A-1800|0){default:switch(A-2040|0){case 1:break he;case 0:break Pe;default:break s}case 3:break s;case 0:break t;case 1:break Ge;case 2:case 4:break oe}he=1073741824;break A}he=268435456;break A}he=536870912;break a}t=(0|A)==2405,r=(A=(0|A)==2404)||t?268435520:0,he=A?-2143289344:t?16777216:0;break h}if(r=0,s=-2143289344,(0|A)!=3572)break s;break t}r=64;$e:switch(A-3848|0){case 5:he=-2143289344;break A;case 6:he=16777216;break A;case 0:break t;default:break $e}if(A-3854>>>0<5)break t;if(r=0,s=268435456,(0|A)!=3860)break s;break t}if((t=A-4961|0)>>>0<4)break GA;if(r=64,s=134217728,A-4965>>>0<2)break t;t=(0|A)==4968,r=(A=(0|A)==4967)||t?268435520:0,he=A?1073741824:t?16777216:0;break h}if(A-5867>>>0>=3)break s;break t}if(r=268435520,A-5941>>>0<2)break t;if((A=A-6100|0)>>>0>=7)break s;t=e[(A=83240+(A<<3)|0)>>2];break m}if(r=268435520,(-4&A)!=6824)break s;break t}if(r=64,(0|A)==7005)break t;if(r=268435520,(0|t)!=7006)break s;break t}if(A-7227>>>0<2)break j;if(r=64,A-7229>>>0<3||(r=268435520,(-2&A)==7294))break t;if(r=4096,(0|A)!=7379)break s;break t}he=33554432;break u}if((-8&A)==8224)break w;if(A-8242>>>0<3)break t;if(A-8240>>>0<9)break w;if((t=A-8251|0)>>>0<21)break TA;break ae}if((0|A)==11513){he=-2147483648;break c}if(r=0,s=1073741824,(-2&A)==11514)break t;if(s=-2147483648,(0|A)!=11518)break s;break t}r=-1879048128;Ze:switch(A-11822|0){case 4:case 6:he=268435456;break u;case 5:he=-2147483648;break u;case 7:he=67108864;break u;case 14:return he=-2147483648,-1879048128;case 19:return he=268435456,-2147483584;case 30:case 32:return he=0,-2147483584;case 0:break t;default:break Ze}break w}if((0|A)==12349)break z;if((0|A)!=12539)break s;return he=0,16}return he=-2143289344,-1879048128}t=(0|A)==42239,r=(A=(0|A)==42238)?64:t?268435520:0,he=A?268435456:t?-2147483648:0;break h}Ke:switch(A-42509|0){case 1:break n;case 0:break t;case 2:break Ke;default:break s}break o}he=134217728;break A}if(A-43126>>>0<2)break j;if(r=268435520,A-43214>>>0>=2)break s;break t}if((0|A)==43463)break oe;if(r=268435520,(-2&A)!=43464)break s;break t}if(A-43613>>>0<3)break j;if(r=64,(0|A)==43743)break t;if(r=268435520,(-2&A)!=43760)break s;break t}if(r=268435520,(0|A)!=44011)break s;break t}r=268435520,s=541065216;ie:switch(A-65281|0){case 1:case 6:return he=0,32;case 11:he=272629760;break A;case 13:he=-2143289344;break a;case 100:return he=0,16;case 25:he=138412032;break A;case 26:he=71303168;break A;case 30:he=1077936128;break a;case 96:break n;case 59:break k;case 0:break t;case 99:break ie;default:break s}he=268435456;break A}r=(t=(0|A)==66512)>>>26|0,t=(A=(0|A)==66463)?64:t<<6;break _}if(r=64,(0|A)!=67871)break s;break t}if(r=268435520,(-2&A)==68182)break t;if(r=64,A-68336>>>0>=6)break s;break t}if(r=268435520,A-69461>>>0>=5)break s;break t}if(r=64,A-69705>>>0<5)break t;if(r=268435520,A-69822>>>0>=4)break s;break t}if(A-69953>>>0<2)break j;if((t=A-70085|0)>>>0<=26)break S;break Ye}if((0|t)!=2)break j;break oe}if(r=268435520,A-70731>>>0<2)break t;s=(t=(0|A)==70747)>>>26|0,t=(A=(0|A)==70733)?64:t<<6,he=A?268435456:s;break i}r=268435520;ee:switch((-2&A)-71106|0){case 0:break t;case 2:break d;default:break ee}if(r=8192,A-71110>>>0<3)break t;if(r=268435520,A-71113>>>0>=15)break s;break t}if(r=268435520,A-71484>>>0>=3)break s;break t}if(r=268435520,A-72347>>>0<2)break t;if(r=64,A-72353>>>0>=2)break s;break t}if(r=268435520,A-72769>>>0<2)break t;r=(t=(0|A)==72817)>>>26|0,t=(A=(0|A)==72771)?64:t<<6;break _}if(r=64,s=134217728,A-74865>>>0<2)break t;if(s=0,A-74864>>>0>=5)break s;break t}t=(0|A)==93848?268435520:0,t=(A=(0|A)==93847)?64:t;break F}if(r=268435520,(-2&A)==92782)break t;if(s=-2147483648,(0|A)!=92917)break s;break t}if((0|A)==1748)break n;break s}if(!(1<<t&100663555))break Ye;break j}break oe;case 23:d:{S:{P:{O:{D:{T:{if((0|(t=-256&A))<=11775){if((0|t)<=8959){if(t)break T;break w}if((0|t)==8960)break D;if((0|t)==9984)break O;if((0|t)!=10496)break s;break K}if((0|t)<=64767){if((0|t)==11776)break P;if((0|t)!=12288)break s;if((A=A-12300|0)>>>0<=17&&(r=-2147483616,1<<A&131077))break t;break w}if((0|t)==64768)break S;if((0|t)==65024)break d;if((0|t)!=65280)break s;if(r=32,(0|A)==65378)break t;break s}if((0|t)!=8192)break s;r=-2147483616;T:switch(A-8218|0){case 1:case 2:case 3:break s;case 0:case 4:break t;default:break T}T:switch(A-8317|0){default:if((0|A)!=8261)break s;break w;case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 10:case 11:case 12:case 13:case 14:case 15:break s;case 0:case 16:break T}break k}r=-2147483520;D:switch(A-8968|0){case 1:break s;case 0:case 2:break t;default:break D}if((0|A)!=9001)break s;return he=0,-2139095040}if(r=-2147483520,(0|A)==10181)break t;break Fe}return he=0,(0|A)==11842?-2147483616:-2147483648}if(r=-2147483648,(0|A)!=64831)break s;break t}r=(A=!(A-65089&-3))>>>27|0,A<<=5;break x;case 24:r=(A=A>>>0<256)>>>1|0,A<<=31;break x;case 25:d:{S:{P:{O:{D:{T:{X:{V:{if((0|(t=-256&A))<=12287){if((0|t)<=767){if(!t)break V;if((0|t)!=512)break d;if(A-751>>>0>=17)break X;break g}if((0|t)==768)break T;if((0|t)!=7936)break d;switch(r=4096,A-8125|0){case 0:case 2:case 3:case 4:case 16:case 17:case 18:case 32:case 33:case 34:case 48:case 49:case 50:case 64:case 65:break t;default:break d}}if((0|t)<=43775){if((0|t)==12288)break D;if((0|t)!=42752||(r=4096,(-2&A)!=42784))break d;break t}if((0|t)==43776)break O;if((0|t)==65280)break P;if(r=0,s=78,(0|t)!=127744)break d;break t}V:switch(A-168|0){default:r=-2147479424;Z:switch(A-94|0){case 0:break t;case 2:break Z;default:break d}return he=0,-2147479552;case 0:case 7:break g;case 1:case 2:case 3:case 4:case 5:case 6:case 8:case 9:case 10:case 11:case 13:case 14:case 15:break d;case 12:case 16:break V}break g}if((0|A)==749|A-741>>>0<7)break g;if(A-706>>>0>=4)break S;break g}if((A=A-885|0)>>>0>16||(r=4096,!(1<<A&98305)))break d;break t}if(r=67112960,A-12443>>>0>=2)break d;break t}if(r=4096,(0|A)!=43867)break d;break t}r=4224;P:switch(A-65342|0){default:if((0|A)!=65507)break d;break;case 0:break t;case 1:break d;case 2:break P}break g}if(r=4096,A-722>>>0<14)break t}break s;case 26:d:{S:{P:{O:{D:{T:{if((0|(t=-256&A))<=9471){if((0|t)<=8447){if(t)break d;break w}if((0|t)==8448)break T;if((0|t)==8704)break D;if(r=-2147483648,(0|t)!=8960)break s;break t}if((0|t)<=10495){if((0|t)==9472)break O;if((0|t)==9728)break P;if((0|t)==9984)break w;break s}if((0|t)==10496)break S;if((0|t)==10752)break w;if(r=-2147483648,(0|t)!=11008)break s;break t}if((0|A)==8472)return he=0,67108864;if((0|A)==8596)break q;if(r=-2147483648,A>>>0<=8591)break s;break t}if(r=-2147483640,(0|A)==8722)break t;t=-2147483648,he=(A=A-8942>>>0<4)?33554432:0;break i}if(r=-2147483648,s=130,A-9723>>>0<2)break t;t=-2147483648,he=(A=A-9725>>>0<2)?134:0;break i}if(r=-2147483648,s=128,(0|A)==9839)break t;break w}if(r=-2147483648,s=130,(-2&A)==10548)break t;t=-2147483648,he=(A=(0|A)==10626)?134217728:0;break i}if((0|t)==8192)break Ve;break s;case 27:d:{S:{P:{O:{D:{T:{X:{V:{Z:{ee:{ne:{le:{fe:{ge:{E:{ce:{J:{H:{ie:{ue:{ve:{Be:{Ue:{xe:{if((0|(t=-256&A))<=12287){if((0|t)<=9727){if((0|t)<=8959){if(!t)break xe;if((0|t)!=8448)break s;switch(r=0,s=130,A-8482|0){case 7:break k;case 0:break t;case 1:case 2:case 3:case 4:case 5:case 6:case 8:case 9:case 10:case 11:break ue;case 12:break Be;default:break Ue}}if((0|t)==8960)break ie;if((0|t)==9216)break H;if((0|t)!=9472)break s;switch(r=-2147483520,(-2&A)-9632|0){case 0:break t;case 10:break q;default:break J}}if((0|t)<=11007){if((0|t)==9728)break ce;if((0|t)==9984)break E;if(r=-2147483648,(0|t)!=10240)break s;break t}if((0|t)==11008)break ge;if((0|t)==11776)break fe;if((0|t)!=12032)break s;if(r=1048576,A>>>0<12246)break t;switch(r=262144,(-2&A)-12272|0){case 0:break t;case 2:break d;default:break le}}if((0|t)<=127999){if((0|t)<=127231){if((0|t)==12288)break ne;if((0|t)==12800)break ee;if((0|t)!=126976)break s;t=(0|A)==127183,r=0,he=(A=(0|A)==126980)||t?134:128;break h}if((0|t)==127232)break Z;if((0|t)==127488)break V;if((0|t)!=127744)break s;if(A>>>0>=127777)break X;break R}if((0|t)<=128767){if((0|t)==128e3)break T;if((0|t)==128256)break D;if((0|t)!=128512)break s;if((t=A-128581|0)>>>0<11)break CA;break Ee}if((0|t)==128768)break O;if((0|t)==129280)break P;if((0|t)!=129536)break s;he=128;break c}t=(0|A)==174,r=-2147483648,he=(A=(0|A)==169)||t?130:0;break h}switch(A-8616|0){case 0:break w;case 1:case 2:break ve;default:break ue}}return he=0,67108864}return he=130,-2147483520}if(r=-2147483520,A-8597>>>0<5)break t;if(A-8604>>>0<18)break K;if((t=A-8624|0)>>>0<8)break xA;break He}if(A>>>0<8968)break w;if((0|(t=-2&A))==8986)break l;if(A-8972>>>0<20|A-8994>>>0<6)break w;if((0|A)==9e3)break q;if(A-9003>>>0<81)break w;if(r=-2147483648,s=128,(0|A)==9096)break t;if(A-9085>>>0<30)break w;if(r=-2147483520,s=0,(0|t)==9140)break t;ie:switch(A-9143|0){case 0:case 25:break t;case 24:break q;default:break ie}if(A-9140>>>0<40)break w;if((0|A)==9186)break t;if((t=A-9193|0)>>>0<4)break l;r=-2147483648,s=134;ie:switch(A-9200|0){case 0:case 3:break t;default:break ie}if(t>>>0<11)break q;if(s=130,A-9208>>>0<3)break t;if(s=0,A>>>0<=9186)break s;break t}if(r=-2147483648,A-9216>>>0<75||(r=33792,s=130,(0|A)==9410)||(s=0,A-9398>>>0<26))break t;if(r=17408,A-9424>>>0>=26)break s;break t}if(A-9646>>>0<8)break K;if(s=130,(0|A)==9654)break t;if((-4&A)==9660)break K;J:switch(A-9664|0){case 0:break t;case 6:case 7:case 10:case 11:case 15:case 16:case 17:case 18:case 19:case 34:case 36:break K;default:break J}return he=0,A-9703>>>0<6?-2147483520:-2147483648}ce:switch((-16&A)-9728>>>4|0){case 0:if(A>>>0<9733)break q;r=-2147483520,s=128;J:switch(A-9733|0){case 0:break t;case 9:break J;case 1:break K;default:break G}break q;case 2:if((t=A-9760|0)>>>0<11)break vA;if(r=-2147483648,s=130,A>>>0<=9773)break G;break t;case 3:if(r=-2147483648,s=130,A-9784>>>0>=3)break G;break t;case 4:r=-2147483520,s=130;J:switch(A-9792|0){case 0:case 2:break t;default:break J}if(r=-2147483648,s=134,A>>>0<=9799)break G;break t;case 5:if(r=-2147483648,s=134,A>>>0<9812)break t;if(s=130,(0|A)!=9823)break G;break t;case 6:if((0|A)==9734)break K;if((0|A)==9824)return he=130,-2147483520;if(r=-2147483520,s=128,A-9825>>>0<2)break t;if((t=A-9827|0)>>>0<6)break MA;break Me;case 8:if(r=-2147483648,A>>>0<=9861)break G;break t;case 10:r=-2147483648,s=130;J:switch(A-9888|0){case 1:break l;case 0:break t;default:break J}if(s=134,(-2&A)!=9898)break G;break t;case 11:if(r=-2147483648,s=130,(-2&A)==9904)break t;if(s=134,A-9917>>>0>=2)break G;break t;case 12:if((-2&A)==9924)break l;r=-2147483648,s=130;J:switch(A-9928|0){case 0:case 7:break t;case 6:break J;default:break G}break l;case 14:t=(0|A)==9962,r=-2147483648,he=(A=(0|A)==9961)?130:t?134:128;break h;case 13:break wA;case 9:break kA;case 15:break ce;case 7:break EA;case 1:break BA;default:break G}if((0|A)==9972|A>>>0<9970)break q;if(r=-2147483648,s=134,A>>>0<9974||(0|A)!=9974&&(s=130,A>>>0<9977))break t;if((A=A-9977|0)>>>0<5)break IA;break G}E:{ce:{J:{H:{ie:switch((-16&A)-9984>>>4|0){case 0:if(r=0,s=130,(0|A)==9986||(s=128,A>>>0<9989)||(s=134,(0|A)==9989))break E;s=150;ue:switch((-2&A)-9994|0){case 0:break E;case 2:break J;default:break ue}if(s=130,A-9992>>>0<6)break E;t=(0|A)==9999,r=0,s=(A=(0|A)==9998)?128:t?130:0;break E;case 1:if(r=0,s=128,A>>>0<10002)break E;if((A=A-10002|0)>>>0>11||(s=130,!(1<<A&2069)))break H;break E;case 2:t=(0|A)==10024,r=0,s=(A=(0|A)==10017)?130:t?134:0;break E;case 4:r=0,s=130;ue:switch(A-10052|0){case 0:case 3:break E;case 8:case 10:break ue;default:break H}s=134;break E;case 5:if(r=0,s=1073741958,A-10067>>>0<2)break E;s=(A=A-10069&-3)?0:536871046;break E;case 6:if((t=A-10082|0)>>>0<3)break ce;if(r=0,s=128,A>>>0<=10084)break H;break E;case 9:if(r=0,s=134,A-10133>>>0>=3)break H;break E;case 10:if(r=0,s=130,(0|A)!=10145)break H;break E;case 11:t=(0|A)==10175,r=0,s=(A=(0|A)==10160)||t?134:0;break E;case 3:break ie;default:break H}if(r=0,s=130,A-10035>>>0<2)break E}r=0,s=0;break E}s=146;break E}r=e[(A=83992+(t<<3)|0)>>2],s=e[A+4>>2]}return he=s,-2147483648|r}if(r=-2147483648,s=130,A-11013>>>0<3||(s=134,A-11035>>>0<2))break t;t=(0|A)==11093,r=-2147483648,he=(A=(0|A)==11088)||t?134:0;break h}if(A-11904>>>0>=26)break S;return he=0,1048576}if(A-12276>>>0>=8)break s;break t}if((A=A-12306|0)>>>0>14||(r=-2147483648,!(1<<A&16387)))break s;break t}t=0,he=(A=A-12951&-3)?0:130;break i}if(r=0,s=128,(0|A)==127279)break t;if(A-127280>>>0<26||A-127312>>>0<26)return he=0,33792;if((t=A-127344|0)>>>0<=15&&(r=33792,s=130,1<<t&49155)||(r=33792,s=0,t>>>0<26))break t;if((0|A)==127374)break R;if(r=0,s=134,A-127377>>>0<10)break t;if(s=102,A>>>0<=127461)break s;break t}r=0,s=134;V:{Z:switch(A-127489|0){case 0:case 25:break t;case 1:break z;case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 10:case 11:case 12:case 13:case 14:case 15:case 16:case 17:case 18:case 19:case 20:case 21:case 22:case 23:case 24:break V;default:break Z}switch(A-127535|0){case 0:break t;case 8:break z;default:break V}}if((-2&A)==127568|A-127538>>>0<9)break t;if(s=128,A>>>0<=127583)break s;break t}if((0|A)==127777)break z;if(A-127789>>>0<9|A-127799>>>0<70)break R;if((0|A)==127877)break Ae;if(A-127870>>>0<22)break R;if(A-127780>>>0<112)break z;r=0,s=130;X:switch(A-127894|0){case 44:case 45:case 46:case 49:break Ae;case 0:case 1:case 3:case 4:case 5:break t;default:break X}if(A-127904>>>0<42)break R;if(s=150,(0|A)==127946||(s=146,A-127947>>>0<2))break t;if(A-127951>>>0<5)break R;if(s=134,A-127968>>>0<17||(s=130,A-127902>>>0<83))break t;if((t=A-127987|0)>>>0<5)break bA;break Y}r=0,s=130;T:switch(A-128063|0){case 0:case 2:break t;default:break T}if((0|A)==128124|(-5&A)-128129>>>0<3|(0|A)==128110|A-128112>>>0<9||(-2&A)==128066|A-128102>>>0<4|A-128070>>>0<11)break Ae;T:switch(A-128253|0){case 1:he=128;break c;case 0:break z;default:break T}if(s=150,(0|A)==128170)break t;break R}if(A>>>0<128318)break R;if(r=0,A>>>0<128326)break t;if(A-128329>>>0<2)break z;if(A-128331>>>0<4|A-128336>>>0<24)break R;if(A-128367>>>0<2)break z;if((-2&A)==128372){he=146;break c}if(A-128371>>>0<7)break z;if(s=150,!(t=A-128378|0))break t;if((0|t)==13|A-128394>>>0<4)break z;if(s=146,(0|A)==128400||(s=150,A-128405>>>0<2))break t;s=134;D:switch(A-128420|0){case 0:break t;case 1:case 4:case 13:case 14:case 24:case 30:case 31:case 32:case 45:case 46:case 47:case 56:case 57:case 58:case 61:case 63:case 68:case 75:case 79:case 86:break z;default:break D}A=A>>>0>128506,t=0;break p}if(r=0,s=128,A-128981>>>0>=4)break s;break t}if(A>>>0<129292)break s;if(A-129328>>>0<10)break Ae;r=0,s=150;P:switch(A-129304|0){case 35:break s;case 0:case 1:case 2:case 3:case 4:case 6:case 7:case 14:break t;default:break P}if(A-129341>>>0<2)break Ae;if(s=0,(0|A)==129350||(s=198,(-4&A)==129456))break t;if((t=A-129461|0)>>>0<5)break hA;break mA}if(r=1048576,A-11931>>>0<89)break t;break s}return he=0,524288;case 29:return he=16777216,1073741825;case 28:break t;case 30:break VA;default:break s}return he=0,(0|A)==32?1073741825:1}if(!(1079>>>t&1))break pe;t=e[(A=81344+(t<<3)|0)>>2];break m}if(557553>>>t&1)break k;if((-4&A)!=8508)break Oe;break t}if(!(207>>>t&1))break Ie;break f}if(r=1024,!(1017>>>t&1))break we;break t}if(r=1024,!(32895>>>t&1))break Ne;break t}if(r=1024,!(55>>>t&1))break Le;break t}if(r=1024,!(3087>>>t&1))break Re;break t}if((A=A-71453|0)>>>0>=15)break s;t=e[(A=82312+(A<<3)|0)>>2];break m}if(!(49023>>>t&1))break je;t=e[(A=82432+(t<<3)|0)>>2];break m}if(!(514623>>>t&1))break $;t=e[(A=82664+(t<<3)|0)>>2];break m}t=e[(A=83160+(t<<3)|0)>>2];break m}if(r=268435520,!(197>>>t&1))break We;break t}t=e[(A=83208+(t<<3)|0)>>2];break m}if((A=A-6145|0)>>>0>=10)break s;t=e[(A=83296+(A<<3)|0)>>2];break m}if(!(1077711>>>t&1))break ae;t=e[(A=83376+(t<<3)|0)>>2];break m}if(!(159>>>t&1))break ke;t=e[(A=83544+(t<<3)|0)>>2];break m}if((A=A-121479|0)>>>0>=4)break s;t=e[(A=83608+(A<<3)|0)>>2];break m}if(!(195>>>t&1))break He;break K}if((A=A-9745|0)>>>0>=13)break G;t=e[(A=83640+(A<<3)|0)>>2];break m}if(1101>>>t&1)break q;if(r=-2147483648,s=130,A>>>0<=9773)break G;break t}if(!(45>>>t&1))break Me;t=e[(A=83744+(t<<3)|0)>>2];break m}if((A=A-9851|0)>>>0>=5)break G;t=e[(A=83792+(A<<3)|0)>>2];break m}if((A=A-9874|0)>>>0>=11)break G;t=e[(A=83832+(A<<3)|0)>>2];break m}if((A=A-9937|0)>>>0>=4)break G;t=e[(A=83920+(A<<3)|0)>>2];break m}t=e[(A=83952+(A<<3)|0)>>2];break m}if(!(23>>>t&1))break Y;t=e[(A=84016+(t<<3)|0)>>2];break m}if(r=0,s=150,!(1991>>>t&1))break Ee;break t}if(s=150,27>>>t&1)break t}t=0,he=(A=A-129489>>>0<13)?150:134;break i}A=A-127992>>>0<3,t=0;break p}if(A-9837>>>0<2)break t}he=128;break u}if(A-8623>>>0<13)break w;if(A-8636>>>0<18)break K;if((t=A-8656|0)>>>0<22&&(s=0,3157995>>>t&1)||(r=-2147483648,s=0,A-8661>>>0<31))break t;break s}if(A>>>0<128592)break R;if(r=0,s=0,A>>>0<128640)break t;if(!((t=A-128675|0)>>>0>29|!(1<<t&537788417)))break Ae;if(A>>>0<128710)break R;if(s=150,(0|A)==128716)break t;if(A-128715>>>0<5)break z;if(A-128720>>>0<3)break R;if(!((t=A-128736|0)>>>0>=10|!(575>>>t&1)))break z;if(s=134,A-128747>>>0<2)break t;s=130;Ee:switch(A-128752|0){case 0:case 3:break t;default:break Ee}A=A-128756>>>0<6,t=0;break p}r=-2147483648;Ve:switch(A-8260|0){case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 10:case 11:case 12:case 13:break s;case 0:case 14:break t;default:break Ve}if((0|(A=A-8315|0))!=16&&A)break s;return he=0,8}if(r=268435520,s=1073741824,(0|A)!=69955)break s;break t}if(A-8266>>>0<8)break w;if(r=-2147483640,(0|A)==8275)break t;if(r=-2147483648,A-8277>>>0>=10)break s;break t}he=542113792;break u}if(r=-2147483648,s=0,A-65093>>>0<2||(r=64,s=268435456,(0|l)==65104))break t;r=268435520,s=-2147483648;ke:switch(A-65106|0){case 3:he=134217728;break A;case 5:he=536870912;break a;case 4:break o;case 2:break r;case 0:break t;case 15:case 22:break ke;default:break s}break k}if((0|A)==2142)break oe;if(r=64,A-2096>>>0<15)break t;break s}if(r=1024,A-72850>>>0<22)break t;if((A=A-72874|0)>>>0>=13)break s;t=e[(A=82560+(A<<3)|0)>>2];break m}if(r=4096,A-71103>>>0<2)break t;if(r=1024,(-2&A)!=71132)break s;break t}if((0|A)==70726)break g;if(r=4096,(-2&A)!=70850)break s;break t}if(r=4096,A-68325>>>0>=2)break s;break t}if((0|A)==6109)break g;if(r=4096,A-6089>>>0>=11)break s;break t}ze:switch(A-3959|0){case 0:case 2:return he=0,8389632;default:break ze}if((0|t)==3968|A-3953>>>0<14)break f;if(!((t=A-3970|0)>>>0>=6|!(55>>>t&1)))break g;if(A-3981>>>0<11)break f;if(r=1024,A-3993>>>0<36)break t;if(r=4096,(0|A)!=4038)break s;break t}if(A-3655>>>0<6)break g;if(!((t=A-3761|0)>>>0>11|!(1<<t&3577)))break f;r=1024;we:switch(A-3661|0){case 1:break g;case 0:break t;default:break we}if(r=4096,A-3784>>>0<5)break t;if(r=1024,(0|A)!=3789)break s;break t}if(A-1770>>>0<3)break t;if(r=1024,(0|A)!=1773)break s;break t}if((-2&A)==73028)break g;r=1024;$:switch(A-73104|0){default:if((0|A)!=73031)break s;break t;case 2:case 3:case 4:case 6:break s;case 0:case 1:case 5:break t;case 7:break $}break g}if((A=A-8492|0)>>>0>=30)break s;t=e[(A=81704+(A<<3)|0)>>2];break m}r=0;break N}s=(t=(-3&A)==43712)>>>20|0,r=t<<12}if((0|(i=-65536&A))==131072)break rA;if((0|i)==65536)break be;if(t=r,l=s,i)break me}if(A-13312>>>0<6582||A-19968>>>0<20976)break e;if(i=2048,A-63744>>>0<366)return he=l,2048|t;if(r=t,s=l,A-64112>>>0>=106)break me;break W}if(i=2099200,A-183984>>>0<7473|A-178208>>>0<5762|A-177984>>>0<222|A-131072>>>0<42711||A-173824>>>0<4149||(i=2048,A-194560>>>0<542))break W;break me}if(i=2048,A-110960>>>0<396|A-94208>>>0<6125|A-100352>>>0<755)break W}i=0}return he=s,r|i}if((-4&A)==8508)break k;if(r=128,!(A-8517>>>0<3)&&(r=16777344,(-2&A)!=8520))break s}he=s;break h}t=(A=A>>>0>131069)?65536:0,he=A?0:128;break i}if((0|A)==11776)break w}he=0;break c}he=0;break u}return he=0,4194304}return he=0,128}return he=0,16777344}return he=0,4096}return he=0,1024}return he=0,-2147483520}return he=0,A-10214>>>0<10?-2147483520:-2147483648}he=0;break a}he=0;break A}he=130;break c}he=130;break u}he=134;break c}return he=150,0}he=0;break i}he=A?0:s;break i}return he=t,A}return 131072}return he=0,16777216}he=A?0:r;break i}return he=s,A}return he=r,A}he=A?0:t;break h}return he=0,8192}he=e[A+4>>2];break i}he=A?8388608:0;break i}return r}return he=0,-2147483616}he=A?134:128}return t}he=134}return-2147483648}return 0}he=1073741824;break a}he=-2147483648}return 268435520}he=67108864}return 64}return he=l,2099200|t}function EA(A){var t,r=0,s=0,i=0,l=0,c=0;(t=tt(8244))&&(e[t+328>>2]=2,f[132848]=0,e[t+684>>2]=0,e[t+688>>2]=0,e[t+320>>2]=0,e[t+324>>2]=0,f[t+268|0]=0,f[t+228|0]=0,e[t+8216>>2]=0,e[t+8220>>2]=0,e[t+224>>2]=104944,e[t+216>>2]=383,e[t+220>>2]=96,Ve(t+344|0,0,292),e[t+8196>>2]=0,e[(r=t+8188|0)>>2]=0,e[r+4>>2]=0,e[t+8180>>2]=0,e[t+8184>>2]=0,f[t+460|0]=22,f[t+461|0]=129,f[t+466|0]=38,f[t+462|0]=38,f[t+463|0]=36,f[t+464|0]=22,f[t+465|0]=224,f[t+456|0]=22,f[t+457|0]=22,f[t+458|0]=44,f[t+459|0]=22,f[t+454|0]=46,f[t+455|0]=129,f[t+446|0]=22,f[t+447|0]=38,f[t+448|0]=28,f[t+449|0]=193,f[t+450|0]=38,f[t+451|0]=22,f[t+452|0]=46,f[t+453|0]=46,f[t+441|0]=129,f[t+442|0]=38,f[t+443|0]=22,f[t+444|0]=38,f[t+445|0]=193,e[t+332>>2]=104912,e[t+336>>2]=104916,e[t+340>>2]=105232,f[t+296|0]=18,f[t+297|0]=18,k[t+304>>1]=182,k[t+306>>1]=140,f[t+298|0]=20,k[t+308>>1]=220,k[t+310>>1]=220,k[t+312>>1]=220,f[t+299|0]=20,f[t+300|0]=20,k[t+314>>1]=240,f[t+301|0]=22,k[t+316>>1]=260,k[t+318>>1]=280,f[t+302|0]=22,f[t+303|0]=20,r=Ve(t,0,212),e[r+200>>2]=20,e[r+192>>2]=25966,e[r+196>>2]=500,e[r+80>>2]=95,e[r+16>>2]=1,e[r+20>>2]=3,e[r+8>>2]=2,e[r+52>>2]=19,f[r+168|0]=3,e[r+92>>2]=2,e[r+72>>2]=4,e[r+40>>2]=115,e[r+44>>2]=95,e[r+140>>2]=105244,yt(r,201),e[r+120>>2]=2,e[r+124>>2]=44,e[r+164>>2]=100,e[r+128>>2]=46,e[r+132>>2]=14,e[r+112>>2]=1227133512,e[r+116>>2]=49,e[r+104>>2]=1,s=e[26313],e[r+636>>2]=e[26312],e[r+640>>2]=s,s=e[26315],e[r+644>>2]=e[26314],e[r+648>>2]=s,s=e[26317],e[r+652>>2]=e[26316],e[r+656>>2]=s,s=e[26319],e[r+660>>2]=e[26318],e[r+664>>2]=s,s=e[26321],e[r+668>>2]=e[26320],e[r+672>>2]=s,s=e[26323],e[r+676>>2]=e[26322],e[r+680>>2]=s,s=d[104928]|d[104929]<<8,f[r+160|0]=s,f[r+161|0]=s>>>8,s=d[104924]|d[104925]<<8|d[104926]<<16|d[104927]<<24,f[r+156|0]=s,f[r+157|0]=s>>>8,f[r+158|0]=s>>>16,f[r+159|0]=s>>>24),i=yA(t+228|0,A),r=0;e:{A:if(s=d[0|A]){for(;r=(s<<24>>24)+(r<<8)|0,s=d[0|(A=A+1|0)];);r:{a:{n:{o:{c:{u:{l:{i:{p:{C:{h:{b:{m:{B:{I:{x:{L:{_:{U:{y:{M:{Q:{F:{Ae:{R:{q:{z:{oe:{j:{Fe:{K:{f:{g:{re:{k:{se:{w:{s:{tA:{te:{t:{pe:{W:{me:{be:{rA:{de:{N:{Se:{v:{Oe:{$:{Ie:{we:{ze:{Ne:{Le:{_e:{Re:{je:{We:{ke:{sA:{ae:{Ye:{Ve:{Ee:{He:{G:{Me:{if((0|r)<=28008){if((0|r)<=26464){if((0|r)<=25696){Y:switch(r-24934|0){case 20:break i;case 1:case 2:case 3:case 4:case 5:case 6:case 9:case 10:case 11:case 14:case 15:case 16:case 17:case 18:case 19:break A;case 8:break $;case 12:break We;case 7:break ke;case 0:break sA;case 13:break Me;default:break Y}Y:switch(r-25189|0){case 1:case 3:case 4:case 5:case 6:case 7:case 8:case 10:case 11:case 12:case 13:break A;case 14:break pe;case 2:break Re;case 0:break je;case 9:break Me;default:break Y}switch(r-25441|0){case 18:break x;case 0:break $;case 24:break Le;default:break A}}Y:switch(r-25964|0){case 1:case 4:case 5:case 6:break A;case 8:break Se;case 9:break Oe;case 7:break $;case 3:break Ie;case 2:break we;case 0:break He;default:break Y}Y:switch(r-26209|0){case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 9:case 10:case 11:case 12:case 13:case 14:case 15:case 16:break A;case 17:break de;case 8:break N;case 0:break v;default:break Y}switch(r-25697|0){case 4:break ze;case 0:break Ne;default:break A}}if((0|r)<=27488){Y:switch(r-26729|0){case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 10:case 13:case 14:case 15:break A;case 16:break tA;case 12:break te;case 11:break t;case 9:break pe;case 0:break W;default:break Y}Y:switch(r-26977|0){case 1:case 2:case 4:case 5:case 6:case 7:case 8:case 9:case 10:case 11:case 12:case 13:case 15:case 16:case 17:break A;case 19:break k;case 18:break se;case 3:break w;case 14:break s;case 0:break $;default:break Y}switch(r-26465|0){case 20:break W;case 13:break me;case 0:case 3:break be;default:break A}}Y:switch(r-27489|0){case 13:break p;case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 12:case 15:case 16:case 17:case 18:case 19:case 21:case 22:case 23:break A;case 24:break oe;case 20:break j;case 14:break Fe;case 11:break K;case 10:break f;case 0:break g;default:break Y}switch(r-27745|0){case 19:break q;case 0:break z;case 21:break Ve;default:break A}}if((0|r)<=29792){if((0|r)<=28768){Y:switch(r-28009|0){case 3:break p;case 11:break Ae;case 2:break R;case 1:case 4:case 5:case 6:case 7:case 8:case 12:case 13:case 14:case 15:break A;case 10:break w;case 9:break W;case 0:case 16:break ae;default:break Y}Y:switch(r-28258|0){case 0:break Q;case 10:break F;case 1:case 2:case 4:case 5:case 6:case 7:case 8:case 9:break A;case 3:break W;default:break Y}switch(r-28525|0){case 0:break M;case 5:break W;default:break A}}if((0|r)<=29539){Y:switch(r-28769|0){case 19:break U;case 11:break y;case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 10:case 12:case 13:case 14:case 15:case 16:case 17:case 18:case 20:case 21:case 22:case 23:break A;case 0:break W;case 24:break ae;default:break Y}Y:switch(r-29295|0){case 6:break L;case 0:break _;case 1:case 2:case 3:case 4:case 5:break A;default:break Y}if((0|r)==29045)break ae;break A}switch(r-29540|0){case 19:break C;case 18:break h;case 13:break b;case 8:break B;case 5:break I;case 7:break x;case 14:break pe;case 0:break c;default:break A}}if((0|r)>6514801)break G;if((0|r)<=30058)switch(r-29793|0){case 19:break l;case 17:break i;case 0:case 4:break p;case 13:break C;case 7:break ae;default:break A}if((0|r)<=30312)switch(r-30059|0){case 0:break u;case 15:break ae;case 7:break c;default:break A}if((0|r)==30313)break o;if((0|r)==31336)break n;if((0|r)!=6451321)break A}if(e[t+296>>2]=303174162,e[t+300>>2]=370545684,e[t+600>>2]=2432,e[t+8>>2]=0,e[t+12>>2]=65540,e[t+100>>2]=e[t+96>>2],A=e[25889],e[t+304>>2]=e[25888],e[t+308>>2]=A,A=e[25891],e[t+312>>2]=e[25890],e[t+316>>2]=A,ws(t),f[t+345|0]=2|d[t+345|0],f[t+406|0]=16|d[t+406|0],f[t+407|0]=16|d[t+407|0],f[t+408|0]=16|d[t+408|0],f[t+409|0]=16|d[t+409|0],f[t+410|0]=16|d[t+410|0],f[t+411|0]=16|d[t+411|0],f[t+412|0]=16|d[t+412|0],f[t+413|0]=16|d[t+413|0],f[t+414|0]=16|d[t+414|0],f[t+415|0]=16|d[t+415|0],f[t+416|0]=16|d[t+416|0],f[t+417|0]=16|d[t+417|0],f[t+418|0]=16|d[t+418|0],f[t+419|0]=16|d[t+419|0],f[t+420|0]=16|d[t+420|0],f[t+456|0]=4|d[t+456|0],f[t+457|0]=4|d[t+457|0],e[t+112>>2]=613567144,e[t+104>>2]=16,(0|r)!=6451321)break e;e[t+104>>2]=1,e[t+108>>2]=512,r=6451321;break e}if((0|r)>7364975)break Ye;if((0|r)>6840682)break Ee;if((0|r)==6514802)break _e;if((0|r)==6516078)break n;if((0|r)!=6779491)break A}if(e[t+600>>2]=896,e[t+328>>2]=8,e[t+296>>2]=336858127,e[t+300>>2]=353768980,e[t+332>>2]=103632,A=e[25905],e[t+304>>2]=e[25904],e[t+308>>2]=A,A=e[25907],e[t+312>>2]=e[25906],e[t+316>>2]=A,Ve(t+344|0,0,256),f[t+388|0]=129,f[t+389|0]=129,f[t+390|0]=129,f[t+391|0]=129,f[t+420|0]=129,f[t+421|0]=129,f[t+422|0]=129,f[t+423|0]=129,f[t+360|0]=129,f[t+392|0]=129,f[t+393|0]=129,f[t+417|0]=129,f[t+418|0]=129,f[t+419|0]=129,f[t+420|0]=129,f[t+408|0]=6,f[t+409|0]=4,f[t+410|0]=6,f[t+411|0]=6,f[t+412|0]=6,f[t+413|0]=193,f[t+414|0]=6,f[t+415|0]=6,f[t+406|0]=6,f[t+407|0]=129,f[t+398|0]=4,f[t+399|0]=193,f[t+400|0]=6,f[t+401|0]=193,f[t+402|0]=6,f[t+403|0]=4,f[t+404|0]=4,f[t+405|0]=4,f[t+394|0]=4,f[t+395|0]=4,f[t+396|0]=4,f[t+397|0]=193,e[t+44>>2]=130,e[t+8>>2]=2,e[t+12>>2]=6,e[t+16>>2]=0,e[t+20>>2]=2,e[t+104>>2]=264,e[t+108>>2]=6146,f[t+391|0]=193,f[t+389|0]=193,f[t+390|0]=193,f[t+421|0]=193,e[t+100>>2]=e[t+96>>2],f[t+416|0]=4|d[t+416|0],(0|r)!=6779491)break e;e[t+40>>2]=1,r=6779491;break e}if((0|r)==6840683)break rA;if((0|r)==6972015)break re;if((0|r)!=7107687)break A}e[t+296>>2]=134875662,e[t+300>>2]=252968960,e[t+328>>2]=5,f[t+169|0]=1,e[t+132>>2]=33,e[t+104>>2]=99336,e[t+8>>2]=0,e[t+12>>2]=262182,A=e[26069],e[t+304>>2]=e[26068],e[t+308>>2]=A,A=e[26071],e[t+312>>2]=e[26070],e[t+316>>2]=A;break e}if((0|r)<=7564649){if((0|r)==7364976)break $;if((0|r)==7435619)break ae;if((0|r)!=7563374)break A;e[t+148>>2]=1,e[t+112>>2]=24,e[t+104>>2]=1,e[t+100>>2]=e[t+96>>2],r=7563374;break e}if((0|r)==7564650)break m;if((0|r)==7959909)break n;if((0|r)!=1885958500)break A}e[t+104>>2]=0;break e}e[t+4>>2]=48,e[t+8>>2]=0,e[t+144>>2]=1,e[t+104>>2]=16779472,e[t+32>>2]=1,e[t+24>>2]=1,A=e[25881],e[t+304>>2]=e[25880],e[t+308>>2]=A,A=e[25883],e[t+312>>2]=e[25882],e[t+316>>2]=A,f[t+465|0]=64&d[t+465|0]|129,r=24934;break e}e[t+600>>2]=4608,e[t+296>>2]=303173650,e[t+300>>2]=303174162,e[t+8>>2]=0,e[t+12>>2]=36,e[t+104>>2]=1024,e[t+100>>2]=e[t+96>>2],e[t+40>>2]=1,A=e[25865],e[t+304>>2]=e[25864],e[t+308>>2]=A,A=e[25867],e[t+312>>2]=e[25866],e[t+316>>2]=A,r=24941;break e}for(e[t+600>>2]=1536,e[t+224>>2]=0,e[t+216>>2]=1631,e[t+220>>2]=1536,e[t+104>>2]=2884720,e[t+328>>2]=7,e[t+40>>2]=1,H=r=H-16|0,e[r+12>>2]=-1,A=89684;i=_A(r+12|0,A),(0|(s=e[r+12>>2]))>=33&&(f[0|(l=(t+s|0)-1192|0)]=1|d[0|l]),A=A+i|0,s;);for(e[r+12>>2]=-1,A=89743;i=_A(r+12|0,A),(0|(s=e[r+12>>2]))>=33&&(f[0|(l=(t+s|0)-1192|0)]=2|d[0|l]),A=A+i|0,s;);for(e[r+12>>2]=-1,A=89795;i=_A(r+12|0,A),(0|(s=e[r+12>>2]))>=33&&(f[0|(l=(t+s|0)-1192|0)]=4|d[0|l]),A=A+i|0,s;);for(e[r+12>>2]=-1,A=89941;i=_A(r+12|0,A),(0|(s=e[r+12>>2]))>=33&&(f[0|(l=(t+s|0)-1192|0)]=16|d[0|l]),A=A+i|0,s;);for(e[r+12>>2]=-1,A=90045;i=_A(r+12|0,A),(0|(s=e[r+12>>2]))>=33&&(f[0|(l=(t+s|0)-1192|0)]=32|d[0|l]),A=A+i|0,s;);for(e[r+12>>2]=-1,A=90045;i=_A(r+12|0,A),(0|(s=e[r+12>>2]))>=33&&(f[0|(l=(t+s|0)-1192|0)]=8|d[0|l]),A=A+i|0,s;);for(e[r+12>>2]=-1,A=90045;i=_A(r+12|0,A),(0|(s=e[r+12>>2]))>=33&&(f[0|(l=(t+s|0)-1192|0)]=64|d[0|l]),A=A+i|0,s;);H=r+16|0,r=24946;break e}e[t+600>>2]=1056,e[t+12>>2]=34,e[t+216>>2]=1118,e[t+220>>2]=1072,Ve(t+344|0,0,256),f[t+406|0]=4,f[t+366|0]=4,f[t+367|0]=4,f[t+369|0]=4,f[t+370|0]=4,f[t+371|0]=4,f[t+372|0]=4,f[t+361|0]=4,f[t+362|0]=4,f[t+363|0]=4,f[t+364|0]=4,f[t+373|0]=4,f[t+380|0]=4,f[t+381|0]=4,f[t+382|0]=4,f[t+383|0]=4,f[t+375|0]=4,f[t+376|0]=4,f[t+377|0]=4,f[t+378|0]=4,f[t+384|0]=4,f[t+360|0]=129,e[t+328>>2]=6,e[t+296>>2]=134744588,e[t+300>>2]=286261248,e[t+40>>2]=1,e[t+8>>2]=0,e[t+104>>2]=1032,e[t+108>>2]=66,A=e[25885],e[t+304>>2]=e[25884],e[t+308>>2]=A,A=e[25887],e[t+312>>2]=e[25886],e[t+316>>2]=A,r=25189;break e}uA(t),e[t+328>>2]=6,e[t+56>>2]=2,e[t+36>>2]=263,e[t+40>>2]=1074,e[t+124>>2]=32,e[t+104>>2]=184554728,e[t+8>>2]=2,f[t+386|0]=64&d[t+386|0]|129,r=25191;break e}e[t+12>>2]=262182,e[t+40>>2]=1,r=6514802;break e}e[t+328>>2]=14,e[t+296>>2]=303173393,e[t+300>>2]=336986112,e[t+104>>2]=1024,e[t+16>>2]=0,e[t+20>>2]=2,e[t+8>>2]=2,e[t+12>>2]=22,e[t+44>>2]=120,A=e[25893],e[t+304>>2]=e[25892],e[t+308>>2]=A,A=e[25895],e[t+312>>2]=e[25894],e[t+316>>2]=A,f[t+463|0]=64&d[t+463|0]|129,f[t+465|0]=64&d[t+465|0]|129,r=25465;break e}e[t+8>>2]=0,e[t+104>>2]=184618072,e[t+32>>2]=1,A=e[26101],e[t+304>>2]=e[26100],e[t+308>>2]=A,A=e[26103],e[t+312>>2]=e[26102],e[t+316>>2]=A,f[t+465|0]=64&d[t+465|0]|129,r=25697;break e}e[t+296>>2]=336860180,e[t+300>>2]=336991764,e[t+8>>2]=0,e[t+104>>2]=16846872,e[t>>2]=8,e[t+4>>2]=48,e[t+80>>2]=87,e[t+32>>2]=1,e[t+36>>2]=256,e[t+40>>2]=2,A=e[25897],e[t+304>>2]=e[25896],e[t+308>>2]=A,A=e[25899],e[t+312>>2]=e[25898],e[t+316>>2]=A,f[t+465|0]=64&d[t+465|0]|129,r=25701;break e}e[t+132>>2]=33,e[t+104>>2]=16779328,e[t+8>>2]=0,e[t+12>>2]=8,e[t+204>>2]=101,e[t+60>>2]=2,e[t+40>>2]=2,A=e[25901],e[t+304>>2]=e[25900],e[t+308>>2]=A,A=e[25903],e[t+312>>2]=e[25902],e[t+316>>2]=A,f[t+441|0]=64|d[t+441|0],f[t+445|0]=64|d[t+445|0],f[t+449|0]=64|d[t+449|0],f[t+455|0]=64|d[t+455|0],f[t+461|0]=64|d[t+461|0],f[t+465|0]=64|d[t+465|0],r=25966;break e}e[t+328>>2]=4,e[t+296>>2]=336858640,e[t+300>>2]=353768980,e[t+104>>2]=16782344,e[t+20>>2]=2,e[t+12>>2]=22,e[t+4>>2]=2,e[t+8>>2]=2,e[t+332>>2]=103640,A=e[25997],e[t+304>>2]=e[25996],e[t+308>>2]=A,A=e[25999],e[t+312>>2]=e[25998],e[t+316>>2]=A,r=25967;break e}e[t+296>>2]=269422096,e[t+300>>2]=370545684,e[t+104>>2]=86017320,e[t+108>>2]=6144,e[t+16>>2]=0,e[t+20>>2]=2,e[t+8>>2]=2,e[t+12>>2]=534,e[t+100>>2]=e[t+96>>2],e[t+44>>2]=120,A=e[25913],e[t+304>>2]=e[25912],e[t+308>>2]=A,A=e[25915],e[t+312>>2]=e[25914],e[t+316>>2]=A;$:{Ie:{if((0|r)<=26976){if((0|r)==24942)break Ie;if((0|r)!=25441)break $;e[t+12>>2]=566,e[t+336>>2]=103664,r=25441;break e}if((0|r)!=26977){if((0|r)!=7364976)break $;e[t+8>>2]=3,e[t+12>>2]=310,r=7364976;break e}e[t+104>>2]=85984264,r=26977;break e}e[t+104>>2]=153093416,e[t+108>>2]=2048,e[t+140>>2]=103676,r=24942;break e}e[t+40>>2]=2;break e}e[t+296>>2]=303173648,e[t+300>>2]=303174162,e[t+104>>2]=3147080,e[t+12>>2]=65792,e[t+84>>2]=1,A=e[25921],e[t+304>>2]=e[25920],e[t+308>>2]=A,A=e[25923],e[t+312>>2]=e[25922],e[t+316>>2]=A,r=25973;break e}e[t+600>>2]=1536,e[t+216>>2]=1740,e[t+220>>2]=1568,e[t+104>>2]=96,e[t+224>>2]=103696,e[t+340>>2]=103872,e[t+40>>2]=1,r=26209;break e}e[t+328>>2]=5}e[t+104>>2]=86024,e[t+164>>2]=130,f[t+465|0]=64&d[t+465|0]|129;break e}e[t+296>>2]=303173650,e[t+300>>2]=303174162,e[t+8>>2]=3,e[t+12>>2]=36,e[t+144>>2]=2,e[t+104>>2]=118658312,e[t+28>>2]=1,e[t+100>>2]=e[t+96>>2],A=e[25865],e[t+304>>2]=e[25864],e[t+308>>2]=A,A=e[25867],e[t+312>>2]=e[25866],e[t+316>>2]=A,f[t+465|0]=64&d[t+465|0]|129,r=26226;break e}k[t+170>>1]=257,e[t+148>>2]=1,e[t+12>>2]=2,r=6840683;break e}e[t+144>>2]=2,e[t+104>>2]=2098176,e[t+8>>2]=0,e[t+12>>2]=32,e[t+40>>2]=3,e[t+28>>2]=1;break e}e[t+8>>2]=3,e[t+100>>2]=e[t+96>>2],r=26478;break e}e[t+328>>2]=18,e[t+296>>2]=320081425,e[t+300>>2]=353768980,e[t+600>>2]=2304,e[t+112>>2]=84648,e[t+104>>2]=16,e[t+8>>2]=6,e[t+12>>2]=65540,e[t+100>>2]=e[t+96>>2],A=e[25973],e[t+304>>2]=e[25972],e[t+308>>2]=A,A=e[25975],e[t+312>>2]=e[25974],e[t+316>>2]=A;W:{me:{be:{if((0|r)<=28529){if((0|r)==26485)break be;if((0|r)!=28261)break W;A=e[25861],e[t+304>>2]=e[25860],e[t+308>>2]=A,A=e[25863],e[t+312>>2]=e[25862],e[t+316>>2]=A,e[t+296>>2]=320017171,e[t+300>>2]=320017171,e[t+132>>2]=22,e[t+112>>2]=-1431655768,e[t+108>>2]=32768|e[t+108>>2],ws(t);break e}if((0|r)==28530)break me;if((0|r)!=28769)break W;e[t+600>>2]=2560,ws(t);break e}A=e[25861],e[t+304>>2]=e[25860],e[t+308>>2]=A,A=e[25863],e[t+312>>2]=e[25862],e[t+316>>2]=A,e[t+600>>2]=2688,e[t+296>>2]=320017171,e[t+300>>2]=320017171,e[t+8>>2]=2,ws(t);break e}e[t+600>>2]=2816}ws(t);break e}f[0|i]=104,f[i+1|0]=98,f[i+2|0]=115,f[i+3|0]=0,(0|r)!=29554?(A=e[26093],e[t+304>>2]=e[26092],e[t+308>>2]=A,A=e[26095],e[t+312>>2]=e[26094],e[t+316>>2]=A):(A=e[25977],e[t+304>>2]=e[25976],e[t+308>>2]=A,A=e[25979],e[t+312>>2]=e[25978],e[t+316>>2]=A),e[t+328>>2]=3,e[t+296>>2]=336859409,e[t+300>>2]=353768980,k[t+168>>1]=261,e[t+8>>2]=0,e[t+12>>2]=16,e[t+144>>2]=1,e[t+184>>2]=1056,e[t+104>>2]=33572172,e[t+108>>2]=330,e[t+36>>2]=3,f[t+465|0]=64&d[t+465|0]|129,f[t+458|0]=64&d[t+458|0]|129;break e}e[t+104>>2]=17990912,e[t+8>>2]=3,e[t+12>>2]=36,r=26740;break e}e[t+328>>2]=3,e[t+296>>2]=320016657,e[t+300>>2]=353768980,e[t+124>>2]=32,e[t+128>>2]=44,e[t+104>>2]=186758144,e[t+12>>2]=1081398,e[t+16>>2]=2,e[t+4>>2]=32,e[t+8>>2]=0,e[t+116>>2]=899,e[t+120>>2]=1,f[t+169|0]=1,e[t+76>>2]=2,A=e[25981],e[t+304>>2]=e[25980],e[t+308>>2]=A,A=e[25983],e[t+312>>2]=e[25982],e[t+316>>2]=A,f[t+465|0]=64&d[t+465|0]|129,yt(t,3),r=26741;break e}for(e[t+600>>2]=1328,e[t+8>>2]=3,A=e[25985],e[t+304>>2]=e[25984],e[t+308>>2]=A,A=e[25987],e[t+312>>2]=e[25986],e[t+316>>2]=A,i=Ve(t+344|0,0,256),f[t+429|0]=129,f[t+416|0]=129,f[t+403|0]=129,f[t+399|0]=129,f[t+400|0]=129,f[t+397|0]=129,f[t+393|0]=129,s=103952,l=50,c=50;f[0|(A=i+c|0)]=2|d[0|A],A=i+d[s+1|0]|0,f[0|A]=2|d[0|A],A=i+d[s+2|0]|0,f[0|A]=2|d[0|A],c=d[0|(s=s+3|0)],A=103952,(0|s)!=103982;);for(s=t+344|0;f[0|(i=s+l|0)]=4|d[0|i],i=s+d[A+1|0]|0,f[0|i]=4|d[0|i],i=s+d[A+2|0]|0,f[0|i]=4|d[0|i],l=d[0|(A=A+3|0)],(0|A)!=103982;);f[t+168|0]=6,e[t+104>>2]=5128,f[t+413|0]=4|d[t+413|0];break e}e[t+328>>2]=4,e[t+296>>2]=336858640,e[t+300>>2]=353768980,e[t+104>>2]=16782440,e[t+20>>2]=2,e[t+12>>2]=22,e[t+4>>2]=2,e[t+8>>2]=2,e[t+332>>2]=104e3,A=e[25997],e[t+304>>2]=e[25996],e[t+308>>2]=A,A=e[25999],e[t+312>>2]=e[25998],e[t+316>>2]=A,r=26991;break e}e[t+296>>2]=303174160,e[t+300>>2]=353768980,e[t+104>>2]=16781320,e[t+144>>2]=2,e[t+8>>2]=2,e[t+12>>2]=22,A=e[26005],e[t+304>>2]=e[26004],e[t+308>>2]=A,A=e[26007],e[t+312>>2]=e[26006],e[t+316>>2]=A;break e}for(e[t+8>>2]=0,e[t+12>>2]=16,e[t+56>>2]=2,e[t+28>>2]=17,A=e[26009],e[t+304>>2]=e[26008],e[t+308>>2]=A,A=e[26011],e[t+312>>2]=e[26010],e[t+316>>2]=A,A=0,s=t+344|0;f[0|(i=A+s|0)]=231&d[0|i],f[0|(i=s+(1|A)|0)]=231&d[0|i],f[0|(i=s+(2|A)|0)]=231&d[0|i],f[0|(i=s+(3|A)|0)]=231&d[0|i],(0|(A=A+4|0))!=256;);e[t+104>>2]=2280,e[t+108>>2]=2,e[t+608>>2]=104048,f[t+451|0]=16|d[t+451|0],f[t+456|0]=16|d[t+456|0],f[t+459|0]=16|d[t+459|0],f[t+460|0]=16|d[t+460|0],f[t+450|0]=8|d[t+450|0],f[t+462|0]=8|d[t+462|0],f[t+458|0]=8|d[t+458|0],f[t+465|0]=64&d[t+465|0]|129;break e}e[t+296>>2]=269618961,e[t+300>>2]=370546196,e[t+12>>2]=131110,e[t+144>>2]=2,e[t+104>>2]=184559112,e[t+108>>2]=8192,e[t+16>>2]=0,e[t+20>>2]=2,e[t+4>>2]=1,e[t+8>>2]=2,e[t+100>>2]=e[t+96>>2],e[t+140>>2]=103676,e[t+68>>2]=2,e[t+56>>2]=1,e[t+44>>2]=130,e[t+28>>2]=2,A=e[26025],e[t+304>>2]=e[26024],e[t+308>>2]=A,A=e[26027],e[t+312>>2]=e[26026],e[t+316>>2]=A,f[t+465|0]=64&d[t+465|0]|129,r=26996;break e}e[t+4>>2]=524,e[t+8>>2]=2,e[t+196>>2]=368,e[t+104>>2]=0,e[t+336>>2]=104128,e[t- -64>>2]=1,A=e[26029],e[t+304>>2]=e[26028],e[t+308>>2]=A,A=e[26031],e[t+312>>2]=e[26030],e[t+316>>2]=A,f[t+465|0]=64&d[t+465|0]|129,r=6972015;break e}for(e[t+296>>2]=303174162,e[t+300>>2]=370545684,A=e[25873],e[t+304>>2]=e[25872],e[t+308>>2]=A,A=e[25875],e[t+312>>2]=e[25874],e[t+316>>2]=A,i=Ve(t+344|0,0,256),f[t+431|0]=1,f[t+429|0]=1,f[t+411|0]=1,f[t+405|0]=1,f[t+400|0]=1,f[t+396|0]=1,f[t+392|0]=1,A=104160,s=49;f[0|(s=s+i|0)]=4|d[0|s],s=i+d[A+1|0]|0,f[0|s]=4|d[0|s],s=i+d[A+2|0]|0,f[0|s]=4|d[0|s],s=d[0|(A=A+3|0)],(0|A)!=104193;);e[t+600>>2]=4256,e[t+8>>2]=0,e[t+12>>2]=16,f[t+168|0]=7,e[t+132>>2]=32,f[t+392|0]=128|d[t+392|0],f[t+396|0]=128|d[t+396|0],f[t+400|0]=128|d[t+400|0],f[t+405|0]=128|d[t+405|0],f[t+411|0]=128|d[t+411|0],f[t+429|0]=128|d[t+429|0],f[t+431|0]=128|d[t+431|0],e[t+188>>2]=1056,e[t+192>>2]=29301,e[t+104>>2]=19964960;break e}for(e[t+600>>2]=1056,i=Ve(t+344|0,0,256),f[t+393|0]=1,f[t+365|0]=1,f[t+360|0]=1,f[t+545|0]=1,f[t+529|0]=1,f[t+391|0]=1,f[t+389|0]=1,f[t+390|0]=1,f[t+387|0]=1,f[t+379|0]=1,f[t+374|0]=1,f[t+368|0]=1,f[t+489|0]=1,f[t+487|0]=1,f[t+398|0]=1,A=104224,s=17;f[0|(s=s+i|0)]=4|d[0|s],s=i+d[A+1|0]|0,f[0|s]=4|d[0|s],s=i+d[A+2|0]|0,f[0|s]=4|d[0|s],s=d[0|(A=A+3|0)],(0|A)!=104251;);f[t+360|0]=128|d[t+360|0],f[t+365|0]=128|d[t+365|0],f[t+393|0]=128|d[t+393|0],f[t+368|0]=128|d[t+368|0],f[t+374|0]=128|d[t+374|0],f[t+379|0]=128|d[t+379|0],f[t+387|0]=128|d[t+387|0],f[t+389|0]=128|d[t+389|0],f[t+390|0]=128|d[t+390|0],f[t+391|0]=128|d[t+391|0],f[t+529|0]=128|d[t+529|0],f[t+545|0]=128|d[t+545|0],f[t+489|0]=128|d[t+489|0],f[t+487|0]=128|d[t+487|0],f[t+398|0]=128|d[t+398|0],A=e[26055],e[t+312>>2]=e[26054],e[t+316>>2]=A,A=e[26053],e[t+304>>2]=e[26052],e[t+308>>2]=A,e[t+296>>2]=353636370,e[t+300>>2]=336925972,e[t+200>>2]=0,e[t+8>>2]=7,e[t+12>>2]=2097184,f[t+168|0]=2,e[t+104>>2]=50176,e[t+84>>2]=1,yt(t,3);break e}e[t+296>>2]=320017171,e[t+300>>2]=320017171,e[t+104>>2]=184618072,e[t+8>>2]=12,e[t+12>>2]=32,A=e[25861],e[t+304>>2]=e[25860],e[t+308>>2]=A,A=e[25863],e[t+312>>2]=e[25862],e[t+316>>2]=A,r=27500;break e}e[t+184>>2]=42752,e[t+600>>2]=4352,Ve(t+344|0,0,256),f[t+456|0]=1,f[t+457|0]=1,f[t+458|0]=1,f[t+459|0]=1,f[t+449|0]=1,f[t+450|0]=1,f[t+451|0]=1,f[t+452|0]=1,f[t+453|0]=1,f[t+454|0]=1,f[t+455|0]=1,f[t+456|0]=1,f[t+441|0]=1,f[t+442|0]=1,f[t+443|0]=1,f[t+444|0]=1,f[t+445|0]=1,f[t+446|0]=1,f[t+447|0]=1,f[t+448|0]=1,f[t+460|0]=65,f[t+461|0]=65,f[t+532|0]=32,f[t+527|0]=32,f[t+519|0]=32,f[t+515|0]=32,f[t+349|0]=32,f[t+350|0]=32,f[t+346|0]=32,e[t+132>>2]=20,e[t+112>>2]=286331152,e[t+104>>2]=1024,e[t+108>>2]=16384,e[t+40>>2]=1,e[t+8>>2]=8,f[t+458|0]=65,f[t+453|0]=65,f[t+447|0]=65,f[t+448|0]=65,f[t+443|0]=65,f[t+444|0]=65,r=27503;break e}e[t+328>>2]=10,e[t+296>>2]=336859666,e[t+300>>2]=353768980,f[t+168|0]=2,e[t+104>>2]=263264,e[t+8>>2]=7,A=e[26065],e[t+304>>2]=e[26064],e[t+308>>2]=A,A=e[26067],e[t+312>>2]=e[26066],e[t+316>>2]=A,r=27509;break e}e[t+104>>2]=1,r=27513;break e}e[t+116>>2]=5e3,e[t+104>>2]=16777216,e[t+24>>2]=1,e[t+16>>2]=0,e[t+20>>2]=2,e[t+8>>2]=2,e[t+12>>2]=32,e[t+328>>2]=5,r=27745;break e}e[t+116>>2]=5e3,e[t+104>>2]=99336,e[t+108>>2]=256,e[t+24>>2]=1,e[t+16>>2]=0,e[t+20>>2]=2,e[t+8>>2]=2,e[t+12>>2]=32,e[t+328>>2]=5,r=27764;break e}e[t+328>>2]=6,e[t+296>>2]=336859409,e[t+300>>2]=353768980,e[t+600>>2]=1056,e[t+104>>2]=2114600,e[t+108>>2]=138,e[t+8>>2]=4,e[t+632>>2]=104288,e[t+604>>2]=104288,A=e[26093],e[t+304>>2]=e[26092],e[t+308>>2]=A,A=e[26095],e[t+312>>2]=e[26094],e[t+316>>2]=A,r=28011;break e}e[t+328>>2]=4,e[t+104>>2]=1,e[t+8>>2]=2,e[t+36>>2]=256,r=28020;break e}e[t+4>>2]=48,e[t+8>>2]=0,e[t+12>>2]=128,e[t+104>>2]=2169880,e[t+32>>2]=1,e[t+36>>2]=256,e[t+24>>2]=1,e[t+136>>2]=85767,A=e[26097],e[t+304>>2]=e[26096],e[t+308>>2]=A,A=e[26099],e[t+312>>2]=e[26098],e[t+316>>2]=A,f[t+465|0]=64&d[t+465|0]|129,r=28268;break e}e[t+8>>2]=0,e[t+104>>2]=71752,A=e[26101],e[t+304>>2]=e[26100],e[t+308>>2]=A,A=e[26103],e[t+312>>2]=e[26102],e[t+316>>2]=A,f[t+465|0]=64&d[t+465|0]|129,r=28258;break e}e[t+296>>2]=336858898,e[t+300>>2]=370546196,e[t+104>>2]=1088,e[t+108>>2]=512,e[t+8>>2]=2,e[t+12>>2]=524310,A=e[26105],e[t+304>>2]=e[26104],e[t+308>>2]=A,A=e[26107],e[t+312>>2]=e[26106],e[t+316>>2]=A,r=28525;break e}e[t+328>>2]=3,e[t+296>>2]=320015633,e[t+300>>2]=353768980,f[t+168|0]=7,e[t+8>>2]=2,e[t+12>>2]=6,e[t+104>>2]=20488,e[t+108>>2]=192,e[t+36>>2]=9,e[t+60>>2]=260,A=e[26109],e[t+304>>2]=e[26108],e[t+308>>2]=A,A=e[26111],e[t+312>>2]=e[26110],e[t+316>>2]=A,f[t+465|0]=64&d[t+465|0]|129,r=28780;break e}for(e[t+296>>2]=353569552,e[t+300>>2]=353768980,e[t+116>>2]=5e3,e[t+104>>2]=33570920,e[t+108>>2]=14336,e[t+8>>2]=3,e[t+12>>2]=139286,e[t+100>>2]=e[t+96>>2],A=e[26113],e[t+304>>2]=e[26112],e[t+308>>2]=A,A=e[26115],e[t+312>>2]=e[26114],e[t+316>>2]=A,f[t+465|0]=64&d[t+465|0]|129,A=0,s=t+344|0;f[0|(i=A+s|0)]=253&d[0|i],f[0|(i=s+(1|A)|0)]=253&d[0|i],f[0|(i=s+(2|A)|0)]=253&d[0|i],f[0|(i=s+(3|A)|0)]=253&d[0|i],(0|(A=A+4|0))!=256;);f[t+442|0]=2|d[t+442|0],f[t+443|0]=2|d[t+443|0],f[t+444|0]=2|d[t+444|0],f[t+446|0]=2|d[t+446|0],f[t+447|0]=2|d[t+447|0],f[t+450|0]=2|d[t+450|0],f[t+451|0]=2|d[t+451|0],f[t+453|0]=2|d[t+453|0],f[t+454|0]=2|d[t+454|0],f[t+456|0]=2|d[t+456|0],f[t+457|0]=2|d[t+457|0],f[t+459|0]=2|d[t+459|0],f[t+460|0]=2|d[t+460|0],f[t+462|0]=2|d[t+462|0],f[t+464|0]=2|d[t+464|0],f[t+466|0]=2|d[t+466|0],e[t+144>>2]=2,e[t+68>>2]=2;break e}e[t+296>>2]=303172879,e[t+300>>2]=353768980,e[t+328>>2]=3,e[t+8>>2]=3,e[t+12>>2]=262,e[t+104>>2]=16805928,e[t+108>>2]=30,A=e[26117],e[t+304>>2]=e[26116],e[t+308>>2]=A,A=e[26119],e[t+312>>2]=e[26118],e[t+316>>2]=A,r=29295;break e}xn(t),r=29301;break e}for(e[t+328>>2]=3,e[t+296>>2]=336859153,e[t+300>>2]=353768980,k[t+168>>1]=261,e[t+8>>2]=0,e[t+12>>2]=22,e[t+124>>2]=0,e[t+128>>2]=44,e[t+104>>2]=16794624,e[t+108>>2]=128,e[t+36>>2]=3,e[t+60>>2]=4,A=e[25869],e[t+304>>2]=e[25868],e[t+308>>2]=A,A=e[25871],e[t+312>>2]=e[25870],e[t+316>>2]=A,(0|r)==25459&&(e[t+108>>2]=136),f[t+465|0]=64&d[t+465|0]|129,f[t+458|0]=64&d[t+458|0]|129,A=0,s=t+344|0;f[0|(i=A+s|0)]=223&d[0|i],f[0|(i=s+(1|A)|0)]=223&d[0|i],f[0|(i=s+(2|A)|0)]=223&d[0|i],f[0|(i=s+(3|A)|0)]=223&d[0|i],(0|(A=A+4|0))!=256;);f[t+442|0]=32|d[t+442|0],f[t+444|0]=32|d[t+444|0],f[t+447|0]=32|d[t+447|0],f[t+450|0]=32|d[t+450|0],f[t+452|0]=32|d[t+452|0],f[t+453|0]=32|d[t+453|0],f[t+454|0]=32|d[t+454|0],f[t+458|0]=32|d[t+458|0],f[t+462|0]=32|d[t+462|0],f[t+463|0]=32|d[t+463|0],f[t+466|0]=32|d[t+466|0],f[t+441|0]=32|d[t+441|0],f[t+445|0]=32|d[t+445|0],f[t+449|0]=32|d[t+449|0],f[t+455|0]=32|d[t+455|0],f[t+461|0]=32|d[t+461|0],f[t+465|0]=32|d[t+465|0];break e}for(e[t+296>>2]=303174162,e[t+300>>2]=370545684,e[t+600>>2]=3456,f[t+169|0]=1,e[t+8>>2]=0,e[t+12>>2]=22,e[t+100>>2]=e[t+96>>2],A=e[25873],e[t+304>>2]=e[25872],e[t+308>>2]=A,A=e[25875],e[t+312>>2]=e[25874],e[t+316>>2]=A,Ve(t+344|0,0,256),f[t+365|0]=1,f[t+366|0]=1,f[t+357|0]=1,f[t+358|0]=1,f[t+359|0]=1,f[t+360|0]=1,f[t+361|0]=1,f[t+362|0]=1,f[t+363|0]=1,f[t+364|0]=1,f[t+349|0]=1,f[t+350|0]=1,f[t+351|0]=1,f[t+352|0]=1,f[t+353|0]=1,f[t+354|0]=1,f[t+355|0]=1,f[t+356|0]=1,A=74,s=74;f[(i=t+s|0)+344|0]=1|d[i+344|0],f[i+345|0]=1|d[i+345|0],f[i+346|0]=1|d[i+346|0],(0|(s=s+3|0))!=116;);for(;f[(s=A+t|0)+344|0]=2|d[s+344|0],f[s+345|0]=2|d[s+345|0],f[s+346|0]=2|d[s+346|0],(0|(A=A+3|0))!=116;);for(s=26;f[(A=t+s|0)+344|0]=4|d[A+344|0],f[A+345|0]=4|d[A+345|0],f[A+346|0]=4|d[A+346|0],f[A+347|0]=4|d[A+347|0],f[A+348|0]=4|d[A+348|0],(0|(s=s+5|0))!=71;);e[t+112>>2]=84648,e[t+104>>2]=270589952,e[t+108>>2]=65536,e[t+40>>2]=1,e[t+204>>2]=e[t+600>>2]+74;break e}e[t+8>>2]=2,e[t+12>>2]=32,e[t+328>>2]=3,e[t+124>>2]=32,e[t+104>>2]=16864280,e[t+108>>2]=256,e[t+68>>2]=2,e[t+36>>2]=259,e[t+40>>2]=118,e[t+28>>2]=1,f[t+458|0]=128|d[t+458|0],r=29548;break e}e[t+296>>2]=370544658,e[t+300>>2]=370546196,e[t+164>>2]=130,e[t+8>>2]=0,e[t+12>>2]=86,e[t+104>>2]=87064,f[t+169|0]=1,e[t+152>>2]=3,A=e[26121],e[t+304>>2]=e[26120],e[t+308>>2]=A,A=e[26123],e[t+312>>2]=e[26122],e[t+316>>2]=A,f[t+465|0]=64&d[t+465|0]|129,r=7564650;break e}e[t+296>>2]=269487120,e[t+300>>2]=320148500,e[t+8>>2]=3,e[t+12>>2]=278,e[t+144>>2]=2,e[t+104>>2]=32872,A=e[26125],e[t+304>>2]=e[26124],e[t+308>>2]=A,A=e[26127],e[t+312>>2]=e[26126],e[t+316>>2]=A,f[t+465|0]=64&d[t+465|0]|129,r=29553;break e}e[t+296>>2]=336859152,e[t+300>>2]=353768980,e[t+8>>2]=0,e[t+144>>2]=1,e[t+104>>2]=6408,A=e[26129],e[t+304>>2]=e[26128],e[t+308>>2]=A,A=e[26131],e[t+312>>2]=e[26130],e[t+316>>2]=A,f[t+465|0]=64&d[t+465|0]|129,r=29558;break e}e[t+296>>2]=320015376,e[t+300>>2]=353768980,f[t+168|0]=4,e[t+12>>2]=22,e[t+4>>2]=1,e[t+8>>2]=2,e[t+104>>2]=1248,e[t+100>>2]=e[t+96>>2],A=e[26133],e[t+304>>2]=e[26132],e[t+308>>2]=A,A=e[26135],e[t+312>>2]=e[26134],e[t+316>>2]=A;break e}e[t+296>>2]=303174162,e[t+300>>2]=370545684,f[t+169|0]=1,e[t+8>>2]=0,e[t+12>>2]=22,e[t+112>>2]=5288,e[t+100>>2]=e[t+96>>2],A=e[25877],e[t+304>>2]=e[25876],e[t+308>>2]=A,A=e[25879],e[t+312>>2]=e[25878],e[t+316>>2]=A;p:switch(r-29793|0){default:if((0|r)!=27502){if((0|r)!=28012)break r;A=e[26137],e[t+304>>2]=e[26136],e[t+308>>2]=A,A=e[26139],e[t+312>>2]=e[26138],e[t+316>>2]=A,e[t+600>>2]=3328,e[t+296>>2]=320017171,e[t+300>>2]=320017171,e[t+104>>2]=2098176,e[t+108>>2]=131072,e[t+8>>2]=13;break r}e[t+104>>2]=1,e[t+600>>2]=3200;break r;case 4:break p;case 1:case 2:case 3:break r;case 0:break a}e[t+104>>2]=1,e[t+108>>2]=524288,e[t+600>>2]=3072;break r}e[t+328>>2]=10,e[t+296>>2]=353636370,e[t+300>>2]=336925972,f[t+173|0]=1,e[t+8>>2]=7,e[t+12>>2]=32,f[t+168|0]=2,e[t+84>>2]=1,A=e[26141],e[t+304>>2]=e[26140],e[t+308>>2]=A,e[t+104>>2]=(0|r)==24954?2118920:2114824,A=e[26143],e[t+312>>2]=e[26142],e[t+316>>2]=A;break e}uA(t),e[t+296>>2]=303173650,e[t+300>>2]=303174162,e[t+104>>2]=2131208,e[t+8>>2]=3,e[t+12>>2]=32,A=e[25865],e[t+304>>2]=e[25864],e[t+308>>2]=A,A=e[25867],e[t+312>>2]=e[25866],e[t+316>>2]=A,r=29812;break e}xn(t),r=30059;break e}e[t+112>>2]=21160,e[t+104>>2]=16,e[t+600>>2]=1536,e[t+40>>2]=1;break e}e[t+296>>2]=269488144,e[t+300>>2]=370546198,e[t+8>>2]=0,e[t>>2]=33,e[t+148>>2]=1,e[t+104>>2]=12615688,e[t+16>>2]=2,e[t+100>>2]=e[t+96>>2],e[t+632>>2]=104592,e[t+604>>2]=104592,A=e[26145],e[t+304>>2]=e[26144],e[t+308>>2]=A,A=e[26147],e[t+312>>2]=e[26146],e[t+316>>2]=A,r=30313;break e}if(e[t+296>>2]=370544662,e[t+300>>2]=370546198,e[t+8>>2]=3,e[t+12>>2]=2,e[t+148>>2]=1,e[t+184>>2]=12544,k[t+170>>1]=257,e[t+176>>2]=1,f[t+172|0]=1,e[t>>2]=33,e[t+4>>2]=0,e[t+100>>2]=e[t+96>>2],A=e[26225],e[t+304>>2]=e[26224],e[t+308>>2]=A,A=e[26227],e[t+312>>2]=e[26226],e[t+316>>2]=A,(0|r)!=7959909)break e;e[t+112>>2]=24,e[t+104>>2]=1,e[t+108>>2]=1048576,r=7959909;break e}A=e[25873],e[t+304>>2]=e[25872],e[t+308>>2]=A,A=e[25875],e[t+312>>2]=e[25874],e[t+316>>2]=A,e[t+600>>2]=2944,e[t+104>>2]=2097152,e[t+108>>2]=262144,e[t+48>>2]=1}ws(t),f[t+422|0]=2|d[t+422|0];break e}e[t+40>>2]=1}return e[t+212>>2]=r,8&(A=e[t+104>>2])&&(e[t+124>>2]=46,e[t+128>>2]=44),4&A&&(e[t+124>>2]=0),t}function PA(A){var t=0,r=0,s=0,i=0,l=0,c=0,g=0,p=0,I=0,h=0,M=0,P=0,z=0,Y=0,V=0,X=0,te=0,ne=0,me=0,ke=0,ye=0,Pe=0,_e=0,Ke=0,lA=0;e:{r=e[32538],e[47354]=0,e[47568]=0,e[49828]=0,e[47569]=0,f[199328]=0,e[49827]=0,e[49845]=0,f[190280]=0,f[190268]=1,e[47202]=0,e[49573]=0,e[49846]=0,f[199304]=0,f[199388]=0,e[33691]=0,e[33285]=0,e[33708]=1,e[33709]=1,e[33288]=0,t=e[33730],e[33712]=e[33729],e[33713]=t,t=e[33732],e[33714]=e[33731],e[33715]=t,t=e[33734],e[33716]=e[33733],e[33717]=t,t=e[33736],e[33718]=e[33735],e[33719]=t,t=e[33738],e[33720]=e[33737],e[33721]=t,t=e[33740],e[33722]=e[33739],e[33723]=t,t=e[33742],e[33724]=e[33741],e[33725]=t,e[33726]=e[33743],f[134784]=0,f[134824]=0,f[134772]=0,f[134760]=0,e[33284]=-1,e[33692]=0,e[32525]=0,e[47201]=e[33717],e[47200]=e[33718],bo(),e[34438]=0,e[34437]=0,t=e[33730],e[34048]=e[33729],e[34049]=t,t=e[33732],e[34050]=e[33731],e[34051]=t,t=e[33734],e[34052]=e[33733],e[34053]=t,t=e[33736],e[34054]=e[33735],e[34055]=t,t=e[33738],e[34056]=e[33737],e[34057]=t,t=e[33740],e[34058]=e[33739],e[34059]=t,t=e[33742],e[34060]=e[33741],e[34061]=t,e[34062]=e[33743];A:{r:{if(1&r){if(e[e[32539]>>2]=0,e[47569]|e[49845]|e[49827])break r;break A}if(e[e[32539]>>2]=0,!(e[49845]|e[49827]||e[47569]))break A}f[190280]=1}e[49828]=0,t=268436735;A:if(!(!e[34391]|!e[34388])&&(e[47204]=0,e[47203]=0,e[47199]=0,e[34439]=0,(e[47192]||!(t=$n(86228)))&&((t=e[33283])||((t=tt(16))&&(e[t>>2]=0,e[t+4>>2]=0,e[t+8>>2]=0,e[t+12>>2]=0),e[33283]=t),l=268439807,(r=e[e[47192]+328>>2])>>>0>20|!e[129104+(r<<3)>>2]?t=l:(A?(l=4,i=CA(A)+1|0):(l=2,i=0),e[t+8>>2]=l,e[t>>2]=A,e[t+12>>2]=e[129108+(r<<3)>>2],e[t+4>>2]=A?A+i|0:0,t=0),!t))){bA(0);r:{for(;;){e[34436]=0,A=e[34391],e[51290]=A,e[54046]=A+e[34390],e[50767]<=102399&&(e[50767]=102400);a:if(!((c=e[51290])>>>0>=ee[54046]))for(;;){if((((0|(A=(i=e[50757])-(g=e[50758])|0))<=0?A+170|0:A)-171|0)>=-1){if((0|(A=e[54731]))<=0)break a;l=0,e[50763]=0,e[50762]=0,e[50765]=2147483647,A=d[218920]?e[54732]:A;n:{for(;;){if(r=A-1|0,e[54732]=r,(0|A)<=0)break n;if(e[51290]=c+1,t=(A=e[51293])+1|0,e[51293]=(0|t)<=5499?t:0,t=(A=O(e[50755],k[205184+(A<<1)>>1]))>>8,f[0|c]=t,i=e[51290],e[51290]=i+1,f[0|i]=A>>>16,(i=e[50756])?(A=r,(r=e[i+4>>2])&&(KA[0|r](t<<16>>16),A=e[54732])):A=r,i=(r=e[51292])+1|0,e[51292]=i,k[205184+(r<<1)>>1]=t,(0|i)>=5500&&(e[51292]=0),c=e[51290],!(ee[54046]>=c+2>>>0))break}l=1}f[218920]=l;break a}A=e[(r=216192+(i<<4)|0)+4>>2];n:{o:{c:{u:{l:{i:{p:{C:{h:{b:{m:{B:{I:{x:{L:{_:switch((255&(t=e[r>>2]))-1|0){case 9:break c;case 7:break u;case 10:break l;case 11:break i;case 13:break p;case 0:break C;case 1:break h;case 2:break b;case 3:break m;case 6:break B;case 5:break I;case 4:break x;case 15:break L;case 8:break _;default:break o}if(!e[50759])break o;t=e[r+12>>2],r=e[r+8>>2],e[50768]=0,c=r||99232,e[50766]=c,e[50769]=A?2097152/(0|A)|0:0,A=e[50971],i=(0|O(A,e[50788]))/50|0,r=O(i-A|0,-18),A=((0|(A=e[50785]))>=101?101:A)-e[50790]|0,t=(l=r+((0|O(e[50970],d[((0|A)>0?A:0)+105680|0]))/128|0)|0)+((0|O(i,(0|(A=t>>16))<(0|(r=65535&t))?A:r))/2|0)|0,e[50770]=t,A=(l+((0|O(i,(0|A)>(0|r)?A:r))/2|0)|0)-t|0,e[50771]=A,r=d[0|c],e[33072]=e[50976],e[50767]=t+(O(A,r)>>8);break o}KA[e[e[50756]>>2]](A,e[r+8>>2]),zA(A);break o}if(d[218920]||(e[54731]=e[54731]-A),e[50781]=100,e[50773]=0,za(),e[50763]=0,e[50762]=0,e[50765]=2147483647,!A)break o;for(A=d[218920]?e[54732]:A;;){if(r=A-1|0,e[54732]=r,(0|A)<=0)break o;if(A=e[51290],e[51290]=A+1,i=(t=e[51293])+1|0,e[51293]=(0|i)<=5499?i:0,i=A,t=(A=O(e[50755],k[205184+(t<<1)>>1]))>>8,f[0|i]=t,i=e[51290],e[51290]=i+1,f[0|i]=A>>>16,(i=e[50756])?(A=r,(r=e[i+4>>2])&&(KA[0|r](t<<16>>16),A=e[54732])):A=r,i=(r=e[51292])+1|0,e[51292]=i,k[205184+(r<<1)>>1]=t,(0|i)>=5500&&(e[51292]=0),i=1,!(ee[54046]>=e[51290]+2>>>0))break}break n}for(e[50773]=0,e[54731]=e[54729],za(),t=e[r+12>>2],i=e[r+8>>2],d[218920]?A=e[54733]:e[54734]=0,g=t>>8,l=255&t,e[50762]=0,e[50763]=0;;){if(r=A-1|0,e[54733]=r,(0|A)<=0)break o;if(t=(A=e[54734])+1|0,l?c=O(l,f[A+i|0]):(c=d[A+i|0]|f[t+i|0]<<8,t=A+2|0),e[54734]=t,p=(A=e[51293])+1|0,e[51293]=p,t=(0|(A=(0|(A=((0|O(g,O(e[33037],O(e[33038],c))>>10))/32|0)+(O(e[50755],k[205184+(A<<1)>>1])>>8)|0))<=-32768?-32768:A))>=32767?32767:A,(0|p)>=5500&&(e[51293]=0),f[e[51290]]=t,f[e[51290]+1|0]=t>>>8,(c=e[50756])?(A=r,(r=e[c+12>>2])&&(KA[0|r](t<<16>>16),A=e[54733])):A=r,r=e[51290],e[51290]=r+2,p=(c=e[51292])+1|0,e[51292]=p,k[205184+(c<<1)>>1]=(0|O(t,3))/4,(0|p)>=5500&&(e[51292]=0),!(ee[54046]>=r+4>>>0))break}i=1;break n}t=e[r+12>>2],i=A>>>16|0,e[50777]=i,A&=65535,e[50773]=A,l=255&t,e[50774]=l,e[50775]=t>>8,l||(e[50777]=i<<1,e[50773]=A<<1),e[50778]=0,e[50776]=0,e[50772]=e[r+8>>2];break o}e[50773]=0}if(e[54731]=e[54729],t=e[50759],d[218920]){if(!t)break o}else{if(!t)break o;for(l=e[r+12>>2],c=e[r+8>>2],r=A>>16,e[55912]=255&r,f[218960]=1,e[55908]=0,67108864&A&&(e[55908]=3,e[55909]=e[110496+(r>>>6&12)>>2]),134217728&A&&(e[55908]=4,e[55909]=e[110512+(r>>>6&12)>>2]),A&=65504;;){if((0|g)!=(0|(i=(0|(r=i+1|0))<=169?r:0)))if((0|(r=e[216192+(i<<4)>>2]))!=3){if(r-5>>>0>1)continue}else f[218960]=0;break}for(e[55913]=e[50762],A=(A=A+32&131008)||64,e[50763]=A+e[50763],e[55684]=O(k[101997],7800)+(y[102024]<<8)<<8,e[55704]=O(k[101998],9e3)+(y[102025]<<8)<<8,z=e[50980],s=+(0|A),M=+(A>>>2|0),A=0;(0|A)!=7&&(i=k[(p=(r=A<<1)+t|0)+218>>1]<<8,g=O(A,80)+222176|0,p=k[p+164>>1],P=i+O(p,k[2+(r+c|0)>>1])<<8,e[g>>2]=P,h=+(0|P),T[g+16>>3]=h,T[g+48>>3]=16*(+(i+O(p,k[2+(r+l|0)>>1])<<8)-h)/M),i=(r=O(A,80))+222176|0,p=k[(P=t+(A<<1)|0)+182>>1],V=O(p,d[(g=A+c|0)+18|0])<<6,e[i+4>>2]=V,h=+(0|V),T[i+24>>3]=h,Y=i,i=A+l|0,T[Y+56>>3]=64*(+(O(p,d[i+18|0])<<6)-h)/s,(0|A)>(0|z)|A>>>0>5||(p=r+222176|0,V=k[P+200>>1],P=O(V,d[g+26|0])<<10,e[p+8>>2]=P,h=+(0|P),T[p+32>>3]=h,Y=p- -64|0,p=V<<10,T[Y>>3]=64*(+(0|O(p,d[i+26|0]))-h)/s,A>>>0<=2?(r=r+222176|0,g=O(p,d[g+32|0]),e[r+12>>2]=g,h=+(0|g),T[r+40>>3]=h,T[r+72>>3]=64*(+(0|O(p,d[i+32|0]))-h)/s):e[r+222188>>2]=P),(0|(A=A+1|0))!=8;);}for(;;){if(A=e[50762],!d[218960]&(0|A)==e[50763])break o;b:{m:{if(63&A){if(7&A)break b;B:if(!((0|(r=e[54736]))<=0||(0|(t=e[54735]))<=0))for(i=e[50826],A=1;;){if(e[(c=(l=A<<2)+i|0)>>2]=e[c>>2]+e[l+203312>>2],A>>>0>28|(0|A)>=(0|r))break B;if(l=(0|A)<(0|t),A=A+1|0,!l)break}if((0|(A=e[33073]))>255)break b;e[33073]=A+1;break b}if(A)if(e[50759]){if(r=e[50768]+e[50769]|0,e[50768]=r,r=(t=e[50766])?O(d[t+((0|(r>>=8))>=127?127:r)|0],e[50771])>>8:0,e[55911]=e[55911]+e[55915],t=(0|(t=e[55914]))<=23551?t:0,e[55914]=t+e[50761],t=(r+e[50770]|0)+O(e[33072],d[110528+(t>>6)|0]-128|0)|0,e[50767]=t,!(i=e[51291])&(0|(r=i?i<<12:t))>102399||(t=(0|r)<=102400?102400:r,e[50767]=t),(0|A)!=e[55913]){if(A=0,!((0|(g=e[50980]))<0)){for(;c=O(A,80),s=T[(r=c+222176|0)+48>>3]+T[r+16>>3],T[r+16>>3]=s,M=T[r+56>>3]+T[r+24>>3],T[r+24>>3]=M,h=T[r- -64>>3]+T[r+32>>3],T[r+32>>3]=h,i=$(s)<2147483648?~~s:-2147483648,e[r>>2]=i,i=$(h)<2147483648?~~h:-2147483648,e[r+8>>2]=i,l=$(M)<2147483648?~~M:-2147483648,e[r+4>>2]=(0|l)>0?l:0,(0|A)>2||(s=T[(r=c+222176|0)+72>>3]+T[r+40>>3],T[r+40>>3]=s,i=$(s)<2147483648?~~s:-2147483648),e[c+222188>>2]=i,(0|g)>=(0|(A=A+1|0)););if((0|A)>=8)break m}for(;(0|A)!=7&&(r=O(A,80)+222176|0,s=T[r+48>>3]+T[r+16>>3],T[r+16>>3]=s,i=$(s)<2147483648?~~s:-2147483648,e[r>>2]=i),r=O(A,80)+222176|0,s=T[r+56>>3]+T[r+24>>3],T[r+24>>3]=s,i=$(s)<2147483648?~~s:-2147483648,e[r+4>>2]=(0|i)>0?i:0,(0|(A=A+1|0))!=8;);}}else t=e[50767];else e[50826]=218976,e[54742]=0,e[54736]=Fs(e[50767]<<4,218976,0),t=e[50767],e[54737]=890/(t>>12),e[54739]=(0|O(e[50781],O(e[50779],t>>8)))/8e4}if(e[55906]=t>>11,e[54735]=e[54736],e[55904]=O(e[50760],t>>7),e[55905]=e[50754]/(t>>12),r=1^(A=e[54742]),e[54742]=r,e[50826]=O(A,1600)+218976,e[54736]=Fs(t<<4,O(r,1600)+218976|0,1),!(!(t=e[50759])|!e[51022]))for(M=T[25430],h=T[25429],A=1;e[(r=t+(A<<2)|0)+272>>2]&&(i=e[r+308>>2],r=O(A,40)+203456|0,I=es(M*+k[2+(O(A,80)+222176|0)>>1]),I*=s=is(h*+(0|i)),I+=I,T[r+8>>3]=I,s*=-s,T[r+16>>3]=s,T[r>>3]=1-I-s),(0|(A=A+1|0))!=9;);}if(l=e[50762]+1|0,e[50762]=l,c=(A=e[50765])+e[55904]|0,e[50765]=c,(0|c)<0&(0|A)>0){if(p=e[55905],t=e[50800]+((0|p)/-2|0)|0,e[55907]=t,(0|(P=e[50763]))<(0|l))break o;if(z=e[54738]+1|0,e[54738]=z,g=e[50767],!((0|(A=(r=e[50980])+1|0))>8)&&(i=g<<3,1&r&&(e[203264+(A<<2)>>2]=(1+(e[O(A,80)+222176>>2]/(0|i)|0)|0)/2,A=r+2|0),(0|r)!=7))for(;r=203264+(A<<2)|0,V=O(A,80)+222176|0,e[r>>2]=(1+(e[V>>2]/(0|i)|0)|0)/2,e[r+4>>2]=(1+(e[V+80>>2]/(0|i)|0)|0)/2,(0|(A=A+2|0))!=9;);A=(0|O(e[50781],O(e[50779],g>>8)))/8e4|0,e[54739]=A;b:if(!((0|(r=e[55908]))<=0)){m:switch(r-3|0){case 0:if((P-l|0)>=p<<1)break b;e[55908]=2,A=(0|O(e[55909],A))/256|0,e[54739]=A;break b;case 1:e[55908]=2,A=(0|O(e[55909],A))/256|0,e[54739]=A;break b;default:break m}e[55908]=r-1}(r=e[55910])&&(i=A,A=e[55911]>>8,A=(0|O(i,d[r+((0|A)>=127?127:A)|0]))/128|0,e[54739]=A),(0|(r=e[e[32972]+92>>2]))>7||(r=15&(i=d[e[55912]+(106336+(r<<3)|0)|0]),(i=i>>>4|0)&&((0|i)!=15?(0|z)%(0|i)|0||(e[54739]=(0|O(A,r))/16):(e[55912]=0,e[54739]=(0|O(A,r))/16)))}else t=e[55907];if(l=t+1|0,e[55907]=l,r=c>>>16|0,i=0,!((0|l)<0|(0|l)>=e[50799])){if(!((0|(A=(t=e[50980])+1|0))>8)){if(g=1&(c=8-t|0),(0|t)!=7)for(p=-2&c,t=0;i=O(e[(P=(c=A<<2)+4|0)+203216>>2],k[106400+(O(r,e[P+203264>>2])>>>4&4094)>>1])+(O(e[c+203216>>2],k[106400+(O(r,e[c+203264>>2])>>>4&4094)>>1])+i|0)|0,A=A+2|0,(0|p)!=(0|(t=t+2|0)););g&&(i=O(e[(A<<=2)+203216>>2],k[106400+(O(r,e[A+203264>>2])>>>4&4094)>>1])+i|0)}i=O(d[l+132160|0],(0|i)/e[55906]|0)}if(A=1,(0|(l=e[54737]))<=0)t=r;else for(c=e[50826],t=r;i=O(e[c+(A<<2)>>2],k[106400+((65504&t)>>>4|0)>>1])+i|0,t=t+r|0,(0|l)>=(0|(A=A+1|0)););if((0|(l=e[54735]))>=(0|A))for(c=e[50826];i=i-O(e[c+(A<<2)>>2],k[106400+((65504&t)>>>4|0)>>1])|0,t=t+r|0,(0|l)>=(0|(A=A+1|0)););if(l=(0|(A=e[54728]))==64?i:O(A,i>>6),e[51022]){if(e[50759])for(r=At(e[33209],0,1103515245,0),A=he,A=Ni(r=r+12345|0,A=r>>>0<12345?A+1|0:A),e[33209]=A,M=+((16383&A)- -8192|0),t=e[50759],c=0,A=1;(i=e[272+(t+(A<<2)|0)>>2])&&(g=e[O(A,80)+222180>>2],r=O(A,40)+203456|0,s=T[r+32>>3],h=T[r+24>>3],T[r+32>>3]=h,s=s*T[r+16>>3]+(T[r>>3]*M+h*T[r+8>>3]),T[r+24>>3]=s,r=$(s)<2147483648?~~s:-2147483648,c=O(r,O(i,g>>14))+c|0),(0|(A=A+1|0))!=9;);else c=0;l=l+c|0}t=0,(0|(A=e[50776]))>=e[50773]||(r=e[50778],t=e[50772],(c=e[50774])?(i=A+1|0,e[50776]=i,A=O(c,f[t+(A+r|0)|0])):(c=d[0|(t=t+(A+r|0)|0)],t=f[t+1|0],i=A+2|0,e[50776]=i,A=c|t<<8),t=(0|O(O(A,e[50780])>>10,e[50775]))/32|0,(0|(A=e[50777]))>(r+i|0)||(e[50778]=r+((0|O(A,3))/-4|0))),r=(A=e[51293])+1|0,e[51293]=r,A=((O(e[54739],l>>8)>>13)+t|0)+(O(e[50755],k[205184+(A<<1)>>1])>>8)|0,(0|r)>=5500&&(e[51293]=0),r=e[33073];b:{m:{if((0|(t=O(r,A)))>=8388608){if((0|r)>=(0|(c=8388608/(0|A)|0)))break m;break b}if((0|t)>-8388353||(0|r)<(0|(c=-8388608/(0|A)|0)))break b}r=c-1|0,e[33073]=r,t=O(A,r)}if(A=e[51290],e[51290]=A+1,r=A,A=t>>8,f[0|r]=A,r=e[51290],e[51290]=r+1,f[0|r]=t>>>16,(r=e[50756])&&(r=e[r+8>>2])&&KA[0|r](A<<16>>16),t=(r=e[51292])+1|0,e[51292]=t,k[205184+(r<<1)>>1]=A,(0|t)>=5500&&(e[51292]=0),!(ee[54046]>=e[51290]+2>>>0))break}i=1;break n}e[50773]=0}e[54731]=e[54729],i=1,g=65535&A,t=d[218920],c=e[r+8>>2],l=e[r+12>>2],s=0,h=0,H=r=H+-64|0,p=e[50759];C:if((0|(A=e[p+132>>2]))!=6){if(!t){for(A-1>>>0<=4&&(e[55921]=A,e[55964]=e[110896+(A<<2)>>2]),A=e[p+88>>2],e[54741]=1,e[55922]=(0|A)/32,t=e[50758],A=e[50757];;){h:if((0|t)!=(0|(A=(0|(A=A+1|0))<=169?A:0)))if((0|(P=e[216192+(A<<4)>>2]))!=1){if(P-5>>>0>1)continue}else{if(e[54741]=0,A=e[8+(216192+(A<<4)|0)>>2],!(y[l+4>>1]!=y[A+4>>1]|y[A+6>>1]!=y[l+6>>1]|y[A+8>>1]!=y[l+8>>1]|y[A+10>>1]!=y[l+10>>1])&&y[A+12>>1]==y[l+12>>1])break h;e[54741]=2}break}for((y[c+4>>1]!=y[113564]|y[c+6>>1]!=y[113565]|y[c+8>>1]!=y[113566]|y[c+10>>1]!=y[113567]||y[c+12>>1]!=y[113568])&&(lt(),e[55974]=0,e[55975]=0,e[55972]=0,e[55973]=0,e[55988]=0,e[55989]=0,e[55990]=0,e[55991]=0,e[56004]=0,e[56005]=0,e[56006]=0,e[56007]=0,e[56020]=0,e[56021]=0,e[56022]=0,e[56023]=0,e[56036]=0,e[56037]=0,e[56038]=0,e[56039]=0,e[56052]=0,e[56053]=0,e[56054]=0,e[56055]=0,e[56068]=0,e[56069]=0,e[56070]=0,e[56071]=0,e[56086]=0,e[56087]=0,e[56084]=0,e[56085]=0,e[56102]=0,e[56103]=0,e[56100]=0,e[56101]=0,e[56118]=0,e[56119]=0,e[56116]=0,e[56117]=0,e[56134]=0,e[56135]=0,e[56132]=0,e[56133]=0,e[56150]=0,e[56151]=0,e[56148]=0,e[56149]=0,e[56166]=0,e[56167]=0,e[56164]=0,e[56165]=0,e[56182]=0,e[56183]=0,e[56180]=0,e[56181]=0,e[56198]=0,e[56199]=0,e[56196]=0,e[56197]=0,e[56214]=0,e[56215]=0,e[56212]=0,e[56213]=0,e[56230]=0,e[56231]=0,e[56228]=0,e[56229]=0),A=y[l+4>>1]|y[l+6>>1]<<16,t=y[l>>1]|y[l+2>>1]<<16,k[113562]=t,k[113563]=t>>>16,k[113564]=A,k[113565]=A>>>16,A=y[l+60>>1]|y[l+62>>1]<<16,t=y[l+56>>1]|y[l+58>>1]<<16,k[113590]=t,k[113591]=t>>>16,k[113592]=A,k[113593]=A>>>16,A=y[l+52>>1]|y[l+54>>1]<<16,t=y[l+48>>1]|y[l+50>>1]<<16,k[113586]=t,k[113587]=t>>>16,k[113588]=A,k[113589]=A>>>16,A=y[l+44>>1]|y[l+46>>1]<<16,t=y[l+40>>1]|y[l+42>>1]<<16,k[113582]=t,k[113583]=t>>>16,k[113584]=A,k[113585]=A>>>16,A=y[l+36>>1]|y[l+38>>1]<<16,t=y[l+32>>1]|y[l+34>>1]<<16,k[113578]=t,k[113579]=t>>>16,k[113580]=A,k[113581]=A>>>16,A=y[l+28>>1]|y[l+30>>1]<<16,t=y[l+24>>1]|y[l+26>>1]<<16,k[113574]=t,k[113575]=t>>>16,k[113576]=A,k[113577]=A>>>16,A=y[l+20>>1]|y[l+22>>1]<<16,t=y[l+16>>1]|y[l+18>>1]<<16,k[113570]=t,k[113571]=t>>>16,k[113572]=A,k[113573]=A>>>16,A=y[l+12>>1]|y[l+14>>1]<<16,t=y[l+8>>1]|y[l+10>>1]<<16,k[113566]=t,k[113567]=t>>>16,k[113568]=A,k[113569]=A>>>16,M=+(0|g),(Y=1&k[c>>1])?(A=d[c+39|0],e[56680]=A,T[28364]=A>>>0,T[28354]=+(d[l+39|0]-A<<6)/M,A=d[c+40|0],T[28366]=A>>>0,T[28356]=+(d[l+40|0]-A<<6)/M,A=d[c+41|0],e[56682]=A,T[28368]=A>>>0,T[28358]=+(d[l+41|0]-A<<6)/M,t=d[c+42|0],e[56684]=t,T[28370]=t>>>0,A=d[c+43|0],s=+(d[l+43|0]-A<<6)/M,h=+(d[l+42|0]-t<<6)/M,I=+(A>>>0)):(e[56728]=0,e[56729]=0,A=0,e[56680]=0,e[56708]=0,e[56709]=0,e[56732]=0,e[56733]=0,e[56712]=0,e[56713]=0,e[56682]=0,e[56736]=0,e[56737]=0,e[56716]=0,e[56717]=0,e[56684]=0,e[56740]=0,e[56741]=0,I=0),e[56688]=A,T[28360]=h,T[28372]=I,T[28362]=s,e[56692]=0,e[56748]=0,e[56749]=0,e[56694]=0,e[56752]=0,e[56753]=0,e[56696]=0,e[56756]=0,e[56757]=0,e[56700]=0,e[56760]=0,e[56761]=0,e[56704]=0,e[56764]=0,e[56765]=0,e[50764]=g,A=1;z=k[(P=(g=A<<1)+p|0)+164>>1],t=(ke=O(A,80))+222896|0,h=+k[P+218>>1],s=.00390625*+(0|O(z,k[2+(c+g|0)>>1]))+h,T[t+16>>3]=s,V=$(s)<2147483648?~~s:-2147483648,e[t>>2]=V,T[t+48>>3]=64*(.00390625*+(0|O(z,k[2+(l+g|0)>>1]))+h-s)/M,A>>>0<=3&&(t=ke+222896|0,s=.00390625*+k[P+200>>1]*+(d[35+(A+c|0)|0]<<1),T[t+24>>3]=s,g=$(s)<2147483648?~~s:-2147483648,e[t+4>>2]=g,T[t+56>>3]=64*(+(d[35+(A+l|0)|0]<<1)-s)/M),(0|(A=A+1|0))!=6;);if(s=+((A=d[c+40|0])<<1),T[27864]=s,t=e[56618],A||(s=+(0|t),T[27864]=s),A=$(s)<2147483648?~~s:-2147483648,e[55724]=A,g=d[l+40|0],e[55730]=0,e[55731]=1079394304,e[55738]=0,e[55739]=0,e[55725]=89,A=1,T[27868]=64*(+(0|(g?g<<1:t))-s)/M,Y)for(;t=O(A,80)+222896|0,p=d[(g=A+c|0)+56|0]<<2,e[t+12>>2]=p,s=+(0|p),T[t+40>>3]=s,p=A+l|0,T[t+72>>3]=64*(+(d[p+56|0]<<2)-s)/M,g=d[g+49|0],e[t+8>>2]=g,s=+(g>>>0),T[t+32>>3]=s,T[t- -64>>3]=64*(+d[p+49|0]-s)/M,(0|(A=A+1|0))!=7;);e[56606]=0}for(;;){if((0|(V=e[50764]))>(0|(l=e[56606]))){for(A=e[50767],e[56609]=e[55724],e[56619]=e[55725],e[56610]=e[55744],e[56611]=e[55764],e[56612]=e[55784],e[56613]=e[55804],Y=O(A,10),e[56607]=(0|Y)/4096,e[56620]=e[55745],e[56621]=e[55765],e[56622]=e[55785],e[56614]=e[55824],e[56630]=e[55746],e[56631]=e[55766],e[56632]=e[55786],e[56633]=e[55806],e[56634]=e[55826],e[56635]=e[55846],ke=e[56680],e[56608]=ke,c=e[56694],e[56656]=c,g=e[56696],e[56653]=g,p=e[56700],e[56655]=p,P=e[56684],e[56649]=P,e[56651]=e[56704],e[56654]=e[56688],e[56652]=e[56682],e[56650]=e[56692],A=0;t=O(A,80)+222896|0,s=T[t+48>>3]+T[t+16>>3],T[t+16>>3]=s,M=T[t+56>>3]+T[t+24>>3],T[t+24>>3]=M,h=T[t+72>>3]+T[t+40>>3],T[t+40>>3]=h,I=T[t- -64>>3]+T[t+32>>3],T[t+32>>3]=I,z=$(s)<2147483648?~~s:-2147483648,e[t>>2]=z,z=$(M)<2147483648?~~M:-2147483648,e[t+4>>2]=z,z=$(h)<2147483648?~~h:-2147483648,e[t+12>>2]=z,z=$(I)<2147483648?~~I:-2147483648,e[t+8>>2]=z,(0|(A=A+1|0))!=9;);for(s=T[28354]+T[28364],T[28364]=s,T[28366]=T[28356]+T[28366],M=T[28358]+T[28368],T[28368]=M,h=T[28360]+T[28370],T[28370]=h,I=T[28362]+T[28372],T[28372]=I,A=$(s)<2147483648?~~s:-2147483648,e[56680]=A,A=$(M)<2147483648?~~M:-2147483648,e[56682]=A,A=$(h)<2147483648?~~h:-2147483648,e[56684]=A,A=$(I)<2147483648?~~I:-2147483648,e[56688]=A,s=T[28374]+0,T[28374]=s,A=$(s)<2147483648?~~s:-2147483648,e[56692]=A,s=T[28376]+0,T[28376]=s,A=$(s)<2147483648?~~s:-2147483648,e[56694]=A,s=T[28378]+0,T[28378]=s,A=$(s)<2147483648?~~s:-2147483648,e[56696]=A,s=T[28380]+0,T[28380]=s,A=$(s)<2147483648?~~s:-2147483648,e[56700]=A,s=T[28382]+0,T[28382]=s,A=$(s)<2147483648?~~s:-2147483648,e[56704]=A,e[56659]=e[55724],e[56669]=e[55725],e[56660]=e[55744],e[56670]=e[55745],e[56661]=e[55764],e[56671]=e[55765],e[56662]=e[55784],e[56672]=e[55785],e[56663]=e[55804],e[56664]=e[55824],e[56665]=e[55844],A=e[50768]+e[50769]|0,e[50768]=A,A>>=8,e[50767]=e[50770]+(O(e[50771],d[e[50766]+((0|A)>=127?127:A)|0])>>8),A=V-l|0,e[55923]=(0|A)>=64?64:A,e[55961]=(0|Y)/40960,A=ke-7|0,e[56658]=(0|A)>0?A:0,T[27974]=P>>>0<=87?.001*+k[111136+(P<<1)>>1]*.05:0,T[27975]=g>>>0<=87?.001*+k[111136+(g<<1)>>1]*.25:0,T[27973]=c>>>0<=87?.001*+k[111136+(c<<1)>>1]:0,T[27971]=p>>>0<=87?.001*+k[111136+(p<<1)>>1]*.05:0,s=(A=e[56629])>>>0<=87?.001*+k[111136+(A<<1)>>1]*.6:0,T[r>>3]=s,s=(A=e[56630])>>>0<=87?.001*+k[111136+(A<<1)>>1]*.4:0,T[r+8>>3]=s,s=(A=e[56631])>>>0<=87?.001*+k[111136+(A<<1)>>1]*.15:0,T[r+16>>3]=s,s=(A=e[56632])>>>0<=87?.001*+k[111136+(A<<1)>>1]*.06:0,T[r+24>>3]=s,s=(A=e[56633])>>>0<=87?.001*+k[111136+(A<<1)>>1]*.04:0,T[r+32>>3]=s,s=(A=e[56634])>>>0<=87?.001*+k[111136+(A<<1)>>1]*.022:0,T[r+40>>3]=s,s=(A=e[56635])>>>0<=87?.001*+k[111136+(A<<1)>>1]*.03:0,T[r+48>>3]=s,s=(A=(0|(A=e[56657]-3|0))<=0?57:A)>>>0<=87?.001*+k[111136+(A<<1)>>1]:0,T[27977]=s/+e[55964],M=T[27968],h=T[27967],A=1;t=(l=A<<6)+223664|0,I=(s=is(h*+e[(g=(c=A<<2)+226428|0)+48>>2]))*-s,T[t+216>>3]=I,s*=es(M*+e[g+8>>2]),s+=s,T[t+208>>3]=s,ne=1-s-I,T[t+200>>3]=ne,A>>>0<=5&&(g=e[(c=c+226428|0)+208>>2],t=l+223664|0,te=(X=is(h*+e[c+248>>2]))*es(M*+(0|g)),te+=te,T[t+1488>>3]=te,X*=-X,T[t+1496>>3]=X,me=1-te-X,T[t+1480>>3]=me,T[t+256>>3]=.015625*(X-I),T[t+248>>3]=.015625*(te-s),T[t+240>>3]=.015625*(me-ne)),(0|(A=A+1|0))!=10;);for(X=(s=is(h*+e[56619]))*-s,T[27985]=X,te=(s*=es(M*+(0-e[56609]|0)))+s,T[27984]=te,s=1-te-X,T[27983]=s,s!=0&&(s=1/s,T[27983]=s,X*=I=-s,T[27985]=X,te*=I,T[27984]=te),ne=(I=is(h*+e[56669]))*-I,T[28145]=ne,me=(I*=es(M*+(0-e[56659]|0)))+I,T[28144]=me,I=1-me-ne,T[28143]=I,I!=0&&(I=1/I,T[28143]=I,ne*=_e=-I,T[28145]=ne,me*=_e,T[28144]=me),T[27990]=.015625*(ne-X),T[27989]=.015625*(me-te),T[27988]=.015625*(I-s),A=0;c=e[(l=226428+(A<<2)|0)+8>>2],t=223664+(A<<6)|0,I=(s=is(h*+e[l+128>>2]))*es(M*+(0|c)),I+=I,T[t+848>>3]=I,s*=-s,T[t+856>>3]=s,T[t+840>>3]=T[r+(A<<3)>>3]*(1-I-s),(0|(A=A+1|0))!=7;);if(h=(s=is(h*+(e[55918]/2|0)))*-s,T[28137]=h,s*=es(0*M),s+=s,T[28136]=s,T[28135]=1-s-h,A=1,(0|Re())!=1)continue;break C}break}A=1,e[54741]>0&&(e[54741]=0,e[55963]=64,e[56606]=l+-64,e[55923]=64,(0|Re())==1)||(A=0)}else{if(H=P=H-752|0,!t){Ve(A=P+376|0,0,376),pr(p,c,A),pr(p,l,A=Ve(P,0,376)),t=e[50768]+O(e[50769],g>>>6|0)|0,e[50768]=t,t>>=8,t=e[50770]+(O(e[50771],d[e[50766]+((0|t)>=127?127:t)|0])>>8)|0,e[50767]=t,T[A+368>>3]=(0|t)/4096|0,e[50773]&&(T[A+736>>3]=T[A+736>>3]/5,T[A+360>>3]=T[A+360>>3]/5),t=e[e[56797]+4>>2],KA[e[e[t>>2]>>2]](t,A+376|0,110,110,-1,0),l=g-110|0,p=e[50758],t=e[50757];h:{for(;;){if((0|p)!=(0|(t=(t+1|0)%170|0))&&!((z=e[216192+(t<<4)>>2])-5>>>0<2)){if(c=1,(0|z)!=1)continue;break h}break}l=g-220|0,c=0}(0|l)>0&&(t=e[e[56797]+4>>2],KA[e[e[t>>2]>>2]](t,A,l,l||1,-1,0)),c||(e[A+352>>2]=0,e[A+356>>2]=0,T[A>>3]=T[A+368>>3],t=e[e[56797]+4>>2],KA[e[e[t>>2]>>2]](t,A,55,55,-1,0),e[A+360>>2]=0,e[A+364>>2]=0,t=e[e[56797]+4>>2],KA[e[e[t>>2]>>2]](t,A,55,55,-1,0))}A=e[e[56797]+8>>2],t=e[51290],g=0|KA[e[e[A>>2]>>2]](A,e[54046]-t>>>1|0,t),p=e[51290];h:if(g&&!((0|(t=e[50776]))>=(0|(ke=e[50773]))))for(ye=e[50777],Ke=(0|O(ye,3))/-4|0,s=.0009765625*+e[50780],z=e[50772],l=e[50778],lA=e[50775],V=e[50774],A=0;;){if(Y=d[z+(c=t+l|0)|0],V?Y=O(V,Y<<24>>24):(t=t+1|0,e[50776]=t,Y|=f[z+(c=t+l|0)|0]<<8),Y=$(M=s*+(0|Y))<2147483648?~~M:-2147483648,k[(Pe=p+(A<<1)|0)>>1]=y[Pe>>1]+((0|O(Y,lA))/40|0),(0|c)>=(0|ye)&&(l=l+Ke|0,e[50778]=l),t=t+1|0,e[50776]=t,(0|t)>=(0|ke))break h;if(!(g>>>0>(A=A+1|0)>>>0))break}A=p+(g<<1)|0,e[51290]=A,H=P+752|0,A=ee[54046]<=A>>>0}if(H=r- -64|0,A)break n;break o}e[50781]=A||100;break o}WA(A,e[r+8>>2]);break o}A=e[r+8>>2],e[50759]=rt(203816,A,1344),e[50801]=e[A+108>>2]?105792:106064,A=(0|O(e[A+120>>2],26))/100|0,e[33038]=A,(0|(i=e[50754]))<=11e3&&(f[203300]=1,e[33038]=A<<1),e[54728]=e[50982],A=e[50979],t=e[50978],Ve(205184,0,11e3),e[51293]=0,A=(t=(c=(0|(l=e[50789]))>0)?130:(0|t)>=5499?5499:t)?c?l:(0|A)>=100?100:A:0,e[50755]=A,t=(0|O(t,i))/1e3|0,e[51292]=t,e[54729]=(0|A)>20?t<<1:A?t:0,e[33037]=(0|O(500-A|0,(0|O(d[e[50797]+105596|0],(0|O(e[50787],55))/100|0))/16|0))/500,A=256,(0|(t=(0|(t=e[50785]))>=101?101:t))>=51&&(A=256+(((O(t,25)-1250&65535)>>>0)/50|0)|0),k[101990]=(0|O(k[102026],A))/256,k[101991]=(0|O(k[102027],A))/256,k[101992]=(0|O(k[102028],A))/256,k[101993]=(0|O(k[102029],A))/256,k[101994]=(0|O(k[102030],A))/256,k[101995]=(0|O(k[102031],A))/256,A=e[50790],k[101999]=(0|O(k[102035],O(A,-6)+256|0))/256,k[102e3]=(0|O(k[102036],O(A,-3)+256|0))/256,Yr(8,0,e[50986],0,e[51290]),zA(e[r+8>>2]);break o}if(!e[50759])break o;t=e[r+12>>2],r=e[r+8>>2],e[55911]=0,e[55915]=A?2097152/(0|A)|0:0,e[55910]=r,A=(0|O(t,e[33037]))/16|0,e[50779]=A,e[50780]=(0|O(O(A,e[50985]),15))/100;break o}Yr(t>>8,A,e[r+8>>2],e[r+12>>2],c)}i=0,A=e[50757]+1|0,e[50757]=(0|A)<=169?A:0}if(f[218920]=i,!((c=e[51290])>>>0<ee[54046]))break}l=e[34391],r=(e[51290]-l|0)/2|0,e[34439]=r+e[34439],t=e[34436],A=e[34388]+O(t,36)|0,e[A+4>>2]=0,e[A>>2]=0,e[A+24>>2]=e[34438];a:if(2&(A=e[32538])){if(c=e[34388],(-2&A)==2&&(!(r=t?c:0)|e[r>>2]!=8||(0|(r=e[r+28>>2]))!=e[34389]&&(e[34389]=r)),i=1,(0|t)<2)break a;for(;;){r=t?c+O(i,36)|0:0;n:{o:switch(0|A){case 2:case 3:if(!r|e[r>>2]!=8||(0|(r=e[r+28>>2]))==e[34389])break n;e[34389]=r;break n;case 0:break o;default:break n}(A=e[34440])?(KA[0|A](l,0,r),t=e[34436],A=e[32538]):A=0}if(!((0|(i=i+1|0))<(0|t)))break}}else if((A=e[34440])&&0|KA[0|A](l,r,e[34388]))break r;if(!wA(1)&&!(170-((0|(A=e[50757]-e[50758]|0))<=0?A+170|0:A)|0||(A=e[34388],e[A>>2]=0,e[A+4>>2]=e[34437],e[A+24>>2]=e[34438],bA(1))))break}if(t=0,2&d[130152]||!(A=e[34440])||!(0|KA[0|A](0,0,e[34388])))break A}bA(2),t=268439295}if((0|t)<=268437502){if(!t|(0|t)==268436479|(0|t)!=268437247)break e;return}}}function wA(A){var t,r=0,s=0,i=0,l=0,c=0,g=0,p=0,I=0,h=0,M=0,P=0,z=0,Y=0,V=0,X=0,te=0,ne=0,me=0,ke=0,ye=0,Pe=0;H=t=H-720|0,r=e[47198],A||(e[36443]=0,e[36442]=1,e[36444]=0,e[36440]=0,e[36441]=0,A=e[50758],e[36454]=A,e[36427]=-1,e[36424]=-1,e[36446]=0,e[36447]=0,e[36439]=-1,e[36426]=0,e[36455]=A,e[36448]=0,e[36449]=0,e[36450]=0,e[36451]=0,e[36452]=0,e[36453]=0,ie(),e[36427]=-1,A=216192+(e[50758]<<4)|0,e[A>>2]=5,e[A+4>>2]=0,A=e[50758]+1|0,e[50758]=(0|A)<=169?A:0,e[36426]=0,e[36438]&&(e[36438]=0,A=216192+(e[50758]<<4)|0,e[A>>2]=14,e[A+4>>2]=0,A=e[50758]+1|0,e[50758]=(0|A)<=169?A:0));e:{A:if(!((0|(A=e[36442]))>997|e[36423]<=(0|A)))for(Y=r>>>1&1,V=t+48|4,X=t+348|0,te=t+652|0,ne=e[32322],M=e[32320],me=t+60|0,ke=t+648|0,ye=t+56|0,Pe=t+620|0,P=t- -64|0;;){if(s=145840+(A<<5)|0,!(A=e[50756])|!e[A>>2]||(e[t+12>>2]=0,Ss(A=t+16|0,e[s+8>>2],s,0,t+12|0),r=zn(A),i=d[s+17|0],A=216192+(e[50758]<<4)|0,e[A>>2]=16,e[A+8>>2]=i,e[A+4>>2]=r,A=e[50758]+1|0,e[50758]=(0|A)<=169?A:0),A=1,(0|(i=(0|(r=e[50757]-e[50758]|0))<=0?r+170|0:r))<=(0|((r=d[s+17|0])?(0|r)==2?25:15:10)))break e;if(I=e[36442],2&d[0|s])for(h=2047&y[s+4>>1];;){if(i=e[36443],g=127&(r=e[198304+(i<<2)>>2])){A=r>>>8|0,e[36443]=i+1;r:{a:{n:switch((31&r)-2|0){case 0:WA(96&r|8,A),js(2);break r;case 5:if((0|A)>=e[34064]||!e[(g=(i=A<<4)+136272|0)+4>>2])break r;kt(10,0),A=216192+(e[50758]<<4)|0,e[A>>2]=6,g=e[g+4>>2],e[A+8>>2]=e[8+(i+136272|0)>>2]+44,e[A+12>>2]=5376,e[A+4>>2]=g;break a;case 8:if((0|((0|(i=e[50757]-e[50758]|0))<=0?i+170:i))<6)break r;g=e[47353],i=216192+(e[50758]<<4)|0,e[i>>2]=778,e[i+8>>2]=A,e[i+4>>2]=g+h&16777215;break a;case 9:if((0|((0|(i=e[50757]-e[50758]|0))<=0?i+170:i))<6)break r;g=e[33284],i=216192+(e[50758]<<4)|0,e[i>>2]=1034,e[i+8>>2]=A,e[i+4>>2]=g+1&16777215;break a;default:break n}kt(10,0),i=216192+(e[50758]<<4)|0,e[i>>2]=12,e[i+8>>2]=A,e[i+4>>2]=g}A=e[50758]+1|0,e[50758]=(0|A)<=169?A:0}if(!(128&r))continue}break}(A=d[s+20|0])&&(1&f[e[47192]+48|0]&d[s+17|0]==2|1&f[e[s+8>>2]+7|0]||(e[36426]=0),r=e[47353]+(2047&y[s+4>>1])|0,e[36445]=r,4&A&&((0|((0|(A=e[50757]-e[50758]|0))<=0?A+170:A))<6||(i=e[47568],A=216192+(e[50758]<<4)|0,e[A>>2]=522,e[A+8>>2]=i,e[A+4>>2]=16777215&r,A=e[50758]+1|0,e[50758]=(0|A)<=169?A:0)),1&f[s+20|0]&&(r=y[s+4>>1],i=e[36444],e[36444]=i+1,(0|((0|(A=e[50757]-e[50758]|0))<=0?A+170:A))<6||(h=e[36445],g=e[47355],A=216192+(e[50758]<<4)|0,e[A>>2]=266,e[A+8>>2]=i+g,e[A+4>>2]=16777215&h|(63488&r)<<13,A=e[50758]+1|0,e[50758]=(0|A)<=169?A:0))),(0|(A=e[36441]))>0&&(r=216192+(e[36425]<<4)|0,e[r+4>>2]||(e[r+4>>2]=A),e[36441]=0),A=I+1<<5,r=I-1<<5,!(i=d[s+18|0])|2&d[e[s+8>>2]+7|0]||kt(i,1),g=A+145840|0,l=r+145840|0,h=1;r:{a:{if(e[47198]&&(p=e[s+8>>2],d[p+10|0]!=15)){n:if(d[s+17|0]==2)switch(d[l+17|0]-3|0){case 0:case 5:break a;default:break n}h=0,Ss(t+704|0,p,s,Y,0),(0|((0|(A=e[50757]-e[50758]|0))<=0?A+170:A))<6||(r=e[36445],A=216192+(e[50758]<<4)|0,e[A>>2]=1802,e[A+4>>2]=16777215&r,r=e[t+708>>2],e[A+8>>2]=e[t+704>>2],e[A+12>>2]=r,A=e[50758]+1|0,e[50758]=(0|A)<=169?A:0)}n:switch(d[s+17|0]){case 0:kt(e[s+12>>2],0),f[s+23|0]=d[e[s+8>>2]+14|0];break r;case 4:r=e[s+8>>2],(0|(A=d[g+17|0]))==2|!d[g+20|0]&(0|A)==3||(k[s>>1]=8192|y[s>>1]),2&d[r+7|0]&&(e[t+88>>2]=0,e[t+92>>2]=0,e[t+80>>2]=0,e[t+84>>2]=0,e[t+72>>2]=0,e[t+76>>2]=0,e[P>>2]=0,e[P+4>>2]=0,e[t+56>>2]=0,e[t+60>>2]=0,e[t+48>>2]=0,e[t+52>>2]=0,VA(0,1,s,t+552|0,145784),e[t+56>>2]=e[t+620>>2],e[P>>2]=e[t+640>>2],e[36424]<0&&(i=d[g+19|0],A=e[50758],e[36425]=A,e[36441]=0,e[(A=216192+(A<<4)|0)+12>>2]=i,e[A+8>>2]=0,e[A>>2]=8,e[A+4>>2]=0,A=e[50758]+1|0,e[50758]=(0|A)<=169?A:0,h=d[g+22|0],i=d[g+21|0],g=e[129280+(d[s+16|0]<<2)>>2],(0|(A=e[36424]))<0|(0|(p=e[36440]))<=0||e[(A=216192+(A<<4)|0)+4>>2]||(e[A+4>>2]=p),A=e[50758],e[36424]=A,e[36440]=0,e[(A=216192+(A<<4)|0)>>2]=9,e[A+4>>2]=0,h|=i<<16,i=(0|i)==255,e[A+12>>2]=i?3604556:h,e[A+8>>2]=i?M:g,A=e[50758]+1|0,e[50758]=(0|A)<=169?A:0),TA(r,0,t+48|0,s,0)),VA(0,0,s,t+552|0,145784),e[t+552>>2]=4|e[t+552>>2],(0|(A=e[36440]))<=0||(0|(r=e[36424]))<0||(e[(r=216192+(r<<4)|0)+4>>2]||(e[r+4>>2]=A),e[36440]=0),e[36426]=0,e[36439]=-1,e[36455]=e[50758],ie(),e[36427]=-1,e[36422]=0,(A=e[t+624>>2])&&(i=A,A=e[t+644>>2],Ws(i,2,e[t+596>>2]<<1,e[t+552>>2],0,A?(A<<5)/100|0:32)),e[36426]=0;break r;case 6:VA(0,0,s,t+552|0,145784),8&d[0|s]&&(A=e[s+12>>2],(0|(r=e[36440]))<=0||(0|(i=e[36424]))<0||(e[(i=216192+(i<<4)|0)+4>>2]||(e[i+4>>2]=r),e[36440]=0),e[36426]=0,e[36439]=-1,e[36455]=e[50758],ie(),e[36427]=-1,e[36422]=0,(r=e[t+624>>2])&&(i=A,A=e[t+644>>2],Ws(r,2,e[t+596>>2]<<1,e[t+552>>2],i,A?(A<<5)/100|0:32))),A=e[s+12>>2],(0|(r=e[36440]))<=0||(0|(i=e[36424]))<0||(e[(i=216192+(i<<4)|0)+4>>2]||(e[i+4>>2]=r),e[36440]=0),e[36426]=0,e[36439]=-1,e[36455]=e[50758],ie(),e[36427]=-1,e[36422]=0,(r=e[t+624>>2])&&(i=A,A=e[t+644>>2],Ws(r,2,e[t+596>>2]<<1,e[t+552>>2],i,A?(A<<5)/100|0:32)),e[36426]=0;break r;case 5:i=e[s+8>>2],e[V+40>>2]=0,e[(A=V)+32>>2]=0,e[A+36>>2]=0,e[A+24>>2]=0,e[A+28>>2]=0,e[A+16>>2]=0,e[A+20>>2]=0,e[A+8>>2]=0,e[A+12>>2]=0,e[A>>2]=0,e[A+4>>2]=0,e[t+48>>2]=4;o:{c:{u:{l:switch(d[g+17|0]-2|0){case 0:r=d[s+19|0],A=e[50758],e[36425]=A,e[36441]=0,e[(A=216192+(A<<4)|0)+12>>2]=r,e[A+8>>2]=0,e[A>>2]=8,e[A+4>>2]=0,A=e[50758]+1|0,e[50758]=(0|A)<=169?A:0,r=d[s+22|0],p=d[s+21|0],h=e[129280+(d[s+16|0]<<2)>>2],(0|(A=e[36424]))<0|(0|(c=e[36440]))<=0||e[(A=216192+(A<<4)|0)+4>>2]||(e[A+4>>2]=c),A=(c=!(255&~p))?M:h,h=1;break c;case 1:break l;default:break u}if(!d[g+20|0]){r=d[g+19|0],A=e[50758],e[36425]=A,e[36441]=0,e[(A=216192+(A<<4)|0)+12>>2]=r,e[A+8>>2]=0,e[A>>2]=8,e[A+4>>2]=0,A=e[50758]+1|0,e[50758]=(0|A)<=169?A:0,r=d[g+22|0],p=d[g+21|0],h=e[129280+(d[g+16|0]<<2)>>2],(0|(A=e[36424]))<0|(0|(c=e[36440]))<=0||e[(A=216192+(A<<4)|0)+4>>2]||(e[A+4>>2]=c),A=(c=!(255&~p))?M:h,h=1;break c}}if(h=0,e[36424]>=0)break o;r=d[g+19|0],A=e[50758],e[36425]=A,e[36441]=0,e[(A=216192+(A<<4)|0)+12>>2]=r,e[A+8>>2]=0,e[A>>2]=8,e[A+4>>2]=0,A=e[50758]+1|0,e[50758]=(0|A)<=169?A:0,r=d[s+22|0],p=d[s+21|0],h=e[129280+(d[s+16|0]<<2)>>2],(0|(A=e[36424]))<0|(0|(c=e[36440]))<=0||e[(A=216192+(A<<4)|0)+4>>2]||(e[A+4>>2]=c),A=(c=!(255&~p))?M:h,h=0}z=e[50758],e[36424]=z,e[36440]=0,e[(z=216192+(z<<4)|0)>>2]=9,e[z+4>>2]=0,e[z+12>>2]=c?3604556:255&r|(255&p)<<16,e[z+8>>2]=A,A=e[50758]+1|0,e[50758]=(0|A)<=169?A:0}o:if(!(2&d[i+7|0])&d[l+17|0]!=2)8&d[0|s]&&kt(50,0);else{if(VA(0,1,s,t+552|0,145784),e[t+56>>2]=e[t+620>>2],e[t+64>>2]=e[t+640>>2],TA(i,0,t+48|0,s,0),!(8&d[0|s]))break o;kt(25,1),TA(i,0,t+48|0,s,0)}o:if(h){if(e[36455]!=e[36454])break o;e[36455]=e[50758]}else k[s>>1]=8192|y[s>>1];if(VA(0,0,s,t+552|0,145784),e[t+56>>2]=e[t+620>>2],e[t+64>>2]=e[t+640>>2],e[t+76>>2]=e[t+636>>2],e[t+80>>2]=e[t+656>>2],TA(i,0,t+48|0,s,0),d[s+20|0]|d[84+(145840+(I<<5)|0)|0]||((0|(A=d[g+17|0]))==7&&(kt(20,0),A=d[g+17|0]),(255&A)!=6))break r;kt(12,0);break r;case 7:o:{c:{u:{l:{i:switch((A=d[g+17|0])-2|0){case 1:break l;case 0:break i;default:break u}r=d[s+19|0],A=e[50758],e[36425]=A,e[36441]=0,e[(A=216192+(A<<4)|0)+12>>2]=r,e[A+8>>2]=0,e[A>>2]=8,e[A+4>>2]=0,A=e[50758]+1|0,e[50758]=(0|A)<=169?A:0,h=d[s+22|0],A=d[s+21|0],i=e[129280+(d[s+16|0]<<2)>>2],(0|(r=e[36424]))<0|(0|(p=e[36440]))<=0||e[(r=216192+(r<<4)|0)+4>>2]||(e[r+4>>2]=p),r=(p=!(255&~A))?M:i;break c}r=d[g+19|0],A=e[50758],e[36425]=A,e[36441]=0,e[(A=216192+(A<<4)|0)+12>>2]=r,e[A+8>>2]=0,e[A>>2]=8,e[A+4>>2]=0,A=e[50758]+1|0,e[50758]=(0|A)<=169?A:0,h=d[g+22|0],A=d[g+21|0],i=e[129280+(d[g+16|0]<<2)>>2],(0|(r=e[36424]))<0|(0|(p=e[36440]))<=0||e[(r=216192+(r<<4)|0)+4>>2]||(e[r+4>>2]=p),r=(p=!(255&~A))?M:i;break c}if(e[36424]>=0)break o;r=d[s+19|0],A=e[50758],e[36425]=A,e[36441]=0,e[(A=216192+(A<<4)|0)+12>>2]=r,e[A+8>>2]=0,e[A>>2]=8,e[A+4>>2]=0,A=e[50758]+1|0,e[50758]=(0|A)<=169?A:0,h=d[s+22|0],A=d[s+21|0],i=e[129280+(d[s+16|0]<<2)>>2],(0|(r=e[36424]))<0|(0|(p=e[36440]))<=0||e[(r=216192+(r<<4)|0)+4>>2]||(e[r+4>>2]=p),r=(p=!(255&~A))?M:i}i=e[50758],e[36424]=i,e[36440]=0,e[(i=216192+(i<<4)|0)>>2]=9,e[i+4>>2]=0,e[i+12>>2]=p?3604556:(255&A)<<16|h,e[i+8>>2]=r,A=e[50758]+1|0,e[50758]=(0|A)<=169?A:0,A=d[g+17|0]}o:{c:{u:switch((255&A)-2|0){case 1:if(d[g+20|0])break c;break;case 0:break u;default:break c}if(e[36455]!=e[36454])break o;e[36455]=e[50758];break o}k[s>>1]=8192|y[s>>1]}VA(0,0,s,t+552|0,145784),e[t+56>>2]=0,e[t+60>>2]=0,e[P>>2]=0,e[P+4>>2]=0,e[t+80>>2]=0,e[t+84>>2]=0,e[t+72>>2]=0,e[t+76>>2]=0,e[t+88>>2]=0,e[t+56>>2]=e[t+620>>2],e[P>>2]=e[t+640>>2],e[t+80>>2]=e[t+656>>2],e[t+48>>2]=0,e[t+52>>2]=0,e[t+76>>2]=e[t+636>>2],e[t+92>>2]=e[t+596>>2]<<1,8&d[0|s]&&TA(e[s+8>>2],0,t+48|0,s,0),TA(e[s+8>>2],0,t+48|0,s,0);break r;case 8:if(e[t+88>>2]=0,e[t+92>>2]=0,e[t+80>>2]=0,e[t+84>>2]=0,e[t+72>>2]=0,e[t+76>>2]=0,e[P>>2]=0,e[P+4>>2]=0,e[t+56>>2]=0,e[t+60>>2]=0,e[t+48>>2]=0,e[t+52>>2]=0,1&f[0|s]||(r=d[s+19|0],A=e[50758],e[36425]=A,e[36441]=0,e[(A=216192+(A<<4)|0)+12>>2]=r,e[A+8>>2]=0,e[A>>2]=8,e[A+4>>2]=0,A=e[50758]+1|0,e[50758]=(0|A)<=169?A:0,i=d[s+22|0],r=d[s+21|0],h=e[129280+(d[s+16|0]<<2)>>2],(0|(A=e[36424]))<0|(0|(p=e[36440]))<=0||e[(A=216192+(A<<4)|0)+4>>2]||(e[A+4>>2]=p),A=e[50758],e[36424]=A,e[36440]=0,e[(A=216192+(A<<4)|0)>>2]=9,e[A+4>>2]=0,i|=r<<16,r=(0|r)==255,e[A+12>>2]=r?3604556:i,e[A+8>>2]=r?M:h,A=e[50758]+1|0,e[50758]=(0|A)<=169?A:0),d[l+17|0]==8&&(e[36426]=0),VA(0,0,s,t+552|0,145784),e[t+56>>2]=e[t+620>>2],e[t+64>>2]=e[t+640>>2],e[t+92>>2]=e[t+596>>2]<<1,d[g+17|0]==2){e[36455]==e[36454]&&(e[36455]=e[50758]),TA(e[s+8>>2],0,t+48|0,s,0);break r}if(!(!(1&f[0|s])|d[l+17|0]!=2)){TA(e[s+8>>2],0,t+48|0,s,0);break r}e[36426]=0,TA(e[s+8>>2],0,t+48|0,s,0),e[36426]=0;break r;case 3:e[t+88>>2]=0,e[t+92>>2]=0,e[t+80>>2]=0,e[t+84>>2]=0,e[t+72>>2]=0,e[t+76>>2]=0,e[P>>2]=0,e[P+4>>2]=0,e[t+56>>2]=0,e[t+60>>2]=0,e[t+48>>2]=0,e[t+52>>2]=0,i=e[e[s+8>>2]+4>>2],1&f[0|s]||(r=d[s+19|0],A=e[50758],e[36425]=A,e[36441]=0,e[(A=216192+(A<<4)|0)+12>>2]=r,e[A+8>>2]=0,e[A>>2]=8,e[A+4>>2]=0,A=e[50758]+1|0,e[50758]=(0|A)<=169?A:0,h=d[s+22|0],r=d[s+21|0],p=e[129280+(d[s+16|0]<<2)>>2],(0|(A=e[36424]))<0|(0|(c=e[36440]))<=0||e[(A=216192+(A<<4)|0)+4>>2]||(e[A+4>>2]=c),A=e[50758],e[36424]=A,e[36440]=0,e[(A=216192+(A<<4)|0)>>2]=9,e[A+4>>2]=0,h|=r<<16,r=(0|r)==255,e[A+12>>2]=r?3604556:h,e[A+8>>2]=r?M:p,A=e[50758]+1|0,e[50758]=(0|A)<=169?A:0),d[l+17|0]==8&&(e[36426]=0),d[g+17|0]!=2|e[36455]!=e[36454]||(e[36455]=e[50758]),VA(0,0,s,t+552|0,145784),(0|(A=e[t+584>>2]-d[s+18|0]|0))>0&&kt(A,1),e[t+56>>2]=e[t+620>>2],e[t+64>>2]=e[t+640>>2],e[t+76>>2]=e[t+636>>2],e[t+80>>2]=e[t+656>>2],e[t+92>>2]=e[t+596>>2]<<1,TA(e[s+8>>2],0,t+48|0,s,i<<24>>31&5);break r;case 2:break n;default:break r}p=e[s+8>>2]}I=d[s+3|0],e[t+88>>2]=0,e[t+92>>2]=0,e[t+80>>2]=0,e[t+84>>2]=0,e[t+72>>2]=0,e[t+76>>2]=0,e[P>>2]=0,e[P+4>>2]=0,e[t+56>>2]=0,e[t+60>>2]=0,e[t+48>>2]=0,e[t+52>>2]=0,VA(0,0,s,t+552|0,145784),A=e[t+628>>2],e[t+56>>2]=A,e[t+92>>2]=e[t+596>>2]<<1;a:{if(!A||(c=0,i=ke,r=me,2&d[t+552|0])){if(d[l+17|0]?(c=0,VA(0,0,l,t+400|0,0),A=e[t+476>>2],e[t+56>>2]=A,!A|!(2&d[t+400|0])||(e[t+72>>2]=e[t+496>>2],c=1),r=e[t+512>>2],e[t+84>>2]=e[t+508>>2],e[t+88>>2]=r):c=0,A)break a;e[t+48>>2]=1,e[t+52>>2]=1,i=Pe,r=ye}e[r>>2]=e[i>>2]}e[t+64>>2]=e[t+640>>2],r=d[s+16|0],A=0,(i=d[s+7|0])?(ln(i,t+96|0),r=zi(e[t+220>>2]),(0|(i=e[t+224>>2]))<=0||(A=zi(i))):r=e[129280+(r<<2)>>2],e[36455]==e[36454]&&(e[36455]=e[50758]),i=(i=15&I)>>>0<2?1:i>>>0>6?3:2;a:{n:switch(d[l+17|0]-3|0){case 2:case 4:c=d[s+19|0],l=e[50758],e[36425]=l,e[36441]=0,e[(l=216192+(l<<4)|0)+12>>2]=c,e[l+8>>2]=A,e[l>>2]=8,e[l+4>>2]=0,A=e[50758]+1|0,e[50758]=(0|A)<=169?A:0,c=d[s+22|0],l=d[s+21|0],(0|(A=e[36440]))<=0||(0|(I=e[36424]))<0||e[(I=216192+(I<<4)|0)+4>>2]||(e[I+4>>2]=A),A=e[50758],e[36424]=A,e[36440]=0,e[(A=216192+(A<<4)|0)>>2]=9,e[A+4>>2]=0,c|=l<<16,l=(0|l)==255,e[A+12>>2]=l?3604556:c,e[A+8>>2]=l?M:r,A=e[50758]+1|0,e[50758]=(0|A)<=169?A:0,TA(p,1,t+48|0,s,i);break a;case 0:case 5:c=d[s+19|0],l=e[50758],e[36425]=l,e[36441]=0,e[(l=216192+(l<<4)|0)+12>>2]=c,e[l+8>>2]=A,e[l>>2]=8,e[l+4>>2]=0,A=e[50758]+1|0,e[50758]=(0|A)<=169?A:0,TA(p,1,t+48|0,s,i),c=d[s+22|0],l=d[s+21|0],(0|(A=e[36440]))<=0||(0|(I=e[36424]))<0||e[(I=216192+(I<<4)|0)+4>>2]||(e[I+4>>2]=A),A=e[50758],e[36424]=A,e[36440]=0,e[(A=216192+(A<<4)|0)>>2]=9,e[A+4>>2]=0,c|=l<<16,l=(0|l)==255,e[A+12>>2]=l?3604556:c,e[A+8>>2]=l?M:r,A=e[50758]+1|0,e[50758]=(0|A)<=169?A:0;break a;default:break n}c?(c=d[s+22|0],(0|(l=e[36440]))<=0||(0|(I=e[36424]))<0||e[(I=216192+(I<<4)|0)+4>>2]||(e[I+4>>2]=l),l=e[50758],e[36424]=l,e[36440]=0,e[(l=216192+(l<<4)|0)>>2]=9,e[l+4>>2]=0,e[l+12>>2]=(c|c<<16)-983040,e[l+8>>2]=ne,l=e[50758]+1|0,e[50758]=(0|l)<=169?l:0,c=d[s+19|0],l=e[50758],e[36425]=l,e[36441]=0,e[(l=216192+(l<<4)|0)>>2]=8,e[l+4>>2]=0,e[l+12>>2]=c-1,e[l+8>>2]=A,A=e[50758]+1|0,e[50758]=(0|A)<=169?A:0,TA(p,1,t+48|0,s,i),l=d[s+21|0],c=d[s+22|0],(0|(A=e[36440]))<=0||(0|(I=e[36424]))<0||e[(I=216192+(I<<4)|0)+4>>2]||(e[I+4>>2]=A),A=e[50758],e[36424]=A,e[36440]=0,e[(A=216192+(A<<4)|0)>>2]=9,e[A+4>>2]=0,c|=l<<16,l=(0|l)==255,e[A+12>>2]=l?3604556:c,e[A+8>>2]=l?M:r,A=e[50758]+1|0,e[50758]=(0|A)<=169?A:0):(1&f[0|s]||(c=d[s+19|0],l=e[50758],e[36425]=l,e[36441]=0,e[(l=216192+(l<<4)|0)+12>>2]=c,e[l+8>>2]=A,e[l>>2]=8,e[l+4>>2]=0,A=e[50758]+1|0,e[50758]=(0|A)<=169?A:0,c=d[s+22|0],l=d[s+21|0],(0|(A=e[36440]))<=0||(0|(I=e[36424]))<0||e[(I=216192+(I<<4)|0)+4>>2]||(e[I+4>>2]=A),A=e[50758],e[36424]=A,e[36440]=0,e[(A=216192+(A<<4)|0)>>2]=9,e[A+4>>2]=0,c|=l<<16,l=(0|l)==255,e[A+12>>2]=l?3604556:c,e[A+8>>2]=l?M:r,A=e[50758]+1|0,e[50758]=(0|A)<=169?A:0),TA(p,1,t+48|0,s,i))}!e[47198]|1^h||(Ss(t+704|0,e[s+8>>2],s,Y,0),(0|((0|(A=e[50757]-e[50758]|0))<=0?A+170:A))<6||(r=e[36445],A=216192+(e[50758]<<4)|0,e[A>>2]=1802,e[A+4>>2]=16777215&r,r=e[t+708>>2],e[A+8>>2]=e[t+704>>2],e[A+12>>2]=r,A=e[50758]+1|0,e[50758]=(0|A)<=169?A:0)),e[t+56>>2]=e[t+620>>2],e[t+84>>2]=0,e[t+88>>2]=0,e[t+64>>2]=e[t+640>>2],r=e[t+632>>2],e[t+68>>2]=r,A=te;a:{if(!r&&(!d[g+17|0]||(e[t+72>>2]=0,VA(0,0,g,t+248|0,0),e[t+52>>2]=1,A=e[t+368>>2],e[t+84>>2]=e[t+364>>2],e[t+88>>2]=A,r=e[t+328>>2],e[t+68>>2]=r,A=X,!r)))break a;e[t+72>>2]=e[A>>2]}TA(p,2,t+48|0,s,i)}if(A=e[36442]+1|0,e[36442]=A,(0|A)>997)break A;if(!(e[36423]>(0|A)))break}(0|(A=e[36440]))<=0||(0|(r=e[36424]))<0||(e[(r=216192+(r<<4)|0)+4>>2]||(e[r+4>>2]=A),e[36440]=0),e[36426]=0,e[36439]=-1,e[36455]=e[50758],ie(),e[36427]=-1,A=0,e[36423]<=0||(r=e[47568],i=e[33284],(0|((0|(A=e[50757]-e[50758]|0))<=0?A+170:A))>=6&&(A=216192+(e[50758]<<4)|0,e[A>>2]=1290,e[A+8>>2]=r,e[A+4>>2]=16777215&i,A=e[50758]+1|0,e[50758]=(0|A)<=169?A:0),e[36423]=0,A=0)}return H=t+720|0,A}function ZA(A,t,r,s){var i,l=0,c=0,g=0,p=0,I=0,h=0,M=0,P=0,z=0,Y=0,V=0,X=0,te=0,ne=0,me=0,ke=0,ye=0,Pe=0,_e=0,Ke=0,lA=0,mA=0,GA=0,NA=0,JA=0;H=i=H-48|0;e:{if(r>>>0<=2){for(lA=e[(r<<=2)+124732>>2],mA=e[r+124720>>2];(0|(r=e[t+4>>2]))==e[t+104>>2]?r=Ie(t):(e[t+4>>2]=r+1,r=d[0|r]),(0|r)==32|r-9>>>0<5;);z=1;A:{r:switch(r-43|0){case 0:case 2:break r;default:break A}z=(0|r)==45?-1:1,(0|(r=e[t+4>>2]))==e[t+104>>2]?r=Ie(t):(e[t+4>>2]=r+1,r=d[0|r])}A:{r:{for(;;){if(f[g+84056|0]==(32|r)){if(g>>>0>6||((0|(r=e[t+4>>2]))==e[t+104>>2]?r=Ie(t):(e[t+4>>2]=r+1,r=d[0|r])),(0|(g=g+1|0))!=8)continue;break r}break}if((0|g)!=3){if((0|g)==8)break r;if(!s|g>>>0<4)break A;if((0|g)==8)break r}if((0|(r=e[t+116>>2]))>0|(0|r)>=0&&(e[t+4>>2]=e[t+4>>2]-1),!(!s|g>>>0<4))for(r=(0|r)<0;r||(e[t+4>>2]=e[t+4>>2]-1),(g=g-1|0)>>>0>3;);}H=M=H-16|0,J(we(we(0|z)*we(1/0))),(t=2147483647&(p=v(2)))-8388608>>>0<=2130706431?(r=t,r<<=25,s=(t=t>>>7|0)+1065353216|0):(r=p<<25,s=p>>>7|2147418112,t>>>0>=2139095040||(r=0,s=0,t&&(Gt(M,r=t,0,0,0,(t=be(t))+81|0),h=e[M>>2],I=e[M+4>>2],r=e[M+8>>2],s=65536^e[M+12>>2]|16265-t<<16))),e[i>>2]=h,e[i+4>>2]=I,e[i+8>>2]=r,e[i+12>>2]=-2147483648&p|s,H=M+16|0,h=e[i+8>>2],I=e[i+12>>2],p=e[i>>2],P=e[i+4>>2];break e}A:{r:{a:if(!g){for(g=0;;){if(f[g+84473|0]!=(32|r))break a;if(g>>>0>1||((0|(r=e[t+4>>2]))==e[t+104>>2]?r=Ie(t):(e[t+4>>2]=r+1,r=d[0|r])),(0|(g=g+1|0))==3)break}break r}a:switch(0|g){case 0:if((0|r)==48){if((0|(g=e[t+4>>2]))==e[t+104>>2]?g=Ie(t):(e[t+4>>2]=g+1,g=d[0|g]),(-33&g)==88){H=c=H-432|0,(0|(r=e[t+4>>2]))==e[t+104>>2]?g=Ie(t):(e[t+4>>2]=r+1,g=d[0|r]);n:{o:{for(;;){if((0|g)!=48){if((0|g)!=46)break n;if((0|(r=e[t+4>>2]))!=e[t+104>>2]){e[t+4>>2]=r+1,g=d[0|r];break o}break}(0|(r=e[t+4>>2]))!=e[t+104>>2]?(Ke=1,e[t+4>>2]=r+1,g=d[0|r]):(Ke=1,g=Ie(t))}g=Ie(t)}if(X=1,(0|g)==48){for(;te=(r=te)-1|0,ne=ne-!r|0,(0|(r=e[t+4>>2]))==e[t+104>>2]?g=Ie(t):(e[t+4>>2]=r+1,g=d[0|r]),(0|g)==48;);Ke=1}}for(P=1073676288;;){n:{r=32|g;o:{if(!((GA=g-48|0)>>>0<10)){if((0|g)!=46&r-97>>>0>=6)break n;if((0|g)==46){if(X)break n;X=1,te=h,ne=I;break o}}r=(0|g)>57?r-87|0:GA,(0|I)<=0&h>>>0<=7|(0|I)<0?l=r+(l<<4)|0:!I&h>>>0<=28?(ls(c+48|0,r),Le(c+32|0,Pe,_e,p,P,0,0,0,1073414144),Pe=e[c+32>>2],_e=e[c+36>>2],p=e[c+40>>2],P=e[c+44>>2],Le(c+16|0,e[c+48>>2],e[c+52>>2],e[c+56>>2],e[c+60>>2],Pe,_e,p,P),Rt(c,e[c+16>>2],e[c+20>>2],e[c+24>>2],e[c+28>>2],M,V,ke,ye),ke=e[c+8>>2],ye=e[c+12>>2],M=e[c>>2],V=e[c+4>>2]):Y|!r||(Le(c+80|0,Pe,_e,p,P,0,0,0,1073610752),Rt(c- -64|0,e[c+80>>2],e[c+84>>2],e[c+88>>2],e[c+92>>2],M,V,ke,ye),ke=e[c+72>>2],ye=e[c+76>>2],Y=1,M=e[c+64>>2],V=e[c+68>>2]),I=(h=h+1|0)?I:I+1|0,Ke=1}(0|(r=e[t+4>>2]))!=e[t+104>>2]?(e[t+4>>2]=r+1,g=d[0|r]):g=Ie(t);continue}break}n:if(Ke){if((0|I)<=0&h>>>0<=7|(0|I)<0)for(p=h,P=I;l<<=4,(0|(p=p+1|0))!=8|(P=p?P:P+1|0););o:{c:{u:{if((-33&g)==80){if(p=gs(t,s),P=r=he,p|(0|r)!=-2147483648)break o;if(s){if((0|(r=e[t+116>>2]))>0|(0|r)>=0)break u;break c}M=0,V=0,ps(t,0,0),r=0,t=0;break n}if(p=0,P=0,e[t+116>>2]<0)break o}e[t+4>>2]=e[t+4>>2]-1}p=0,P=0}if(l)if(r=p+((t=X?te:h)<<2)|0,t=(I=(X?ne:I)<<2|t>>>30)+P|0,(h=r-32|0)>>>0>0-lA>>>0&(0|(t=I=(r>>>0<p>>>0?t+1|0:t)-(r>>>0<32)|0))>=0|(0|t)>0)e[56798]=68,ls(c+160|0,z),Le(c+144|0,e[c+160>>2],e[c+164>>2],e[c+168>>2],e[c+172>>2],-1,-1,-1,2147418111),Le(c+128|0,e[c+144>>2],e[c+148>>2],e[c+152>>2],e[c+156>>2],-1,-1,-1,2147418111),M=e[c+128>>2],V=e[c+132>>2],r=e[c+140>>2],t=e[c+136>>2];else if((0|I)>=(0|(r=(t=lA-226|0)>>31))&t>>>0<=h>>>0|(0|r)<(0|I)){if((0|l)>=0)for(;Rt(c+416|0,M,V,ke,ye,0,0,0,-1073807360),Rt(c+400|0,M,V,ke,ye,(t=r=(0|(t=Ai(M,V,ke,ye,1073610752)))>=0)?e[c+416>>2]:M,t?e[c+420>>2]:V,t?e[c+424>>2]:ke,t?e[c+428>>2]:ye),h=(t=h)-1|0,I=I-!t|0,ke=e[c+408>>2],ye=e[c+412>>2],M=e[c+400>>2],V=e[c+404>>2],(0|(l=r|l<<1))>=0;);t=I-((lA>>31)+(h>>>0<lA>>>0)|0)|0,(0|(r=(r=32+(h-lA|0)|0)>>>0<mA>>>0&(0|(t=r>>>0<32?t+1|0:t))<=0|(0|t)<0?(0|r)>0?r:0:mA))>=113?(ls(c+384|0,z),te=e[c+392>>2],ne=e[c+396>>2],Pe=e[c+384>>2],_e=e[c+388>>2],p=0,t=0):(_r(c+352|0,ta(1,144-r|0)),ls(c+336|0,z),Pe=e[c+336>>2],_e=e[c+340>>2],te=e[c+344>>2],ne=e[c+348>>2],po(c+368|0,e[c+352>>2],e[c+356>>2],e[c+360>>2],e[c+364>>2],Pe,_e,te,ne),me=e[c+376>>2],NA=e[c+380>>2],p=e[c+372>>2],t=e[c+368>>2]),da(c+320|0,(s=!(1&l)&!!(0|Jt(M,V,ke,ye,0,0,0,0))&(0|r)<32)+l|0),Le(c+304|0,Pe,_e,te,ne,e[c+320>>2],e[c+324>>2],e[c+328>>2],e[c+332>>2]),r=t,Rt(c+272|0,e[c+304>>2],e[c+308>>2],e[c+312>>2],e[c+316>>2],t,p,me,NA),Le(c+288|0,Pe,_e,te,ne,(t=s)?0:M,t?0:V,t?0:ke,t?0:ye),Rt(c+256|0,e[c+288>>2],e[c+292>>2],e[c+296>>2],e[c+300>>2],e[c+272>>2],e[c+276>>2],e[c+280>>2],e[c+284>>2]),dn(c+240|0,e[c+256>>2],e[c+260>>2],e[c+264>>2],e[c+268>>2],r,p,me,NA),Jt(t=e[c+240>>2],s=e[c+244>>2],r=e[c+248>>2],p=e[c+252>>2],0,0,0,0)||(e[56798]=68),vA(c+224|0,t,s,r,p,h),M=e[c+224>>2],V=e[c+228>>2],r=e[c+236>>2],t=e[c+232>>2]}else e[56798]=68,ls(c+208|0,z),Le(c+192|0,e[c+208>>2],e[c+212>>2],e[c+216>>2],e[c+220>>2],0,0,0,65536),Le(c+176|0,e[c+192>>2],e[c+196>>2],e[c+200>>2],e[c+204>>2],0,0,0,65536),M=e[c+176>>2],V=e[c+180>>2],r=e[c+188>>2],t=e[c+184>>2];else _r(c+112|0,0*+(0|z)),M=e[c+112>>2],V=e[c+116>>2],r=e[c+124>>2],t=e[c+120>>2]}else{o:{c:{if((0|(r=e[t+116>>2]))>0|(0|r)>=0){if(r=e[t+4>>2],e[t+4>>2]=r-1,!s)break c;if(e[t+4>>2]=r-2,!X)break o;e[t+4>>2]=r-3;break o}if(s)break o}ps(t,0,0)}_r(c+96|0,0*+(0|z)),M=e[c+96>>2],V=e[c+100>>2],r=e[c+108>>2],t=e[c+104>>2]}e[i+16>>2]=M,e[i+20>>2]=V,e[i+24>>2]=t,e[i+28>>2]=r,H=c+432|0,h=e[i+24>>2],I=e[i+28>>2],p=e[i+16>>2],P=e[i+20>>2];break e}e[t+116>>2]<0||(e[t+4>>2]=e[t+4>>2]-1)}g=t,me=z,c=s,t=0,z=0,H=l=H-8976|0,NA=(GA=0-lA|0)-mA|0;n:{o:{for(;;){if((0|r)!=48){if((0|r)!=46)break n;if((0|(r=e[g+4>>2]))!=e[g+104>>2]){e[g+4>>2]=r+1,r=d[0|r];break o}break}(0|(t=e[g+4>>2]))!=e[g+104>>2]?(e[g+4>>2]=t+1,r=d[0|t]):r=Ie(g),t=1}r=Ie(g)}if(Y=1,(0|r)==48){for(;h=(t=h)-1|0,I=I-!t|0,(0|(t=e[g+4>>2]))==e[g+104>>2]?r=Ie(g):(e[g+4>>2]=t+1,r=d[0|t]),(0|r)==48;);t=1}}e[l+784>>2]=0;n:{o:{c:{u:{l:{if((s=(0|r)==46)|(M=r-48|0)>>>0<=9)for(;;){i:{if(1&s){if(!Y){h=p,I=P,Y=1;break i}s=!t;break l}P=(p=p+1|0)?P:P+1|0,(0|z)<=2044?(Ke=(0|r)==48?Ke:p,t=(l+784|0)+(z<<2)|0,X&&(M=(O(e[t>>2],10)+r|0)-48|0),e[t>>2]=M,t=1,X=(r=(0|(s=X+1|0))==9)?0:s,z=r+z|0):(0|r)!=48&&(e[l+8960>>2]=1|e[l+8960>>2],Ke=18396)}if((0|(r=e[g+4>>2]))==e[g+104>>2]?r=Ie(g):(e[g+4>>2]=r+1,r=d[0|r]),!((s=(0|r)==46)|(M=r-48|0)>>>0<10))break}if(h=Y?h:p,I=Y?I:P,!(!t|(-33&r)!=69)){if(M=gs(g,c),V=t=he,!(M|(0|t)!=-2147483648)){if(!c)break c;M=0,V=0,e[g+116>>2]<0||(e[g+4>>2]=e[g+4>>2]-1)}I=I+V|0,I=(h=h+M|0)>>>0<M>>>0?I+1|0:I;break o}if(s=!t,(0|r)<0)break u}e[g+116>>2]<0||(e[g+4>>2]=e[g+4>>2]-1)}if(!s)break o;e[56798]=28}p=0,P=0,ps(g,0,0),r=0,t=0;break n}if(t=e[l+784>>2])if(p>>>0>9&(0|P)>=0|(0|P)>0|(0|p)!=(0|h)|(0|I)!=(0|P)|(t>>>mA|0?(0|mA)<=30:0))if(h>>>0>GA>>>1>>>0&(0|I)>=0|(0|I)>0)e[56798]=68,ls(l+96|0,me),Le(l+80|0,e[l+96>>2],e[l+100>>2],e[l+104>>2],e[l+108>>2],-1,-1,-1,2147418111),Le(l- -64|0,e[l+80>>2],e[l+84>>2],e[l+88>>2],e[l+92>>2],-1,-1,-1,2147418111),p=e[l+64>>2],P=e[l+68>>2],r=e[l+76>>2],t=e[l+72>>2];else if((r=h>>>0<(t=lA-226|0)>>>0)&(0|I)<=(0|(t>>=31))|(0|t)>(0|I))e[56798]=68,ls(l+144|0,me),Le(l+128|0,e[l+144>>2],e[l+148>>2],e[l+152>>2],e[l+156>>2],0,0,0,65536),Le(l+112|0,e[l+128>>2],e[l+132>>2],e[l+136>>2],e[l+140>>2],0,0,0,65536),p=e[l+112>>2],P=e[l+116>>2],r=e[l+124>>2],t=e[l+120>>2];else{if(X){if((0|X)<=8){for(g=e[(t=(l+784|0)+(z<<2)|0)>>2];g=O(g,10),(0|(X=X+1|0))!=9;);e[t>>2]=g}z=z+1|0}if(Y=h,!((0|Ke)>(0|h)|(0|Ke)>=9|(0|h)>17)){if((0|Y)==9){ls(l+192|0,me),da(l+176|0,e[l+784>>2]),Le(l+160|0,e[l+192>>2],e[l+196>>2],e[l+200>>2],e[l+204>>2],e[l+176>>2],e[l+180>>2],e[l+184>>2],e[l+188>>2]),p=e[l+160>>2],P=e[l+164>>2],r=e[l+172>>2],t=e[l+168>>2];break n}if((0|Y)<=8){ls(l+272|0,me),da(l+256|0,e[l+784>>2]),Le(l+240|0,e[l+272>>2],e[l+276>>2],e[l+280>>2],e[l+284>>2],e[l+256>>2],e[l+260>>2],e[l+264>>2],e[l+268>>2]),ls(l+224|0,e[124720+(0-Y<<2)>>2]),Wr(l+208|0,e[l+240>>2],e[l+244>>2],e[l+248>>2],e[l+252>>2],e[l+224>>2],e[l+228>>2],e[l+232>>2],e[l+236>>2]),p=e[l+208>>2],P=e[l+212>>2],r=e[l+220>>2],t=e[l+216>>2];break n}if(t=27+(O(Y,-3)+mA|0)|0,!((r=e[l+784>>2])>>>t|0&&(0|t)<=30)){ls(l+352|0,me),da(l+336|0,r),Le(l+320|0,e[l+352>>2],e[l+356>>2],e[l+360>>2],e[l+364>>2],e[l+336>>2],e[l+340>>2],e[l+344>>2],e[l+348>>2]),ls(l+304|0,e[124648+(Y<<2)>>2]),Le(l+288|0,e[l+320>>2],e[l+324>>2],e[l+328>>2],e[l+332>>2],e[l+304>>2],e[l+308>>2],e[l+312>>2],e[l+316>>2]),p=e[l+288>>2],P=e[l+292>>2],r=e[l+300>>2],t=e[l+296>>2];break n}}for(;!e[(l+784|0)+((z=(r=z)-1|0)<<2)>>2];);if(X=0,t=(0|Y)%9|0){if(s=0,t=(0|Y)<0?t+9|0:t,r){for(I=1e9/(0|(h=e[124720+(0-t<<2)>>2]))|0,M=0,g=0;p=(p=M)+(z=((P=e[(M=(l+784|0)+(g<<2)|0)>>2])>>>0)/(h>>>0)|0)|0,e[M>>2]=p,s=(p=!p&(0|s)==(0|g))?s+1&2047:s,Y=p?Y-9|0:Y,M=O(I,P-O(h,z)|0),(0|(g=g+1|0))!=(0|r););M&&(e[(l+784|0)+(r<<2)>>2]=M,r=r+1|0)}else r=0;Y=9+(Y-t|0)|0}else s=0;for(;;){g=(l+784|0)+(s<<2)|0;o:{for(;;){if(((0|Y)!=36|ee[g>>2]>=10384593)&(0|Y)>=36)break o;for(z=r+2047|0,M=0,t=r;r=t,h=M,M=(t=e[(z=(l+784|0)+((p=2047&z)<<2)|0)>>2])<<29,t=P=t>>>3|0,!(I=(h=h+M|0)>>>0<M>>>0?t+1|0:t)&h>>>0<1000000001?M=0:h=(t=h)-At(M=Yi(t,I,1e9),he,1e9,0)|0,e[z>>2]=h,t=(0|p)!=(r-1&2047)||(0|s)==(0|p)||h?r:p,z=p-1|0,(0|s)!=(0|p););if(X=X-29|0,M)break}(0|(s=s-1&2047))==(0|t)&&(g=r=(h=l+784|0)+((t+2046&2047)<<2)|0,I=e[r>>2],r=t-1&2047,e[g>>2]=I|e[h+(r<<2)>>2]),Y=Y+9|0,e[(l+784|0)+(s<<2)>>2]=M;continue}break}o:{c:for(;;){for(h=r+1&2047,M=(l+784|0)+((r-1&2047)<<2)|0;;){p=(0|Y)>45?9:1;u:{for(;;){t=s,g=0;l:{for(;;){if((0|(s=t+g&2047))!=(0|r)&&!((s=e[(l+784|0)+(s<<2)>>2])>>>0<(I=e[124672+(g<<2)>>2])>>>0)){if(s>>>0>I>>>0)break l;if((0|(g=g+1|0))!=4)continue}break}if((0|Y)==36){for(h=0,I=0,g=0,p=0,P=0;(0|(s=t+g&2047))==(0|r)&&(e[780+(l+((r=r+1&2047)<<2)|0)>>2]=0),da(l+768|0,e[(l+784|0)+(s<<2)>>2]),Le(l+752|0,h,I,p,P,0,0,1342177280,1075633366),Rt(l+736|0,e[l+752>>2],e[l+756>>2],e[l+760>>2],e[l+764>>2],e[l+768>>2],e[l+772>>2],e[l+776>>2],e[l+780>>2]),p=e[l+744>>2],P=e[l+748>>2],h=e[l+736>>2],I=e[l+740>>2],(0|(g=g+1|0))!=4;);if(ls(l+720|0,me),Le(l+704|0,h,I,p,P,e[l+720>>2],e[l+724>>2],e[l+728>>2],e[l+732>>2]),p=e[l+712>>2],P=e[l+716>>2],h=0,I=0,M=e[l+704>>2],V=e[l+708>>2],(0|(s=(z=(0|(g=(c=X+113|0)-lA|0))<(0|mA))?(0|g)>0?g:0:mA))<=112)break u;break o}}if(X=p+X|0,s=r,(0|t)!=(0|r))break}for(P=1e9>>>p|0,z=~(-1<<p),g=0,s=t;I=(I=g)+((c=e[(g=(l+784|0)+(t<<2)|0)>>2])>>>p|0)|0,e[g>>2]=I,s=(I=!I&(0|t)==(0|s))?s+1&2047:s,Y=I?Y-9|0:Y,g=O(P,c&z),(0|r)!=(0|(t=t+1&2047)););if(!g)continue;if((0|s)!=(0|h)){e[(l+784|0)+(r<<2)>>2]=g,r=h;continue c}e[M>>2]=1|e[M>>2];continue}break}break}_r(l+656|0,ta(1,225-s|0)),po(l+688|0,e[l+656>>2],e[l+660>>2],e[l+664>>2],e[l+668>>2],M,V,p,P),Pe=e[l+696>>2],_e=e[l+700>>2],ke=e[l+688>>2],ye=e[l+692>>2],_r(l+640|0,ta(1,113-s|0)),ks(l+672|0,M,V,p,P,e[l+640>>2],e[l+644>>2],e[l+648>>2],e[l+652>>2]),dn(l+624|0,M,V,p,P,h=e[l+672>>2],I=e[l+676>>2],te=e[l+680>>2],ne=e[l+684>>2]),Rt(l+608|0,ke,ye,Pe,_e,e[l+624>>2],e[l+628>>2],e[l+632>>2],e[l+636>>2]),p=e[l+616>>2],P=e[l+620>>2],M=e[l+608>>2],V=e[l+612>>2]}if((0|(Y=t+4&2047))!=(0|r)){o:if((Y=e[(l+784|0)+(Y<<2)>>2])>>>0<=499999999){if(!Y&(t+5&2047)==(0|r))break o;_r(l+496|0,.25*+(0|me)),Rt(l+480|0,h,I,te,ne,e[l+496>>2],e[l+500>>2],e[l+504>>2],e[l+508>>2]),te=e[l+488>>2],ne=e[l+492>>2],h=e[l+480>>2],I=e[l+484>>2]}else(0|Y)==5e8?(JA=+(0|me),(t+5&2047)!=(0|r)?(_r(l+560|0,.75*JA),Rt(l+544|0,h,I,te,ne,e[l+560>>2],e[l+564>>2],e[l+568>>2],e[l+572>>2]),te=e[l+552>>2],ne=e[l+556>>2],h=e[l+544>>2],I=e[l+548>>2]):(_r(l+528|0,.5*JA),Rt(l+512|0,h,I,te,ne,e[l+528>>2],e[l+532>>2],e[l+536>>2],e[l+540>>2]),te=e[l+520>>2],ne=e[l+524>>2],h=e[l+512>>2],I=e[l+516>>2])):(_r(l+592|0,.75*+(0|me)),Rt(l+576|0,h,I,te,ne,e[l+592>>2],e[l+596>>2],e[l+600>>2],e[l+604>>2]),te=e[l+584>>2],ne=e[l+588>>2],h=e[l+576>>2],I=e[l+580>>2]);(0|s)>111||(ks(l+464|0,h,I,te,ne,0,0,0,1073676288),Jt(e[l+464>>2],e[l+468>>2],e[l+472>>2],e[l+476>>2],0,0,0,0)||(Rt(l+448|0,h,I,te,ne,0,0,0,1073676288),te=e[l+456>>2],ne=e[l+460>>2],h=e[l+448>>2],I=e[l+452>>2]))}Rt(l+432|0,M,V,p,P,h,I,te,ne),dn(l+416|0,e[l+432>>2],e[l+436>>2],e[l+440>>2],e[l+444>>2],ke,ye,Pe,_e),p=e[l+424>>2],P=e[l+428>>2],M=e[l+416>>2],V=e[l+420>>2],(NA-2|0)>=(2147483647&c)||(e[l+408>>2]=p,e[l+412>>2]=2147483647&P,e[l+400>>2]=M,e[l+404>>2]=V,Le(l+384|0,M,V,p,P,0,0,0,1073610752),p=(t=(0|(t=Ai(e[l+400>>2],e[l+404>>2],e[l+408>>2],e[l+412>>2],1081081856)))>=0)?e[l+392>>2]:p,P=t?e[l+396>>2]:P,M=t?e[l+384>>2]:M,V=t?e[l+388>>2]:V,X=t+X|0,!(!!(0|Jt(h,I,te,ne,0,0,0,0))&(t?z&(0|s)!=(0|g):z))&(X+110|0)<=(0|NA)||(e[56798]=68)),vA(l+368|0,M,V,p,P,X),p=e[l+368>>2],P=e[l+372>>2],r=e[l+380>>2],t=e[l+376>>2]}else ls(l+48|0,me),da(l+32|0,t),Le(l+16|0,e[l+48>>2],e[l+52>>2],e[l+56>>2],e[l+60>>2],e[l+32>>2],e[l+36>>2],e[l+40>>2],e[l+44>>2]),p=e[l+16>>2],P=e[l+20>>2],r=e[l+28>>2],t=e[l+24>>2];else _r(l,0*+(0|me)),p=e[l>>2],P=e[l+4>>2],r=e[l+12>>2],t=e[l+8>>2]}e[i+40>>2]=t,e[i+44>>2]=r,e[i+32>>2]=p,e[i+36>>2]=P,H=l+8976|0,h=e[i+40>>2],I=e[i+44>>2],p=e[i+32>>2],P=e[i+36>>2];break e;case 3:break r;default:break a}(0|(r=e[t+116>>2]))>0|(0|r)>=0&&(e[t+4>>2]=e[t+4>>2]-1);break A}if((0|(r=e[t+4>>2]))==e[t+104>>2]?r=Ie(t):(e[t+4>>2]=r+1,r=d[0|r]),(0|r)!=40){if(I=2147450880,e[t+116>>2]<0)break e;e[t+4>>2]=e[t+4>>2]-1;break e}for(g=1;(0|(r=e[t+4>>2]))==e[t+104>>2]?r=Ie(t):(e[t+4>>2]=r+1,r=d[0|r]),r-48>>>0<10|r-65>>>0<26|(0|r)==95||!(r-97>>>0>=26);)g=g+1|0;if(I=2147450880,(0|r)==41)break e;(0|(r=e[t+116>>2]))>0|(0|r)>=0&&(e[t+4>>2]=e[t+4>>2]-1);r:{if(s){if(g)break r;break e}break A}for(;g=g-1|0,(0|r)>0|(0|r)>=0&&(e[t+4>>2]=e[t+4>>2]-1),g;);break e}e[56798]=28,ps(t,0,0)}I=0}e[A>>2]=p,e[A+4>>2]=P,e[A+8>>2]=h,e[A+12>>2]=I,H=i+48|0}function TA(A,t,r,s,i){var l,c=0,g=0,p=0,I=0,h=0,M=0,P=0,z=0,Y=0,V=0,X=0,te=0,ne=0,me=0,ke=0,ye=0,Pe=0,_e=0,Ke=0,lA=0,mA=0;if(H=l=H-112|0,e[r+8>>2]){lA=e[50754]/70|0,V=(M=e[s+12>>2])||256;e:if((0|t)!=2){if((0|t)==1){A:if(d[A+11|0]!=3)switch(d[s-15|0]-3|0){case 0:case 5:break A;default:break e}V=(0|(M=e[e[47192]+44>>2]))<(0|V)?V:M}}else{if((0|(M=e[e[47192]+80>>2]))<=0|!(8&d[0|s]|M>>>0<=d[A+14|0]|32&d[A+6|0]))break e;lA<<=1}if(e[36436]=0,ne=A,mA=t,h=s,H=Y=H-16|0,A=e[34460]+e[r+8>>2]|0,t=(t=d[A+2|0])>>>0>=24?24:t,e[Y+12>>2]=t,g=e[r+12>>2]+e[r+24>>2]|0,e[36422]=g,t){for(M=A+4|0,c=1&k[A+4>>1];A=145488+(I<<3)|0,s=M+(c?I<<6:O(I,44))|0,e[A+4>>2]=s,z=y[s>>1],k[A+2>>1]=z,k[A>>1]=d[s+16|0],p=2&z?I:p,(0|(I=I+1|0))!=(0|t););M=145488,(0|p)<=0||((0|mA)!=1?(t=t-p|0,e[Y+12>>2]=t,M=145488+(p<<3)|0):(t=p+1|0,e[Y+12>>2]=t,M=145488))}else t=0,M=145488;if(!(!e[r+4>>2]|e[r+20>>2]|d[ne+11|0]!=2)){if(c=e[r+36>>2],s=e[r+40>>2],A=0,(0|(t=e[Y+12>>2]))>=2){p=c>>>12|0,z=s>>>26&7,me=s>>>18&248,X=O(te=63&s,50),ye=63&(Pe=c>>>6|0),I=c<<1&126,_e=O(s>>>16&31,50)-750|0,Ke=O(s>>>11&31,50)-750|0,ke=O(s>>>6&31,50)-750|0;e:{A:if((0|mA)!=1){if(!(p|te))break e;if(8&p?(t=e[4+(M+((g=t-1|0)<<3)|0)>>2],k[t>>1]<0?A=t:(A=(0|(A=e[44469]+1|0))<=169?A:0,e[44469]=A,g=y[t+20>>1]|y[t+22>>1]<<16,A=177888+(A<<6)|0,c=y[t+16>>1]|y[t+18>>1]<<16,k[A+16>>1]=c,k[A+18>>1]=c>>>16,k[A+20>>1]=g,k[A+22>>1]=g>>>16,g=y[t+4>>1]|y[t+6>>1]<<16,c=y[t>>1]|y[t+2>>1]<<16,k[A>>1]=c,k[A+2>>1]=c>>>16,k[A+4>>1]=g,k[A+6>>1]=g>>>16,g=y[t+12>>1]|y[t+14>>1]<<16,c=y[t+8>>1]|y[t+10>>1]<<16,k[A+8>>1]=c,k[A+10>>1]=c>>>16,k[A+12>>1]=g,k[A+14>>1]=g>>>16,g=y[t+28>>1]|y[t+30>>1]<<16,c=y[t+24>>1]|y[t+26>>1]<<16,k[A+24>>1]=c,k[A+26>>1]=c>>>16,k[A+28>>1]=g,k[A+30>>1]=g>>>16,g=y[t+36>>1]|y[t+38>>1]<<16,c=y[t+32>>1]|y[t+34>>1]<<16,k[A+32>>1]=c,k[A+34>>1]=c>>>16,k[A+36>>1]=g,k[A+38>>1]=g>>>16,g=y[t+44>>1]|y[t+46>>1]<<16,c=y[t+40>>1]|y[t+42>>1]<<16,k[A+40>>1]=c,k[A+42>>1]=c>>>16,k[A+44>>1]=g,k[A+46>>1]=g>>>16,g=y[t+52>>1]|y[t+54>>1]<<16,c=y[t+48>>1]|y[t+50>>1]<<16,k[A+48>>1]=c,k[A+50>>1]=c>>>16,k[A+52>>1]=g,k[A+54>>1]=g>>>16,g=y[t+60>>1]|y[t+62>>1]<<16,t=y[t+56>>1]|y[t+58>>1]<<16,k[A+56>>1]=t,k[A+58>>1]=t>>>16,k[A+60>>1]=g,k[A+62>>1]=g>>>16,f[A+16|0]=0,k[A>>1]=32768|y[A>>1],g=e[Y+12>>2]-1|0),e[4+(M+(g<<3)|0)>>2]=A,t=1792,(0|(g=k[A+4>>1]))<300||(t=1536,g>>>0<400||(t=g>>>0<500?1280:1024)),e[36436]=t,c=35):(e[Y+12>>2]=t+1,k[(A=(g=M+(t<<3)|0)-8|0)>>1]=I,t=e[A+4>>2],A=(0|(A=e[44469]+1|0))<=169?A:0,e[44469]=A,(A=(Pe=A<<6)+177888|0)&&(c=y[t+4>>1]|y[t+6>>1]<<16,P=y[t>>1]|y[t+2>>1]<<16,k[A>>1]=P,k[A+2>>1]=P>>>16,k[A+4>>1]=c,k[A+6>>1]=c>>>16,c=y[t+60>>1]|y[t+62>>1]<<16,P=y[t+56>>1]|y[t+58>>1]<<16,k[A+56>>1]=P,k[A+58>>1]=P>>>16,k[A+60>>1]=c,k[A+62>>1]=c>>>16,c=y[t+52>>1]|y[t+54>>1]<<16,P=y[t+48>>1]|y[t+50>>1]<<16,k[A+48>>1]=P,k[A+50>>1]=P>>>16,k[A+52>>1]=c,k[A+54>>1]=c>>>16,c=y[t+44>>1]|y[t+46>>1]<<16,P=y[t+40>>1]|y[t+42>>1]<<16,k[A+40>>1]=P,k[A+42>>1]=P>>>16,k[A+44>>1]=c,k[A+46>>1]=c>>>16,c=y[t+36>>1]|y[t+38>>1]<<16,P=y[t+32>>1]|y[t+34>>1]<<16,k[A+32>>1]=P,k[A+34>>1]=P>>>16,k[A+36>>1]=c,k[A+38>>1]=c>>>16,c=y[t+28>>1]|y[t+30>>1]<<16,P=y[t+24>>1]|y[t+26>>1]<<16,k[A+24>>1]=P,k[A+26>>1]=P>>>16,k[A+28>>1]=c,k[A+30>>1]=c>>>16,c=y[t+20>>1]|y[t+22>>1]<<16,P=y[t+16>>1]|y[t+18>>1]<<16,k[A+16>>1]=P,k[A+18>>1]=P>>>16,k[A+20>>1]=c,k[A+22>>1]=c>>>16,c=y[t+12>>1]|y[t+14>>1]<<16,t=y[t+8>>1]|y[t+10>>1]<<16,k[A+8>>1]=t,k[A+10>>1]=t>>>16,k[A+12>>1]=c,k[A+14>>1]=c>>>16,f[Pe+177904|0]=0,k[A>>1]=32768|y[A>>1]),k[g>>1]=0,e[g+4>>2]=A,I>>>0>=37&&(e[36422]=(I+e[36422]|0)-36),c=ye<<1,te&&fe(A,X,ke,Ke,z,_e,me,p)),e[e[32972]+132>>2]||(t=d[A+17|0])&&(t=k[102896+(((0|(t=(c<<6>>>0)/(t>>>0)|0))>=199?199:t)<<1)>>1],f[A+18|0]=(0|O(t,d[A+18|0]))/512,f[A+19|0]=(0|O(t,d[A+19|0]))/512,f[A+20|0]=(0|O(t,d[A+20|0]))/512,f[A+21|0]=(0|O(t,d[A+21|0]))/512,f[A+22|0]=(0|O(t,d[A+22|0]))/512,f[A+23|0]=(0|O(t,d[A+23|0]))/512,f[A+24|0]=(0|O(t,d[A+24|0]))/512,f[A+25|0]=(0|O(t,d[A+25|0]))/512),s-536870912>>>0<=1073741823){if(z=e[44469],(0|(g=e[Y+12>>2]))>0)for(A=O(s>>>29|0,10)+102854|0,me=k[A+4>>1],te=k[A+2>>1],X=k[A>>1],_e=k[A+6>>1],Ke=k[A+8>>1],c=0;t=e[(ke=M+(c<<3)|0)+4>>2],k[t>>1]<0?A=t:(A=(ye=(z=(0|(A=z+1|0))<=169?A:0)<<6)+177888|0)?(s=y[t+4>>1]|y[t+6>>1]<<16,g=y[t>>1]|y[t+2>>1]<<16,k[A>>1]=g,k[A+2>>1]=g>>>16,k[A+4>>1]=s,k[A+6>>1]=s>>>16,s=y[t+60>>1]|y[t+62>>1]<<16,g=y[t+56>>1]|y[t+58>>1]<<16,k[A+56>>1]=g,k[A+58>>1]=g>>>16,k[A+60>>1]=s,k[A+62>>1]=s>>>16,s=y[t+52>>1]|y[t+54>>1]<<16,g=y[t+48>>1]|y[t+50>>1]<<16,k[A+48>>1]=g,k[A+50>>1]=g>>>16,k[A+52>>1]=s,k[A+54>>1]=s>>>16,s=y[t+44>>1]|y[t+46>>1]<<16,g=y[t+40>>1]|y[t+42>>1]<<16,k[A+40>>1]=g,k[A+42>>1]=g>>>16,k[A+44>>1]=s,k[A+46>>1]=s>>>16,s=y[t+36>>1]|y[t+38>>1]<<16,g=y[t+32>>1]|y[t+34>>1]<<16,k[A+32>>1]=g,k[A+34>>1]=g>>>16,k[A+36>>1]=s,k[A+38>>1]=s>>>16,s=y[t+28>>1]|y[t+30>>1]<<16,g=y[t+24>>1]|y[t+26>>1]<<16,k[A+24>>1]=g,k[A+26>>1]=g>>>16,k[A+28>>1]=s,k[A+30>>1]=s>>>16,s=y[t+20>>1]|y[t+22>>1]<<16,g=y[t+16>>1]|y[t+18>>1]<<16,k[A+16>>1]=g,k[A+18>>1]=g>>>16,k[A+20>>1]=s,k[A+22>>1]=s>>>16,s=y[t+12>>1]|y[t+14>>1]<<16,t=y[t+8>>1]|y[t+10>>1]<<16,k[A+8>>1]=t,k[A+10>>1]=t>>>16,k[A+12>>1]=s,k[A+14>>1]=s>>>16,f[ye+177904|0]=0,k[A>>1]=32768|y[A>>1],g=e[Y+12>>2]):A=0,e[ke+4>>2]=A,k[A+8>>1]=(0|O(me,k[A+8>>1]))/256,k[A+6>>1]=(0|O(te,k[A+6>>1]))/256,k[A+4>>1]=(0|O(X,k[A+4>>1]))/256,k[A+12>>1]=(0|O(Ke,k[A+12>>1]))/256,k[A+10>>1]=(0|O(_e,k[A+10>>1]))/256,(0|g)>(0|(c=c+1|0)););e[44469]=z}if(!A)break e}else{t=e[M+4>>2],(0|(g=k[t>>1]))<0?A=t:(s=(0|(s=e[44469]+1|0))<=169?s:0,e[44469]=s,(s=(g=s<<6)+177888|0)&&(A=y[t+4>>1]|y[t+6>>1]<<16,P=y[t>>1]|y[t+2>>1]<<16,k[s>>1]=P,k[s+2>>1]=P>>>16,k[s+4>>1]=A,k[s+6>>1]=A>>>16,A=y[t+60>>1]|y[t+62>>1]<<16,P=y[t+56>>1]|y[t+58>>1]<<16,k[s+56>>1]=P,k[s+58>>1]=P>>>16,k[s+60>>1]=A,k[s+62>>1]=A>>>16,A=y[t+52>>1]|y[t+54>>1]<<16,P=y[t+48>>1]|y[t+50>>1]<<16,k[s+48>>1]=P,k[s+50>>1]=P>>>16,k[s+52>>1]=A,k[s+54>>1]=A>>>16,A=y[t+44>>1]|y[t+46>>1]<<16,P=y[t+40>>1]|y[t+42>>1]<<16,k[s+40>>1]=P,k[s+42>>1]=P>>>16,k[s+44>>1]=A,k[s+46>>1]=A>>>16,A=y[t+36>>1]|y[t+38>>1]<<16,P=y[t+32>>1]|y[t+34>>1]<<16,k[s+32>>1]=P,k[s+34>>1]=P>>>16,k[s+36>>1]=A,k[s+38>>1]=A>>>16,A=y[t+28>>1]|y[t+30>>1]<<16,P=y[t+24>>1]|y[t+26>>1]<<16,k[s+24>>1]=P,k[s+26>>1]=P>>>16,k[s+28>>1]=A,k[s+30>>1]=A>>>16,A=y[t+20>>1]|y[t+22>>1]<<16,P=y[t+16>>1]|y[t+18>>1]<<16,k[s+16>>1]=P,k[s+18>>1]=P>>>16,k[s+20>>1]=A,k[s+22>>1]=A>>>16,A=y[t+12>>1]|y[t+14>>1]<<16,t=y[t+8>>1]|y[t+10>>1]<<16,k[s+8>>1]=t,k[s+10>>1]=t>>>16,k[s+12>>1]=A,k[s+14>>1]=A>>>16,f[g+177904|0]=0,g=-32768|y[s>>1],k[s>>1]=g,A=s)),e[M+4>>2]=A,k[M>>1]=I||50,k[M+2>>1]=16384|y[M+2>>1],k[A>>1]=16384|g,g=e[M+12>>2],t=d[g+17|0],s=e[32972],e[s+132>>2]&&(f[A+39|0]=d[g+39|0]-4);r:if(te){if(2048&c){t=(O(t,31&Pe)>>>0)/30|0,e[s+132>>2]||(s=d[A+17|0])&&(t=k[102896+(((0|(t=(t<<6>>>0)/(s>>>0)|0))>=199?199:t)<<1)>>1],f[A+18|0]=(0|O(t,d[A+18|0]))/512,f[A+19|0]=(0|O(t,d[A+19|0]))/512,f[A+20|0]=(0|O(t,d[A+20|0]))/512,f[A+21|0]=(0|O(t,d[A+21|0]))/512,f[A+22|0]=(0|O(t,d[A+22|0]))/512,f[A+23|0]=(0|O(t,d[A+23|0]))/512,f[A+24|0]=(0|O(t,d[A+24|0]))/512,f[A+25|0]=(0|O(t,d[A+25|0]))/512),fe(A,X,ke,Ke,z,_e,me,p);break r}if(fe(A,X,ke,Ke,z,_e,me,p),e[e[32972]+132>>2]||!(t=d[A+17|0]))break r;t=k[102896+(((0|(t=(ye<<7>>>0)/(t>>>0)|0))>=199?199:t)<<1)>>1],f[A+18|0]=(0|O(t,d[A+18|0]))/512,f[A+19|0]=(0|O(t,d[A+19|0]))/512,f[A+20|0]=(0|O(t,d[A+20|0]))/512,f[A+21|0]=(0|O(t,d[A+21|0]))/512,f[A+22|0]=(0|O(t,d[A+22|0]))/512,f[A+23|0]=(0|O(t,d[A+23|0]))/512,f[A+24|0]=(0|O(t,d[A+24|0]))/512,f[A+25|0]=(0|O(t,d[A+25|0]))/512}else if(s=e[s+132>>2],8&p){if(s||!(s=d[A+17|0]))break r;t=((16320&O(t,48))>>>0)/(s>>>0)|0,t=k[102896+((t>>>0>=199?199:t)<<1)>>1],f[A+18|0]=(0|O(t,d[A+18|0]))/512,f[A+19|0]=(0|O(t,d[A+19|0]))/512,f[A+20|0]=(0|O(t,d[A+20|0]))/512,f[A+21|0]=(0|O(t,d[A+21|0]))/512,f[A+22|0]=(0|O(t,d[A+22|0]))/512,f[A+23|0]=(0|O(t,d[A+23|0]))/512,f[A+24|0]=(0|O(t,d[A+24|0]))/512,f[A+25|0]=(0|O(t,d[A+25|0]))/512}else s||(t=d[A+17|0])&&(t=k[102896+(((t=1792/(t>>>0)|0)>>>0>=199?199:t)<<1)>>1],f[A+18|0]=(0|O(t,d[A+18|0]))/512,f[A+19|0]=(0|O(t,d[A+19|0]))/512,f[A+20|0]=(0|O(t,d[A+20|0]))/512,f[A+21|0]=(0|O(t,d[A+21|0]))/512,f[A+22|0]=(0|O(t,d[A+22|0]))/512,f[A+23|0]=(0|O(t,d[A+23|0]))/512,f[A+24|0]=(0|O(t,d[A+24|0]))/512,f[A+25|0]=(0|O(t,d[A+25|0]))/512);if(!(8&p))break A;t=2816,(0|(s=k[A+4>>1]))<300||(t=2560,s>>>0<400||(t=s>>>0<500?2304:2048)),e[36436]=t}4&p&&(k[A>>1]=32|y[A>>1]),2&p&&(k[A>>1]=16|y[A>>1])}64&p&&kt(20,0),A=I&p<<27>>31}else A=0;g=A+e[36422]|0,e[36422]=g,t=e[Y+12>>2]}if((0|(s=t-1|0))<=0)c=0;else{if(A=0,I=0,c=0,t-2>>>0>=3)for(me=-4&s,z=0;c=(((k[(p=I<<3)+M>>1]+c|0)+k[M+(8|p)>>1]|0)+k[M+(16|p)>>1]|0)+k[M+(24|p)>>1]|0,I=I+4|0,(0|me)!=(0|(z=z+4|0)););if(p=3&s)for(;c=k[M+(I<<3)>>1]+c|0,I=I+1|0,(0|p)!=(0|(A=A+1|0)););}if(A=t,(p=e[r+20>>2])&&(A=s,I=p+e[34460]|0,(z=d[I+2|0])&&(te=y[I+4>>1],k[M+(s<<3)>>1]=d[I+20|0],p=1,A=t,(0|z)!=1))){if(me=I+4|0,te&=1,_e=1&(I=z-1|0),(0|z)!=2)for(Ke=-2&I,z=0;ke=me+(p<<6)|0,ye=me+O(p,44)|0,Pe=d[(X=te?ke:ye)+16|0],e[(I=M+(A<<3)|0)+4>>2]=X,k[I>>1]=Pe,k[I+2>>1]=y[X>>1],ke=d[(X=te?ke- -64|0:ye+44|0)+16|0],e[I+12>>2]=X,k[I+8>>1]=ke,k[I+10>>1]=y[X>>1],p=p+2|0,A=A+2|0,(0|Ke)!=(0|(z=z+2|0)););_e&&(p=me+(te?p<<6:O(p,44))|0,z=d[p+16|0],e[(I=M+(A<<3)|0)+4>>2]=p,k[I>>1]=z,k[I+2>>1]=y[p>>1],A=A+1|0)}e:if(!((0|c)<=0)){A:{r:switch(mA-1|0){case 1:if(p=(0|(p=(e[r+44>>2]+g|0)-45|0))<=10?10:p,8&d[0|h]&&(p=p+(d[e[36128]+14|0]<<1)|0),(0|s)<=0)break e;if(h=(p<<8)/(0|c)|0,I=0,(0|t)!=2)for(t=-2&s,p=0;k[(c=(g=I<<3)+M|0)>>1]=(0|O(h,k[c>>1]))/256,k[(g=M+(8|g)|0)>>1]=(0|O(h,k[g>>1]))/256,I=I+2|0,(0|t)!=(0|(p=p+2|0)););if(!(1&s))break e;k[(t=M+(I<<3)|0)>>1]=(0|O(h,k[t>>1]))/256;break e;case 0:if(e[r>>2]!=1||(0|(p=e[r+44>>2]))>129)break A;k[M>>1]=(0|O(p,k[M>>1]))/130;break A;default:break r}(0|(p=e[r+44>>2]))<=0||(g=(p-c|0)+g|0,e[36422]=g)}if(!(!g|(0|s)<=0)){if(h=(c+g<<8)/(0|c)|0,I=0,(0|t)!=2)for(t=-2&s,p=0;k[(c=(g=I<<3)+M|0)>>1]=(0|O(h,k[c>>1]))/256,k[(g=M+(8|g)|0)>>1]=(0|O(h,k[g>>1]))/256,I=I+2|0,(0|t)!=(0|(p=p+2|0)););1&s&&(k[(t=M+(I<<3)|0)>>1]=(0|O(h,k[t>>1]))/256)}}if(e[l+108>>2]=A,H=Y+16|0,M){if((0|(A=e[r+16>>2]))!=e[36438]&&(e[36438]=A,t=216192+(e[50758]<<4)|0,e[t>>2]=14,e[t+4>>2]=A,A=e[50758]+1|0,e[50758]=(0|A)<=169?A:0),I=(A=e[e[32972]+132>>2])?1:3,t=e[M+4>>2],e[r+28>>2]|!d[145748]||(f[145748]=0,I=A?2:4),(s=e[36426])&&(!((2&(A=y[s>>1]))>>>1|d[s+16|0]<2)|16&A||(g=216192+(e[36439]<<4)|0,e[g+12>>2]=t,8&A&&(A=(0|(A=e[44469]+1|0))<=169?A:0,e[44469]=A,(A=(p=A<<6)+177888|0)&&(h=y[t+4>>1]|y[t+6>>1]<<16,c=y[t>>1]|y[t+2>>1]<<16,k[A>>1]=c,k[A+2>>1]=c>>>16,k[A+4>>1]=h,k[A+6>>1]=h>>>16,h=y[t+60>>1]|y[t+62>>1]<<16,c=y[t+56>>1]|y[t+58>>1]<<16,k[A+56>>1]=c,k[A+58>>1]=c>>>16,k[A+60>>1]=h,k[A+62>>1]=h>>>16,h=y[t+52>>1]|y[t+54>>1]<<16,c=y[t+48>>1]|y[t+50>>1]<<16,k[A+48>>1]=c,k[A+50>>1]=c>>>16,k[A+52>>1]=h,k[A+54>>1]=h>>>16,h=y[t+44>>1]|y[t+46>>1]<<16,c=y[t+40>>1]|y[t+42>>1]<<16,k[A+40>>1]=c,k[A+42>>1]=c>>>16,k[A+44>>1]=h,k[A+46>>1]=h>>>16,h=y[t+36>>1]|y[t+38>>1]<<16,c=y[t+32>>1]|y[t+34>>1]<<16,k[A+32>>1]=c,k[A+34>>1]=c>>>16,k[A+36>>1]=h,k[A+38>>1]=h>>>16,h=y[t+28>>1]|y[t+30>>1]<<16,c=y[t+24>>1]|y[t+26>>1]<<16,k[A+24>>1]=c,k[A+26>>1]=c>>>16,k[A+28>>1]=h,k[A+30>>1]=h>>>16,h=y[t+20>>1]|y[t+22>>1]<<16,c=y[t+16>>1]|y[t+18>>1]<<16,k[A+16>>1]=c,k[A+18>>1]=c>>>16,k[A+20>>1]=h,k[A+22>>1]=h>>>16,h=y[t+12>>1]|y[t+14>>1]<<16,c=y[t+8>>1]|y[t+10>>1]<<16,k[A+8>>1]=c,k[A+10>>1]=c>>>16,k[A+12>>1]=h,k[A+14>>1]=h>>>16,f[p+177904|0]=0,k[A>>1]=32768|y[A>>1]),k[(p=p+177888|0)+8>>1]=y[s+8>>1],f[p+21|0]=d[s+21|0],k[p+10>>1]=y[s+10>>1],f[p+22|0]=d[s+22|0],k[p+12>>1]=y[s+12>>1],f[p+23|0]=d[s+23|0],k[p+14>>1]=y[s+14>>1],f[p+24|0]=d[s+24|0],f[p+25|0]=d[s+25|0],e[g+12>>2]=A))),(0|mA)!=2|d[ne+11|0]!=2||(ie(),e[36427]=e[50758]),!((0|(ne=e[l+108>>2]))<2)){for(A=e[36433],h=(O(256-A|0,V)+(A<<8)|0)/256|0,A=e[36432],g=(O(256-A|0,V)+(A<<8)|0)/256|0,c=e[50754],A=0,s=1;p=y[(Y=(M+(s<<3)|0)-8|0)+2>>1],p=(0|O((0|O(c,k[Y>>1]))/1e3|0,4&p?g:16384&p?h:V))/256|0,e[(s<<2)+l>>2]=p,A=A+p|0,(0|ne)!=(0|(s=s+1|0)););if(!((0|A)<=0|(0|A)>=(0|lA)|(0|ne)<2)){if(s=1,h=1&(p=ne-1|0),(0|ne)!=2)for(g=-2&p,V=0;e[(p=(s<<2)+l|0)>>2]=(0|O(e[p>>2],lA))/(0|A),e[p+4>>2]=(0|O(e[p+4>>2],lA))/(0|A),s=s+2|0,(0|g)!=(0|(V=V+2|0)););h&&(e[(s=(s<<2)+l|0)>>2]=(0|O(e[s>>2],lA))/(0|A))}if(V=0,!((0|ne)<2))for(ne=mA+256|0,s=1;A=e[4+(M+(s<<3)|0)>>2],!(p=e[r+28>>2])|128&d[0|t]||(e[36422]=0,Ws(p,ne,0,c=e[r>>2],0,h=(h=e[r+32>>2])?(h<<5)/100|0:32),f[145748]=1,e[r+28>>2]=0),(0|i)<0||(i=64&d[0|t]?6:i,(e[l+108>>2]-1|0)==(0|s)&&(i=(p=i)|(3840&(i=e[36436])?i:0))),p=e[(s<<2)+l>>2],e[36440]=p+e[36440],e[36441]=p+e[36441],p?(h=e[50758],e[36439]=h,(0|i)>=0&&(e[(h=216192+(h<<4)|0)>>2]=I,e[h+12>>2]=A,e[h+8>>2]=t,e[h+4>>2]=p+(i<<16),t=e[50758]+1|0,e[50758]=(0|t)<=169?t:0),e[36426]=A,V=p+V|0):e[36426]=0,t=A,(0|(s=s+1|0))<e[l+108>>2];);}!e[36438]|(0|mA)==1||(e[36438]=0,A=216192+(e[50758]<<4)|0,e[A>>2]=14,e[A+4>>2]=0,A=e[50758]+1|0,e[50758]=(0|A)<=169?A:0)}}H=l+112|0}function tA(A,t,r,s){var i,l=0,c=0,g=0,p=0,I=0,h=0,M=0,P=0,z=0,Y=0,V=0,X=0,te=0,ne=0,me=0,ke=0,ye=0,Pe=0,_e=0,Ke=0,lA=0,mA=0;H=i=H-1856|0,e[i+164>>2]=0,r?P=e[r>>2]:Ve(r=i- -64|0,0,96),e[33264]=0,e[i+1824>>2]=0,e[i+1828>>2]=0,e[i+1832>>2]=0,e[i+1836>>2]=0,f[i+1616|0]=0,f[i+992|0]=0,f[i+1200|0]=0,f[i+784|0]=0;e:if(e[A+688>>2]){for(e[i+1840>>2]=t,d[0|(l=t)]==32&&(l=t+1|0,e[i+1840>>2]=l),z=i+416|1,Pe=i+1844|1,Ke=i+1848|1,lA=i+1852|1,e[i+1820>>2]=l,_A(i+168|0,l),l=e[i+1820>>2];(32|d[0|l])!=32;)l=_A(i+164|0,l)+e[i+1820>>2]|0,e[i+1820>>2]=l,X=X+1|0;rt(i+256|0,t,_e=(0|(g=l-t|0))>=159?159:g),!(ke=4194304&P)|(0|X)!=1?(ne=((0|(l=e[47202]))==36)<<2,(0|X)==1|(0|l)!=36||(l=e[i+1840>>2]-1|0,e[i+1840>>2]=l,f[0|l]=95,ne=0,c=!!(0|gA(A,i+1840|0,i+1616|0,i+1832|0,0,r)),l=e[47202])):(c=1,_A(i+172|0,l+1|0),Bt(e[i+172>>2])&&(0|Ys(e[i+164>>2]))==(0|Ys(e[i+172>>2]))&&(c=0),ne=(0|(l=e[47202]))==36?4:c,c=0);A:{r:{a:{n:{o:if(16&l)Y=15&l,ne=0;else{if(te=1,c||(te=!!(0|gA(A,i+1840|0,i+1616|0,i+1832|0,2,r))),50331648&(l=e[i+1832>>2])&&(g=e[i+1820>>2],d[g+1|0]==46&&(f[g+1|0]=32,l=e[i+1832>>2])),536870912&l){if(!s)break e;yA(s,e[i+1840>>2]);break e}if(8192&l|!(128&l)|te)s=e[33264];else if(l=e[i+1840>>2],e[i+1820>>2]=l,!((0|(s=e[33264]))<=0))for(c=0;d[0|l]==32&&(f[0|l]=45,c=c+1|0,l=e[i+1820>>2],s=e[33264]),l=l+1|0,e[i+1820>>2]=l,(0|s)>(0|c););c:if(!(s|(0|X)!=1)&&(g=_A(i+576|0,M=e[i+1840>>2]),d[g+M|0]==32)){c=i+1408|0,s=M;u:{l:{i:{for(;;){p:if(Bt(e[i+576>>2])){C:{if(d[(p=s+g|0)+1|0]==46){Y=0;h:switch(d[(l=g+2|0)+s|0]-32|0){case 0:break C;case 7:break h;default:break p}if(Y=1,g=l,d[p+3|0]==115)break C;break p}if(Y=1,(0|h)<=0)break i}if(!((0|g)<=0)){if(V=3&g,I=0,g>>>0<4)l=0;else for(me=-4&g,l=0,p=0;f[0|c]=d[s+l|0],f[c+1|0]=d[(1|l)+s|0],f[c+2|0]=d[(2|l)+s|0],f[c+3|0]=d[(3|l)+s|0],l=l+4|0,c=c+4|0,(0|me)!=(0|(p=p+4|0)););if(V)for(;f[0|c]=d[s+l|0],l=l+1|0,c=c+1|0,(0|V)!=(0|(I=I+1|0)););}if(h=h+1|0,Y)s=s+g|0;else if(g=_A(i+576|0,s=3+(s+g|0)|0),d[s+g|0]==32)continue}break}if(!((0|h)<2)){(g=(g=c-(l=i+1408|0)|0)+(l=rt(M,l,g))|0)>>>0<s>>>0&&Ve(g,32,(i+1408|0)+s-(l+c)|0),e[33264]=(h<<1)-2,e[i+1836>>2]=0;break l}}if(!h)break c;if(e[i+1832>>2]=0,e[i+1836>>2]=0,!e[33264])break u}e[i+1832>>2]=128}ne=1}if(d[i+1616|0]==21){yA(189088,i+1616|0),l=0;break e}if(mA=d[i+1833|0],c=1,!te){if(e[i+168>>2]-48>>>0<10){if(DA(A,84174,189088),l=0,d[189088]==21)break e;if(!(!(128&d[A+109|0])|32&d[r+2|0])){f[189088]=21,f[189089]=0;break e}c=!!(0|Ts(A,e[i+1840>>2],i+1616|0,i+1832|0,r,0))}else c=0;if(!(c|(3&P)==2)&&(16777216&(s=e[A+104>>2])||(c=0,!(!(33554432&s)|!(1&P))))&&(16&P||(c=0,!(1&f[r+13|0])))){me=e[i+1840>>2],l=0,h=0,p=0,H=V=H-224|0,f[0|(I=i+1616|0)]=0,e[V+216>>2]=0,e[V+220>>2]=0;c:if(!(f[me-2|0]-48>>>0<10|(1&f[0|r]?0:2&d[A+107|0])||(s=d[0|(g=me+1|0)],(!(2561&y[A+106>>1])|!(1&f[r+2|0]))&(0|s)==32))){if((0|(h=d[0|me]))!=32){for(Y=32767,s=0;;){if(!(l=ba(101868,h<<24>>24,8))){h=0;break c}if(M=0,(0|(l=e[(l<<2)-305584>>2]))==(0|s)&&!((0|(M=p+1|0))<=2)){h=0;break c}u:{l:{i:{p:{if(!((0|s)<2)){if((0|s)==10|(0|s)==100)break p;if(!((0|s)>(0|l))){h=0;break c}}if(!s)break l;if((0|s)<(0|l))break i;break l}if((0|s)>=(0|l))break l}if(h=0,(0|ye)%10|(0|O(s,10))<(0|l))break c;l=l-s|0,Y=s;break u}if((0|l)>=(0|Y)){h=0;break c}ye=s+ye|0}if(h=d[0|g],g=c=g+1|0,s=l,p=M,(0|h)==32)break}s=d[0|c]}else c=g;if((s<<24>>24)-48>>>0<10)h=0;else if((0|(s=l+ye|0))<e[A+120>>2])h=0;else if((0|s)>e[A+116>>2])h=0;else if(DA(A,85600,V+176|0),l=I,4&d[A+107|0]||(l=yA(I,l=V+176|0)+CA(l)|0),e[V+4>>2]=e[A+140>>2],e[V>>2]=s,iA(V+16|0,85839,V),h=0,d[0|c]!=46){Qr(A,me,c,r,1)&&(e[r>>2]=32768|e[r>>2]),g=0;u:if(8&d[A+107|0]){if(p=e[r>>2],e[A+212>>2]==26741){if(32768&p)break u;if(!(16384&p))break c;g=1,p=0;l:{i:switch(d[0|c]-97|0){case 0:case 4:break i;default:break l}i:{p:{C:{h:switch((Y=d[c+1|0])-116|0){case 6:break l;case 1:case 2:case 3:case 4:case 5:break p;case 0:break h;default:break C}if(d[c+2|0]!=116)break i;break l}if((0|Y)==32)break l}if(!((0|s)%1e3|0)&&(0|Y)==108)break l}p=1}if(p)break u;break c}e[r>>2]=32768|p}e[(s=A+8232|0)>>2]=0,e[s+4>>2]=0,Ts(A,V+16|2,l,V+216|0,r,g),h=1,4&d[A+107|0]&&Ur(I,V+176|0)}}H=V+224|0,h?(e[i+1832>>2]=8192|e[i+1832>>2],c=1):c=0}}if(Y=te?ne:32&mA?1:ne,ne=0,!(!(1&P)|(0|X)<2)&&FA(e[i+168>>2])){c:{if(1&f[188785]){if(!(!(s=8192&(l=e[i+1832>>2]))|c))break c;ne=s>>>2^2048;break o}if(c)break n;l=e[i+1832>>2]}if(!(128&l|X>>>0>3)&&!((0|(l=e[A+8220>>2]))<4)&&(s=1,(0|l)>=e[A+8216>>2]))break A}}if(I=0,(0|Y)<=0)break a;s=Y;break A}if((0|(s=Y))>0)break A;I=0,M=0,p=0,h=0;break r}if(c)M=0,p=0,h=0;else{s=e[i+1840>>2],e[i+1820>>2]=s,l=999,h=0,M=0,z=0;a:{n:{o:{for(;;){c:{u:{l:{if(l-1>>>0>=2){if((0|X)<2||(_A(i+1408|0,s),(0|(l=e[i+1408>>2]))<577&e[A+600>>2]>0)||(l=Ys(l),(e[l+4>>2]!=e[A+600>>2]?l:0)|e[A+40>>2]==1))break l;l=d[0|s],e[i+1408>>2]=l<<24>>24;i:switch(l-32|0){default:if(!l)break l;break;case 0:case 7:break l;case 1:case 2:case 3:case 4:case 5:case 6:break i}I=_A(i+1408|0,s),te=9;i:{p:{C:{h:if(-33&(l=e[i+1408>>2])){for(c=0,p=0;;){b:{m:{if((0|l)==39){if((0|M)>0|(0|c)>1)break h;if(p=c?p:39,e[A+40>>2]!=3)break m;break b}p=c?p:l}c=c+1|0}if(!nn(A,l)){if((0|(l=e[i+1408>>2]))!=39&&!FA(l))break l;if(I=_A(i+1408|0,s+I|0)+I|0,-33&(l=e[i+1408>>2]))continue;break h}break}if((0|c)<=2)break C;te=c}else p=0;if((0|(l=e[A+40>>2]))!=2)break p;H=l=H-208|0,f[0|l]=0,c=d[0|(g=s-1|0)],f[0|g]=32,s=LA(A,s,l,200,0,-2147483648,0),f[0|g]=c,H=l+208|0,s=!s|(32768&s)>>>15;break i}l=e[A+40>>2],te=c}s=(f[A+168|0]+1|0)<(te-((0|l)==(0|p))|0)}if(!s)break l;s=e[i+1820>>2]}if(d[0|s]!=39)break u;h=67108864,ne=0}if(I=0,vr(A,i+992|0,0,M),s=e[i+1820>>2],(0|(l=d[0|s]))!=32)break c;M=0,p=0;break r}if(ne=0,s=tr(A,s,i+992|0,1&(z|=(0|M)>0))+e[i+1820>>2]|0,e[i+1820>>2]=s,d[i+992|0]==21)break o;for(M=M+1|0,c=0;c=(l=c)+1|0,d[s+l|0]!=32;);h=67108864;continue}break}if(!d[i+992|0]|(0|l)==39||(f[s-1|0]=32,s=e[i+1820>>2]),g=LA(A,s,i+1616|0,200,i+784|0,P,i+1832|0),(0|(s=d[i+1616|0]))==21){yA(189088,i+1616|0),l=0;break e}if(!(s|d[i+784|0])&&(_A(i+1408|0,e[i+1820>>2]),(0|X)==1&&(Bt(e[i+1408>>2])||Sn(e[i+1408>>2])))){Ya(A,e[i+1820>>2],i+1616|0,Y)&&yA(189088,i+1616|0),l=0;break e}e[i+172>>2]=f[e[i+1820>>2]-1|0];c:if(1024&g)for(me=i+176|1,Y=0,l=1,z=0,M=0;;){if((te=131072&g)|!(1&l)||(f[i+1408|0]=0,!(s=LA(A,e[i+1820>>2],i+1408|0,200,i+576|0,805306368|P,i+1832|0)))){2048&g&&(e[A+8184>>2]=1),f[e[i+1820>>2]-1|0]=e[i+172>>2];u:{l:{i:{p:if(te){if(f[i+176|0]=0,l=e[i+1820>>2],s=1,p=63&g){if(V=1&g,M=p-1|0,c=0,(0|p)!=1)for(ye=p-V|0,p=0;I=l,e[i+1820>>2]=l+1,f[0|(ke=(i+176|0)+s|0)]=(0|c)!=(0|M)?d[0|l]:0,l=l+2|0,e[i+1820>>2]=l,f[ke+1|0]=(0|M)!=(1|c)?d[I+1|0]:0,c=c+2|0,s=s+2|0,(0|ye)!=(0|(p=p+2|0)););V&&(p=l+1|0,e[i+1820>>2]=p,f[(i+176|0)+s|0]=(0|c)!=(0|M)?d[0|l]:0,s=s+1|0,l=p)}f[(i+176|0)+s|0]=0}else{if(l=e[i+1820>>2],!(p=15&g))break i;if(s=0,c=p,I=3&g)for(;l=l+1|0,e[i+1820>>2]=l,(192&d[0|l])==128||(c=c-1|0,(0|I)!=(0|(s=s+1|0))););if(p>>>0<4)break p;for(;;)if(l=l+1|0,e[i+1820>>2]=l,(192&d[0|l])!=128){for(;l=l+1|0,e[i+1820>>2]=l,(192&d[0|l])==128;);for(;l=l+1|0,e[i+1820>>2]=l,(192&d[0|l])==128;);for(;l=l+1|0,e[i+1820>>2]=l,(192&d[0|l])==128;);if(s=(0|c)>4,c=c-4|0,!s)break}}if(s=l-1|0,e[i+172>>2]=f[0|s],f[0|s]=32,s=P|=8388608,!te)break l;if(Qt(i+576|0,i+784|0,12),e[i+1852>>2]=me,s=yA(i+1200|0,l=i+1616|0),gA(A,i+1852|0,l,i+1832|0,0,r)&&yA(s,i+1616|0),!(32&d[i+1833|0]))break u;f[0|s]=0,Ya(A,e[i+1852>>2],s,1);break u}s=l-1|0,e[i+172>>2]=f[0|s],f[0|s]=32,s=8388608|P}P=s,Ur(i+1200|0,i+784|0)}if(f[i+784|0]=0,p=1,s=gA(A,i+1820|0,i+1616|0,i+1824|0,1024,r),e[i+1832>>2]||(l=e[i+1828>>2],e[i+1832>>2]=e[i+1824>>2],e[i+1836>>2]=l,p=z),s){I=0,M=g;break a}if(I=LA(A,e[i+1820>>2],i+1616|0,200,i+784|0,8404992&P,i+1832|0),l=1,M=g,z=p,d[i+1616|0]==21){f[e[i+1820>>2]-1|0]=e[i+172>>2],yA(189088,i+1616|0),l=0;break e}}else l=i+416|0,_t(A,e[i+1820>>2],s,l),I=LA(A,e[i+1820>>2],i+1616|0,200,i+784|0,268435456|P,i+1832|0),rt(e[i+1820>>2],l,CA(l)),1024&I||(yA(i+1616|0,i+1408|0),l=yA(i+784|0,i+576|0),8&d[188788]&&(os(p=l,l=i+576|0),g=e[47195],e[i+48>>2]=l,Kt(g,85205,i+48|0)),I=s),l=0;if(s=(c=1024&I)>>>10|0,Y>>>0>48)break c;if(Y=Y+1|0,g=I,!c)break}else I=g,M=0,z=0,s=0;if(s|!I)break n;for(g=yA(i+1408|0,i+1616|0),c=_t(A,e[i+1820>>2],I,i+416|0),p=z,l=I;;){c:{if(f[i+1616|0]=0,d[i+1200|0]){if(f[e[i+1820>>2]-1|0]=e[i+172>>2],s=gA(A,i+1840|0,i+1616|0,i+1824|0,c,r),f[e[i+1820>>2]-1|0]=32,d[i+1616|0]==21){A=i+416|0,rt(e[i+1820>>2],A,CA(A)),yA(189088,i+1616|0),l=0;break e}if(e[i+1832>>2]||(z=e[i+1828>>2],e[i+1832>>2]=e[i+1824>>2],e[i+1836>>2]=z),s){f[i+1200|0]=0;break c}p=e[i+1824>>2]?1:p}if(s=gA(A,i+1820|0,i+1616|0,i+1824|0,c,r),d[i+1616|0]==21){A=i+416|0,rt(e[i+1820>>2],A,CA(A)),yA(189088,i+1616|0),l=0;break e}if(e[i+1832>>2]||(z=e[i+1828>>2],e[i+1832>>2]=e[i+1824>>2],e[i+1836>>2]=z),!s)if(16384&l)yA(i+1616|0,g);else{P|=c<<11&8192|l<<9&134217728;u:if(524288&l){if(z=yA(i+576|0,s=i+784|0),l=LA(A,e[i+1820>>2],i+1616|0,200,s,P,i+1832|0),Ur(s,z),s=0,!l){l=0;break u}if(1024&l)break u;s=1,c=_t(A,e[i+1820>>2],l,0)}else l=0,LA(A,e[i+1820>>2],i+1616|0,200,0,P,i+1832|0),s=0;if(d[i+1616|0]==21){yA(189088,i+1616|0),A=i+416|0,rt(e[i+1820>>2],A,CA(A)),f[e[i+1820>>2]-1|0]=e[i+172>>2],l=0;break e}if(s)continue}}break}65536&I||(Bn(A,i+1616|0,200,i+784|0),f[i+784|0]=0),s=i+416|0,rt(e[i+1820>>2],s,CA(s));break a}yA(189088,A=i+992|0),l=!Hr(1|A,84744,3)<<12;break e}I=0,p=z}f[e[i+1820>>2]-1|0]=e[i+172>>2]}}if(s=e[i+164>>2],e[i+1852>>2]=8026656,e[i+1848>>2]=8022304,e[i+1844>>2]=7566112,4&P){r:{if((l=255&s)&&((0|l)==102||(Pe=Ke,wo(s<<24>>24))))break r;Pe=lA}LA(A,Pe,189088,200,0,0,0)}for(s=0,l=i+1200|0,z=d[i+784|0];;){r:{a:{n:switch(0|(g=d[0|l])){case 0:break r;case 6:case 7:break n;default:break a}s=g}l=l+1|0;continue}break}r:if(s|p){if(e[A+32>>2]|65536&M){for(c=0,Lt(A,i+1616|0,i+1832|0,3,0),l=i+1200|0;;){a:switch(d[0|l]){case 6:c&&(f[0|l]=5),c=1;default:l=l+1|0;continue;case 0:break a}break}e[i+24>>2]=i+1616,e[i+20>>2]=i+1200,e[i+16>>2]=i+992,Os(189088,200,85233,i+16|0),f[189287]=0,Lt(A,189088,i+1832|0,-1,0);break r}e[i+8>>2]=i+1616,e[i+4>>2]=i+1200,e[i>>2]=i+992,Os(189088,200,85233,i),f[189287]=0,Lt(A,189088,i+1832|0,-1,0)}else Lt(A,s=i+1616|0,i+1832|0,-1,!!(0|z)<<1),e[i+40>>2]=s,e[i+36>>2]=i+1200,e[i+32>>2]=i+992,Os(189088,200,85233,i+32|0),f[189287]=0;d[i+784|0]&&(s=CA(189088),f[983+(i-s|0)|0]=0,yA(s+189088|0,i+784|0)),16&(s=P|ne)&&(e[i+1832>>2]=-268435457&e[i+1832>>2]);r:if(!(128&s)|!(16&d[A+14|0]))if(3072&s){if(Vs(A,6),!(2048&s))break r;e[i+1832>>2]=268435456|e[i+1832>>2]}else 16&d[O(e[33264],12)+r|0]&&(1536&(r=e[i+1832>>2])?Vs(A,4):2048&r&&Vs(A,3));else Vs(A,3);8192&I&&(e[A+8192>>2]=2,e[A+8184>>2]=2);r:{if(8&(r=e[i+1836>>2]))e[A+8184>>2]=0,e[A+8188>>2]=3,s=A+8196|0;else if(1&r)e[A+8192>>2]=0,e[A+8184>>2]=2,s=A+8196|0;else if(2&r)e[A+8192>>2]=2,e[A+8184>>2]=0,e[A+8188>>2]=0,s=A+8196|0;else{if(!(4&r))break r;e[A+8184>>2]=0,e[A+8192>>2]=0,e[A+8196>>2]=2,s=A+8188|0}e[s>>2]=0}!d[e[i+1820>>2]]|256&r||((0|(r=e[A+8184>>2]))>0&&(e[A+8184>>2]=r-1),(0|(r=e[A+8192>>2]))>0&&(e[A+8192>>2]=r-1),(0|(r=e[A+8196>>2]))>0&&(e[A+8196>>2]=r-1),(0|(r=e[A+8188>>2]))<=0||(e[A+8188>>2]=r-1)),(0|X)!=1|e[A+212>>2]!=25966||!FA(e[i+168>>2])|e[i+168>>2]==105||(e[i+1832>>2]=16777216|e[i+1832>>2]);r:if(2&d[A+68|0]&&98304&(s=e[i+1832>>2])&&!((0|(r=CA(189088)-1|0))<=0))for(l=0;;){if(A=l+1|0,d[l+189088|0]==6){r=f[0|(A=A+189088|0)];a:{if(65536&s){if((0|Z(69))==(0|r)?(X=Z(101),f[0|A]=X):X=d[0|A],c=111,(0|Z(79))==X<<24>>24)break a;break r}if((0|Z(101))==(0|r)?(X=Z(69),f[0|A]=X):X=d[0|A],c=79,(0|Z(111))!=X<<24>>24)break r}f[0|A]=Z(c);break r}if((0|r)==(0|(l=A)))break}A=e[i+1832>>2],rt(t,i+256|0,_e),l=A|h;break e}if(l=0,f[i+1616|0]=0,Ya(A,e[i+1840>>2],i+1616|0,s)){if(g=yA(189088,i+1616|0),!ke){if(s=e[i+164>>2],e[i+1408>>2]=8026656,e[i+576>>2]=8022304,e[i+416>>2]=7566112,4&P){t=i+576|1,r=i+1408|1;A:{if((l=255&s)&&((0|l)==102||(z=t,wo(s<<24>>24))))break A;z=r}LA(A,z,g,200,0,0,0)}l=128&e[i+1832>>2]}}else l=((0|X)>1)<<12}else f[189088]=0;return H=i+1856|0,l}function OA(A,t,r,s,i,l,c,g){var p,I,h=0,M=0,P=0,z=0,Y=0,V=0,X=0,te=0,ne=0,me=0,ke=0,ye=0,Pe=0,_e=0,Ke=0,lA=0,mA=0,GA=0,NA=0,JA=0,pt=0,Mt=0,Dt=0,Yt=0,$t=0,fr=0,er=0,Er=0,zr=0,Kr=0,ss=0,as=0,hs=0,ra=0,sa=0,qs=0,Cn=0,Rn=0,Ja=0,jn=0,Wn=0;H=p=H-384|0,I=e[t>>2];e:{A:{r:{a:{if(i){if(d[0|i]!=7)break a;e[t>>2]=(s||1)+I;break r}e[l>>2]=0,e[t>>2]=I+1;break e}pt=86135,zr=268435456&c,Kr=134217728&c,ss=8388608&c,as=16384&c,hs=8192&c,Yt=r-1|0,$t=s-r|0,ra=2&c,sa=128&c,qs=c>>>31|0,Cn=-2147483648&c,fr=p+96|1;a:for(;;)for(e[p+268>>2]=0,X=(P=e[t>>2])+s|0,Ke=-2,Pe=-6,r=i,lA=Cn,GA=0,Mt=0,_e=1,h=0,mA=0,JA=0;;){z=P,te=h;n:{o:{c:{u:{l:{i:{p:{C:{h:{b:{m:{B:{I:{x:{L:{_:{for(;me=r,r=r+1|0,!((M=d[0|me])>>>0>9);){Y=r;U:switch(0|M){case 0:if(!(r=er)){er=0,r=86135;break L}for(;;){M=1;y:{M:switch(0|(h=d[0|r])){case 0:case 3:break _;case 5:break M;default:break y}M=2}r=(r+M|0)+(((0|h)==9)<<1)|0}case 1:if(JA=1,!qs)continue;break l;case 2:JA=2;continue;case 4:er=r;continue;case 5:r=me+2|0,h=e[A+320>>2];y:{if((P=d[me+1|0])>>>0>=32){if(!(h>>>P-32&1))break y;break l}if(!(h>>>P&1))break l}_e=_e+1|0;continue;case 9:r=me+3|0;continue;case 8:JA=1,Mt=1,lA=0;break;case 3:break x;default:break U}}Y=0,h=te,P=z;U:switch(0|JA){case 0:y:{M:{if((0|(h=d[0|X]))!=(0|M)){if((0|h)!=69)break l;if((0|M)==101)break M;break l}if(Y=0,(192&M)==128)break y}Y=21}X=X+1|0,GA=GA+1|0;break n;case 1:break I;case 2:break U;default:break b}if(e[p+264>>2]=e[p+268>>2],!d[X-1|0])break l;Pe=(0|(h=Pe+6|0))>=19?19:h,ye=X+1|0,ke=_A(p+268|0,X),ne=d[0|X],Y=20,h=te;U:{y:switch(M-11|0){case 6:r=me+2|0,h=e[p+268>>2],P=f[me+1|0];M:if(M=e[604+(((P=((0|P)<65?191:-65)+P|0)<<2)+A|0)>>2])h=!!(0|Sr(M,h));else{if((0|P)>7)break l;Q:{if((0|(M=e[A+600>>2]))>0){if((h=h-M|0)-1>>>0<255)break Q;break l}if((M=h-192|0)>>>0<=413){h=d[344+(d[M+94240|0]+A|0)|0]&1<<P;break M}if(h>>>0>255)break l}h=d[344+(A+h|0)|0]&1<<P}if(!h)break l;X=X+ke|0,Y=((0|P)==2?19:20)-Pe|0;break n;case 7:if(r=me+2|0,h=f[me+1|0],!(h=e[4788+((((0|h)<65?191:-65)+h<<2)+A|0)>>2]))break l;M:for(;;){if((0|(Y=d[0|h]))==7)break l;if((0|Y)==126){Y=20-Pe|0;break n}Q:if(ne){if(V=X,M=h,(0|Y)==(0|ne))for(;;){if((0|(Y=d[0|(M=M+1|0)]))!=(0|(h=d[0|(V=V+1|0)])))break Q;if(!h)break}}else M=h,V=X;if(Y){for(;;)if(P=d[0|M],M=h=M+1|0,!P)continue M}break}if((0|(h=V-X|0))<0)break l;X=h+X|0,Y=20-Pe|0;break n;case 14:M=e[p+268>>2];M:{Q:if(h=e[A+604>>2])h=!!(0|Sr(h,M));else{F:{if((0|(h=e[A+600>>2]))>0){if((V=M-h|0)-1>>>0<255)break F;break M}if((h=M-192|0)>>>0<=413){h=1&f[344+(d[h+94240|0]+A|0)|0];break Q}if(V=M,M>>>0>255)break o}h=1&f[344+(A+V|0)|0]}if(h)break l;M=e[p+268>>2]}if(!Kr)break o;if((0|M)==32)break l;break o;case 4:if((h=e[p+268>>2])-48>>>0<10|h-2406>>>0<10)break o;if(!d[A+170|0])break l;Y=20-Pe|0;break n;case 5:if(ci(e[p+268>>2]))break l;break c;case 0:if(e[p+268>>2]==e[p+264>>2])break c;break l;case 17:r=me+2|0,h=32768,Y=0;M:{Q:switch((M=d[me+1|0])-1|0){case 0:break b;case 1:break Q;default:break M}if(Y=1,h=te,!ss)break b;break l}if((0|(h=240&M))==16){if(Y=23,h=te,g>>>(15&M)&16384)break b;break l}if((0|M)!=3&(0|h)!=32||(rt(h=p+96|0,Yt,P=1+(e[t>>2]+(GA+$t|0)|0)|0),f[0|(h=h+P|0)]=32,f[h+1|0]=0,e[33265]=0,e[33266]=0,e[p+16>>2]=fr,gA(A,p+16|0,p+272|0,133060,0,0),Y=23,!((0|M)!=3|(0|(V=e[33265]))>=0|16384&e[33266])))break n;if(h=te,P=z,V>>>(15&M)&16384)break b;break l;case 34:M:{if(h=ne-32|0){if((0|h)==13)break M;break l}if(!as)break l}V=22-Pe|0;break u;case 10:if(h=1,d[0|r]==21)break U;break i;case 18:if((0|(V=e[p+268>>2]))!=32)for(M=X+ke|0;;){M:{Q:if(h=e[A+632>>2])h=!!(0|Sr(h,V));else{F:{if((0|(h=e[A+600>>2]))>0){if((V=V-h|0)-1>>>0<255)break F;break M}if((h=V-192|0)>>>0<=413){h=128&d[344+(d[h+94240|0]+A|0)|0];break Q}if(V>>>0>255)break M}h=128&d[344+(A+V|0)|0]}if(h)break l}if(M=_A(p+268|0,M)+M|0,(0|(V=e[p+268>>2]))==32)break}V=19-Pe|0;break u;case 49:break p;case 2:break C;case 3:break h;case 1:break b;case 13:break m;case 12:break y;default:break B}_A(p+272|0,r),ke=-1;y:if((0|(h=e[p+272>>2]))!=(0|(M=e[p+268>>2])))if(-33&M)for(;;){ne=X,ke=-1;M:if((0|h)==18&&(h=f[me+2|0],Y=e[4788+((((0|h)<65?191:-65)+h<<2)+A|0)>>2])){for(;;){if((0|(P=d[0|Y]))==7)break M;if((0|P)==126){ke=0;break M}Q:if((0|(X=d[0|ne]))==(0|P)){if(h=ne,M=Y,X)for(;;){if((0|(P=d[0|(M=M+1|0)]))!=(0|(Y=d[0|(h=h+1|0)])))break Q;if(!Y)break}}else M=Y,h=ne;if(!P){h=h-ne|0;break}for(;h=d[0|M],M=Y=M+1|0,h;);}ke=h}if(P=_A(p+268|0,ne),(0|(h=e[p+272>>2]))==(0|(M=e[p+268>>2]))|!(-33&M))break y;if(X=P+ne|0,(0|ke)!=-1)break}else ne=X;else ne=X;X=(0|h)==(0|M)||(0|ke)>=0?ne:ye,Y=0;break n}for(;h=h+1|0,d[0|(r=r+1|0)]==21;);break i}r=r+1|0}Y=me}if(!(d[z-1|0]!=32&Mt|lA||((0|(M=Mt?_e+4|0:_e))>=(0|Dt)&&(Rn=mA,Ja=te,Dt=M,jn=GA,pt=r),!(8&e[47197])|zr|(0|M)<=0))){for(os(r,me=p+272|0),ye=e[47195],P=p+16|0,r=0,ne=0,lA=0,mA=0,H=X=H-496|0,f[X+80|0]=0,(0|s)>0?(rt(X+288|0,I,s),te=s):te=0,f[te+(h=X+288|0)|0]=0,z=CA(h)+h|0,ke=(0|c)<0;;){if(V=d[0|i],te=i,i=i+1|0,V>>>0>9)for(;;){x:{L:{_:{U:{y:{M:switch((h=255&V)-14|0){case 4:break _;case 3:break U;case 0:break y;case 14:break M;default:break L}if(te=te+2|0,V=32,!ke&(0|(i=d[0|i]))==1)break x;f[0|z]=36,yA(h=z+1|0,i=G(128960,i)),z=CA(i)+h|0;break x}h=d[te+2|0],V=d[0|i],e[X+36>>2]=127&d[te+3|0],e[X+32>>2]=4&h?80:83,iA(X+48|0,85131,X+32|0),1&h&&(i=CA(i=X+48|0)+i|0,f[0|i]=101,f[i+1|0]=0),2&(i=127&h)&&(h=CA(h=X+48|0)+h|0,f[0|h]=105,f[h+1|0]=0),4&i&&(h=CA(h=X+48|0)+h|0,f[0|h]=112,f[h+1|0]=0),8&i&&(h=CA(h=X+48|0)+h|0,f[0|h]=118,f[h+1|0]=0),16&i&&(h=CA(h=X+48|0)+h|0,f[0|h]=100,f[h+1|0]=0),32&i&&(h=CA(h=X+48|0)+h|0,f[0|h]=102,f[h+1|0]=0),i>>>0>=64&&(i=CA(i=X+48|0)+i|0,f[0|i]=113,f[i+1|0]=0),1&V&&(i=CA(i=X+48|0)+i|0,f[0|i]=116,f[i+1|0]=0),te=te+4|0,z=yA(z,i=X+48|0)+CA(i)|0,V=32;break x}te=te+2|0,V=d[f[0|i]+93871|0];break x}i=f[0|i],f[0|z]=76,h=((i=i+((0|i)<65?191:-65)|0)>>>0)/10|0,f[z+1|0]=h+48,V=i-O(h,10)|48,(0|mA)==1&&(f[0|z]=V,V=76),te=te+2|0,z=z+2|0;break x}V=h>>>0<=31?d[h+93904|0]:(0|h)==32?95:V,te=i}if(f[0|z]=V,i=te+1|0,z=z+1|0,!((V=d[0|te])>>>0>=10))break}h=1;x:switch(0|V){case 1:h=r;case 8:f[0|z]=0,z=X+80|0,r=h,mA=1;continue;case 2:f[0|z]=0,te=CA(h=X+288|0)+h|0,z=d[84899]|d[84900]<<8,f[0|te]=z,f[te+1|0]=z>>>8,mA=2,f[te+2|0]=d[84901],z=CA(h)+h|0;continue;case 5:ne=f[0|i],i=te+2|0;continue;case 9:lA=(d[0|i]+O(d[te+2|0],255)|0)-256|0,i=te+3|0;continue;case 0:case 3:break x;default:continue}break}if(f[0|z]=0,z=P,(0|lA)>0&&(e[X+16>>2]=lA,iA(P,85581,X+16|0),z=P+7|0),(0|ne)>0&&(e[X>>2]=ne,iA(z,85694,X),z=CA(z)+z|0),1&((0|(i=CA(X+80|0)))>0|r)){1&r&&(f[0|z]=95,z=z+1|0);x:if(!((0|(te=i-1|0))<0|z>>>0>=P>>>0))for(;;){if(f[0|z]=d[(X+80|0)+te|0],z=z+1|0,(0|te)<=0)break x;if(te=te-1|0,!(z>>>0<P>>>0))break}f[0|z]=41,f[z+1|0]=32,z=z+2|0}f[0|z]=0,f[(r=X+288|0)+((P+3|0)-z|0)|0]=0,Ur(z,r),(0|(r=CA(P)))<=7&&(Ve(r+P|0,32,8-r|0),r=8),f[r+P|0]=0,H=X+496|0,e[p+4>>2]=P,e[p>>2]=(0|s)>1?M+35|0:M,e[p+8>>2]=me,Kt(ye,89088,p)}r=Y;break l}if(!d[0|z])break l;Ke=(0|(h=Ke+2|0))>=19?19:h,_A(p+264|0,z),h=sr(p+268|0,P=z-1|0),ne=d[0|P],ye=P;I:{x:{L:{_:{U:{y:switch(M-10|0){case 13:if(h=(0|(NA=d[0|r]))==(0|(M=d[0|z])),ke=-1,(0|M)==32|(0|M)==(0|NA))break _;if(M)break U;break L;case 7:r=me+2|0,Y=e[p+268>>2],z=f[me+1|0];M:if(M=e[604+(((z=((0|z)<65?191:-65)+z|0)<<2)+A|0)>>2])M=!!(0|Sr(M,Y));else{if((0|z)>7)break l;Q:{if((0|(M=e[A+600>>2]))>0){if((Y=Y-M|0)-1>>>0<255)break Q;break l}if((M=Y-192|0)>>>0<=413){M=d[344+(d[M+94240|0]+A|0)|0]&1<<z;break M}if(Y>>>0>255)break l}M=d[344+(A+Y|0)|0]&1<<z}if(!M)break l;P=1+(P-h|0)|0,Y=((0|z)==2?19:20)-Ke|0;break I;case 8:if(r=me+2|0,h=f[me+1|0],!(h=e[4788+((((0|h)<65?191:-65)+h<<2)+A|0)>>2]))break l;M:{for(;;){if((0|(ne=d[0|h]))==7)break l;if((0|ne)==126){ke=0;break M}M=P;Q:{F:{if((0|(me=(ke=CA(h))-1|0))>0)for(M=z-ke|0,Y=0,V=P;;){if(!d[0|(V=V-1|0)])break F;if((0|me)==(0|(Y=Y+1|0)))break}Ae:if(!((0|(Y=d[0|M]))!=(0|ne)|!Y))for(;;){if((0|(ne=d[0|(h=h+1|0)]))!=(0|(Y=d[0|(M=M+1|0)])))break Ae;if(!Y)break}if(!ne)break Q}for(M=h;Y=d[0|M],M=h=M+1|0,Y;);continue}break}if((0|ke)<0)break l}Y=20-Pe|0,P=1+(P-ke|0)|0;break I;case 15:M=e[p+268>>2];M:{Q:if(z=e[A+604>>2])z=!!(0|Sr(z,M));else{F:{if((0|(z=e[A+600>>2]))>0){if((M=M-z|0)-1>>>0<255)break F;break M}if((z=M-192|0)>>>0<=413){z=1&f[344+(d[z+94240|0]+A|0)|0];break Q}if(M>>>0>255)break M}z=1&f[344+(A+M|0)|0]}if(z)break l}Y=20-Ke|0,P=1+(P-h|0)|0;break I;case 1:if(e[p+268>>2]!=e[p+264>>2])break l;Y=21-Ke|0,P=1+(P-h|0)|0;break I;case 5:if(!((z=e[p+268>>2])-48>>>0<10|z-2406>>>0<10))break l;Y=21-Ke|0,P=1+(P-h|0)|0;break I;case 6:if(ci(e[p+268>>2]))break l;Y=21-Pe|0,P=1+(P-h|0)|0;break I;case 18:if(r=me+2|0,!((0|(M=d[me+1|0]))==3|(240&M)==32)||(rt(h=p+96|0,Yt,P=1+(e[t>>2]+(GA+$t|0)|0)|0),f[0|(h=h+P|0)]=32,f[h+1|0]=0,e[33265]=0,e[33266]=0,e[p+16>>2]=fr,gA(A,p+16|0,p+272|0,133060,0,0),Y=23,!((0|M)!=3|(0|(V=e[33265]))>=0|16384&e[33266])))break n;if(h=te,P=z,V>>>(15&M)&16384)break b;break l;case 11:if(M=1,d[0|r]==21)for(;M=M+1|0,d[0|(r=r+1|0)]==21;);if(e[A+8208>>2]<(0|M))break l;Y=18+(M-Ke|0)|0;break I;case 0:if(Y=19,h=te,P=z,e[A+8212>>2]>0)break b;break l;case 19:if(Y=3,(0|(V=e[p+268>>2]))==32)break I;for(M=1+(P-h|0)|0;;){M:{Q:if(h=e[A+632>>2])h=!!(0|Sr(h,V));else{F:{if((0|(h=e[A+600>>2]))>0){if((V=V-h|0)-1>>>0<255)break F;break M}if((h=V-192|0)>>>0<=413){h=128&d[344+(d[h+94240|0]+A|0)|0];break Q}if(V>>>0>255)break M}h=128&d[344+(A+V|0)|0]}if(h)break l}if(M=M-sr(p+268|0,M-1|0)|0,(0|(V=e[p+268>>2]))==32)break}break I;case 16:if(Y=1,h=te,P=z,e[A+8184>>2])break b;break l;case 9:if(Y=1,h=te,P=z,ra)break b;break l;case 36:for(;;){if(Y=50,h=te,!(z=(255&ne)-32|0))break l;if((0|z)==14)break b;ne=d[0|(ye=ye-1|0)]}case 35:break y;default:break x}y:{if(h=ne-32|0){if((0|h)==13)break y;break l}if(!sa)break l}Y=22-Pe|0;break I}U:{for(;;){ke=-1,V=z,z=z-1|0;y:if((0|NA)==18&&(h=f[me+2|0],Y=e[4788+((((0|h)<65?191:-65)+h<<2)+A|0)>>2]))for(Wn=V+1|0;;){if((0|(ye=d[0|Y]))==7){ke=-1;break y}if((0|ye)==126){ke=0;break y}M=V;M:{if((0|(Er=(ke=CA(Y))-1|0))>0)for(M=Wn-ke|0,ne=0,h=V;;){if(!d[0|(h=h-1|0)])break M;if((0|Er)==(0|(ne=ne+1|0)))break}Q:if(!((0|(h=d[0|M]))!=(0|ye)|!h))for(;;){if((0|(ye=d[0|(Y=Y+1|0)]))!=(0|(h=d[0|(M=M+1|0)])))break Q;if(!h)break}if(!ye)break y}for(M=Y;h=d[0|M],M=Y=M+1|0,h;);}if(h=(0|(M=d[0|z]))==(0|NA),(0|M)==32|(0|M)==(0|NA))break U;if(!M){z=V;break L}if((0|ke)!=-1)break}z=V;break L}z=V}P=h?z:P}Y=0,P=(0|ke)<0?P:z+1|0;break I}if((0|M)!=(0|ne))break l;Y=4,(0|M)!=32&&(Y=(192&M)!=128?21-Ke|0:0)}h=te;break b}if((0|M)!=(0|ne))break l;V=(192&M)!=128?21-Pe|0:0;break u}if(Y=1,hs)break l}_e=Y+_e|0;continue}if(h=f[me+1|0],te=d[me+3|0],P=d[me+2|0],1&!(e[A+8208>>2]|4&P)&f[A+84|0])break l;r=me+4|0,V=0,te=127&te|(127&P)<<8|h<<16;break u}C:if(!(ye>>>0<=(M=e[t>>2]+s|0)>>>0)){for(;;){if(d[0|M]!=101){if(h=M>>>0<X>>>0,M=M+1|0,h)continue;break C}break}V=0,mA=M;break u}V=0;break u}Y=-20;break n}if(ne=0,(0|(M=e[p+268>>2]))!=32)for(V=X+ke|0,Y=0;;){if(!Y){i:{p:if(P=e[A+632>>2])M=!!(0|Sr(P,M));else{C:{if((0|(P=e[A+600>>2]))>0){if((M=M-P|0)-1>>>0<255)break C;break i}if((P=M-192|0)>>>0<=413){M=128&d[344+(d[P+94240|0]+A|0)|0];break p}if(M>>>0>255)break i}M=128&d[344+(A+M|0)|0]}M&&(ne=ne+1|0)}M=e[p+268>>2]}i:if(P=e[A+632>>2])Y=!!(0|Sr(P,M));else{p:{if((0|(P=e[A+600>>2]))>0){if(Y=0,(M=M-P|0)-1>>>0<255)break p;break i}if((P=M-192|0)>>>0<=413){Y=128&d[344+(d[P+94240|0]+A|0)|0];break i}if(Y=0,M>>>0>255)break i}Y=128&d[344+(A+M|0)|0]}if(V=_A(p+268|0,V)+V|0,(0|(M=e[p+268>>2]))==32)break}if(!((0|h)>(0|ne))){V=18+(h-Pe|0)|0;break u}}for(;h=d[0|r],r=i=r+1|0,h;);if(d[0|i]!=7)continue a;if(A=s+jn|0,e[t>>2]=e[t>>2]+(A||1),Dt)break A;break r}h=te,X=ye,P=z,_e=V+_e|0;continue}X=X+ke|0,Y=21-Pe|0;break n}X=X+ke|0,Y=20-Pe|0}h=te,P=z,_e=Y+_e|0}}pt=86135}e[l+12>>2]=Rn,e[l+8>>2]=Ja,e[l+4>>2]=pt,e[l>>2]=Dt}H=p+384|0}function ot(A,t){var r,s=0,i=0,l=0,c=0,g=0,p=0,I=0,h=0,M=0,P=0,z=0,Y=0,V=0,X=0,te=0,ne=0,me=0,ke=0,ye=0,Pe=0,_e=0,Ke=0,lA=0,mA=0,GA=0,NA=0,JA=0,pt=0,Mt=0,Dt=0;H=r=H-1168|0,e[r+928>>2]=0,e[r+932>>2]=0,e[r+920>>2]=0,e[r+924>>2]=0,e[r+912>>2]=0,e[r+916>>2]=0,e[r+904>>2]=0,e[r+908>>2]=0,e[r+896>>2]=0,e[r+900>>2]=0;e:{A:{if(A){if(d[0|A]|8&t)break A;break e}if(!(8&t))break e}if(Qt(r+1088|0,A,40),16&t){if((0|zs(yA(r+704|0,A)))<=0)break e;V=8&t}else(V=8&t)|d[r+1088|0]||(k[r+1088>>1]=d[85055]|d[85056]<<8,f[r+1090|0]=d[85057]),e[r+496>>2]=137584,e[r+500>>2]=47,e[r+504>>2]=47,iA(s=r+512|0,85286,r+496|0),e[r+484>>2]=r+1088,e[r+480>>2]=s,iA(s=r+704|0,85425,r+480|0),(0|zs(s))>0||(e[r+468>>2]=47,e[r+472>>2]=47,e[r+464>>2]=137584,iA(s=r+512|0,85648,r+464|0),e[r+452>>2]=r+1088,e[r+448>>2]=s,iA(r+704|0,85425,r+448|0));if(i=V?86012:85055,!(X=$r(r+704|0,85712))){if(s=0,3&t)break e;i=(0|Xs(s=r+1088|0))<0?i:s}if((Y=2&t)||(s=e[47192])&&(Io(s),e[47192]=0),me=yA(r+992|0,i),ne=yA(r+944|0,i),Y?((s=Ns(200992,43))&&(f[0|s]=0),e[r+432>>2]=A+3,iA(A=r+704|0,86030,r+432|0),Ur(200992,A)):(e[32972]=199592,Qt(200992,A,40),f[201088]=0,f[201040]=0,e[50299]=200992,e[50298]=201088,e[50297]=201040),ea(Y),X){for(ye=e[30450],Pe=r+548|0,_e=r+544|0,Ke=r+540|0,lA=r+536|0,mA=r+532|0,GA=r+528|0,NA=12|(A=r+512|0),JA=8|A,pt=4|A;nt(r+704|0,190,X);){A=r+704|0;A:{if(d[r+704|0]!=35){r:if(!((0|(A=CA(r+704|0)-1|0))<=0))for(;;){if(!((0|(i=f[0|(s=(r+704|0)+A|0)]))==32|i-9>>>0<5))break r;if(f[0|s]=0,!((0|(A=A-1|0))>0))break}if(!(A=Rs(r+704|0)))break A}f[0|A]=0}A=r+704|0;A:if(s=d[r+704|0])for(;;){if((0|(s=s<<24>>24))==32|s-9>>>0<5)break A;if(!(s=d[0|(A=A+1|0)]))break}if(f[0|A]=0,d[r+704|0])if(A=A+1|0,s=As(129744,r+704|0)){l=0,H=i=H-416|0;A:if(c=e[47192]){r:switch(s-19|0){case 16:if(e[i+32>>2]=i+412,(0|$A(A,84249,i+32|0))!=1)break A;e[c+324>>2]=e[i+412>>2];break A;case 8:Tn(A,c+320|0,27);break A;case 2:if(e[i+48>>2]=188784,$A(A,84249,i+48|0),!(A=d[188784]))break A;e[c+152>>2]=A;break A;case 11:if(d[0|A]){for(g=e[30450];;)if(s=A,A=A+1|0,!((0|(l=f[0|s]))==32|l-9>>>0<5)){for(l=Us(s),e[i+412>>2]=l,(0|l)>0&&(l>>>0<=31?e[c+104>>2]=e[c+104>>2]|1<<l:l>>>0<=63?e[c+108>>2]=e[c+108>>2]|1<<l-32:(e[i+64>>2]=l,Kt(g,84700,i- -64|0)),s=A);s=(A=s)+1|0,(l=f[0|A])-48>>>0<10|(32|l)-97>>>0<26;);if(!l)break}}8&(A=e[c+104>>2])&&(e[c+124>>2]=46,e[c+128>>2]=44),4&A&&(e[c+124>>2]=0);break A;default:if((65280&s)!=256)break A;e[i+16>>2]=24+(c+((255&s)<<2)|0),$A(A,84249,i+16|0);break A;case 1:e[i+144>>2]=c,e[i+148>>2]=c+4,$A(A,85642,i+144|0);break A;case 3:if(s=0,Ve(l=i+160|0,0,240),e[i+132>>2]=i+360,e[i+128>>2]=i+320,e[i+124>>2]=i+280,e[i+120>>2]=i+240,e[i+116>>2]=i+200,e[i+112>>2]=l,l=$A(A,85037,i+112|0),e[i+412>>2]=l,e[c+152>>2]=0,(0|l)<=0)break A;for(h=e[30450];;){a:if(Ut(g=(i+160|0)+O(s,40)|0,85301)){n:{if((0|(I=e[34454]))>0)for(z=e[34455],A=0;;){if(!Ut(g,z+O(A,68)|0))break n;if((0|I)==(0|(A=A+1|0)))break}e[i+96>>2]=g,Kt(h,85562,i+96|0),l=e[i+412>>2];break a}f[156+(s+c|0)|0]=A}if(!((0|l)>(0|(s=s+1|0))))break}break A;case 9:e[i+88>>2]=c+20,e[i+84>>2]=c+16,e[i+80>>2]=c+8,$A(A,84778,i+80|0);break A;case 10:Tn(A,c+12|0,29);break A;case 5:if((0|(h=sn(A,i+160|0)))<=0)break A;if(s=0,A=0,h>>>0>=4)for(z=-4&h,g=c+304|0;I=i+160|0,k[g+(A<<1)>>1]=e[I+(A<<2)>>2],k[g+((p=1|A)<<1)>>1]=e[I+(p<<2)>>2],k[g+((p=2|A)<<1)>>1]=e[I+(p<<2)>>2],k[g+((p=3|A)<<1)>>1]=e[I+(p<<2)>>2],A=A+4|0,(0|z)!=(0|(l=l+4|0)););if(!(l=3&h))break A;for(;k[304+(c+(A<<1)|0)>>1]=e[(i+160|0)+(A<<2)>>2],A=A+1|0,(0|l)!=(0|(s=s+1|0)););break A;case 6:if((0|(h=sn(A,i+160|0)))<=0)break A;if(s=0,A=0,h>>>0>=4)for(z=-4&h,g=c+296|0;I=i+160|0,f[A+g|0]=e[I+(A<<2)>>2],f[(p=1|A)+g|0]=e[I+(p<<2)>>2],f[(p=2|A)+g|0]=e[I+(p<<2)>>2],f[(p=3|A)+g|0]=e[I+(p<<2)>>2],A=A+4|0,(0|z)!=(0|(l=l+4|0)););if(!(l=3&h))break A;for(;f[296+(A+c|0)|0]=e[(i+160|0)+(A<<2)>>2],A=A+1|0,(0|l)!=(0|(s=s+1|0)););break A;case 7:if((0|(h=sn(A,i+160|0)))<=0)break A;if(s=0,A=0,h>>>0>=4)for(z=-4&h,g=c+304|0;p=I=g+(A<<1)|0,M=y[I>>1],I=i+160|0,k[p>>1]=M+y[I+(A<<2)>>1],k[(M=g+((p=1|A)<<1)|0)>>1]=y[M>>1]+y[I+(p<<2)>>1],k[(M=g+((p=2|A)<<1)|0)>>1]=y[M>>1]+y[I+(p<<2)>>1],k[(M=g+((p=3|A)<<1)|0)>>1]=y[M>>1]+y[I+(p<<2)>>1],A=A+4|0,(0|z)!=(0|(l=l+4|0)););if(!(l=3&h))break A;for(;k[(g=c+(A<<1)|0)+304>>1]=y[g+304>>1]+y[(i+160|0)+(A<<2)>>1],A=A+1|0,(0|l)!=(0|(s=s+1|0)););break A;case 4:f[c+169|0]=1;break A;case 0:break r}f[c+208|0]=1}else e[i>>2]=G(129568,s),Kt(e[30450],89101,i);H=i+416|0}else{A:switch(As(131904,r+704|0)-1|0){case 1:if(Y||(f[r+1040|0]=0,e[r+512>>2]=5,e[r+32>>2]=r+1040,e[r+36>>2]=r+512,$A(A,86237,r+32|0),e[r+1040>>2]==1769103734&e[r+1044>>2]==7630433))continue;if((A=CA(r+1040|0)+2|0)>>>0<99-te>>>0&&(f[0|(s=te+201088|0)]=e[r+512>>2],yA(s+1|0,r+1040|0),te=A+te|0),!Mt){if(A=0,(s=g=r+1040|0)||(s=e[57150])){if(A=86875,e[(i=H-32|0)+24>>2]=0,e[i+28>>2]=0,e[i+16>>2]=0,e[i+20>>2]=0,e[i+8>>2]=0,e[i+12>>2]=0,e[i>>2]=0,e[i+4>>2]=0,c=0,l=d[86875])if(d[86876]){for(;e[(c=i+(l>>>3&28)|0)>>2]=e[c>>2]|1<<l,l=d[A+1|0],A=A+1|0,l;);r:if(l=d[0|(A=s)])for(;;){if(!(e[i+(l>>>3&28)>>2]>>>l&1))break r;if(l=d[A+1|0],A=A+1|0,!l)break}c=A-s|0}else{for(A=s;i=A,A=A+1|0,d[0|i]==(0|l););c=i-s|0}if(d[0|(A=c+s|0)]){s=86875,H=l=H-32|0,i=f[86875];r:if(d[86876]&&i){if(Ve(l,0,32),i=d[86875])for(;e[(c=l+(i>>>3&28)|0)>>2]=e[c>>2]|1<<i,i=d[s+1|0],s=s+1|0,i;);if(s=A,i=d[0|A])for(;;){if(e[l+(i>>>3&28)>>2]>>>i&1)break r;if(i=d[s+1|0],s=s+1|0,!i)break}}else s=la(A,i);H=l+32|0,d[0|(s=(s-A|0)+A|0)]?(e[57150]=s+1,f[0|s]=0):e[57150]=0}else e[57150]=0,A=0}s=yA(me,A),yA(ne,A),Xs(yA(r+896|0,A)),e[47192]=EA(s),Qt(e[32972]+40|0,g,20)}Mt=1;continue;case 0:if(Y)continue;for(;s=A,A=A+1|0,(0|(i=f[0|s]))==32|i-9>>>0<5;);Qt(201040,s,40);continue;case 2:e[r+1152>>2]=0,s=r+512|0,e[r+48>>2]=s,e[r+52>>2]=r+1152,$A(A,86237,r+48|0),f[201200]=As(132112,s),f[201201]=e[r+1152>>2];continue;case 4:e[r+64>>2]=ne,$A(A,86939,r- -64|0);continue;case 3:e[r+80>>2]=r+896,$A(A,86939,r+80|0);continue;case 8:if(e[r+1152>>2]=100,e[r+1164>>2]=100,e[r+1148>>2]=100,e[r+112>>2]=r+1144,e[r+1144>>2]=0,e[r+96>>2]=r+512,e[r+100>>2]=r+1152,e[r+104>>2]=r+1164,e[r+108>>2]=r+1148,(0|$A(A,91156,r+96|0))<2||(A=e[r+512>>2])>>>0>8||((0|(s=e[r+1152>>2]))>=0&&(i=e[32972]+(A<<1)|0,s=$(P=2.56001*+(0|s))<2147483648?~~P:-2147483648,k[i+236>>1]=s,k[i+164>>1]=s),(0|(s=e[r+1164>>2]))>=0&&(i=e[32972]+(A<<1)|0,s=$(P=2.56001*+(0|s))<2147483648?~~P:-2147483648,k[i+254>>1]=s,k[i+182>>1]=s),(0|(i=e[r+1148>>2]))<0?s=e[32972]:(g=(s=e[32972])+(A<<1)|0,i=$(P=2.56001*+(0|i))<2147483648?~~P:-2147483648,k[g+200>>1]=i),k[218+((A<<1)+s|0)>>1]=e[r+1144>>2],A))continue;k[s+200>>1]=(0|O(k[s+200>>1],105))/100;continue;case 9:if(e[r+132>>2]=r+696,e[r+128>>2]=r+700,(0|$A(A,87106,r+128|0))!=2)continue;if(A=e[32972],s=e[r+700>>2],e[A+64>>2]=(s<<12)-36864,e[A+68>>2]=O(e[r+696>>2]-s|0,108),$(P=256*(+(s-82|0)/82*.25+1))<2147483648){e[A+116>>2]=~~P;continue}e[A+116>>2]=-2147483648;continue;case 35:Dt||Xs(r+896|0),e[r+1164>>2]=0,f[r+1156|0]=d[91267],e[r+1152>>2]=d[91263]|d[91264]<<8|d[91265]<<16|d[91266]<<24,e[r+144>>2]=r+1164,e[r+148>>2]=r+512,e[r+152>>2]=r+1152,(0|$A(A,91302,r+144|0))<2|e[49848]>59||(A=ti(r+512|0))&&(f[O(e[49848],3)+199408|0]=A,A=ti(r+1152|0),s=e[49848],i=O(s,3)+199408|0,f[i+1|0]=A,e[49848]=s+1,f[i+2|0]=e[r+1164>>2]),Dt=1;continue;case 10:e[r+1140>>2]=0,s=e[32972],e[s+100>>2]=0,e[r+164>>2]=s+100,e[r+160>>2]=s+96,$A(A,87106,r+160|0);continue;case 11:if(e[r+176>>2]=r+1140,(0|$A(A,87268,r+176|0))!=1)continue;e[e[32972]+88>>2]=e[r+1140>>2]<<5;continue;case 12:if(e[r+192>>2]=r+1140,(0|$A(A,87268,r+192|0))!=1)continue;e[e[32972]+92>>2]=e[r+1140>>2];continue;case 13:if(e[r+208>>2]=r+1140,(0|$A(A,87268,r+208|0))!=1)continue;s=e[32972],(0|(A=e[r+1140>>2]))>=5&&(e[s+108>>2]=1,e[r+1140>>2]=4,A=4),e[s+104>>2]=A+1;continue;case 14:for(e[r+552>>2]=-1,e[r+556>>2]=-1,e[r+544>>2]=-1,e[r+548>>2]=-1,e[r+536>>2]=-1,e[r+540>>2]=-1,e[r+528>>2]=-1,e[r+532>>2]=-1,e[r+240>>2]=GA,e[r+244>>2]=mA,e[r+248>>2]=lA,e[r+252>>2]=Ke,e[r+256>>2]=_e,e[r+260>>2]=Pe,e[r+520>>2]=-1,e[r+524>>2]=-1,e[r+512>>2]=-1,e[r+516>>2]=-1,e[r+228>>2]=pt,e[r+232>>2]=JA,e[r+236>>2]=NA,e[r+224>>2]=r+512,$A(A,84222,r+224|0),z=e[32972],A=0,l=e[r+516>>2],i=0;;){if(s=i,c=l,g=A,(0|(i=e[(l=(A<<=2)+(r+512|0)|0)>>2]))==-1&&(i=8e3,e[l>>2]=8e3,g&&(e[(r+512|0)+(4|A)>>2]=e[508+(A+r|0)>>2])),l=e[(r+512|0)+(4|A)>>2],!((0|s)>=(0|(i=(0|i)/8|0))||(0|(I=i-s|0))<=0||(h=s+1|0,A=s,1&I&&(f[344+(s+z|0)|0]=(0|c)>=255?255:c,A=h),(0|i)==(0|h))))for(h=l-c|0;M=z+344|0,p=c+((0|O(h,A-s|0))/(0|I)|0)|0,f[M+A|0]=(0|p)>=255?255:p,p=c+((0|O(h,(ke=A+1|0)-s|0))/(0|I)|0)|0,f[M+ke|0]=(0|p)>=255?255:p,(0|i)!=(0|(A=A+2|0)););if(A=g+2|0,!(g>>>0<10))break}continue;case 15:if(e[r+272>>2]=r+1140,(0|$A(A,87268,r+272|0))!=1)continue;e[e[32972]+112>>2]=(e[r+1140>>2]<<6)/100;continue;case 16:s=e[32972],e[(i=s+300|0)>>2]=0,e[i+4>>2]=0,e[(l=s+292|0)>>2]=0,e[l+4>>2]=0,e[(c=s+284|0)>>2]=0,e[c+4>>2]=0,e[(g=s+276|0)>>2]=0,e[g+4>>2]=0,e[r+316>>2]=s+304,e[r+312>>2]=i,e[r+308>>2]=s+296,e[r+304>>2]=l,e[r+300>>2]=s+288,e[r+296>>2]=c,e[r+292>>2]=s+280,e[r+288>>2]=g,s=$A(A,84553,r+288|0),A=e[32972],e[A+272>>2]=s,e[A+276>>2]=0-e[A+276>>2],e[A+284>>2]=0-e[A+284>>2],e[A+292>>2]=0-e[A+292>>2],e[A+300>>2]=0-e[A+300>>2];continue;case 17:s=e[32972],e[(i=s+336|0)>>2]=0,e[i+4>>2]=0,e[(l=s+328|0)>>2]=0,e[l+4>>2]=0,e[(c=s+320|0)>>2]=0,e[c+4>>2]=0,e[(g=s+312|0)>>2]=0,e[g+4>>2]=0,e[r+348>>2]=s+340,e[r+344>>2]=i,e[r+340>>2]=s+332,e[r+336>>2]=l,e[r+332>>2]=s+324,e[r+328>>2]=c,e[r+324>>2]=s+316,e[r+320>>2]=g,A=$A(A,84553,r+320|0),e[e[32972]+308>>2]=A;continue;case 36:s=e[32972],e[r+352>>2]=s+120,e[r+356>>2]=s+124,e[r+1140>>2]=$A(A,87106,r+352|0);continue;case 33:e[r+368>>2]=e[32972]+84,$A(A,87268,r+368|0),js(3);continue;case 31:s=e[32972],e[(i=s+156|0)>>2]=0,e[i+4>>2]=0,e[(l=s+148|0)>>2]=0,e[l+4>>2]=0,e[(c=s+140|0)>>2]=0,e[c+4>>2]=0,e[(g=s+132|0)>>2]=0,e[g+4>>2]=0,e[r+412>>2]=s+160,e[r+408>>2]=i,e[r+404>>2]=s+152,e[r+400>>2]=l,e[r+396>>2]=s+144,e[r+392>>2]=c,e[r+388>>2]=s+136,e[r+384>>2]=g,$A(A,84553,r+384|0),A=e[32972],e[A+152>>2]=e[A+152>>2]-40;continue;case 32:e[r+416>>2]=145740,$A(A,87268,r+416|0),js(3);continue;case 6:case 7:continue;default:break A}e[r+16>>2]=r+704,Kt(ye,87359,r+16|0)}}mr(X)}A:{if((A=e[47192])|Y){if(Y)break A}else A=EA(me),e[47192]=A;r:{if(!V){if((0|(A=Xs(r+896|0)))<0&&(e[r>>2]=r+896,Kt(e[30450],87567,r),A=0),e[e[32972]+60>>2]=A,s=e[47192],e[s+292>>2]=A,fs(s,ne,4&t),d[132848])break r;Io(e[47192]),s=0;break e}e[e[32972]+60>>2]=0,e[A+292>>2]=0}f[te+201088|0]=0}s=e[32972]}return H=r+1168|0,s}function $A(A,t,r){var s,i,l,c=0,g=0,p=0,I=0,h=0,M=0,P=0,z=0,Y=0,V=0,X=0,te=0,ne=0,me=0,ke=0,ye=0,Pe=0,_e=0,Ke=0;H=l=H-16|0,e[l+12>>2]=r,H=c=H-144|0,s=Ve(c,0,144),e[s+76>>2]=-1,e[s+44>>2]=A,e[s+32>>2]=18,e[s+84>>2]=A,c=t,Pe=r,A=0,H=i=H-304|0;e:{A:{r:if(e[s+4>>2]||(on(s),e[s+4>>2])){if(!(t=d[0|c]))break e;a:{n:{o:{c:{for(;;){u:{l:if((0|(t&=255))==32|t-9>>>0<5){for(;t=c,c=c+1|0,(0|(r=d[t+1|0]))==32|r-9>>>0<5;);for(ps(s,0,0);(0|(r=e[s+4>>2]))==e[s+104>>2]?r=Ie(s):(e[s+4>>2]=r+1,r=d[0|r]),(0|r)==32|r-9>>>0<5;);c=e[s+4>>2],(0|(r=e[s+116>>2]))>0|(0|r)>=0&&(c=c-1|0,e[s+4>>2]=c),c=r=c-e[s+44>>2]|0,h=te+e[s+124>>2]|0,h=(g=r>>31)+((r=Y+e[s+120>>2]|0)>>>0<Y>>>0?h+1|0:h)|0,te=(Y=r+c|0)>>>0<r>>>0?h+1|0:h}else{i:{p:{C:{if(d[0|c]==37){if((0|(t=d[c+1|0]))==42)break C;if((0|t)!=37)break p}if(ps(s,0,0),d[0|c]!=37)(0|(t=e[s+4>>2]))==e[s+104>>2]?t=Ie(s):(e[s+4>>2]=t+1,t=d[0|t]);else{for(;(0|(t=e[s+4>>2]))==e[s+104>>2]?t=Ie(s):(e[s+4>>2]=t+1,t=d[0|t]),(0|t)==32|t-9>>>0<5;);c=c+1|0}if(d[0|c]!=(0|t)){if((0|(r=e[s+116>>2]))>0|(0|r)>=0&&(e[s+4>>2]=e[s+4>>2]-1),(0|t)>=0||(p=0,_e))break e;break r}I=(g=t=e[s+4>>2]-e[s+44>>2]|0)>>31,t=te+e[s+124>>2]|0,p=((r=Y+e[s+120>>2]|0)>>>0<Y>>>0?t+1|0:t)+I|0,te=(Y=r+g|0)>>>0<r>>>0?p+1|0:p,t=c;break l}M=0,t=c+2|0;break i}d[c+2|0]!=36|t-48>>>0>=10?(M=e[Pe>>2],Pe=Pe+4|0,t=c+1|0):(t=d[c+1|0]-48|0,e[(r=H-16|0)+12>>2]=Pe,t=(t>>>0>1?(t<<2)-4|0:0)+Pe|0,e[r+8>>2]=t+4,M=e[t>>2],t=c+3|0)}if(P=0,c=0,d[0|t]-48>>>0<10)for(;c=(d[0|t]+O(c,10)|0)-48|0,r=d[t+1|0],t=t+1|0,r-48>>>0<10;);(0|(V=d[0|t]))==109&&(z=0,P=!!(0|M),V=d[t+1|0],A=0,t=t+1|0),t=(r=t)+1|0,g=3,p=P;i:{p:switch(V-65|0){case 39:g=r+2|0,t=(r=d[r+1|0]==104)?g:t,g=r?-2:-1;break i;case 43:g=r+2|0,t=(r=d[r+1|0]==108)?g:t,g=r?3:1;break i;case 51:case 57:g=1;break i;case 11:g=2;break i;case 41:break i;case 0:case 2:case 4:case 5:case 6:case 18:case 23:case 26:case 32:case 34:case 35:case 36:case 37:case 38:case 40:case 45:case 46:case 47:case 50:case 52:case 55:break p;default:break a}g=0,t=r}p=g,ke=(g=(47&(r=d[0|t]))==3)?1:p;i:if((0|(me=g?32|r:r))!=91){p:{if((0|me)!=110){if((0|me)!=99)break p;c=(0|c)<=1?1:c;break i}On(M,ke,Y,te);break l}for(ps(s,0,0);(0|(r=e[s+4>>2]))==e[s+104>>2]?r=Ie(s):(e[s+4>>2]=r+1,r=d[0|r]),(0|r)==32|r-9>>>0<5;);r=e[s+4>>2],(0|(g=e[s+116>>2]))>0|(0|g)>=0&&(r=r-1|0,e[s+4>>2]=r),g=r=r-e[s+44>>2]|0,h=te+e[s+124>>2]|0,te=(p=r>>31)+((r=Y+e[s+120>>2]|0)>>>0<Y>>>0?h+1|0:h)|0,te=(Y=r+g|0)>>>0<r>>>0?te+1|0:te}if(X=c,ps(s,c,ne=c>>31),(0|(r=e[s+4>>2]))==e[s+104>>2]){if((0|Ie(s))<0)break n}else e[s+4>>2]=r+1;(0|(r=e[s+116>>2]))>0|(0|r)>=0&&(e[s+4>>2]=e[s+4>>2]-1),r=16;i:{p:{C:{h:{b:switch(me-88|0){default:if((r=me-65|0)>>>0>6|!(1<<r&113))break i;case 9:case 13:case 14:case 15:if(ZA(i+8|0,s,ke,0),r=e[s+4>>2]-e[s+44>>2]|0,e[s+120>>2]!=(0-r|0)|e[s+124>>2]!=(0-((r>>31)+!!(0|r)|0)|0))break C;break o;case 3:case 11:case 27:if((16|me)==115){if(Ve(i+32|0,-1,257),f[i+32|0]=0,(0|me)!=115)break p;f[i+65|0]=0,f[i+46|0]=0,k[i+42>>1]=0,k[i+44>>1]=0;break p}Ve(i+32|0,I=(0|(g=d[t+1|0]))==94,257),f[i+32|0]=0,r=I?t+2|0:t+1|0;m:{B:{I:{if((0|(t=d[(I?2:1)+t|0]))!=45){if((0|t)==93)break I;g=(0|g)!=94,t=r;break m}g=(0|g)!=94,f[i+78|0]=g;break B}g=(0|g)!=94,f[i+126|0]=g}t=r+1|0}for(;;){if((0|(r=d[0|t]))==45){if(r=45,!(!(I=d[t+1|0])|(0|I)==93)){if(p=t+1|0,I>>>0<=(t=d[t-1|0])>>>0)r=I;else for(;f[(t=t+1|0)+(i+32|0)|0]=g,(r=d[0|p])>>>0>t>>>0;);t=p}}else{if(!r)break n;if((0|r)==93)break p}f[33+(r+i|0)|0]=g,t=t+1|0}case 23:r=8;break h;case 12:case 29:r=10;break h;case 1:case 2:case 4:case 5:case 6:case 7:case 8:case 10:case 16:case 18:case 19:case 20:case 21:case 22:case 25:case 26:case 28:case 30:case 31:break i;case 0:case 24:case 32:break h;case 17:break b}r=0}I=0,h=0,g=0,p=0,V=0,H=ye=H-16|0;h:if((0|r)!=1&r>>>0<=36){for(;(0|(c=e[s+4>>2]))==e[s+104>>2]?c=Ie(s):(e[s+4>>2]=c+1,c=d[0|c]),(0|c)==32|c-9>>>0<5;);b:{m:switch(c-43|0){case 0:case 2:break m;default:break b}V=(0|c)==45?-1:0,(0|(c=e[s+4>>2]))==e[s+104>>2]?c=Ie(s):(e[s+4>>2]=c+1,c=d[0|c])}b:{m:{B:{I:{if(!(!!(0|r)&(0|r)!=16|(0|c)!=48)){if((0|(c=e[s+4>>2]))==e[s+104>>2]?c=Ie(s):(e[s+4>>2]=c+1,c=d[0|c]),(-33&c)==88){if(r=16,(0|(c=e[s+4>>2]))==e[s+104>>2]?c=Ie(s):(e[s+4>>2]=c+1,c=d[0|c]),d[c+121329|0]<16)break B;(0|(r=e[s+116>>2]))>0|(0|r)>=0&&(e[s+4>>2]=e[s+4>>2]-1),ps(s,0,0);break h}if(r)break I;r=8;break B}if(!((r=r||10)>>>0>d[c+121329|0])){(0|(r=e[s+116>>2]))>0|(0|r)>=0&&(e[s+4>>2]=e[s+4>>2]-1),ps(s,0,0),e[56798]=28;break h}}if((0|r)==10){if((g=c-48|0)>>>0<=9){for(r=0;p=(r=O(r,10)+g|0)>>>0<429496729,(0|(c=e[s+4>>2]))==e[s+104>>2]?c=Ie(s):(e[s+4>>2]=c+1,c=d[0|c]),p&(g=c-48|0)>>>0<=9;);I=r}I:if(!(g>>>0>9)){for(r=At(I,0,10,0),p=he;;){if(h=p,p=(0|(h=(I=r+g|0)>>>0<g>>>0?h+1|0:h))==429496729&I>>>0>=2576980378|h>>>0>429496729,(0|(r=e[s+4>>2]))==e[s+104>>2]?c=Ie(s):(e[s+4>>2]=r+1,c=d[0|r]),p|(g=c-48|0)>>>0>9)break I;if(r=At(I,h,10,0),!((0|(p=he))==-1&~g>>>0>=r>>>0|(0|p)!=-1))break}r=10;break m}if(r=10,g>>>0<=9)break m;break b}}if(r-1&r){if((p=d[c+121329|0])>>>0<r>>>0){for(;I=(g=O(r,g)+p|0)>>>0<119304647,(0|(c=e[s+4>>2]))==e[s+104>>2]?c=Ie(s):(e[s+4>>2]=c+1,c=d[0|c]),I&(p=d[c+121329|0])>>>0<r>>>0;);I=g}if(r>>>0<=p>>>0)break m;for(;;){if(g=At(I,h,r,0),(0|(X=he))==-1&~(p&=255)>>>0<g>>>0||(h=X,h=(I=g+p|0)>>>0<p>>>0?h+1|0:h,(0|(c=e[s+4>>2]))==e[s+104>>2]?c=Ie(s):(e[s+4>>2]=c+1,c=d[0|c]),r>>>0<=(p=d[c+121329|0])>>>0))break m;if(Br(ye,r,0,0,0,I,h,0,0),e[ye+8>>2]|e[ye+12>>2])break}}else{if(X=f[84400+(O(r,23)>>>5&7)|0],(g=d[c+121329|0])>>>0<r>>>0){for(;I=(p=p<<X|g)>>>0<134217728,(0|(c=e[s+4>>2]))==e[s+104>>2]?c=Ie(s):(e[s+4>>2]=c+1,c=d[0|c]),I&(g=d[c+121329|0])>>>0<r>>>0;);I=p}if(!(r>>>0<=g>>>0||(ne=31&X,(63&X)>>>0>=32?(p=0,ne=-1>>>ne|0):ne=(p=-1>>>ne|0)|(1<<ne)-1<<32-ne,!p&I>>>0>ne>>>0)))for(;;){if(Ke=255&g,g=I,c=31&X,(63&X)>>>0>=32?(h=g<<c,c=0):(h=(1<<c)-1&g>>>32-c|h<<c,c=g<<c),I=Ke|c,(0|(c=e[s+4>>2]))==e[s+104>>2]?c=Ie(s):(e[s+4>>2]=c+1,c=d[0|c]),r>>>0<=(g=d[c+121329|0])>>>0)break m;if(!((0|p)==(0|h)&I>>>0<=ne>>>0|p>>>0>h>>>0))break}}}if(!(d[c+121329|0]>=r>>>0)){for(;(0|(c=e[s+4>>2]))==e[s+104>>2]?c=Ie(s):(e[s+4>>2]=c+1,c=d[0|c]),d[c+121329|0]<r>>>0;);e[56798]=68,V=0,I=-1,h=-1}}(0|(r=e[s+116>>2]))>0|(0|r)>=0&&(e[s+4>>2]=e[s+4>>2]-1),I=(r=I^V)-V|0,h=((c=V>>31)^h)-((r>>>0<V>>>0)+c|0)|0}else e[56798]=28;if(H=ye+16|0,r=e[s+4>>2]-e[s+44>>2]|0,e[s+120>>2]==(0-r|0)&e[s+124>>2]==(0-((r>>31)+!!(0|r)|0)|0))break o;if(!(!M|(0|me)!=112)){e[M>>2]=I;break i}On(M,ke,I,h);break i}if(!M)break i;c=e[i+16>>2],r=e[i+20>>2],g=e[i+8>>2],P=e[i+12>>2];C:switch(0|ke){case 0:H=h=H-32|0;h:if(0|(p=(I=2147483647&r)-1065418752|0)>>>0<(X=I-1082064896|0)>>>0){if(I=(33554431&r)<<7|c>>>25,X=p=0,!(!p&(0|(c&=33554431))==16777216?!(g|P):!p&c>>>0<16777216)){p=I+1073741825|0;break h}if(p=I+1073741824|0,16777216^c|g|P|X)break h;p=(1&I)+p|0}else(!c&(0|I)==2147418112?!(g|P):I>>>0<2147418112)?(p=2139095040,I>>>0>1082064895||(p=0,(I=I>>>16|0)>>>0<16145||(Gt(h+16|0,g,P,c,p=65535&r|65536,I-16129|0),ur(h,g,P,c,p,16257-I|0),c=e[h+8>>2],p=(33554431&e[h+12>>2])<<7|c>>>25,I=e[h>>2]|!!(e[h+16>>2]|e[h+24>>2]|e[h+20>>2]|e[h+28>>2]),P=e[h+4>>2],(!(g=0)&(0|(c&=33554431))==16777216?!(I|P):!g&c>>>0<16777216)?16777216^c|I|g|P||(p=(1&p)+p|0):p=p+1|0))):p=4194303&((33554431&r)<<7|c>>>25)|2143289344;H=h+32|0,e[M>>2]=-2147483648&r|p;break i;case 1:T[M>>3]=Ca(g,P,c,r);break i;case 2:break C;default:break i}e[M>>2]=g,e[M+4>>2]=P,e[M+8>>2]=c,e[M+12>>2]=r;break i}g=(ye=(0|me)!=99)?31:c+1|0;p:if((0|ke)!=1){if(P){if(c=0,!(r=tt(g)))break c;for(;;){for(A=r;;){if((0|(r=e[s+4>>2]))==e[s+104>>2]?r=Ie(s):(e[s+4>>2]=r+1,r=d[0|r]),!d[33+(r+i|0)|0]){g=0,z=A;break p}if(f[A+c|0]=r,(0|g)==(0|(c=c+1|0)))break}if(p=1,!(r=Tt(A,g=g<<1|1)))break}z=A,A=0;break a}if(c=0,M)for(;;){if((0|(A=e[s+4>>2]))==e[s+104>>2]?A=Ie(s):(e[s+4>>2]=A+1,A=d[0|A]),!d[33+(A+i|0)|0]){g=0,z=A=M;break p}f[c+M|0]=A,c=c+1|0}for(;(0|(A=e[s+4>>2]))==e[s+104>>2]?A=Ie(s):(e[s+4>>2]=A+1,A=d[0|A]),d[33+(A+i|0)|0];);A=0,z=0,g=0}else{if(r=M,P&&!(r=tt(g<<2)))break c;for(e[i+296>>2]=0,e[i+300>>2]=0,c=0;;){A=r;C:{for(;;){if((0|(r=e[s+4>>2]))==e[s+104>>2]?r=Ie(s):(e[s+4>>2]=r+1,r=d[0|r]),!d[33+(r+i|0)|0])break C;f[i+27|0]=r,I=i+28|0,r=e[(p=(r=i+296|0)||228604)>>2];h:{b:{m:{B:{if(!(z=i+27|0)){if(r)break B;r=0;break h}if(!r){if((0|(h=(r=d[0|z])<<24>>24))>=0){I&&(e[I>>2]=r),r=!!(0|h);break h}if(!e[e[56841]>>2]){if(r=1,!I)break m;e[I>>2]=57343&h,r=1;break h}if((r=r-194|0)>>>0>50)break B;r=e[124752+(r<<2)>>2];break b}if(V=1,!(((ke=(h=d[0|z])>>>3|0)-16|(r>>26)+ke)>>>0>7))for(;;){if(V=V-1|0,(0|(r=h-128|r<<6))>=0){e[p>>2]=0,I&&(e[I>>2]=r),r=1-V|0;break h}if(!V)break b;if((192&(h=d[0|(z=z+1|0)]))!=128)break}}e[p>>2]=0,e[56798]=25,r=-1}break h}e[p>>2]=r,r=-2}if((0|r)!=-2){if(z=0,(0|r)==-1)break n;if(A&&(e[(c<<2)+A>>2]=e[i+28>>2],c=c+1|0),!(!P|(0|c)!=(0|g)))break}}if(p=1,r=Tt(A,(g=g<<1|1)<<2))continue;break a}break}if(z=0,g=A,i+296|0&&e[i+296>>2])break n}if(r=e[s+4>>2],(0|(I=e[s+116>>2]))>0|(0|I)>=0&&(r=r-1|0,e[s+4>>2]=r),r=(I=r-e[s+44>>2]|0)+e[s+120>>2]|0,h=e[s+124>>2]+(I>>31)|0,!((h=r>>>0<I>>>0?h+1|0:h)|r)|!(ye|(0|r)==(0|X)&(0|h)==(0|ne)))break u;P&&(e[M>>2]=A),(0|me)!=99&&(g&&(e[(c<<2)+g>>2]=0),z?f[c+z|0]=0:z=0),A=g}c=r=e[s+4>>2]-e[s+44>>2]|0,p=te+e[s+124>>2]|0,te=(g=r>>31)+((r=Y+e[s+120>>2]|0)>>>0<Y>>>0?p+1|0:p)|0,te=(Y=r+c|0)>>>0<r>>>0?te+1|0:te,_e=!!(0|M)+_e|0}if(c=t+1|0,t=d[t+1|0])continue;break e}break}A=g;break o}p=1,z=0,A=0;break a}p=P;break A}p=P}if(_e)break A}_e=-1}p&&(zA(z),zA(A))}return H=i+304|0,H=s+144|0,H=l+16|0,_e}function tt(A){var t,r=0,s=0,i=0,l=0,c=0,g=0,p=0,I=0,h=0,M=0;H=t=H-16|0;e:{A:{r:{a:{n:{o:{c:{u:{l:{if((A|=0)>>>0<=244){if(3&(r=(g=e[57152])>>>(s=(p=A>>>0<11?16:A+11&-8)>>>3|0)|0)){r=(A=(s=s+(1&~r)|0)<<3)+228648|0,i=e[A+228656>>2],(0|r)!=(0|(A=e[i+8>>2]))?(e[A+12>>2]=r,e[r+8>>2]=A):e[57152]=ts(-2,s)&g,A=i+8|0,r=s<<3,e[i+4>>2]=3|r,e[(r=r+i|0)+4>>2]=1|e[r+4>>2];break e}if((M=e[57154])>>>0>=p>>>0)break l;if(r){r=(A=(i=gi(0-(A=(0-(A=2<<s)|A)&r<<s)&A))<<3)+228648|0,l=e[A+228656>>2],(0|r)!=(0|(A=e[l+8>>2]))?(e[A+12>>2]=r,e[r+8>>2]=A):(g=ts(-2,i)&g,e[57152]=g),e[l+4>>2]=3|p,i=(A=i<<3)-p|0,e[(s=l+p|0)+4>>2]=1|i,e[A+l>>2]=i,M&&(r=228648+(-8&M)|0,c=e[57157],(A=1<<(M>>>3))&g?A=e[r+8>>2]:(e[57152]=A|g,A=r),e[r+8>>2]=c,e[A+12>>2]=c,e[c+12>>2]=r,e[c+8>>2]=A),A=l+8|0,e[57157]=s,e[57154]=i;break e}if(!(h=e[57153]))break l;for(s=e[228912+(gi(0-h&h)<<2)>>2],c=(-8&e[s+4>>2])-p|0,r=s;(A=e[r+16>>2])||(A=e[r+20>>2]);)c=(i=(r=(-8&e[A+4>>2])-p|0)>>>0<c>>>0)?r:c,s=i?A:s,r=A;if(I=e[s+24>>2],(0|(i=e[s+12>>2]))!=(0|s)){A=e[s+8>>2],e[A+12>>2]=i,e[i+8>>2]=A;break A}if(!(A=e[(r=s+20|0)>>2])){if(!(A=e[s+16>>2]))break u;r=s+16|0}for(;l=r,i=A,(A=e[(r=A+20|0)>>2])||(r=i+16|0,A=e[i+16>>2]););e[l>>2]=0;break A}if(p=-1,!(A>>>0>4294967231)&&(p=-8&(A=A+11|0),h=e[57153])){c=0-p|0,g=0,p>>>0<256||(g=31,p>>>0>16777215||(g=62+((p>>>38-(A=be(A>>>8|0))&1)-(A<<1)|0)|0));i:{p:{if(r=e[228912+(g<<2)>>2])for(A=0,s=p<<((0|g)!=31?25-(g>>>1|0):0);;){if(!((l=(-8&e[r+4>>2])-p|0)>>>0>=c>>>0||(i=r,c=l,l))){c=0,A=r;break p}if(l=e[r+20>>2],r=e[16+((s>>>29&4)+r|0)>>2],A=l?(0|l)==(0|r)?A:l:A,s<<=1,!r)break}else A=0;if(!(A|i)){if(i=0,!(A=(0-(A=2<<g)|A)&h))break l;A=e[228912+(gi(A&0-A)<<2)>>2]}if(!A)break i}for(;c=(s=(r=(-8&e[A+4>>2])-p|0)>>>0<c>>>0)?r:c,i=s?A:i,A=(r=e[A+16>>2])||e[A+20>>2];);}if(!(!i|e[57154]-p>>>0<=c>>>0)){if(g=e[i+24>>2],(0|i)!=(0|(s=e[i+12>>2]))){A=e[i+8>>2],e[A+12>>2]=s,e[s+8>>2]=A;break r}if(!(A=e[(r=i+20|0)>>2])){if(!(A=e[i+16>>2]))break c;r=i+16|0}for(;l=r,s=A,(A=e[(r=A+20|0)>>2])||(r=s+16|0,A=e[s+16>>2]););e[l>>2]=0;break r}}}if((A=e[57154])>>>0>=p>>>0){i=e[57157],(r=A-p|0)>>>0>=16?(e[(s=i+p|0)+4>>2]=1|r,e[A+i>>2]=r,e[i+4>>2]=3|p):(e[i+4>>2]=3|A,e[(A=A+i|0)+4>>2]=1|e[A+4>>2],s=0,r=0),e[57154]=r,e[57157]=s,A=i+8|0;break e}if((I=e[57155])>>>0>p>>>0){r=I-p|0,e[57155]=r,A=(s=e[57158])+p|0,e[57158]=A,e[A+4>>2]=1|r,e[s+4>>2]=3|p,A=s+8|0;break e}if(A=0,h=p+47|0,e[57270]?s=e[57272]:(e[57273]=-1,e[57274]=-1,e[57271]=4096,e[57272]=4096,e[57270]=t+12&-16^1431655768,e[57275]=0,e[57263]=0,s=4096),(r=(l=h+s|0)&(c=0-s|0))>>>0<=p>>>0||(i=e[57262])&&i>>>0<(g=(s=e[57260])+r|0)>>>0|s>>>0>=g>>>0)break e;l:{if(!(4&d[229052])){i:{p:{C:{h:{if(i=e[57158])for(A=229056;;){if((s=e[A>>2])>>>0<=i>>>0&i>>>0<s+e[A+4>>2]>>>0)break h;if(!(A=e[A+8>>2]))break}if((0|(s=se(0)))==-1||(g=r,(A=(i=e[57271])-1|0)&s&&(g=(r-s|0)+(A+s&0-i)|0),g>>>0<=p>>>0)||(i=e[57262])&&i>>>0<(c=(A=e[57260])+g|0)>>>0|A>>>0>=c>>>0)break i;if((0|s)!=(0|(A=se(g))))break C;break l}if((0|(s=se(g=c&l-I)))==(e[A>>2]+e[A+4>>2]|0))break p;A=s}if((0|A)==-1)break i;if(p+48>>>0<=g>>>0){s=A;break l}if((0|se(s=(s=e[57272])+(h-g|0)&0-s))==-1)break i;g=s+g|0,s=A;break l}if((0|s)!=-1)break l}e[57263]=4|e[57263]}if((0|(s=se(r)))==-1|(0|(A=se(0)))==-1|A>>>0<=s>>>0||(g=A-s|0)>>>0<=p+40>>>0)break a}A=e[57260]+g|0,e[57260]=A,A>>>0>ee[57261]&&(e[57261]=A);l:{if(l=e[57158]){for(A=229056;;){if(((i=e[A>>2])+(r=e[A+4>>2])|0)==(0|s))break l;if(!(A=e[A+8>>2]))break}break o}for((A=e[57156])>>>0<=s>>>0&&A||(e[57156]=s),A=0,e[57265]=g,e[57264]=s,e[57160]=-1,e[57161]=e[57270],e[57267]=0;r=(i=A<<3)+228648|0,e[i+228656>>2]=r,e[i+228660>>2]=r,(0|(A=A+1|0))!=32;);r=(i=g-40|0)-(A=s+8&7?-8-s&7:0)|0,e[57155]=r,A=A+s|0,e[57158]=A,e[A+4>>2]=1|r,e[4+(s+i|0)>>2]=40,e[57159]=e[57274];break n}if(8&d[A+12|0]|i>>>0>l>>>0|s>>>0<=l>>>0)break o;e[A+4>>2]=r+g,s=(A=l+8&7?-8-l&7:0)+l|0,e[57158]=s,A=(r=e[57155]+g|0)-A|0,e[57155]=A,e[s+4>>2]=1|A,e[4+(r+l|0)>>2]=40,e[57159]=e[57274];break n}i=0;break A}s=0;break r}ee[57156]>s>>>0&&(e[57156]=s),r=s+g|0,A=229056;o:{c:{u:{l:{i:{p:{for(;;){if((0|r)!=e[A>>2]){if(A=e[A+8>>2])continue;break p}break}if(!(8&d[A+12|0]))break i}for(A=229056;;){if((r=e[A>>2])>>>0<=l>>>0&&(c=r+e[A+4>>2]|0)>>>0>l>>>0)break l;A=e[A+8>>2]}}if(e[A>>2]=s,e[A+4>>2]=e[A+4>>2]+g,e[(h=(s+8&7?-8-s&7:0)+s|0)+4>>2]=3|p,A=(g=r+(r+8&7?-8-r&7:0)|0)-(I=p+h|0)|0,(0|l)==(0|g)){e[57158]=I,A=e[57155]+A|0,e[57155]=A,e[I+4>>2]=1|A;break c}if(e[57157]==(0|g)){e[57157]=I,A=e[57154]+A|0,e[57154]=A,e[I+4>>2]=1|A,e[A+I>>2]=A;break c}if((3&(c=e[g+4>>2]))==1){l=-8&c;i:if(c>>>0<=255){if(i=e[g+8>>2],r=c>>>3|0,(0|(s=e[g+12>>2]))==(0|i)){e[57152]=e[57152]&ts(-2,r);break i}e[i+12>>2]=s,e[s+8>>2]=i}else{if(p=e[g+24>>2],(0|g)==(0|(s=e[g+12>>2])))if((r=e[(c=g+20|0)>>2])||(r=e[(c=g+16|0)>>2])){for(;i=c,(r=e[(c=(s=r)+20|0)>>2])||(c=s+16|0,r=e[s+16>>2]););e[i>>2]=0}else s=0;else r=e[g+8>>2],e[r+12>>2]=s,e[s+8>>2]=r;if(p){i=e[g+28>>2];p:{if(e[(r=228912+(i<<2)|0)>>2]==(0|g)){if(e[r>>2]=s,s)break p;e[57153]=e[57153]&ts(-2,i);break i}if(e[p+(e[p+16>>2]==(0|g)?16:20)>>2]=s,!s)break i}e[s+24>>2]=p,(r=e[g+16>>2])&&(e[s+16>>2]=r,e[r+24>>2]=s),(r=e[g+20>>2])&&(e[s+20>>2]=r,e[r+24>>2]=s)}}c=e[(g=l+g|0)+4>>2],A=A+l|0}if(e[g+4>>2]=-2&c,e[I+4>>2]=1|A,e[A+I>>2]=A,A>>>0<=255){r=228648+(-8&A)|0,(s=e[57152])&(A=1<<(A>>>3))?A=e[r+8>>2]:(e[57152]=A|s,A=r),e[r+8>>2]=I,e[A+12>>2]=I,e[I+12>>2]=r,e[I+8>>2]=A;break c}if(c=31,A>>>0<=16777215&&(c=62+((A>>>38-(r=be(A>>>8|0))&1)-(r<<1)|0)|0),e[I+28>>2]=c,e[I+16>>2]=0,e[I+20>>2]=0,r=228912+(c<<2)|0,(i=e[57153])&(s=1<<c)){for(c=A<<((0|c)!=31?25-(c>>>1|0):0),s=e[r>>2];;){if(r=s,(-8&e[s+4>>2])==(0|A))break u;if(s=c>>>29|0,c<<=1,!(s=e[(i=(4&s)+r|0)+16>>2]))break}e[i+16>>2]=I}else e[57153]=s|i,e[r>>2]=I;e[I+24>>2]=r,e[I+12>>2]=I,e[I+8>>2]=I;break c}for(r=(i=g-40|0)-(A=s+8&7?-8-s&7:0)|0,e[57155]=r,A=A+s|0,e[57158]=A,e[A+4>>2]=1|r,e[4+(s+i|0)>>2]=40,e[57159]=e[57274],e[(i=(A=(c+(c-39&7?39-c&7:0)|0)-47|0)>>>0<l+16>>>0?l:A)+4>>2]=27,A=e[57267],e[i+16>>2]=e[57266],e[i+20>>2]=A,A=e[57265],e[i+8>>2]=e[57264],e[i+12>>2]=A,e[57266]=i+8,e[57265]=g,e[57264]=s,e[57267]=0,A=i+24|0;e[A+4>>2]=7,r=A+8|0,A=A+4|0,r>>>0<c>>>0;);if((0|i)==(0|l))break n;if(e[i+4>>2]=-2&e[i+4>>2],c=i-l|0,e[l+4>>2]=1|c,e[i>>2]=c,c>>>0<=255){r=228648+(-8&c)|0,(s=e[57152])&(A=1<<(c>>>3))?A=e[r+8>>2]:(e[57152]=A|s,A=r),e[r+8>>2]=l,e[A+12>>2]=l,e[l+12>>2]=r,e[l+8>>2]=A;break n}if(A=31,c>>>0<=16777215&&(A=62+((c>>>38-(A=be(c>>>8|0))&1)-(A<<1)|0)|0),e[l+28>>2]=A,e[l+16>>2]=0,e[l+20>>2]=0,r=228912+(A<<2)|0,(i=e[57153])&(s=1<<A)){for(A=c<<((0|A)!=31?25-(A>>>1|0):0),i=e[r>>2];;){if((0|c)==(-8&e[(r=i)+4>>2]))break o;if(s=A>>>29|0,A<<=1,!(i=e[(s=(4&s)+r|0)+16>>2]))break}e[s+16>>2]=l}else e[57153]=s|i,e[r>>2]=l;e[l+24>>2]=r,e[l+12>>2]=l,e[l+8>>2]=l;break n}A=e[r+8>>2],e[A+12>>2]=I,e[r+8>>2]=I,e[I+24>>2]=0,e[I+12>>2]=r,e[I+8>>2]=A}A=h+8|0;break e}A=e[r+8>>2],e[A+12>>2]=l,e[r+8>>2]=l,e[l+24>>2]=0,e[l+12>>2]=r,e[l+8>>2]=A}if(!((A=e[57155])>>>0<=p>>>0)){r=A-p|0,e[57155]=r,A=(s=e[57158])+p|0,e[57158]=A,e[A+4>>2]=1|r,e[s+4>>2]=3|p,A=s+8|0;break e}}e[56798]=48,A=0;break e}r:if(g){r=e[i+28>>2];a:{if(e[(A=228912+(r<<2)|0)>>2]==(0|i)){if(e[A>>2]=s,s)break a;h=ts(-2,r)&h,e[57153]=h;break r}if(e[g+(e[g+16>>2]==(0|i)?16:20)>>2]=s,!s)break r}e[s+24>>2]=g,(A=e[i+16>>2])&&(e[s+16>>2]=A,e[A+24>>2]=s),(A=e[i+20>>2])&&(e[s+20>>2]=A,e[A+24>>2]=s)}r:if(c>>>0<=15)A=c+p|0,e[i+4>>2]=3|A,e[(A=A+i|0)+4>>2]=1|e[A+4>>2];else if(e[i+4>>2]=3|p,e[(l=i+p|0)+4>>2]=1|c,e[l+c>>2]=c,c>>>0<=255)r=228648+(-8&c)|0,(s=e[57152])&(A=1<<(c>>>3))?A=e[r+8>>2]:(e[57152]=A|s,A=r),e[r+8>>2]=l,e[A+12>>2]=l,e[l+12>>2]=r,e[l+8>>2]=A;else{A=31,c>>>0<=16777215&&(A=62+((c>>>38-(A=be(c>>>8|0))&1)-(A<<1)|0)|0),e[l+28>>2]=A,e[l+16>>2]=0,e[l+20>>2]=0,r=228912+(A<<2)|0;a:{if((s=1<<A)&h){for(A=c<<((0|A)!=31?25-(A>>>1|0):0),p=e[r>>2];;){if((-8&e[(r=p)+4>>2])==(0|c))break a;if(s=A>>>29|0,A<<=1,!(p=e[(s=(4&s)+r|0)+16>>2]))break}e[s+16>>2]=l}else e[57153]=s|h,e[r>>2]=l;e[l+24>>2]=r,e[l+12>>2]=l,e[l+8>>2]=l;break r}A=e[r+8>>2],e[A+12>>2]=l,e[r+8>>2]=l,e[l+24>>2]=0,e[l+12>>2]=r,e[l+8>>2]=A}A=i+8|0;break e}A:if(I){r=e[s+28>>2];r:{if(e[(A=228912+(r<<2)|0)>>2]==(0|s)){if(e[A>>2]=i,i)break r;e[57153]=ts(-2,r)&h;break A}if(e[I+(e[I+16>>2]==(0|s)?16:20)>>2]=i,!i)break A}e[i+24>>2]=I,(A=e[s+16>>2])&&(e[i+16>>2]=A,e[A+24>>2]=i),(A=e[s+20>>2])&&(e[i+20>>2]=A,e[A+24>>2]=i)}c>>>0<=15?(A=c+p|0,e[s+4>>2]=3|A,e[(A=A+s|0)+4>>2]=1|e[A+4>>2]):(e[s+4>>2]=3|p,e[(i=s+p|0)+4>>2]=1|c,e[i+c>>2]=c,M&&(r=228648+(-8&M)|0,l=e[57157],(A=1<<(M>>>3))&g?A=e[r+8>>2]:(e[57152]=A|g,A=r),e[r+8>>2]=l,e[A+12>>2]=l,e[l+12>>2]=r,e[l+8>>2]=A),e[57157]=i,e[57154]=c),A=s+8|0}return H=t+16|0,0|A}function Lt(A,t,r,s,i){var l,c=0,g=0,p=0,I=0,h=0,M=0,P=0,z=0,Y=0,V=0,X=0,te=0,ne=0,me=0,ke=0,ye=0,Pe=0;H=l=H-544|0,Ve(l+320|0,0,100),Ve(l+208|0,0,100),I=r?e[r>>2]:I,Y=e[A+12>>2],h=e[36115];e:{A:{r:{a:{for(;;){if(c=(0|(c=d[t+g|0]))>=(0|h)?13:c,f[l+g|0]=c,!c){c=g;break a}if(p=(0|h)<=(0|(p=d[(c=1|g)+t|0]))?13:p,f[c+l|0]=p,!p)break a;if((0|(g=g+2|0))==200)break}g=198,X=d[l+199|0];break r}if(!c)break A;X=d[l+(g=c-1|0)|0],(0|c)!=1&&(g=c-2|0)}if(ke=8&I,e[l+536>>2]=(ke>>>3|0?3:7)&I,I=d[l+g|0],h=1,P=(0|(M=oa(A,l,l+432|0,l+540|0,l+536|0,1)))>=0?M:0,ne=d[0|l])for(g=l,c=ne;c=e[144464+((255&c)<<2)>>2],d[c+11|0]==2&&(1048576&(c=e[c+4>>2])||(p=(2097152&c)>>>21|0,p|=c=d[e[144464+(d[0|(z=g+1|0)]<<2)>>2]+10|0]==12,f[(l+208|0)+h|0]=p,V=e[144464+(d[(c?2:1)+g|0]<<2)>>2],p=d[V+11|0]-10>>>0<4294967289|!(32&d[V+6|0])&d[e[144464+(d[(c?3:2)+g|0]<<2)>>2]+11|0]==2?p:p?2:1,g=c?z:g,f[(l+320|0)+h|0]=p,h=h+1|0)),c=d[0|(g=g+1|0)];);g=r=r?P:M;r:{a:{n:{o:{c:{u:{l:{i:{p:{C:{h:{b:switch(e[A+8>>2]-1|0){case 11:if((0|(r=e[l+540>>2]))<2)break p;if(g=1,P=1&(c=r-1|0),(0|r)!=2)break h;h=0;break C;case 8:if((0|(c=e[l+540>>2]))<2)break a;if(h=3&(p=c-1|0),g=1,c-2>>>0>=3)for(P=-4&p,p=0;I=f[0|(c=(l+432|0)+g|0)],f[0|c]=(0|I)<0?4:I,I=f[c+1|0],f[c+1|0]=(0|I)<0?4:I,I=f[c+2|0],f[c+2|0]=(0|I)<0?4:I,I=c,c=f[c+3|0],f[I+3|0]=(0|c)<0?4:c,g=g+4|0,(0|P)!=(0|(p=p+4|0)););if(!h)break a;for(c=0;p=f[0|(I=(l+432|0)+g|0)],f[0|I]=(0|p)<0?4:p,g=g+1|0,(0|h)!=(0|(c=c+1|0)););break a;case 7:if(!d[l+322|0]|f[l+321|0]>0)break a;case 0:if(e[l+536>>2]|e[l+540>>2]<3)break a;if(e[l+536>>2]=2,g=4,r)break r;f[l+434|0]=4;break r;case 1:if(e[l+536>>2])break r;m:{B:{if((0|(h=e[l+540>>2]))>=3){r=h-2|0,e[l+536>>2]=r,g=r;I:if(512&Y&&(c=e[144464+(X<<2)>>2],(0|(p=d[c+11|0]))!=2)){g=e[c>>2],c=l;x:{L:{if((0|(P=e[A+212>>2]))!=26977){if((0|P)!=24942)break L;_:switch(g-110|0){case 0:case 5:if(g=r,d[e[144464+(I<<2)>>2]+11|0]==2)break I;break;default:break _}g=h-1|0;break x}if((0|g)==115&&(g=r,d[e[144464+(I<<2)>>2]+11|0]==2))break I;g=h-1|0;break x}L:{_:{if((0|g)==115){if(g=r,(0|(p=d[e[144464+(I<<2)>>2]+11|0]))!=8)break _;break I}if((0|p)!=8)break L;p=d[e[144464+(I<<2)>>2]+11|0]}if(g=r,(255&p)==2)break I}g=h-1|0}e[c+536>>2]=g}if(524288&Y&&(f[(c=h-1|0)+(h=l+208|0)|0]<=f[r+h|0]||(e[l+536>>2]=c,g=c)),d[(l+432|0)+g|0]>1){c=g;break m}if(c=2,r=g-1|0,g>>>0>=2)break B;e[l+536>>2]=g+1;break m}r=1}c=r,e[l+536>>2]=c}if(g=4,f[0|(r=(l+432|0)+c|0)]>=0||f[(c=(l+432|0)+c|0)-1|0]>=4&f[c+1|0]>3)break r;f[0|r]=4;break r;case 2:if(e[l+536>>2])break r;for(r=(g=e[l+540>>2])-1|0,r&=r>>31;;){if((0|(g=g-1|0))<=0)break n;if(!(f[0|(c=(l+432|0)+g|0)]>=0))break}e[l+536>>2]=g,g=4,f[0|c]=4;break r;case 3:if(e[l+536>>2])break a;if(c=(0|(g=e[l+540>>2]-3|0))<=1?1:g,e[l+536>>2]=c,g=4,r)break r;f[c+(l+432|0)|0]=4;break r;case 4:if(e[l+536>>2])break r;if(c=(r=e[l+540>>2])-3|0,e[l+536>>2]=c,(0|r)<=15){m:{B:switch(d[e[144464+(X<<2)>>2]+11|0]-2|0){case 0:c=f[r+94176|0];break m;case 2:c=f[r+94192|0];break m;default:break B}c=f[r+94160|0]}e[l+536>>2]=c}g=4,f[(l+432|0)+c|0]=4;break r;case 5:if(e[l+536>>2])break r;if(h=-1,p=0,!((0|(r=(c=e[l+540>>2])-1|0))<2)){if(g=1,z=1&c,(0|c)!=3)for(V=(-2&c)-4|0,c=0;f[(l+432|0)+g|0]<0&&(p=(I=(0|(P=f[(l+320|0)+g|0]))<(0|h))?p:g,h=I?h:P),f[(I=g+1|0)+(l+432|0)|0]<0&&(p=(P=(0|(me=f[I+(l+320|0)|0]))<(0|h))?p:I,h=P?h:me),g=g+2|0,I=(0|c)!=(0|V),c=c+2|0,I;);!z|f[(l+432|0)+g|0]>=0||(h=(c=(0|(I=f[(l+320|0)+g|0]))<(0|h))?h:I,p=c?p:g)}e[l+536>>2]=p,d[r+(l+320|0)|0]!=2|(0|h)>1?(0|h)>0||(p=1,e[l+536>>2]=1):(e[l+536>>2]=r,p=r),g=4,f[(l+432|0)+p|0]=4;break r;case 14:break o;case 12:break c;case 6:break b;default:break r}if(e[l+536>>2])break r;h=(r=e[l+540>>2])-1|0,e[l+536>>2]=h;b:if(!((0|r)<2))for(g=1;;){if(d[(l+432|0)+g|0]==1){h=g-1|0,e[l+536>>2]=h;break b}if((0|r)==(0|(g=g+1|0)))break}g=4,f[(l+432|0)+h|0]=4;break r}for(z=-2&c,h=0,p=0;c=d[0|(V=(I=l+432|0)+g|0)],te=V,me=f[(V=l+208|0)+g|0]>0,f[0|te]=me||(0|c)==4?3:c,ye=(0|(I=d[0|(te=(c=g+1|0)+I|0)]))==4?3:I,I=f[c+V|0]>0,f[0|te]=I?3:ye,h=I?c:me?g:h,g=g+2|0,(0|z)!=(0|(p=p+2|0)););}if(P&&(I=(0|(c=d[0|(p=(l+432|0)+g|0)]))==4?3:c,c=f[(l+208|0)+g|0]>0,f[0|p]=c?3:I,h=c?g:h),c=e[l+536>>2])break u;if((0|h)>0){e[l+536>>2]=h,c=h;break u}if((0|r)<6)break i;c=r-3|0;break l}if(c=e[l+536>>2])break u}c=r-1|0}e[l+536>>2]=c}g=4,f[(l+432|0)+c|0]=4;break r}if(e[l+536>>2])break r;c=1,e[l+536>>2]=1,d[l+209|0]|e[l+540>>2]<3|f[l+210|0]<=0||(c=2,e[l+536>>2]=2),g=4,f[l+432|c]=4;break r}if(e[l+536>>2]||(0|(c=e[l+540>>2]))<3)break a;if(Ve(l+432|1,0,c-1|0),e[l+536>>2]=2,r||(f[l+434|0]=4),g=4,c>>>0<4)break r;f[431+(c+l|0)|0]=3;break r}e[l+536>>2]=r,g=4;break r}g=r}!(256&Y)|2&i||(0|(r=e[l+540>>2]))<3|(0|M)>2||d[0|(c=(r=r+(l+432|0)|0)-1|0)]!=4|d[e[144464+(X<<2)>>2]+11|0]!=2||(f[0|c]=1,f[r-2|0]=4);r:{a:{if(ke)M=e[l+540>>2];else{if(r=f[l+433|0],!(!(4096&Y)|(0|(M=e[l+540>>2]))!=3)){if((0|r)==4){f[l+434|0]=3;break a}if(d[l+434|0]==4){f[l+433|0]=3;break a}}if(!(!(8192&Y)|(0|r)>=0|(0|M)<4|f[l+434|0]<4)){f[l+433|0]=3;break a}}if(p=0,(0|M)<2)break r}for(h=(0|g)<4?4:3,V=128&Y,me=64&Y,te=32&Y,P=M-1|0,ye=16&Y,Pe=!(32768&Y),X=0,I=0,g=1;;){a:{n:if((0|(c=f[0|(z=(l+432|0)+g|0)]))>=0)p=h;else{p=3;o:{c:if(!(!(!ye|(0|h)>3)&(0|g)==(0|P))){if(!(1&(X|Pe)))break o;if(!(f[431+(l+g|0)|0]>1)){if((0|(c=f[(r=g+1|0)+(l+432|0)|0]))>=2){if((0|h)!=4||(p=4,c>>>0>=3))break c}else if(!(!te|(0|h)!=3)){h=3;break a}if(!me|g>>>0<2||(p=d[(l+320|0)+g|0]))break o;if((0|P)>(0|(c=g))){for(;;){if(f[(l+320|0)+c|0]>0)break a;if((0|P)==(0|(c=c+1|0)))break}if(p)break o}if(f[r+(l+320|0)|0]<=0)break o;break a}p=h}c=d[0|z];break n}f[0|z]=h,X=1,p=3,c=h}n:{if(c<<24>>24>=4){if(r=I||g,!I|!V)break n;f[0|z]=3}h=p;break a}h=p,I=r}if(p=1,(0|M)==(0|(g=g+1|0)))break}}if(s=!ke|(0|s)>=0?s:e[((0|M)<3?16:20)+A>>2],h=0,c=0,p){if(X=3&(r=M-1|0),p=0,M-2>>>0<3)g=1;else for(ke=-4&r,g=1,I=0;c=(r=(0|(c=(z=(0|(c=(P=(0|(c=(M=(0|(P=f[(r=l+432|0)+g|0]))<(0|c))?c:P))>(0|(z=f[(V=g+1|0)+r|0])))?c:z))>(0|(te=f[(me=g+2|0)+r|0])))?c:te))>(0|(ye=f[(te=g+3|0)+r|0])))?c:ye,h=r?z?P?M?h:g:V:me:te,g=g+4|0,(0|ke)!=(0|(I=I+4|0)););if(X)for(;c=(r=(0|(I=f[(l+432|0)+g|0]))<(0|c))?c:I,h=r?h:g,g=g+1|0,(0|X)!=(0|(p=p+1|0)););}if((0|s)<0?s=c:(0|s)<=(0|c)&(0|c)>4||(f[(l+432|0)+h|0]=s),X=t+197|0,M=1,!(1&i)&&(r=e[144464+(ne<<2)>>2])){if(c=l,!((0|(p=d[r+11|0]))!=1&(0|ne)!=15))for(;r=d[0|(c=c+1|0)],(0|(p=d[e[144464+(r<<2)>>2]+11|0]))==1|(0|r)==15;);!(48&(r=e[A+4>>2]))|(0|p)!=2||(f[0|t]=(32&r)>>>5|0&&f[l+433|0]>3?11:23,t=t+1|0)}r:if(!(t>>>0>=X>>>0))for(P=65536&Y,z=2&Y,ke=4&Y,g=l;;){if(!(c=d[0|g]))break r;if(i=g,g=g+1|0,r=e[144464+(c<<2)>>2]){a:{n:{o:switch(d[r+11|0]){case 0:e[A+8200>>2]=0;break a;case 2:if(!(16&d[r+6|0]))break n;break;default:break o}if(d[0|g]!=20)break a}if((0|(ne=e[l+540>>2]))<(0|M))break e;I=f[0|(Y=(l+432|0)+M|0)],e[A+8200>>2]=I;n:{o:{if(!((0|(r=I))>1)){if(p=ne-1|0,!(!ke|(0|M)<2|(0|s)<2)&&(r=0,(0|p)==(0|M)))break o;if(r=1,!((0|M)==1|z|(ne-2|0)==(0|M)&f[p+(l+432|0)|0]<2|(0|p)==(0|M)||f[431+(l+M|0)|0]>=0&&(r=I,P))){r=0,f[0|Y]=0;break o}}if(r&&(0|r)<2)break n}f[0|t]=d[r+94151|0],t=t+1|0,I=f[0|Y]}p=(0|s)>(0|I),d[0|g]==12&&1&(ne=e[A+28>>2])&&(g=(16&ne?(0|h)!=(0|M):(0|r)<4)?i+2|0:g),s=p?s:I,M=M+1|0}if((0|c)!=1&&(f[0|t]=c,t=t+1|0),!(t>>>0<X>>>0))break}}f[0|t]=0}return void(H=l+544|0)}pe(86136,86634,1353,94208),j()}function Wr(A,t,r,s,i,l,c,g,p){var I,h=0,M=0,P=0,z=0,Y=0,V=0,X=0,te=0,ne=0,me=0,ke=0,ye=0,Pe=0,_e=0,Ke=0,lA=0,mA=0,GA=0,NA=0,JA=0,pt=0,Mt=0,Dt=0,Yt=0,$t=0,fr=0,er=0,Er=0,zr=0,Kr=0;H=I=H-336|0,z=g,V=65535&p,Y=s,P=65535&i,ke=-2147483648&(i^p);e:{if(!((ne=p>>>16&32767)-32767>>>0>4294934529&(X=i>>>16&32767)-32767>>>0>=4294934530)){if(!(!s&(0|(h=2147483647&i))==2147418112?!(t|r):h>>>0<2147418112)){te=s,ke=32768|i;break e}if(!(!g&(0|(i=2147483647&p))==2147418112?!(l|c):i>>>0<2147418112)){te=g,ke=32768|p,t=l,r=c;break e}if(!(t|s|2147418112^h|r)){if(!(l|g|2147418112^i|c)){t=0,r=0,ke=2147450880;break e}ke|=2147418112,t=0,r=0;break e}if(!(l|g|2147418112^i|c)){t=0,r=0;break e}if(!(t|s|r|h)){te=(t=!(l|g|i|c))?0:te,ke=t?2147450880:ke,t=0,r=0;break e}if(!(l|g|i|c)){ke|=2147418112,t=0,r=0;break e}(0|h)==65535|h>>>0<65535&&(p=s=!(P|Y),h=s?t:Y,g=s<<=6,Gt(I+320|0,t,r,Y,P,(s=s+((0|(p=be(p?r:P)))==32?be(h)+32|0:p)|0)-15|0),ye=16-s|0,Y=e[I+328>>2],P=e[I+332>>2],r=e[I+324>>2],t=e[I+320>>2]),i>>>0>65535||(g=s=!(z|V),p=s?l:z,i=s<<=6,Gt(I+304|0,l,c,z,V,(s=s+((0|(g=be(g?c:V)))==32?be(p)+32|0:g)|0)-15|0),ye=(s+ye|0)-16|0,z=e[I+312>>2],V=e[I+316>>2],l=e[I+304>>2],c=e[I+308>>2])}if(mA=i=65536|V,GA=z,h=i<<15|(s=z)>>>17,Br(I+288|0,s=i=s<<15|c>>>17,g=h,0,0,p=0-s|0,h=1963258675-(h+!!(0|s)|0)|0,0,0),Br(I+272|0,0-(s=e[I+296>>2])|0,0-(e[I+300>>2]+!!(0|s)|0)|0,0,0,p,h,0,0),Br(I+256|0,p=(s=e[I+280>>2])<<1|e[I+276>>2]>>>31,s=e[I+284>>2]<<1|s>>>31,0,0,i,g,0,0),Br(I+240|0,p,s,0,0,0-(h=e[I+264>>2])|0,0-(e[I+268>>2]+!!(0|h)|0)|0,0,0),Br(I+224|0,h=(p=e[I+248>>2])<<1|e[I+244>>2]>>>31,s=e[I+252>>2]<<1|p>>>31,0,0,i,g,0,0),Br(I+208|0,h,s,0,0,0-(p=e[I+232>>2])|0,0-(e[I+236>>2]+!!(0|p)|0)|0,0,0),Br(I+192|0,p=(s=e[I+216>>2])<<1|e[I+212>>2]>>>31,s=e[I+220>>2]<<1|s>>>31,0,0,i,g,0,0),Br(I+176|0,p,s,0,0,0-(h=e[I+200>>2])|0,0-(e[I+204>>2]+!!(0|h)|0)|0,0,0),Br(I+160|0,p=i,s=g,0,0,g=(z=(i=e[I+184>>2])<<1|e[I+180>>2]>>>31)-1|0,i=(e[I+188>>2]<<1|i>>>31)-!z|0,0,0),Br(I+144|0,l<<15,c<<15|l>>>17,0,0,s=g,i,0,0),me=I+112|0,Ke=e[I+168>>2],g=e[I+172>>2],M=(z=e[I+160>>2])+(p=e[I+152>>2])|0,h=(V=e[I+164>>2])+e[I+156>>2]|0,p=h=p>>>0>M>>>0?h+1|0:h,h=(h=(0|V)==(0|h)&M>>>0<z>>>0|h>>>0<V>>>0)>>>0>(V=h+Ke|0)>>>0?g+1|0:g,Br(me,s,i,0,0,0-(g=(z=!p&M>>>0>1|!!(0|p))+V|0)|0,0-(!!(0|g)+(h=z>>>0>g>>>0?h+1|0:h)|0)|0,0,0),Br(I+128|0,1-M|0,0-((M>>>0>1)+p|0)|0,0,0,s,i,0,0),Yt=(X-ne|0)+ye|0,me=i=e[I+116>>2],z=(s=e[I+112>>2])<<1,X=h=i<<1|s>>>31,s=h,lA=g=e[I+140>>2],s=s+(h=g<<1|(i=e[I+136>>2])>>>31)|0,i=s=(g=(p=i<<1|e[I+132>>2]>>>31)+z|0)>>>0<p>>>0?s+1|0:s,_e=s=s-(g>>>0<13927)|0,Ke=s,$t=h=65536|P,fr=Y,Er=(s=Y)<<1,zr=h=h<<1|s>>>31,JA=h,pt=s=At(_e,M=0,h,0),Pe=h=he,ye=t<<1,ne=s=r<<1|t>>>31,V=h=0,_e=(0|i)==(0|_e)&(p=g-13927|0)>>>0<g>>>0|i>>>0>_e>>>0,i=(0|i)==(0|X)&g>>>0<z>>>0|i>>>0<X>>>0,s=e[I+120>>2],h=g=e[I+124>>2]<<1|s>>>31,h=(s=(M=lA>>>31|0)+(s=s<<1|me>>>31)|0)>>>0<M>>>0?h+1|0:h,M=(g=s)>>>0>(s=s+i|0)>>>0?h+1|0:h,M=(i=s)>>>0>(s=s+_e|0)>>>0?M+1|0:M,i=s-1|0,h=At(ne,V,_e=M-!s|0,X=0),g=he+Pe|0,me=(0|Pe)==(0|(g=(s=h+pt|0)>>>0<h>>>0?g+1|0:g))&s>>>0<pt>>>0|g>>>0<Pe>>>0,lA=i,i=At(i,h=0,NA=(er=r>>>31|0)|Y<<1,Pe=0),h=he+g|0,M=0,z=h=i>>>0>(Y=i+s|0)>>>0?h+1|0:h,M=(i=s=(0|h)==(0|g)&s>>>0>Y>>>0|g>>>0>h>>>0)>>>0>(s=s+me|0)>>>0?1:M,i=At(JA,V,_e,X),h=he+M|0,me=s=i+s|0,s=s>>>0<i>>>0?h+1|0:h,i=At(JA,V,lA,Pe),P=he,g=i,i=At(NA,Pe,_e,X),h=he+P|0,i=h=i>>>0>(M=g+i|0)>>>0?h+1|0:h,s=s+(h=(0|P)==(0|h)&g>>>0>M>>>0|h>>>0<P>>>0)|0,me=P=me+i|0,P=s=P>>>0<i>>>0?s+1|0:s,h=M+z|0,i=h=(s=(i=0)+Y|0)>>>0<i>>>0?h+1|0:h,g=(0|h)==(0|z)&s>>>0<Y>>>0|h>>>0<z>>>0,h=P,M=g,Mt=g=g+me|0,M=h=M>>>0>g>>>0?h+1|0:h,me=s,P=s,Y=i,pt=p,s=At(p,0,NA,Pe),g=he,i=s,p=At(Ke,te,ne,te),h=he+g|0,p=(0|g)==(0|(h=(s=s+p|0)>>>0<p>>>0?h+1|0:h))&s>>>0<i>>>0|g>>>0>h>>>0,g=h,i=At(lA,Pe,Dt=-2&ye,0),h=he+h|0,i=h=i>>>0>(z=i+s|0)>>>0?h+1|0:h,s=(0|h)==(0|g)&s>>>0>z>>>0|g>>>0>h>>>0,g=0,s=((p=s+p|0)>>>0<s>>>0?1:g)+Y|0,h=M,p=s=(P=p+P|0)>>>0<p>>>0?s+1|0:s,g=s=(0|s)==(0|Y)&P>>>0<me>>>0|s>>>0<Y>>>0,Kr=s=s+Mt|0,me=h=g>>>0>s>>>0?h+1|0:h,s=At(JA,V,pt,te),Mt=he,JA=s,g=At(_e,X,Dt,te),h=he+Mt|0,Y=s=s+g|0,M=s+(V=At(Ke,te,NA,Pe))|0,s=(g=s>>>0<g>>>0?h+1|0:h)+he|0,s=M>>>0<V>>>0?s+1|0:s,X=M,V=M+(h=At(ne,te,lA,Pe))|0,M=he+s|0,NA=(0|s)==(0|(M=h>>>0>V>>>0?M+1|0:M))&V>>>0<X>>>0|s>>>0>M>>>0,h=((s=(s=(s=(0|s)==(0|g)&Y>>>0>X>>>0|s>>>0<g>>>0)+(h=(0|g)==(0|Mt)&Y>>>0<JA>>>0|g>>>0<Mt>>>0)|0)+NA|0)|(lA=0))+p|0,Y=h=(g=M)>>>0>(X=g+P|0)>>>0?h+1|0:h,s=(0|p)==(0|h)&P>>>0>X>>>0|p>>>0>h>>>0,h=me,g=s,lA=s=s+Kr|0,p=h=g>>>0>s>>>0?h+1|0:h,s=At(Ke,te,Dt,te),Ke=he,P=s,g=At(ne,te,pt,te),h=he+Ke|0,g=(0|(h=(s=s+g|0)>>>0<g>>>0?h+1|0:h))==(0|Ke)&s>>>0<P>>>0|h>>>0<Ke>>>0,P=h,s=h+z|0,h=(g|(me=0))+i|0,P=(0|i)==(0|(h=s>>>0<P>>>0?h+1|0:h))&s>>>0<z>>>0|i>>>0>h>>>0,M=(g=h)+(h=V)|0,h=0,h=((i=s=(0|g)==(0|(M=(z=(V=0)+s|0)>>>0<V>>>0?M+1|0:M))&s>>>0>z>>>0|g>>>0>M>>>0)>>>0>(s=s+P|0)>>>0?1:h)+Y|0,M=p,i=h=(i=s)>>>0>(s=s+X|0)>>>0?h+1|0:h,p=M=(p=g=(0|Y)==(0|h)&s>>>0<X>>>0|h>>>0<Y>>>0)>>>0>(g=g+lA|0)>>>0?M+1|0:M,(0|M)==131071|M>>>0<131071?(fr=Er|er,$t=Pe|zr,Br(I+80|0,s,i,g,p,l,c,GA,mA),V=M=e[I+84>>2],h=t<<17,Y=(r=(z=0)-(P=e[I+88>>2])|0)-(M=!!(M|(t=e[I+80>>2])))|0,P=(h-(e[I+92>>2]+(P>>>0>z>>>0)|0)|0)-(r>>>0<M>>>0)|0,z=0-t|0,V=0-(!!(0|t)+V|0)|0,t=Yt+16382|0):(Br(I+96|0,s=(1&i)<<31|s>>>1,i=g<<31|i>>>1,g=(1&p)<<31|g>>>1,p=p>>>1|0,l,c,GA,mA),ne=Y=e[I+100>>2],Y=(z=0-(ye=e[I+104>>2])|0)-(P=!!(Y|(M=e[I+96>>2])))|0,P=((t<<16)-(e[I+108>>2]+(V>>>0<ye>>>0)|0)|0)-(P>>>0>z>>>0)|0,z=0-M|0,V=0-(!!(0|M)+ne|0)|0,ye=t,ne=r,t=Yt+16383|0),(0|t)>=32767)ke|=2147418112,t=0,r=0;else{if((0|t)>0)M=P<<1|Y>>>31,Y=Y<<1|V>>>31,P=M,ye=g,ne=65535&p|t<<16,M=V<<1|z>>>31,p=z<<1;else{if((0|t)<=-113){t=0,r=0;break e}ur(I- -64|0,s,i,g,p,1-t|0),Gt(I+48|0,ye,ne,fr,$t,t+112|0),Br(I+32|0,l,c,GA,mA,s=e[I+64>>2],i=e[I+68>>2],ye=e[I+72>>2],ne=e[I+76>>2]),t=e[I+40>>2],z=(r=e[I+56>>2])-(Y=t<<1|(M=e[I+36>>2])>>>31)|0,P=e[I+60>>2]-((e[I+44>>2]<<1|t>>>31)+(r>>>0<Y>>>0)|0)|0,h=(t=e[I+32>>2])<<1,Y=z-(t=(0|(g=M<<1|t>>>31))==(0|(p=e[I+52>>2]))&h>>>0>(r=e[I+48>>2])>>>0|g>>>0>p>>>0)|0,P=P-(t>>>0>z>>>0)|0,M=p-((r>>>0<h>>>0)+g|0)|0,p=r-h|0}t=p,Br(I+16|0,l,c,GA,mA,3,0,0,0),Br(I,l,c,GA,mA,5,0,0,0),g=M+(r=0)|0,g=p>>>0>(t=t+(h=1&s)|0)>>>0?g+1|0:g,p=t,c=(0|c)==(0|g)&t>>>0>l>>>0|c>>>0<g>>>0,M=P,t=(0|r)==(0|g)&t>>>0<h>>>0|r>>>0>g>>>0,h=i,r=h=(r=t=(t=(0|(M=t>>>0>(l=t+Y|0)>>>0?M+1|0:M))==(0|mA))&(0|l)==(0|GA)?c:t&l>>>0>GA>>>0|M>>>0>mA>>>0)>>>0>(t=t+s|0)>>>0?h+1|0:h,s=(0|i)==(0|h)&t>>>0<s>>>0|i>>>0>h>>>0,h=ne,h=(i=s)>>>0>(s=s+ye|0)>>>0?h+1|0:h,c=s,P=(0|(i=e[I+20>>2]))==(0|g)&ee[I+16>>2]<p>>>0|i>>>0<g>>>0,i=e[I+28>>2],i=h>>>0<2147418112&((0|(s=e[I+24>>2]))==(0|l)&(0|i)==(0|M)?P:(0|i)==(0|M)&s>>>0<l>>>0|i>>>0<M>>>0),s=r,h=(r=t=(0|r)==(0|(s=(P=i)>>>0>(i=t+i|0)>>>0?s+1|0:s))&t>>>0>i>>>0|r>>>0>s>>>0)>>>0>(t=t+c|0)>>>0?h+1|0:h,c=t,g=(0|(r=e[I+4>>2]))==(0|g)&ee[I>>2]<p>>>0|r>>>0<g>>>0,r=e[I+12>>2],r=M=(r=t=h>>>0<2147418112&((0|(t=e[I+8>>2]))==(0|l)&(0|r)==(0|M)?g:(0|r)==(0|M)&t>>>0<l>>>0|r>>>0<M>>>0))>>>0>(t=t+i|0)>>>0?s+1|0:s,i=(0|s)==(0|M)&t>>>0<i>>>0|s>>>0>M>>>0,s=h,l=i,te|=i=i+c|0,ke|=s=l>>>0>i>>>0?s+1|0:s}}e[A>>2]=t,e[A+4>>2]=r,e[A+8>>2]=te,e[A+12>>2]=ke,H=I+336|0}function VA(A,t,r,s,i){var l,c,g,p=0,I=0,h=0,M=0,P=0,z=0,Y=0,V=0,X=0,te=0,ne=0,me=0,ke=0,ye=0,Pe=0,_e=0,Ke=0,lA=0,mA=0,GA=0,NA=0;if(H=c=H-80|0,g=e[r+8>>2],!i|!y[r+4>>1]||(e[i+8>>2]=0),l=Ve(s,0,152),e[l+44>>2]=d[g+14|0],e[l+40>>2]=d[g+15|0],s=y[g+8>>1]){for(s=e[34459]+(s<<1)|0,te=256&t,ne=r+32|0,ye=r-32|0,Pe=r- -64|0,_e=r+96|0,Ke=r+-64|0,lA=r-28|0,mA=1&t,GA=r-24|0,me=e[30450];;){p=15&(P=(t=y[s>>1])>>>8|0);e:{A:{r:{a:{n:{o:{c:{u:{l:{i:{p:{C:switch(0|(h=t>>>12|0)){case 10:break c;case 9:break u;case 6:break l;case 2:case 3:break i;case 1:break p;case 0:break C;case 11:case 12:case 13:case 14:case 15:break o;default:break n}I=255&t;C:{h:{b:switch(0|p){case 13:if(I)break h;p=s,t=0;break C;case 0:p=s;m:switch(I-1|0){case 1:break e;case 0:break A;default:break m}e[c+20>>2]=Co(c+75|0,e[g>>2]),e[c+16>>2]=t,Kt(me,85851,c+16|0);break e;case 5:if(d[e[144464+(d[r+34|0]<<2)>>2]+11|0]!=2)break e;e[l+20>>2]=I;break e;case 12:break b;default:break a}e[l+44>>2]=e[l+44>>2]+(t<<24>>31&-256|I);break e}f[l+132|0]=d[s+3|0],p=s+2|0,f[l+133|0]=d[0|p],t=2,I>>>0<3||(f[l+134|0]=d[s+5|0],p=s+4|0,f[l+135|0]=d[0|p],t=4,I>>>0<5||(f[l+136|0]=d[s+7|0],p=s+6|0,f[l+137|0]=d[0|p],t=6,I>>>0<7||(f[l+138|0]=d[s+9|0],p=s+8|0,f[l+139|0]=d[0|p],t=8,I>>>0<9||(f[l+140|0]=d[s+11|0],p=s+10|0,f[l+141|0]=d[0|p],t=10,I>>>0<11||(f[l+142|0]=d[s+13|0],p=s+12|0,f[l+143|0]=d[0|p],t=12,I>>>0<13||(f[l+144|0]=d[s+15|0],p=s+14|0,f[l+145|0]=d[0|p],t=14,I>>>0<15||(f[l+146|0]=d[s+17|0],p=s+16|0,f[l+147|0]=d[0|p],t=16)))))))}f[132+(t+l|0)|0]=0,I=Y;break A}if(!A|p>>>0>7||(h=r,d[e[144464+(d[r+2|0]<<2)>>2]+11|0]!=2&&(h=ne,d[e[144464+(d[r+34|0]<<2)>>2]+11|0]!=2))||!(1&(p=e[A+56>>2]))&&16&d[0|r])break e;I=15&d[h+3|0],I=2&p&&d[h+6|0]<=I>>>0?4:I;p:{C:{h:{b:switch((p=7&P)-3|0){case 1:break C;case 0:break b;default:break h}if(I>>>0>3)break p;break e}if(e[102832+(p<<2)>>2]>(0|I))break p;break e}if(d[h+6|0]>I>>>0)break e}e[l+8>>2]=255&t,I=1;break r}if((57344&t)==8192){for(NA=e[32972],P=1,ke=0;;){M=255&t,p=(z=4095&t)>>>8|0;i:if(z>>>0<=3583){(0|(I=(p>>>0)%7|0))==6&&(I=y[s+2>>1]),X=0,p=r;p:{C:{h:switch(0|I){case 6:if(h=0,y[r+36>>1]|y[r+68>>1])break i;case 3:p=Pe;break C;case 9:if(h=0,y[r+36>>1]|y[r+68>>1])break i;if(p=_e,!y[r+100>>1])break p;break i;case 7:if(h=0,y[r+36>>1])break i;for(I=1;;){if(d[e[144464+(d[(p=(I<<5)+r|0)+2|0]<<2)>>2]+11|0]==2)break C;if(y[4+(((I=I+1|0)<<5)+r|0)>>1])break}break i;case 5:if(h=0,y[r+4>>1])break i;case 0:X=1,p=ye;break C;case 4:if(h=0,y[r+36>>1])break i;case 2:p=ne;break C;case 8:if(h=0,!i)break i;if(X=1,e[(p=i)+8>>2])break p;break i;case 10:break h;default:break C}if(h=0,y[r+4>>1]|y[lA>>1])break i;X=1,p=Ke;break p}C:switch(0|I){case 0:case 5:break C;default:break p}p=(d[p+2|0]==1?-32:0)+p|0}if(te?(I=e[144464+(d[p+2|0]<<2)>>2],e[p+8>>2]=I):I=e[p+8>>2],z>>>0<=1791){if(h=1,e[e[144464+(M<<2)>>2]>>2]==e[I>>2])break i;if(!(!X|d[I+11|0]!=2)){h=(0|M)==d[I+13|0];break i}h=(0|M)==d[I+12|0];break i}M=31&z,h=0;p:switch(z>>>5&7){case 0:h=(0|M)==d[I+11|0];break i;case 1:h=(0|M)==(15&y[I+6>>1]);break i;case 2:h=e[I+4>>2]>>>M&1;break i;case 4:break p;default:break i}p:switch(0|M){case 0:case 1:case 2:case 3:case 4:if(d[e[144464+(d[p+2|0]<<2)>>2]+11|0]!=2){if(d[e[144464+(d[p+34|0]<<2)>>2]+11|0]!=2)break i;p=p+32|0}I=15&d[p+3|0],I=!A|!(2&d[A+56|0])?I:d[p+6|0]<=I>>>0?4:I;C:{h:switch(M-3|0){case 1:h=d[p+6|0]<=I>>>0;break i;case 0:if(h=1,I>>>0<=3)break C;break i;default:break h}if(h=1,e[102832+(M<<2)>>2]>(0|I))break i}h=0;break i;case 17:if(!d[I+11|0]){h=1;break i}h=(32&d[r+1|0])>>>5|0;break i;case 18:h=y[p+4>>1]!=0;break i;case 19:if(h=1,y[p+36>>1])break i;h=!d[e[p+40>>2]+11|0];break i;case 9:if(y[p+4>>1])break i;for(;;){if(h=!!(0|(I=12&d[p-29|0])),I)break i;if(y[(p=p-32|0)+4>>1])break}break i;case 10:h=d[I+11|0]!=2;break i;case 11:for(;;){if(h=!!(0|(I=y[p+36>>1])),I)break i;if(I=p,p=p+32|0,d[e[I+40>>2]+11|0]==2)break}break i;case 12:if(h=1,(254&d[I+11|0])==2)break i;h=(16&d[I+4|0])>>>4|0;break i;case 13:for(;h=(d[e[p+8>>2]+11|0]==2)+h|0,I=y[p+4>>1],p=p-32|0,!I;);h=(0|h)==1;break i;case 14:for(;h=(d[e[p+8>>2]+11|0]==2)+h|0,I=y[p+4>>1],p=p-32|0,!I;);h=(0|h)==2;break i;case 16:break p;default:break i}h=(16&d[0|p])>>>4|0}else if(h=0,(0|p)==15){p:switch(M-1|0){case 0:h=mA;break i;case 1:break p;default:break i}h=e[NA+132>>2]!=0}i:if(1970>>>(p=(I=65535&t)>>>12|0)&1)p=f[p+102848|0];else{p:switch(0|p){case 0:if(p=1,(3840&I)!=3328)break i;p=1+(1+(255&I)>>>1|0)|0;break i;case 6:p=(I>>>9&7)-5>>>0<2?12:1;break i;case 2:case 3:p=(0|(p=3840&I))==3328||(0|p)==1536?2:1;break i;default:break p}p=4,(I=y[s+4>>1])>>>0>61439||(p=(0|I)==2?3:2)}if(s=((p=y[(s=(p<<1)+s|0)>>1]==3)<<1)+s|0,p^=h,P=ke?p|P:p&P,ke=4096&t,(57344&(t=y[s>>1]))!=8192)break}if(!(1&P))if((63488&t)!=26624){i:if(1970>>>(p=t>>>12|0)&1)p=f[p+102848|0];else{p:switch(0|p){case 0:if(p=1,(3840&t)!=3328)break i;p=1+(1+(255&t)>>>1|0)|0;break i;case 6:p=(t>>>9&7)-5>>>0<2?12:1;break i;case 2:case 3:p=(0|(t&=3840))==3328||(0|t)==1536?2:1;break i;default:break p}p=4,(t=y[s+4>>1])>>>0>61439||(p=(0|t)==2?3:2)}s=(((65024&y[(t=(p<<1)+s|0)>>1])==24576)<<1)+t|0}else s=((255&t)<<1)+s|0}p=s-2|0,I=Y;break A}l:switch(p>>>1|0){case 0:s=(((255&t)<<1)+s|0)-2|0;break e;case 5:e[l>>2]=2|e[l>>2],((t=d[e[r+40>>2]+12|0])-28&255)>>>0<=5&&(p=y[(t=((t<<2)+s|0)-112|0)+4>>1],t=y[t+2>>1],e[l+96>>2]=t>>>4<<24>>24,e[l+76>>2]=(15&t)<<18|p<<2),s=s+24|0;break e;case 6:break l;default:break e}((t=d[e[GA>>2]+13|0])-28&255)>>>0<=5&&(p=y[(t=((t<<2)+s|0)-112|0)+4>>1],t=y[t+2>>1],e[l+100>>2]=t>>>4<<24>>24,e[l+80>>2]=(15&t)<<18|p<<2),s=s+24|0;break e}t=y[(s=s+2|0)>>1]|t<<16&983040;u:switch(p-1|0){case 0:if((0|V)>9)break e;e[(c+32|0)+(V<<2)>>2]=s,s=(e[34459]+(t<<1)|0)-2|0,V=V+1|0;break e;case 1:e[l+124>>2]=t;break e;case 2:break u;default:break e}e[l+128>>2]=t;break e}e[(p=(((0|p)!=1)<<3)+l|0)+108>>2]=y[s+2>>1]|(255&t)<<16,t=y[s+4>>1]<<16,s=s+6|0,e[p+112>>2]=t|y[s>>1];break e}if(I=y[(p=s+2|0)>>1],z=t>>>4|0,e[(P=((M=h-11|0)<<2)+l|0)+88>>2]=255&z,e[P+68>>2]=t<<18&3932160|I<<2,(0|(s=y[s+4>>1]))==2){s=p;break e}if(I=t>>>0<=53247?s>>>0>61439?2:1:Y-((0|M)==4)|0,h-13>>>0>1)break A;e[P+88>>2]=z<<24>>24;break A}e[c+4>>2]=Co(c+75|0,e[g>>2]),e[c>>2]=t,Kt(me,85851,c);break e}e[4+((p<<2)+l|0)>>2]=I,I=te&&(0|p)==1?1:Y}p=s}(0|I)!=1|(0|V)<=0?(s=p,Y=I):(s=e[(c+32|0)+((V=V-1|0)<<2)>>2],Y=0)}if(s=s+2|0,(0|Y)==1)break}!i|d[r+17|0]!=2||(A=e[r+4>>2],e[i>>2]=e[r>>2],e[i+4>>2]=A,A=e[r+28>>2],e[i+24>>2]=e[r+24>>2],e[i+28>>2]=A,A=e[r+20>>2],e[i+16>>2]=e[r+16>>2],e[i+20>>2]=A,A=e[r+12>>2],e[i+8>>2]=e[r+8>>2],e[i+12>>2]=A),f[r+23|0]=e[l+44>>2],(A=e[l+68>>2])?(e[r+24>>2]=A,A=l+88|0):(e[r+24>>2]=e[l+72>>2],A=l+92|0),e[r+28>>2]=e[A>>2]}H=c+80|0}function Ts(A,t,r,s,i,l){var c,g=0,p=0,I=0,h=0,M=0,P=0,z=0,Y=0,V=0,X=0,te=0,ne=0,me=0,ke=0,ye=0,Pe=0,_e=0,Ke=0;H=c=H-848|0;e:if(!(!e[A+104>>2]|8&d[i+2|0]|e[47202]==193)){for(e[s>>2]=0,e[33272]=0,e[33274]=l,f[c+192|0]=0,e[33273]=c+192;h=(l=h)+1|0,f[0|(ne=t+l|0)]-48>>>0<10;);e[56798]=0,Pe=c+188|0,P=-2147483648,H=te=H-16|0;A:if(g=d[0|t]){M=t;r:{for(;;){if(!((0|(g=g<<24>>24))==32|g-9>>>0<5))break r;if(g=d[M+1|0],M=M+1|0,!g)break}break A}r:switch((g=d[0|M])-43|0){case 0:case 2:break r;default:break A}V=(0|g)==45?-1:0,M=M+1|0}else M=t;for(;g=-48,(((z=f[0|M])-48&255)>>>0<10||(g=-87,(z-97&255)>>>0<26||(g=-55,!((z-65&255)>>>0>25))))&&!((0|(z=g+z|0))>=10);)Br(te,10,0,0,0,Y,X,0,0),g=1,e[te+8>>2]|e[te+12>>2]||(ke=At(Y,X,10,0),(0|(ye=he))==-1&~z>>>0<ke>>>0||(g=ye,X=(Y=z+ke|0)>>>0<z>>>0?g+1|0:g,me=1,g=I)),M=M+1|0,I=g;Pe&&(e[Pe>>2]=me?M:t);A:{r:{if(I)e[56798]=68,Y=-2147483648,X=0;else if(!X&Y>>>0<2147483648)break r;if(!V){e[56798]=68,P=2147483647;break A}if(!(!X&Y>>>0<=2147483648)){e[56798]=68;break A}}P=(V^Y)-V|0}if(H=te+16|0,V=P,!(e[56798]|e[c+188>>2]==(0|t))){A:{r:{a:{if(!(!((0|(z=64&d[A+109|0]?4:3))!=(0|l)|e[A+124>>2]!=f[t-2|0])&f[t-3|0]-48>>>0<10)){n:{if(e[A+124>>2]!=32){if(!(16&d[A+105|0]))break a;if((0|l)==3)break n;break a}if((0|l)!=3)break a}if(4&d[i+2|0]|f[t-2|0]-48>>>0>=10)break a}f[133104]=0,f[c+288|0]=0,_e=1;break r}if(f[133104]=0,e[33275]=0,f[c+288|0]=0,Ke=1,me=0,d[0|t]==48)break A}me=Qr(A,t,ne,i,0)}d[0|ne]!=46|f[t+h|0]-48>>>0<10|1&f[i+13|0]|f[ne+2|0]-48>>>0<10||(f[0|ne]=0);A:if(!me||(ke=1,e[A+212>>2]==26741)){if(P=c+256|0,e[c+844>>2]=P,p=h,64&d[i+1|0]&&(f[c+256|0]=45,P=c+256|1,e[c+844>>2]=P,p=l+2|0),M=d[t+p|0]){for(;!((255&M)==32|(0|p)>28)&&(g=e[c+844>>2],e[c+844>>2]=g+1,f[0|g]=M,M=d[(p=p+1|0)+t|0]););P=e[c+844>>2]}if(f[0|P]=0,ke=1,g=f[c+256|0]){if(!(I=e[A+136>>2])||Ut(c+256|0,I)){if(g-48>>>0<10||(e[c+176>>2]=c+256,iA(g=c+800|0,88653,c+176|0),!DA(A,g,133104)))break A;e[s>>2]=128|e[s>>2],e[c+160>>2]=c+256,iA(g=c+800|0,88773,c+160|0),DA(A,g,133116),ke=0}me=2}}Pe=e[i>>2],f[c+352|0]=0,f[c+624|0]=0;A:{r:{a:if(!(!Ke|d[0|t]!=48||(0|(g=f[t+1|0]))==32|(0|g)==e[A+128>>2])){n:{if((0|l)==2){if(d[t+3|0]!=58|f[t+5|0]-48>>>0>=10||!((0|(g=f[t+7|0]))==32|g-9>>>0<5))break n;break a}if((0|l)>3)break r}if(d[0|t]==48&&!((0|(g=l-1|0))<=0))for(p=0;;){if(DA(A,88875,CA(I=c+288|0)+I|0),d[(p=p+1|0)+t|0]!=48)break a;if(!((0|g)>(0|p)))break}}a:{n:{if(!((0|(g=f[0|ne]))==32&&16&d[A+105|0])){if(ye=2,Y=l+2|0,(0|g)==e[A+124>>2])break n;X=1,P=0,g=0;break a}ye=1,Y=l+2|0}if(4&d[i+14|0])P=1,g=0,X=1;else for(g=0,M=1,p=l,X=1;;){I=g,g=M,M=(te=p+ye|0)+t|0,p=0;n:{for(;;){if(P=1,!(f[p+M|0]-48>>>0>=10)){if((0|z)!=(0|(p=p+1|0)))continue;break n}break}g=I;break a}if(f[M+z|0]-48>>>0<10){g=I;break a}if(p=0,f[M-1|0]-48>>>0<10){g=I;break a}n:{for(;;){if(d[(p+te|0)+t|0]==48){if((0|z)!=(0|(p=p+1|0)))continue;break n}break}X=0}if((0|(I=f[(p=z+te|0)+t|0]))!=e[A+124>>2]&(!(16&d[A+105|0])|(0|I)!=32))break a;if(Y=p+2|0,4&d[2+(O(M=g+1|0,12)+i|0)|0])break}}p=!V;a:if(!(!X|!(64&d[1+(O(g,12)+i|0)|0])|e[A+212>>2]!=26741)){n:switch(d[0|(I=t+Y|0)]-97|0){case 0:case 4:break n;default:break a}n:{o:{c:{u:switch((M=d[I+1|0])-116|0){case 6:break a;case 1:case 2:case 3:case 4:case 5:break o;case 0:break u;default:break c}if(d[I+2|0]!=116)break n;break a}if((0|M)==32)break a}if(!(!!((0|V)%1e3|0)&(0|g)!=1)&&(0|M)==108)break a}e[33274]=1|e[33274]}Y=32768&Pe,p&=_e;a:if(e[A+128>>2]!=f[0|ne]|f[t+h|0]-48>>>0>=10){n:{if(!p){if(p=0,I=1,!((0|g)>0&P))break n;V=(h=or(A,V,g,X,c+624|0))?0:V,p=!!(0|h),M=0;break a}p=1,V=0,e[33275]==1&&(e[c+144>>2]=g+1,iA(h=c+800|0,89026,c+144|0),DA(A,h,c+688|0)||(e[c+128>>2]=g,iA(h=c+800|0,89026,c+128|0),DA(A,h,c+624|0)))}I=1,M=0}else DA(A,88882,c+624|0),I=0,M=256;P=Y?2:me;a:{if(g|d[c+624|0]|d[0|ne]!=46){if(g)break a}else DA(A,89192,c+624|0);if(e[c+844>>2]=t,f[t+1|0]-48>>>0<10)for(;h=e[c+844>>2],e[c+844>>2]=h+1,f[h+2|0]-48>>>0<10;);if(f[e[c+844>>2]-1|0]-48>>>0>=10||(e[c+416>>2]=e[c+844>>2]-1,gA(A,c+416|0,c+192|0,s,4,i)&&(e[33272]=2)),d[c+192|0]|d[e[c+844>>2]]==48||gA(A,c+844|0,c+192|0,s,4,i)&&(e[33272]=1),Ke){if(!P&I&&(e[c+112>>2]=V,iA(i=c+800|0,89214,c+112|0),DA(A,i,r)))break A;if(1&f[A+110|0]){for(h=t;(32|d[0|h])!=32;)h=h+1|0;e[c+416>>2]=h,d[h+1|0]==37&&(DA(A,89328,r),i=CA(r),f[e[c+416>>2]+1|0]=32,r=r+i|0)}}}Is(A,V,c+416|0,p,g,P|M|_e),!(2&d[A+109|0])|(0|g)<=0?(e[c+60>>2]=15,e[c- -64>>2]=c+624,e[c+56>>2]=c+416,e[c+52>>2]=c+352,e[c+48>>2]=c+288,iA(r,89415,c+48|0)):(e[c+88>>2]=15,e[c+96>>2]=c+416,e[c+92>>2]=c+352,e[c+84>>2]=c+624,e[c+80>>2]=c+288,iA(r,89346,c+80|0));a:if(!I)for(;;){for(l=l+1|0,I=0;I=(h=I)+1|0,f[(g=l+h|0)+t|0]-48>>>0<10;);i=2;n:{o:{c:{u:{l:{i:switch((I=57344&e[A+104>>2])+-8192>>>13|0){case 6:break o;case 2:break c;case 0:case 4:case 5:break u;case 1:break l;case 3:break i;default:break n}i=5}if((0|(I=d[0|(p=t+l|0)]))==48)for(;DA(A,88875,g=c+688|0),Ur(r,g),h=h-1|0,(0|(I=d[0|(p=(l=l+1|0)+t|0)]))==48;);if((0|i)<(0|h)|(I<<24>>24)-48>>>0>=10)break n;i=c+688|0,Is(A,Us(p),i,0,0,0),Ur(r,i),l=l+h|0;break n}if(Is(A,Us(i=t+l|0),c+416|0,0,0,0),!((0|I)==8192&d[0|i]!=48)){if(e[c+16>>2]=h,iA(i=c+800|0,89508,c+16|0),!DA(A,i,c+688|0))break n;Ur((0|I)==49152?r:c+416|0,c+688|0)}Ur(r,c+416|0),l=g;break n}if((0|h)>4||d[0|(i=t+l|0)]==48)break n;Is(A,l=Us(i),i=c+688|0,0,0,0),Ur(r,i),l=g;break n}if(!((0|h)<=1))for(;;){if(e[c+32>>2]=f[t+l|0],iA(i=c+800|0,89575,c+32|0),!DA(A,i,c+688|0))break n;if(Ur(r,c+688|0),l=l+1|0,!((0|(h=h-1|0))>1))break}}n:if(!((I=d[0|(h=t+l|0)])-48>>>0>=10||CA(r)>>>0>=190))for(;;){if(i=c+688|0,SA(A,f[0|h]-48|0,0,2,i),g=CA(r),e[c>>2]=15,e[c+4>>2]=i,iA(r+g|0,89594,c),(I=d[0|(h=(l=l+1|0)+t|0)])-48>>>0>=10)break n;if(!(CA(r)>>>0<=189))break}if(DA(A,89678,c+688|0)&&Ur(r,c+688|0),e[A+128>>2]!=(0|I)|f[1+(t+l|0)|0]-48>>>0>=10)break a;DA(A,88882,i=c+688|0),Ur(r,i)}if(!(i=d[0|r])|(0|i)==21||(i=_A(c+184|0,t=1+(t+l|0)|0),l=e[c+184>>2],!(2&d[A+106|0])|(0|l)!=32||(_A(c+184|0,t+i|0),l=e[c+184>>2]),FA(l)|X||(A=CA(r)+r|0,f[0|A]=11,f[A+1|0]=0)),e[s>>2]=-2147483648|e[s>>2],e[33275]=e[33275]-1,p=1,ke)break e;e[33264]=1;break e}e[s>>2]=-129&e[s>>2],p=0;break e}p=1}}return H=c+848|0,p}function re(A,t,r,s){var i,l,c=0,g=0,p=0,I=0,h=0,M=0,P=0,z=0,Y=0,V=0,X=0,te=0,ne=0,me=0,ke=0,ye=0,Pe=0,_e=0,Ke=0,lA=0,mA=0;if(H=i=H-416|0,me=y[r+8>>1],Y=d[r+10|0],64&(l=e[r>>2])){for(e[r>>2]=-65&l,f[199388]=1,p=e[47202],P=e[49846],h=e[47352],M=e[47351],I=e[47350];;){c=(g=e[198304+(M<<2)>>2])>>8;e:{A:switch((31&g)-9|0){case 0:p=c;break e;case 4:P=c;break e;case 3:break A;default:break e}h=g>>>0>=256?c+h|0:0}if(!(!(128&g)&(0|I)>(0|(M=M+1|0))))break}e[47352]=h,e[47351]=M,e[49846]=P,e[47202]=p}P=0;e:if(!((0|(c=e[49572]))>997)){if(1048576&l||!d[0|t])d[199388]&&(e[49572]=c+1,f[199388]=0,e[(A=190288+(c<<3)|0)>>2]=983042,e[A+4>>2]=0),f[189088]=0;else if(!((0|c)>990)){(0|(c=e[A+8224>>2]))>0&&(e[A+8224>>2]=c-1),p=512&l?s:s+4|0,h=(240&e[47202])==16,(te=2&l)&&((0|(g=e[47200]))<3||(0|(c=e[47350]))>243||(d[199388]&&(e[(M=198300+(c<<2)|0)>>2]=-129&e[M>>2]),e[47350]=c+1,f[199388]=1,ke=(0|g)==3?20:g,e[198304+(c<<2)>>2]=ke<<8|193)),I=h?p:s;A:{r:{if(!(8&l)){for(;s=d[(c=z)+t|0],f[c+(i+240|0)|0]=s,223&s&&(z=c+1|0,c>>>0<160););if(f[i+66|0]=0,z=i- -64|2,P=K(e[47192],t,r,z),e[i+412>>2]=P,!(4096&P))break r;rt(t,i+240|0,c);break e}a:if(Hr(t,87276,3))Mr(t,189088,i+240|0);else{if(M=0,223&(c=d[0|(z=t+3|0)]))for(;f[(i+240|0)+M|0]=Ms(c<<24>>24),M=M+1|0,223&(c=d[0|(z=z+1|0)]););f[(s=i+240|0)+M|0]=0,c=0;n:if(!((0|(r=e[34461]))<=0)){for(;;){if(!Ut(s,O(c,44)+137856|0)){e[34457]=c;break n}if((0|r)==(0|(c=c+1|0)))break}c=r}if((0|(r=(0|r)==(0|c)?-1:c))<=0)break a;rs(r),f[189090]=0,f[189089]=r,f[189088]=21}P=-2147483648,e[i+412>>2]=-2147483648,s=-1;break A}if(!(!(8388608&P)|8&d[r+12|0])){for(H=h=H-208|0,M=e[A+60>>2],g=t;s=g,g=g+1|0,d[0|s]!=32;);_A(h+204|0,g);r:if(FA(e[h+204>>2])){p=yA(h,189088),g=(!(256&M)|(X=tA(A,g,r+12|0,0))>>>15)&!(67108864&X)&d[189088]!=21;a:{n:{if(512&M){if(!(g&!(16&d[r+12|0])))break n;break a}if(g)break a}yA(189088,p);break r}if(f[0|s]=45,e[r>>2]=-2&e[r>>2],P=0,g=189088,V=tA(e[47192],t,r,0),e[i+412>>2]=V,!((0|M)<=0)&&(p=d[189088])){for(;P=(d[e[144464+(p<<2)>>2]+11|0]==2)+P|0,p=d[0|(g=g+1|0)];);if(!((31&M)>=(0|P))){f[0|s]=32,e[i+412>>2]=tA(e[47192],t,r,0);break r}}e[i+412>>2]=128|(V||X),e[33264]=1}H=h+208|0}if(s=-1,d[189088]==21){if(M=yA(i+16|0,132848),h=e[i+412>>2],g=rt(t,i+240|0,c),p=i- -64|1,(0|(s=Ks(d[189089]?189089:87315,188772,189296)))<0||(e[r>>2]=4194304|e[r>>2],d[i+66|0]?(k[i+64>>1]=8192,h=tA(e[47193],p,r,0)):h=K(e[47193],g,r,z)),d[189088]==21&&(c=rt(g,i+240|0,c),(0|(s=Ks(d[189089]?189089:87315,188772,189296)))<0||(e[r>>2]=4194304|e[r>>2],d[i+66|0]?(k[i+64>>1]=8192,h=tA(e[47193],p,r,0)):h=K(e[47193],c,r,z)),P=4096,d[189088]==21))break e;e[i+412>>2]=h,(0|s)>=0||(f[189090]=0,k[94544]=3341,(0|s)==-1&&(yA(132848,M),rs(e[e[32972]+60>>2]),s=e[e[32972]+60>>2]))}P=e[i+412>>2],128&l||(I=268435456&P&&(0|I)<=1?1:I,!(256&P)|528&l|e[A+8224>>2]|2&d[r-11|0]||(e[A+8224>>2]=3,I=(0|I)<=4?4:I)),I=(0|I)<=0&&e[49846]>2?1:I}if(r=d[199388],!((0|I)<=0|(0|(z=e[49572]))>990)){e[49572]=z+1,g=1&r,r=0,k[(c=190288+(z<<3)|0)>>1]=g?2:0,f[c+7|0]=0,f[c+3|0]=0,g=I>>>0>1,f[c+2|0]=g?9:11,k[c+4>>1]=0,e[A+8236>>2]=0;A:if(!(!(c=g?I-2|0:0)|(0|(z=e[49572]))>990))for(p=A+8236|0;;){if(e[49572]=z+1,k[(g=190288+(z<<3)|0)>>1]=0,f[g+7|0]=0,f[g+3|0]=0,h=c>>>0>1,f[g+2|0]=h?9:11,k[g+4>>1]=0,e[p>>2]=0,z=e[49572],(0|(c=h?c-2|0:0))<=0)break A;if(!((0|z)<991))break}e[A+8228>>2]=0,e[A+8232>>2]=0}f[199388]=1&r,!te|e[47200]!=1||(e[49572]=z+2,f[199388]=0,k[(c=190288+(z<<3)|0)>>1]=1&r?2:0,f[c+7|0]=0,k[c+2>>1]=10,k[c+4>>1]=0,k[c+12>>1]=0,e[c+8>>2]=1179648,f[c+15|0]=0,1&l&&Bt(f[t+1|0])&&(r=d[199388],f[199388]=0,t=e[49572],e[49572]=t+2,k[(t=190288+(t<<3)|0)>>1]=r?2:0,f[t+7|0]=0,k[t+2>>1]=10,k[t+4>>1]=0,k[t+12>>1]=0,e[t+8>>2]=1179648,f[t+15|0]=0)),c=Y>>>0<31;A:if(!((0|s)<0))if(t=e[49572],r=d[190290+((I=t-1|0)<<3)|0],d[189088]!=9|d[189089]!=21)(0|r)!=21&&(g=d[199388],f[199388]=0,f[(r=190288+(t<<3)|0)+7|0]=0,k[r+2>>1]=21,k[r+4>>1]=0,k[r>>1]=g?2:0,I=t),e[49572]=I+1,f[190295+(I<<3)|0]=s;else{if((0|r)!=21)break A;e[49572]=I}t=2047&me,r=(c?Y:31)<<11,h=(ye=128&l)?d[e[144464+(d[189088]<<2)>>2]+11|0]?189088:189089:189088,(I=d[0|h])|!(1&f[199388])||(I=23,f[0|h]=23,f[h+1|0]=0),Pe=t|r,p=e[49572];A:if(I)if((0|p)>994)t=0;else for(lA=((-1610612736&P)==-2147483648)<<4,me=Pe+1|0,mA=A+8233|0,t=0,g=1,X=0,_e=1,Y=-1,te=-1,c=0;;){M=h+1|0;r:{if((0|(V=255&I))!=255){if(r=e[144464+(V<<2)>>2])break r;e[i>>2]=V,H=r=H-16|0,e[r+12>>2]=i,_i(132552,87474,i),H=r+16|0,p=e[49572]}if(!(I=d[0|M]))break A;if(h=M,(0|p)<995)continue;break A}r:if((0|(ne=255&I))!=21)if((0|(h=d[r+11|0]))!=1){r=me;a:switch(ne-12|0){case 8:f[(r=190288+((Y=p-1|0)<<3)|0)+3|0]=g,k[r>>1]=4|y[r>>1],r=c;break r;case 0:k[(r=190280+(p<<3)|0)>>1]=8|y[r>>1],r=c;break r;case 10:P|=16384,e[i+412>>2]=P,r=c;break r;case 3:break r;default:break a}V=d[199388],f[199388]=0,f[(r=(ne=p<<3)+190288|0)+7|0]=0,f[r+2|0]=I,k[r+4>>1]=c,c=(V?2:0)|lA,k[r>>1]=c,(0|h)==2?((0|g)>=4&&(f[189076]=1),(0|Y)<0||(0|(t=p-1|0))!=(0|Y)&&(f[190291+(t<<3)|0]=g),k[r>>1]=4|c,Ke=(t=(0|g)>(0|te))?p:Ke,te=t?g:te,c=1,X&&(f[r+7|0]=X),Y=p,X=0,t=g):(!_e|!(64&d[0|mA])||(k[r>>1]=8|c),c=g),p=p+1|0,e[49572]=p,f[ne+190291|0]=t,r=0,_e=0,g=c}else{if(!y[r+8>>1]){g=d[r+14|0],r=c;break r}if((0|Y)<0){r=c,X=V;break r}f[190295+(Y<<3)|0]=I,r=c}else e[(r=190288+(p<<3)|0)>>2]=1376256,k[r+4>>1]=0,f[r+7|0]=d[h+1|0],e[49572]=p+1,rs(d[h+1|0]),M=h+2|0,p=e[49572],r=c;if(!(I=d[0|M]))break A;if(h=M,c=r,!((0|p)<995))break}else t=0;131072&l&&(r=p+1|0,e[49572]=r,g=d[199388],f[199388]=0,f[(c=190288+(p<<3)|0)+7|0]=0,k[c+2>>1]=27,k[c+4>>1]=0,k[c>>1]=g?2:0,p=r),ye||(k[190292+(z<<3)>>1]=Pe),e[A+8228>>2]=0,d[e[144464+(d[190282+(p<<3)|0]<<2)>>2]+11|0]!=2|(0|t)<4||(e[A+8228>>2]=1),(0|s)>=0&&(yA(132848,i+16|0),rs(e[e[32972]+60>>2]),r=d[199388],f[199388]=0,s=e[49572],k[(t=190288+(s<<3)|0)>>1]=r?2:0,k[t+2>>1]=21,k[t+4>>1]=0,f[t+7|0]=e[e[32972]+60>>2],p=s+1|0,e[49572]=p),(0|ke)>0&&(f[199388]=0,e[49572]=p+1,e[(t=190288+(p<<3)|0)>>2]=655362,r=e[47350],e[47350]=r+1,f[t+7|0]=0,k[t+4>>1]=0,e[198304+(r<<2)>>2]=ke<<8|225),1024&P&&(k[(t=190288+(Ke<<3)|0)>>1]=64|y[t>>1]),e[A+8232>>2]=P}}return H=i+416|0,P}function De(A,t,r,s,i){var l=0,c=0,g=0,p=0,I=0,h=0,M=0,P=0,z=0,Y=0,V=0,X=0,te=0,ne=0,me=0,ke=0,ye=0,Pe=0,_e=0,Ke=0,lA=0,mA=0,GA=0,NA=0;e:if(t){if(te=i<<4,c=(t=e[33268])+r|0,!((0|t)<=0||(l=d[0|(p=te+129360|0)],M=d[p+1|0]-l<<8,M=(0|t)!=1?(0|M)/(0|t)|0:M,(0|r)>=(0|c))))for(P=M>>>0>255,V=M>>>8|0,l<<=8,p=0-M>>>8|0,ke=(0|M)<=0,t=r;ke?(I=(h=(h=(0|(g=(0|(g=e[101024+(f[O(t,6)+A|0]<<2)>>2]))<(0|p)?p:g))>=18?18:g)+(g=(0|(g=(0|(l=l+M|0))/256|0))>0?g:0)|0)>>>0>=254?254:h,g=g>>>0>=254?254:g):(g=O(t,6)+A|0,f[g+2|0]=P|d[g+2|0],g=(h=(0|(g=(0|l)/256|0))>0?g:0)>>>0>=254?254:h,I=(h=h+V|0)>>>0>=254?254:h,l=l+M|0),h=O(t,6)+A|0,f[h+5|0]=g,f[h+4|0]=I,(0|c)!=(0|(t=t+1|0)););if(2&d[188785]?(p=e[33271],e[33270]=p):p=e[33270],V=(P=d[(l=(t=i<<4)+129360|0)+3|0])-(g=d[l+2|0])<<8,ke=e[l+4>>2],(0|r)>0?(Pe=101056,ne=5,h=(0|V)/(d[t+129368|0]-1|0)|0):(Pe=e[(t=t+129360|0)+12>>2],ne=d[t+10|0],h=0),(0|c)<(0|p)){for(M=(0|r)<=0,X=((t=V>>31)^V)-t|0,z=129360+(i<<4)|0,g<<=8,ye=P<<8,P=0;;){A:{if(I=O(c,6)+A|0,!(!(1&M)&(0|(l=f[0|I]))<4)){r=0,t=c;r:if(1&((0|l)==5|M)){for(;(0|(h=f[O(t,6)+A|0]))<=6&&(r=((0|h)>3)+r|0,(0|p)!=(0|(t=t+1|0))););if(Y=0,(0|(me=(0|(t=d[z+8|0]))>(0|r)?r:t))<2){h=0,P=g;break r}h=(0|V)/(me-1|0)|0,P=g}else(0|me)>0?P=h+P|0:(P=ye+(O(X,f[Y+Pe|0])>>6)|0,(0|ne)>(0|(Y=Y+1|0))||(Pe=e[z+12>>2],Y=0));if(me=me-1|0,!((0|l)<4)){f[0|I]=6,r=(t=(0|(t=(0|P)/256|0))>0?t:0)+(((r=(l=e[ke+(l<<2)>>2])>>31)^l)-r|0)|0;break A}}(0|l)!=3?(t=(0|P)/256|0,(63&d[I-6|0])>>>0>=3?(r=(l=e[ke+(l<<2)>>2])>>31,r=(t=(0|(t=t-f[z+9|0]|0))>0?t:0)+((r^l)-r|0)|0):r=(t=(0|t)>0?t:0)+(((r=(l=e[ke+(l<<2)>>2])>>31)^l)-r|0)|0):r=(t=(0|(t=(0|P)/256|0))>0?t:0)+(((r=(l=e[ke+12>>2])>>31)^l)-r|0)|0}if(f[I+5|0]=t>>>0>=254?254:t,M=0,t=(0|r)>0?r:0,f[I+4|0]=t>>>0>=254?254:t,f[I+2|0]=d[I+2|0]|l>>>31,(0|p)==(0|(c=c+1|0)))break}c=p}if(!(d[133068]||((268435455&i)==3&&(t=O(c,6)+A|0,f[t+2|0]=2|d[t+2|0]),e[33269]?(t=d[(l=100768+(i<<4)|0)+5|0],g=l+3|0,r=d[l+4|0]-t|0):(t=d[(r=100768+(i<<4)|0)+2|0],g=te+100768|0,r=d[r+1|0]-t|0),l=O(c,6)+A|0,f[l+5|0]=t>>>0>=254?254:t,f[l+2|0]=d[l+2|0]|r>>>31,t=(h=t)+(((t=r>>31)^r)-t|0)|0,f[l+4|0]=t>>>0>=254?254:t,r=O(p,6)+A|0,f[r+1|0]=d[0|g],t=c+1|0,d[0|r]==4&&(f[0|r]=6),(0|(r=s-t|0))<=0||(i=d[(c=100768+(i<<4)|0)+12|0],c=d[c+13|0]-i<<8,c=(0|r)!=1?(0|c)/(0|r)|0:c,(0|t)>=(0|s)))))for(h=c>>>0>255,M=c>>>8|0,r=i<<8,i=0-c>>>8|0,P=(0|c)<=0;P?(g=(p=(g=(0|(l=(0|i)>(0|(l=e[101024+(f[O(t,6)+A|0]<<2)>>2]))?i:l))>=18?18:l)+(l=(0|(l=(0|(r=r+c|0))/256|0))>0?l:0)|0)>>>0>=254?254:p,p=l>>>0>=254?254:l):(l=O(t,6)+A|0,f[l+2|0]=h|d[l+2|0],p=(l=(0|(l=(0|r)/256|0))>0?l:0)>>>0>=254?254:l,g=(l=l+M|0)>>>0>=254?254:l,r=r+c|0),l=O(t,6)+A|0,f[l+5|0]=p,f[l+4|0]=g,(0|s)!=(0|(t=t+1|0)););}else{if(t=(ne=e[34455])+O(i,68)|0,c=d[t+24|0],p=d[t+25|0],l=(t=e[33268])+r|0,!((0|t)<=0||(I=p-c<<8,I=(0|t)!=1?(0|I)/(0|t)|0:I,(0|r)>=(0|l))))for(h=I>>>0>255,M=I>>>8|0,t=c<<8,p=0-I>>>8|0,P=(0|I)<=0;P?(c=(c=(V=(0|(c=(0|(c=e[101024+(f[O(r,6)+A|0]<<2)>>2]))<(0|p)?p:c))>=18?18:c)+(g=(0|(c=(0|(t=t+I|0))/256|0))>0?c:0)|0)>>>0>=254?254:c,g=g>>>0>=254?254:g):(c=O(r,6)+A|0,f[c+2|0]=h|d[c+2|0],g=(c=(0|(c=(0|t)/256|0))>0?c:0)>>>0>=254?254:c,c=(c=c+M|0)>>>0>=254?254:c,t=t+I|0),V=O(r,6)+A|0,f[V+5|0]=g,f[V+4|0]=c,(0|l)!=(0|(r=r+1|0)););2&d[188785]?(r=e[33271],e[33270]=r):r=e[33270],p=r,t=ne+O(i,68)|0;A:if((0|(M=d[t+33|0]))!=255)for(;;){if((0|(p=p-1|0))<(0|l)){p=r;break A}if(!(f[O(p,6)+A|0]<4))break}if((0|r)>(0|l)){for(mA=((c=(Ke=(P=d[t+32|0])-(I=d[0|(g=t+31|0)])<<8)>>31)^Ke)-c|0,ye=(0|(t=d[0|(h=t+30|0)]))==255,V=M<<8,ke=I<<8,GA=P<<8,te=ne+O(i,68)|0,NA=(0|t)!=255,P=0,M=0,t=1,I=0;;){A:{if(z=O(l,6)+A|0,!(!(1&t)&(0|(X=f[0|z]))<4)){r:if(1&((0|X)==5|t)){a:if(NA){if(_e=1,t=0,c=h,!((0|p)<=(0|(I=l+1|0)))){for(;;){if(c=h,(0|(M=f[O(I,6)+A|0]))>6)break a;if(t=((0|M)>3)+t|0,(0|p)==(0|(I=I+1|0)))break}c=h}}else{if(t=0,I=l,c=g,(0|p)<=(0|l))break a;for(;;){if(c=g,(0|(M=f[O(I,6)+A|0]))>6)break a;if(t=((0|M)>3)+t|0,(0|p)==(0|(I=I+1|0)))break}c=g}if(M=d[0|c]<<8,lA=0,(0|(I=(0|t)<(0|(c=d[te+34|0]))?t:c))<2){Pe=0;break r}Pe=(0|Ke)/(I-1|0)|0}else(0|l)!=(0|p)?_e?(ye=1,I=I+1|0,_e=0,M=ke):(0|I)>0?(M=M+Pe|0,_e=0):(_e=0,M=(O(f[16+(te+lA|0)|0],mA)>>6)+GA|0,lA=(0|(t=lA+1|0))<d[te+35|0]?t:0):(ye=2,M=V);if(I=I-1|0,!((0|X)<4)){t=c=l+1|0;r:if(!((0|r)<=(0|l)))for(;;){if(f[O(t,6)+A|0]>1)break r;if(!((0|r)>=(0|(t=t+1|0))))break}f[0|z]=6,f[z+1|0]=d[te+26|0],P=0,Y=d[te+27|0],l=(0|(l=(0|M)/256|0))>0?l:0,f[z+5|0]=l>>>0>=254?254:l,l=l+Y|0,f[z+4|0]=l>>>0>=254?254:l,me=t-c|0;break A}}if((0|X)>=2){t=c=l+1|0;r:if(!((0|r)<=(0|l)))for(;;){if(f[O(t,6)+A|0]>1)break r;if(!((0|r)>=(0|(t=t+1|0))))break}P=0,l=(0|(l=(0|M)/256|0))>0?l:0,f[z+5|0]=l>>>0>=254?254:l,Y=e[100976+(X<<2)>>2],f[z+2|0]=d[z+2|0]|Y>>>31,l=(0|(l=(X=l)+(((l=Y>>31)^Y)-l|0)|0))>0?l:0,f[z+4|0]=l>>>0>=254?254:l,me=t-c|0}else(0|me)<=1?(Y=f[36+(te+ye|0)|0],t=0):(Y=f[(t=te+ye|0)+36|0],t=(f[t+39|0]-Y|0)/(me-1|0)|0),c=e[100976+(X<<2)>>2],f[z+2|0]=d[z+2|0]|c>>>31,t=(0|(t=(((0|M)/256|0)+Y|0)+O(t,P)|0))>0?t:0,f[z+5|0]=t>>>0>=254?254:t,t=(0|(t=t+(((X=c)^(c>>=31))-c|0)|0))>0?t:0,f[z+4|0]=t>>>0>=254?254:t,P=P+1|0,c=l+1|0}if(t=0,(0|r)==(0|(l=c)))break}l=r}if(d[133068]||(c=O(l,6)+A|0,e[33269]?(g=ne+O(i,68)|0,t=d[g+47|0],p=d[g+46|0]-t|0,g=g+45|0):(g=ne+O(i,68)|0,t=d[g+44|0],p=d[g+43|0]-t|0,g=g+42|0),g=d[0|g],h=(((h=p>>31)^p)-h|0)+t|0,f[c+4|0]=h>>>0>=254?254:h,f[c+5|0]=t>>>0>=254?254:t,t=O(l,6)+A|0,f[t+2|0]=d[t+2|0]|p>>>31,r=O(r,6)+A|0,f[r+1|0]=g,t=l+1|0,d[0|r]==4&&(f[0|r]=6),(0|(r=s-t|0))<=0)||(c=ne+O(i,68)|0,i=d[c+48|0],c=d[c+49|0]-i<<8,c=(0|r)!=1?(0|c)/(0|r)|0:c,(0|t)>=(0|s)))break e;for(h=c>>>0>255,M=c>>>8|0,r=i<<8,i=0-c>>>8|0,P=(0|c)<=0;P?(g=(p=(g=(0|(l=(0|i)>(0|(l=e[101024+(f[O(t,6)+A|0]<<2)>>2]))?i:l))>=18?18:l)+(l=(0|(l=(0|(r=r+c|0))/256|0))>0?l:0)|0)>>>0>=254?254:p,p=l>>>0>=254?254:l):(l=O(t,6)+A|0,f[l+2|0]=h|d[l+2|0],p=(l=(0|(l=(0|r)/256|0))>0?l:0)>>>0>=254?254:l,g=(l=l+M|0)>>>0>=254?254:l,r=r+c|0),l=O(t,6)+A|0,f[l+5|0]=p,f[l+4|0]=g,(0|s)!=(0|(t=t+1|0)););}}function ie(){var A,t=0,r=0,s=0,i=0,l=0,c=0,g=0,p=0,I=0,h=0,M=0,P=0,z=0,Y=0,V=0;if((0|(A=e[36455]))!=(0|(p=e[36454]))){e:if(!((0|(z=e[36427]))<0|(0|p)==(0|z))){r=M=e[8+(216192+((I=z)<<4)|0)>>2];A:{for(;;){if((s=e[(c=216192+((I=(0|(s=I-1|0))<0?169:s)<<4)|0)>>2])-5>>>0<2)break A;r:{if((0|s)<=4){if(e[c+12>>2]!=(0|r))break A;if(s=y[c+4>>1],e[c+12>>2]=M,r=e[c+8>>2],16&(t=y[r>>1]))break r;for(V=32&t?(O(s,12)>>>0)/10|0:s,i=0,s=r,g=0;;){t=y[r>>1];a:if(!(g>>>0<3&&8&t)){if(t=t<<16>>16,(0|(Y=(h=k[2+((P=g<<1)+r|0)>>1])-(l=k[(P=M+P|0)+2>>1])|0))>(0|(h=(0|O(V,(0|O(e[200944+(g<<2)>>2],(0|Y)>0?h+(l<<1)|0:(h<<1)+l|0))/3e3|0))/256|0)))i||((0|t)<0?s=r:(s=0,t=(0|(t=e[44469]+1|0))<=169?t:0,e[44469]=t,(t=(i=t<<6)+177888|0)&&(s=y[r+4>>1]|y[r+6>>1]<<16,l=y[r>>1]|y[r+2>>1]<<16,k[t>>1]=l,k[t+2>>1]=l>>>16,k[t+4>>1]=s,k[t+6>>1]=s>>>16,s=y[r+60>>1]|y[r+62>>1]<<16,l=y[r+56>>1]|y[r+58>>1]<<16,k[t+56>>1]=l,k[t+58>>1]=l>>>16,k[t+60>>1]=s,k[t+62>>1]=s>>>16,s=y[r+52>>1]|y[r+54>>1]<<16,l=y[r+48>>1]|y[r+50>>1]<<16,k[t+48>>1]=l,k[t+50>>1]=l>>>16,k[t+52>>1]=s,k[t+54>>1]=s>>>16,s=y[r+44>>1]|y[r+46>>1]<<16,l=y[r+40>>1]|y[r+42>>1]<<16,k[t+40>>1]=l,k[t+42>>1]=l>>>16,k[t+44>>1]=s,k[t+46>>1]=s>>>16,s=y[r+36>>1]|y[r+38>>1]<<16,l=y[r+32>>1]|y[r+34>>1]<<16,k[t+32>>1]=l,k[t+34>>1]=l>>>16,k[t+36>>1]=s,k[t+38>>1]=s>>>16,s=y[r+28>>1]|y[r+30>>1]<<16,l=y[r+24>>1]|y[r+26>>1]<<16,k[t+24>>1]=l,k[t+26>>1]=l>>>16,k[t+28>>1]=s,k[t+30>>1]=s>>>16,s=y[r+20>>1]|y[r+22>>1]<<16,l=y[r+16>>1]|y[r+18>>1]<<16,k[t+16>>1]=l,k[t+18>>1]=l>>>16,k[t+20>>1]=s,k[t+22>>1]=s>>>16,s=y[r+12>>1]|y[r+14>>1]<<16,l=y[r+8>>1]|y[r+10>>1]<<16,k[t+8>>1]=l,k[t+10>>1]=l>>>16,k[t+12>>1]=s,k[t+14>>1]=s>>>16,f[i+177904|0]=0,k[t>>1]=32768|y[t>>1],s=t))),t=h+y[P+2>>1]|0;else{if((0-h|0)<=(0|Y))break a;i||((0|t)<0?s=r:(s=0,t=(0|(t=e[44469]+1|0))<=169?t:0,e[44469]=t,(t=(i=t<<6)+177888|0)&&(s=y[r+4>>1]|y[r+6>>1]<<16,l=y[r>>1]|y[r+2>>1]<<16,k[t>>1]=l,k[t+2>>1]=l>>>16,k[t+4>>1]=s,k[t+6>>1]=s>>>16,s=y[r+60>>1]|y[r+62>>1]<<16,l=y[r+56>>1]|y[r+58>>1]<<16,k[t+56>>1]=l,k[t+58>>1]=l>>>16,k[t+60>>1]=s,k[t+62>>1]=s>>>16,s=y[r+52>>1]|y[r+54>>1]<<16,l=y[r+48>>1]|y[r+50>>1]<<16,k[t+48>>1]=l,k[t+50>>1]=l>>>16,k[t+52>>1]=s,k[t+54>>1]=s>>>16,s=y[r+44>>1]|y[r+46>>1]<<16,l=y[r+40>>1]|y[r+42>>1]<<16,k[t+40>>1]=l,k[t+42>>1]=l>>>16,k[t+44>>1]=s,k[t+46>>1]=s>>>16,s=y[r+36>>1]|y[r+38>>1]<<16,l=y[r+32>>1]|y[r+34>>1]<<16,k[t+32>>1]=l,k[t+34>>1]=l>>>16,k[t+36>>1]=s,k[t+38>>1]=s>>>16,s=y[r+28>>1]|y[r+30>>1]<<16,l=y[r+24>>1]|y[r+26>>1]<<16,k[t+24>>1]=l,k[t+26>>1]=l>>>16,k[t+28>>1]=s,k[t+30>>1]=s>>>16,s=y[r+20>>1]|y[r+22>>1]<<16,l=y[r+16>>1]|y[r+18>>1]<<16,k[t+16>>1]=l,k[t+18>>1]=l>>>16,k[t+20>>1]=s,k[t+22>>1]=s>>>16,s=y[r+12>>1]|y[r+14>>1]<<16,l=y[r+8>>1]|y[r+10>>1]<<16,k[t+8>>1]=l,k[t+10>>1]=l>>>16,k[t+12>>1]=s,k[t+14>>1]=s>>>16,f[i+177904|0]=0,k[t>>1]=32768|y[t>>1],s=t))),t=y[P+2>>1]-h|0}i=1,k[2+((g<<1)+s|0)>>1]=t,e[c+8>>2]=s}if((0|(g=g+1|0))==6)break}M=s}if((0|p)!=(0|I))continue;break A}break}M=r}for(s=0;;){if((r=e[(I=216192+(z<<4)|0)>>2])-5>>>0<2)break e;if((0|r)<=4){if(r=e[I+8>>2],t=y[I+4>>1],s){if((0|r)!=(0|s))break e;e[I+8>>2]=M}else M=r;if(16&(s=y[M>>1]))break e;for(P=32&s?(O(t,6)>>>0)/5|0:t,i=0,r=s=e[I+12>>2],g=0;;){A:{r:if((0|(p=(c=k[2+((t=g<<1)+s|0)>>1])-(t=k[(h=t+M|0)+2>>1])|0))>(0|(c=(0|O(P,(0|O(e[200944+(g<<2)>>2],(0|p)>0?c+(t<<1)|0:(c<<1)+t|0))/3e3|0))/256|0))){if(!i){if(k[s>>1]<0){r=s,t=t+c|0;break r}r=(0|(r=e[44469]+1|0))<=169?r:0,e[44469]=r,i=y[s+20>>1]|y[s+22>>1]<<16,t=(r=177888+(r<<6)|0)+16|0,p=y[s+16>>1]|y[s+18>>1]<<16,k[t>>1]=p,k[t+2>>1]=p>>>16,k[t+4>>1]=i,k[t+6>>1]=i>>>16,t=y[s+4>>1]|y[s+6>>1]<<16,i=y[s>>1]|y[s+2>>1]<<16,k[r>>1]=i,k[r+2>>1]=i>>>16,k[r+4>>1]=t,k[r+6>>1]=t>>>16,t=y[s+12>>1]|y[s+14>>1]<<16,i=y[s+8>>1]|y[s+10>>1]<<16,k[r+8>>1]=i,k[r+10>>1]=i>>>16,k[r+12>>1]=t,k[r+14>>1]=t>>>16,t=y[s+28>>1]|y[s+30>>1]<<16,i=y[s+24>>1]|y[s+26>>1]<<16,k[r+24>>1]=i,k[r+26>>1]=i>>>16,k[r+28>>1]=t,k[r+30>>1]=t>>>16,t=y[s+36>>1]|y[s+38>>1]<<16,i=y[s+32>>1]|y[s+34>>1]<<16,k[r+32>>1]=i,k[r+34>>1]=i>>>16,k[r+36>>1]=t,k[r+38>>1]=t>>>16,t=y[s+44>>1]|y[s+46>>1]<<16,i=y[s+40>>1]|y[s+42>>1]<<16,k[r+40>>1]=i,k[r+42>>1]=i>>>16,k[r+44>>1]=t,k[r+46>>1]=t>>>16,t=y[s+52>>1]|y[s+54>>1]<<16,i=y[s+48>>1]|y[s+50>>1]<<16,k[r+48>>1]=i,k[r+50>>1]=i>>>16,k[r+52>>1]=t,k[r+54>>1]=t>>>16,t=y[s+60>>1]|y[s+62>>1]<<16,i=y[s+56>>1]|y[s+58>>1]<<16,k[r+56>>1]=i,k[r+58>>1]=i>>>16,k[r+60>>1]=t,k[r+62>>1]=t>>>16,f[r+16|0]=0,k[r>>1]=32768|y[r>>1],t=y[h+2>>1]}t=t+c|0}else{if((0|p)>=(0-c|0))break A;i||(k[s>>1]<0?r=s:(r=(0|(r=e[44469]+1|0))<=169?r:0,e[44469]=r,i=y[s+20>>1]|y[s+22>>1]<<16,t=(r=177888+(r<<6)|0)+16|0,p=y[s+16>>1]|y[s+18>>1]<<16,k[t>>1]=p,k[t+2>>1]=p>>>16,k[t+4>>1]=i,k[t+6>>1]=i>>>16,t=y[s+4>>1]|y[s+6>>1]<<16,i=y[s>>1]|y[s+2>>1]<<16,k[r>>1]=i,k[r+2>>1]=i>>>16,k[r+4>>1]=t,k[r+6>>1]=t>>>16,t=y[s+12>>1]|y[s+14>>1]<<16,i=y[s+8>>1]|y[s+10>>1]<<16,k[r+8>>1]=i,k[r+10>>1]=i>>>16,k[r+12>>1]=t,k[r+14>>1]=t>>>16,t=y[s+28>>1]|y[s+30>>1]<<16,i=y[s+24>>1]|y[s+26>>1]<<16,k[r+24>>1]=i,k[r+26>>1]=i>>>16,k[r+28>>1]=t,k[r+30>>1]=t>>>16,t=y[s+36>>1]|y[s+38>>1]<<16,i=y[s+32>>1]|y[s+34>>1]<<16,k[r+32>>1]=i,k[r+34>>1]=i>>>16,k[r+36>>1]=t,k[r+38>>1]=t>>>16,t=y[s+44>>1]|y[s+46>>1]<<16,i=y[s+40>>1]|y[s+42>>1]<<16,k[r+40>>1]=i,k[r+42>>1]=i>>>16,k[r+44>>1]=t,k[r+46>>1]=t>>>16,t=y[s+52>>1]|y[s+54>>1]<<16,i=y[s+48>>1]|y[s+50>>1]<<16,k[r+48>>1]=i,k[r+50>>1]=i>>>16,k[r+52>>1]=t,k[r+54>>1]=t>>>16,t=y[s+60>>1]|y[s+62>>1]<<16,i=y[s+56>>1]|y[s+58>>1]<<16,k[r+56>>1]=i,k[r+58>>1]=i>>>16,k[r+60>>1]=t,k[r+62>>1]=t>>>16,f[r+16|0]=0,k[r>>1]=32768|y[r>>1],t=y[h+2>>1])),t=t-c|0}i=1,k[2+((g<<1)+r|0)>>1]=t,e[I+12>>2]=r}if((0|(g=g+1|0))==6)break}M=r}if((0|A)==(0|(z=(0|(r=z+1|0))<=169?r:0)))break}}e[36454]=A}}function xe(A,t){var r,s,i=0,l=0,c=0,g=0,p=0,I=0,h=0,M=0,P=0,z=0,Y=0,V=0,X=0,te=0,ne=0,me=0,ke=0,ye=0,Pe=0,_e=0,Ke=0,lA=0,mA=0;H=r=H-48|0,F(+A),l=0|v(1),i=0|v(0),s=l;e:{A:{r:{if((p=2147483647&l)>>>0<=1074752122){if((1048575&l)==598523)break r;if(p>>>0<=1073928572){if((0|s)>0|(0|s)>=0){g=(A+=-1.5707963267341256)+-6077100506506192e-26,T[t>>3]=g,T[t+8>>3]=A-g-6077100506506192e-26,l=1;break e}g=(A+=1.5707963267341256)+6077100506506192e-26,T[t>>3]=g,T[t+8>>3]=A-g+6077100506506192e-26,l=-1;break e}if((0|s)>0|(0|s)>=0){g=(A+=-3.1415926534682512)+-12154201013012384e-26,T[t>>3]=g,T[t+8>>3]=A-g-12154201013012384e-26,l=2;break e}g=(A+=3.1415926534682512)+12154201013012384e-26,T[t>>3]=g,T[t+8>>3]=A-g+12154201013012384e-26,l=-2;break e}if(p>>>0<=1075594811){if(p>>>0<=1075183036){if((0|p)==1074977148)break r;if((0|s)>0|(0|s)>=0){g=(A+=-4.712388980202377)+-18231301519518578e-26,T[t>>3]=g,T[t+8>>3]=A-g-18231301519518578e-26,l=3;break e}g=(A+=4.712388980202377)+18231301519518578e-26,T[t>>3]=g,T[t+8>>3]=A-g+18231301519518578e-26,l=-3;break e}if((0|p)==1075388923)break r;if((0|s)>0|(0|s)>=0){g=(A+=-6.2831853069365025)+-2430840202602477e-25,T[t>>3]=g,T[t+8>>3]=A-g-2430840202602477e-25,l=4;break e}g=(A+=6.2831853069365025)+2430840202602477e-25,T[t>>3]=g,T[t+8>>3]=A-g+2430840202602477e-25,l=-4;break e}if(p>>>0>1094263290)break A}i=(ke=(g=A+-1.5707963267341256*(M=.6366197723675814*A+6755399441055744-6755399441055744))-(z=6077100506506192e-26*M))<-.7853981633974483,l=$(M)<2147483648?~~M:-2147483648,i?(l=l-1|0,z=6077100506506192e-26*(M+=-1),g=A+-1.5707963267341256*M):ke>.7853981633974483&&(l=l+1|0,z=6077100506506192e-26*(M+=1),g=A+-1.5707963267341256*M),A=g-z,T[t>>3]=A,F(+A),i=0|v(1),v(0),((c=p>>>20|0)-(i>>>20&2047)|0)<17||(z=g,A=(g-=A=6077100506303966e-26*M)-(z=20222662487959506e-37*M-(z-g-A)),T[t>>3]=A,F(+A),i=0|v(1),v(0),(c-(i>>>20&2047)|0)<50||(z=g,A=(g-=A=20222662487111665e-37*M)-(z=84784276603689e-45*M-(z-g-A)),T[t>>3]=A)),T[t+8>>3]=g-A-z;break e}if(p>>>0>=2146435072)A-=A,T[t>>3]=A,T[t+8>>3]=A,l=0;else{for(x(0,0|i),x(1,1048575&s|1096810496),A=+S(),l=0,i=1;c=(r+16|0)+(l<<3)|0,g=+(0|(l=$(A)<2147483648?~~A:-2147483648)),T[c>>3]=g,A=16777216*(A-g),l=1,c=i,i=0,c;);for(T[r+32>>3]=A,l=2;l=(i=l)-1|0,T[(r+16|0)+(i<<3)>>3]==0;);if(ye=r+16|0,c=0,H=I=H-560|0,p=O(me=(0|(p=((l=(p>>>20|0)-1046|0)-3|0)/24|0))>0?p:0,-24)+l|0,((Y=e[28105])+(h=(te=i+1|0)-1|0)|0)>=0)for(l=Y+te|0,i=me-h|0;T[(I+320|0)+(c<<3)>>3]=(0|i)<0?0:+e[112432+(i<<2)>>2],i=i+1|0,(0|l)!=(0|(c=c+1|0)););for(X=p-24|0,l=0,c=(0|Y)>0?Y:0,V=(0|te)<=0;;){if(V)A=0;else for(P=l+h|0,i=0,A=0;A=T[(i<<3)+ye>>3]*T[(I+320|0)+(P-i<<3)>>3]+A,(0|te)!=(0|(i=i+1|0)););if(T[(l<<3)+I>>3]=A,i=(0|l)==(0|c),l=l+1|0,i)break}lA=47-p|0,Pe=48-p|0,mA=p-25|0,l=Y;A:{for(;;){if(A=T[(l<<3)+I>>3],i=0,c=l,!(P=(0|l)<=0))for(;V=(I+480|0)+(i<<2)|0,h=$(g=5960464477539063e-23*A)<2147483648?~~g:-2147483648,h=$(A=-16777216*(g=+(0|h))+A)<2147483648?~~A:-2147483648,e[V>>2]=h,A=T[((c=c-1|0)<<3)+I>>3]+g,(0|l)!=(0|(i=i+1|0)););A=ta(A,X),A+=-8*Ee(.125*A),A-=+(0|(V=$(A)<2147483648?~~A:-2147483648));r:{a:{n:{if(_e=(0|X)<=0){if(X)break n;h=e[476+((l<<2)+I|0)>>2]>>23}else ne=c=(l<<2)+I|0,c=(h=e[c+476>>2])-((i=h>>Pe)<<Pe)|0,e[ne+476>>2]=c,V=i+V|0,h=c>>lA;if((0|h)<=0)break r;break a}if(h=2,!(A>=.5)){h=0;break r}}if(i=0,c=0,!P)for(;Ke=e[(ne=(I+480|0)+(i<<2)|0)>>2],P=16777215,c||(P=16777216,Ke)?(e[ne>>2]=P-Ke,c=1):c=0,(0|l)!=(0|(i=i+1|0)););a:if(!_e){i=8388607;n:switch(0|mA){case 1:i=4194303;break;case 0:break n;default:break a}e[(P=(l<<2)+I|0)+476>>2]=e[P+476>>2]&i}V=V+1|0,(0|h)==2&&(A=1-A,h=2,c&&(A-=ta(1,X)))}if(A!=0)break;if(c=0,!((0|Y)>=(0|(i=l)))){for(;c=e[(I+480|0)+((i=i-1|0)<<2)>>2]|c,(0|i)>(0|Y););if(c){for(p=X;p=p-24|0,!e[(I+480|0)+((l=l-1|0)<<2)>>2];);break A}}for(i=1;c=i,i=i+1|0,!e[(I+480|0)+(Y-c<<2)>>2];);for(c=l+c|0;;){if(h=l+te|0,l=l+1|0,T[(I+320|0)+(h<<3)>>3]=e[112432+(me+l<<2)>>2],i=0,A=0,(0|te)>0)for(;A=T[(i<<3)+ye>>3]*T[(I+320|0)+(h-i<<3)>>3]+A,(0|te)!=(0|(i=i+1|0)););if(T[(l<<3)+I>>3]=A,!((0|l)<(0|c)))break}l=c}(A=ta(A,24-p|0))>=16777216?(X=(I+480|0)+(l<<2)|0,i=$(g=5960464477539063e-23*A)<2147483648?~~g:-2147483648,c=$(A=-16777216*+(0|i)+A)<2147483648?~~A:-2147483648,e[X>>2]=c,l=l+1|0):(i=$(A)<2147483648?~~A:-2147483648,p=X),e[(I+480|0)+(l<<2)>>2]=i}if(A=ta(1,p),!((0|l)<0)){for(i=l;c=i,T[(i<<3)+I>>3]=A*+e[(I+480|0)+(i<<2)>>2],i=i-1|0,A*=5960464477539063e-23,c;);if(P=0,!((0|l)<0))for(p=(0|Y)>0?Y:0,c=l;;){for(X=p>>>0<P>>>0?p:P,Y=l-c|0,i=0,A=0;A=T[115200+(i<<3)>>3]*T[(i+c<<3)+I>>3]+A,te=(0|i)!=(0|X),i=i+1|0,te;);if(T[(I+160|0)+(Y<<3)>>3]=A,c=c-1|0,i=(0|l)!=(0|P),P=P+1|0,!i)break}}if(A=0,(0|l)>=0)for(i=l;c=i,i=i-1|0,A+=T[(I+160|0)+(c<<3)>>3],c;);if(T[r>>3]=h?-A:A,A=T[I+160>>3]-A,i=1,(0|l)>0)for(;A+=T[(I+160|0)+(i<<3)>>3],c=(0|i)!=(0|l),i=i+1|0,c;);T[r+8>>3]=h?-A:A,H=I+560|0,l=7&V,A=T[r>>3],(0|s)<0?(T[t>>3]=-A,T[t+8>>3]=-T[r+8>>3],l=0-l|0):(T[t>>3]=A,T[t+8>>3]=T[r+8>>3])}}return H=r+48|0,l}function Re(){var A=0,t=0,r=0,s=0,i=0,l=0,c=0,g=0,p=0,I=0,h=0,M=0,P=0,z=0,Y=0,V=0,X=0,te=0,ne=0,me=0,ke=0,ye=0,Pe=0,_e=0,Ke=0,lA=0,mA=0,GA=0,NA=0,JA=0,pt=0,Mt=0,Dt=0,Yt=0,$t=0,fr=0,er=0,Er=0,zr=0,Kr=0,ss=0,as=0,hs=0,ra=0,sa=0,qs=0;e[55925]=0,A=e[56772],e[56772]=A+1,r=e[55961],P=e[55922],Y=An(39.89822670059037*(t=+(0|A))),I=An(22.30530784048753*t),t=+(0|P)/50*(+(0|r)/100)*(An(14.765485471872028*t)+(Y+I))*10,A=$(t)<2147483648?~~t:-2147483648,e[56607]=A+e[56607];e:if(!(e[55923]<=0)){for(;;){for(r=At(e[33209],0,1103515245,0),A=he,A=Ni(r=r+12345|0,A=r>>>0<12345?A+1|0:A),e[33209]=A,A=8191+((A>>>0)%16383|0)|0,e[55929]=A,JA=+(0|A),t=.75*T[28387]+JA,T[28387]=t,pt=(0|(A=e[55924]))>(0|(Pe=e[55928]))?.5*t:t,$t=(i=.033*+e[56652])>0?1-i:1,r=e[56650]<<2,lA=(0|(Ke=e[55921]))==1&&(0|r)>263?263:r,fr=111136+((Mt=e[56651])<<1)|0,er=111136+((mA=e[56658])<<1)|0,Er=(0|mA)>0,Dt=e[55918],zr=O(Dt,40),Kr=e[55925],ss=T[27967],Yt=e[56607],t=T[27979],X=T[27969],g=T[27970],GA=e[56780],me=e[56654],M=T[27976],z=T[27972],te=T[28388],ne=T[28389],P=e[55927],s=T[28383],h=e[55926],ke=e[55956],as=T[27975],I=T[28131],l=T[28130],c=T[28123],V=T[28121],p=T[28122],_e=T[28120],ye=T[28119],hs=T[28129],ra=T[28128],sa=T[28127],qs=es(0*T[27968]),NA=0;;){Y=l;A:{r:switch(Ke-1|0){case 0:te=0,l=V*c,c=p,p=s=l+(ye*(te=(0|A)<=2?T[111312+(A<<3)>>3]:te)+_e*c);break A;case 1:if(s=0,(0|A)>=(0|P)){ne=0;break A}l=T[27965]-T[27966],T[27965]=l,s=.028*(ne=l+ne);break A;case 2:if(!h){ke=100,s=0;break A}ke=100,r=$(l=+(0|A)/+(0|h)*100)<2147483648?~~l:-2147483648,s=+k[110928+((0|r)%100<<1)>>1],s=t*((+k[110928+((r+1|0)%100<<1)>>1]-s)*(l-+(0|r))+s);break A;case 3:break r;default:break A}h?(ke=256,r=$(l=+(0|A)/+(0|h)*256)<2147483648?~~l:-2147483648,s=+k[111344+((0|r)%256<<1)>>1],s=t*((+k[111344+((r+1|0)%256<<1)>>1]-s)*(l-+(0|r))+s)):(ke=256,s=0)}if((0|A)>=(0|h)&&((0|Yt)>0?(A=(0|zr)/(0|Yt)|0,M=0,z=0,z=mA>>>0<=87?.001*+k[er>>1]:z,M=Mt>>>0<=87?.001*+k[fr>>1]*.1:M,Pe=A>>Er,P=(0|(r=(h=(A-1|0)<=(0|lA))?A-2|0:lA))<=40?40:r,l=+k[111776+((P=h||(0|r)<40?P:lA)<<1)>>1],T[27966]=l,V=l,l=+(0|P),T[27965]=V*l*.333,me=(0|(r=A-P|0))>(0|me)?me:r,GA=0-(r=(0|GA)<0?0-me|0:me)|0,ye=(l*=.00833)*l,ye*=1-(_e=(V=(l=is(ss*+((0|Dt)/(0|P)|0)))*qs)+V)-(V=l*-l),A=(0|(h=A+r|0))!=4):(e[55930]=0,e[55931]=0,e[55932]=0,e[55933]=0,Pe=4,M=0,z=0,h=4,A=0),g=(A|=!Kr)?i:g,X=A?$t:X,A=0),A=A+1|0,l=s=hs*I+(sa*s+ra*Y),I=Y,(0|(NA=NA+1|0))==4)break}if(e[55926]=h,e[55956]=ke,e[55924]=A,T[28383]=s,e[55927]=P,T[28389]=ne,T[28388]=te,T[27972]=z,T[27976]=M,e[55928]=Pe,e[56654]=me,e[56780]=GA,T[27970]=g,T[27969]=X,T[28122]=p,T[28120]=_e,T[28119]=ye,T[28123]=c,T[28121]=V,T[28131]=I,T[28130]=s,(0|Ke)==5&&(s=6e3*((t=+(0|A)/+(0|h))+t+-1),T[28383]=s),t=s*X+T[28384]*g,T[28383]=t,T[28384]=t,(0|A)<(0|P)&&(t=M*JA+t,T[28383]=t),g=pt*T[27974],Y=t*T[27973]+g,I=0,e[55916]!=2&&(I=T[27987],p=T[27986],T[27987]=p,t=g+t*z,T[27986]=t,g=T[28059],c=T[28058],T[28059]=c,t=g*T[28057]+(T[28055]*(I*T[27985]+(T[27983]*t+p*T[27984]))+c*T[28056]),T[28058]=t,I=T[28049],g=T[28051],p=T[28048],c=T[28047],i=T[28050],T[28051]=i,t=I*g+(c*t+p*i),T[28050]=t,I=T[28043],g=T[28041],p=T[28040],c=T[28039],i=T[28042],T[28043]=i,t=g*I+(c*t+p*i),T[28042]=t,I=T[28035],g=T[28033],p=T[28032],c=T[28031],i=T[28034],T[28035]=i,t=g*I+(c*t+p*i),T[28034]=t,I=T[28027],g=T[28025],p=T[28024],c=T[28023],i=T[28026],T[28027]=i,t=g*I+(c*t+p*i),T[28026]=t,I=T[28019],g=T[28017],p=T[28016],c=T[28015],i=T[28018],T[28019]=i,t=g*I+(c*t+p*i),T[28018]=t,I=T[28011],g=T[28009],p=T[28008],c=T[28007],i=T[28010],T[28011]=i,t=g*I+(c*t+p*i),T[28010]=t,I=T[28003],g=T[28001],p=T[28e3],c=T[27999],i=T[28002],T[28003]=i,t=g*I+(c*t+p*i),T[28002]=t,I=T[27995],g=T[27993],p=T[27992],c=T[27991],i=T[27994],T[27995]=i,I=g*I+(c*t+p*i),T[27994]=I),t=T[28385],T[28385]=Y,g=T[28075],p=T[28074],T[28075]=p,c=T[28067],i=T[28066],T[28067]=i,g=g*T[28073]+(T[28071]*Y+p*T[28072]),T[28074]=g,p=c*T[28065]+(T[28063]*Y+i*T[28064]),T[28066]=p,c=T[28081],i=T[28083],l=T[28079],s=T[28080],M=T[28082],T[28083]=M,Y=c*i+(l*(t=as*pt+Y-t)+s*M),T[28082]=Y,c=T[28091],i=T[28089],l=T[28087],s=T[28088],M=T[28090],T[28091]=M,c=i*c+(l*t+s*M),T[28090]=c,i=T[28099],l=T[28097],s=T[28095],M=T[28096],z=T[28098],T[28099]=z,i=l*i+(s*t+M*z),T[28098]=i,l=T[28107],s=T[28105],M=T[28103],z=T[28104],X=T[28106],T[28107]=X,l=s*l+(M*t+z*X),T[28106]=l,s=T[28115],M=T[28113],z=T[28111],X=T[28112],te=T[28114],T[28115]=te,s=M*s+(z*t+X*te),T[28114]=s,M=T[28139],z=T[28137],X=T[28136],te=T[28135],ne=T[27971],V=T[28138],T[28139]=V,t=z*M+(te*(t*ne-(s-(l-(i-(c-(Y-(I+g+p)))))))+X*V),T[28138]=t,t=T[27977]*(t*+e[50779]),s=+(0|(A=$(t)<2147483648?~~t:-2147483648)),(0|(A=e[50776]))<e[50773]&&(h=A+1|0,r=e[50772],(P=e[50774])?(e[50776]=h,A=O(P,f[A+r|0])):(P=d[A+r|0],r=f[r+h|0],e[50776]=A+2,A=P|r<<8),s+=+((0|O(e[50775],(0|O(A,e[50780]))/1024|0))/40|0)),(0|(A=e[55962]))<=63&&(e[55962]=A+1,s=s*+(0|A)*.015625),(0|(A=e[55963]))<=0||(A=A-1|0,e[55963]=A,s=s*+(0|A)*.015625,A||(e[55962]=0)),r=(A=e[51293])+1|0,e[51293]=r,h=O(k[205184+(A<<1)>>1],e[50755])>>8,A=$(s)<2147483648?~~s:-2147483648,(0|r)>=5500&&(e[51293]=0),r=e[51290],e[51290]=r+1,A=(0|(A=(0|(A=A+h|0))<=-32768?-32768:A))>=32767?32767:A,f[0|r]=A,r=e[51290],e[51290]=r+1,f[0|r]=A>>>8,h=(r=e[51292])+1|0,e[51292]=h,k[205184+(r<<1)>>1]=A,(0|h)>=5500&&(e[51292]=0),h=1,e[56606]=e[56606]+1,ee[54046]<e[51290]+2>>>0)break e;if(A=e[55925]+1|0,e[55925]=A,!((0|A)<e[55923]))break}h=0}return h}function oA(A,t,r,s,i,l,c){var g,p,I,h=0,M=0,P=0,z=0,Y=0,V=0,X=0,te=0,ne=0,me=0,ke=0,ye=0,Pe=0,_e=0,Ke=0,lA=0,mA=0;H=g=H-80|0,e[g+76>>2]=t,I=g+55|0,p=g+56|0;e:{A:{r:{a:{n:for(;;){if(P=t,(2147483647^te)<(0|h))break a;te=h+te|0;o:{c:{u:{if(M=d[0|(h=P)])for(;;){l:{i:if(t=255&M){if((0|t)!=37)break l;for(M=h;;){if(d[M+1|0]!=37){t=M;break i}if(h=h+1|0,Y=d[M+2|0],M=t=M+2|0,(0|Y)!=37)break}}else t=h;if((0|(h=h-P|0))>(0|(Ke=2147483647^te)))break a;if(A&&Or(A,P,h),h)continue n;e[g+76>>2]=t,h=t+1|0,ne=-1,d[t+2|0]!=36|f[t+1|0]-48>>>0>=10||(ne=f[t+1|0]-48|0,ye=1,h=t+3|0),e[g+76>>2]=h,V=0;i:if((t=(M=f[0|h])-32|0)>>>0>31)X=h;else if(X=h,75913&(t=1<<t))for(;;){if(X=h+1|0,e[g+76>>2]=X,V|=t,(t=(M=f[h+1|0])-32|0)>>>0>=32)break i;if(h=X,!(75913&(t=1<<t)))break}i:if((0|M)!=42){if((0|(me=ka(g+76|0)))<0)break a;M=e[g+76>>2]}else{if(d[X+2|0]!=36|f[X+1|0]-48>>>0>=10){if(ye)break u;if(M=X+1|0,!A){e[g+76>>2]=M,ye=0,me=0;break i}t=e[r>>2],e[r>>2]=t+4,ye=0,t=e[t>>2]}else e[((f[X+1|0]<<2)+i|0)-192>>2]=10,M=X+3|0,ye=1,t=e[((f[X+1|0]<<3)+s|0)-384>>2];if(e[g+76>>2]=M,me=t,(0|t)>=0)break i;me=0-me|0,V|=8192}if(h=0,z=-1,d[0|M]==46)if(d[M+1|0]!=42)e[g+76>>2]=M+1,z=ka(g+76|0),t=e[g+76>>2],_e=1;else{if(d[M+3|0]!=36|f[M+2|0]-48>>>0>=10){if(ye)break u;t=M+2|0,z=0,A&&(M=e[r>>2],e[r>>2]=M+4,z=e[M>>2])}else e[((f[M+2|0]<<2)+i|0)-192>>2]=10,t=M+4|0,z=e[((f[M+2|0]<<3)+s|0)-384>>2];e[g+76>>2]=t,_e=~z>>>31|0}else t=M,_e=0;for(;;){if(ke=h,X=28,Y=t,(h=f[0|t])-123>>>0<4294967238)break r;if(t=Y+1|0,!((h=d[123983+(h+O(ke,58)|0)|0])-1>>>0<8))break}e[g+76>>2]=t;i:{p:{if((0|h)!=27){if(!h)break r;if((0|ne)>=0){e[(ne<<2)+i>>2]=h,h=e[(M=(ne<<3)+s|0)+4>>2],e[g+64>>2]=e[M>>2],e[g+68>>2]=h;break p}if(!A)break o;eA(g- -64|0,h,r,c);break i}if((0|ne)>=0)break r}if(h=0,!A)continue n}M=-65537&V,V=8192&V?M:V,ne=0,Pe=84065,X=p;i:{p:{C:{h:{b:{m:{B:{I:{x:{L:{_:{U:{y:{M:{Q:{F:switch(h=f[0|Y],(h=ke&&(15&h)==3?-33&h:h)-88|0){case 11:break i;case 9:case 13:case 14:case 15:break p;case 27:break B;case 12:case 17:break L;case 23:break _;case 0:case 32:break U;case 24:break y;case 22:break M;case 29:break Q;case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 10:case 16:case 18:case 19:case 20:case 21:case 25:case 26:case 28:case 30:case 31:break c;default:break F}F:switch(h-65|0){case 0:case 4:case 5:case 6:break p;case 2:break b;case 1:case 3:break c;default:break F}if((0|h)==83)break m;break c}M=e[g+64>>2],Y=e[g+68>>2],Pe=84065;break x}h=0;M:switch(255&ke){case 0:case 1:case 6:e[e[g+64>>2]>>2]=te;continue n;case 2:P=e[g+64>>2],e[P>>2]=te,e[P+4>>2]=te>>31;continue n;case 3:k[e[g+64>>2]>>1]=te;continue n;case 4:f[e[g+64>>2]]=te;continue n;case 7:break M;default:continue n}P=e[g+64>>2],e[P>>2]=te,e[P+4>>2]=te>>31;continue n}z=z>>>0<=8?8:z,V|=8,h=120}if(P=p,lA=32&h,(M=e[g+64>>2])|(Y=e[g+68>>2]))for(;f[0|(P=P-1|0)]=lA|d[124512+(15&M)|0],mA=!Y&M>>>0>15|!!(0|Y),ke=Y,Y=Y>>>4|0,M=(15&ke)<<28|M>>>4,mA;);if(!(e[g+64>>2]|e[g+68>>2])|!(8&V))break I;Pe=84065+(h>>>4|0)|0,ne=2;break I}if(h=p,Y=P=e[g+68>>2],P|(M=e[g+64>>2]))for(;f[0|(h=h-1|0)]=7&M|48,ke=!Y&M>>>0>7|!!(0|Y),Y=(P=Y)>>>3|0,M=(7&P)<<29|M>>>3,ke;);if(P=h,!(8&V))break I;z=(0|(h=p-P|0))<(0|z)?z:h+1|0;break I}M=e[g+64>>2],Y=h=e[g+68>>2],(0|h)<0?(Y=P=0-(Y+!!(0|M)|0)|0,M=0-M|0,e[g+64>>2]=M,e[g+68>>2]=P,ne=1,Pe=84065):2048&V?(ne=1,Pe=84066):Pe=(ne=1&V)?84067:84065}P=Zs(M,Y,p)}if((0|z)<0&&_e)break a;if(V=_e?-65537&V:V,!(z|!!((h=e[g+64>>2])|(M=e[g+68>>2])))){P=p,z=0;break c}z=(0|(h=!(h|M)+(p-P|0)|0))<(0|z)?z:h;break c}if(X=(h=(h=ba(P=(h=e[g+64>>2])||84639,0,Y=z>>>0>=2147483647?2147483647:z))?h-P|0:Y)+P|0,(0|z)>=0){V=M,z=h;break c}if(V=M,z=h,d[0|X])break a;break c}if(z){M=e[g+64>>2];break h}h=0,xr(A,32,me,0,V);break C}e[g+12>>2]=0,e[g+8>>2]=e[g+64>>2],M=g+8|0,e[g+64>>2]=M,z=-1}h=0;h:{for(;;){if(!(P=e[M>>2]))break h;if(!((P=(0|(Y=vn(g+4|0,P)))<0)|Y>>>0>z-h>>>0)){if(M=M+4|0,z>>>0>(h=h+Y|0)>>>0)continue;break h}break}if(P)break A}if(X=61,(0|h)<0)break r;if(xr(A,32,me,h,V),h)for(X=0,M=e[g+64>>2];;){if(!(P=e[M>>2])||(X=(P=vn(g+4|0,P))+X|0)>>>0>h>>>0)break C;if(Or(A,g+4|0,P),M=M+4|0,!(h>>>0>X>>>0))break}else h=0}xr(A,32,me,h,8192^V),h=(0|h)<(0|me)?me:h;continue n}if((0|z)<0&&_e)break a;if(X=61,(0|(h=0|KA[0|l](A,T[g+64>>3],me,z,V,h)))>=0)continue n;break r}f[g+55|0]=e[g+64>>2],z=1,P=I,V=M;break c}M=d[h+1|0],h=h+1|0}if(A)break e;if(!ye)break o;for(h=1;;){if(A=e[(h<<2)+i>>2]){if(eA((h<<3)+s|0,A,r,c),te=1,(0|(h=h+1|0))!=10)continue;break e}break}if(te=1,h>>>0>=10)break e;for(;;){if(e[(h<<2)+i>>2])break u;if((0|(h=h+1|0))==10)break}break e}X=28;break r}if((0|(M=(0|z)>(0|(Y=X-P|0))?z:Y))>(2147483647^ne))break a;if(X=61,(0|Ke)<(0|(h=(0|(z=M+ne|0))<(0|me)?me:z)))break r;xr(A,32,h,z,V),Or(A,Pe,ne),xr(A,48,h,z,65536^V),xr(A,48,M,Y,0),Or(A,P,Y),xr(A,32,h,z,8192^V);continue}break}te=0;break e}X=61}e[56798]=X}te=-1}return H=g+80|0,te}function Le(A,t,r,s,i,l,c,g,p){var I,h,M,P=0,z=0,Y=0,V=0,X=0,te=0,ne=0,me=0,ke=0,ye=0,Pe=0,_e=0,Ke=0,lA=0,mA=0,GA=0,NA=0,JA=0,pt=0,Mt=0,Dt=0,Yt=0,$t=0,fr=0,er=0,Er=0,zr=0,Kr=0,ss=0,as=0,hs=0;H=I=H-96|0,Pe=65535&p,X=-2147483648&(i^p),GA=ne=65535&i;e:{if(!((h=p>>>16&32767)-32767>>>0>4294934529&(M=i>>>16&32767)-32767>>>0>=4294934530)){if(P=s,!(!s&(0|(me=ke=2147483647&i))==2147418112?!(t|r):me>>>0<2147418112)){Y=s,X=32768|i;break e}if(!(!(i=g)&(0|(te=ke=2147483647&p))==2147418112?!(l|c):te>>>0<2147418112)){Y=g,X=32768|p,t=l,r=c;break e}if(!(t|P|2147418112^me|r)){if(!(i|l|c|te)){X=2147450880,t=0,r=0;break e}X|=2147418112,t=0,r=0;break e}if(!(i|l|2147418112^te|c)){if(i=t|P,s=r|me,t=0,r=0,!(s|i)){X=2147450880;break e}X|=2147418112;break e}if(!(t|P|r|me)){t=0,r=0;break e}if(!(i|l|c|te)){t=0,r=0;break e}(0|me)==65535|me>>>0<65535&&(ke=(P=!(s|ne))<<6,i=be(p=P?t:s)+32|0,Gt(I+80|0,t,r,s,ne,(p=ke+((0|(p=be(P?r:ne)))==32?i:p)|0)-15|0),ye=16-p|0,s=e[I+88>>2],GA=e[I+92>>2],r=e[I+84>>2],t=e[I+80>>2]),te>>>0>65535||(ne=(p=!(g|Pe))<<6,P=be(i=p?l:g)+32|0,Gt(I- -64|0,l,c,g,Pe,(i=ne+((0|(i=be(p?c:Pe)))==32?P:i)|0)-15|0),ye=16+(ye-i|0)|0,g=e[I+72>>2],Pe=e[I+76>>2],l=e[I+64>>2],c=e[I+68>>2])}if(i=l,l=c<<15|l>>>17,Er=r,ke=At(_e=-32768&(p=i<<15),i=0,r,0),mA=i=he,zr=l,me=t,t=At(l,0,t,0),l=he+i|0,r=t>>>0>(p=t+ke|0)>>>0?l+1|0:l,P=0,t=At(me,z,_e,z),i=(l=p)+he|0,ne=i=t>>>0>(te=P+t|0)>>>0?i+1|0:i,Kr=(0|l)==(0|i)&P>>>0>te>>>0|i>>>0<l>>>0,ss=s,Ke=At(_e,z,s,0),as=he,t=At(Er,z,zr,z),P=he+as|0,P=t>>>0>(lA=t+Ke|0)>>>0?P+1|0:P,t=Pe<<15|g>>>17,s=At(NA=g<<15|c>>>17,0,me,z),l=he+P|0,pt=l=s>>>0>(JA=s+lA|0)>>>0?l+1|0:l,l=(s=(0|r)==(0|mA)&p>>>0<ke>>>0|r>>>0<mA>>>0)+l|0,Pe=l=r>>>0>(Mt=r+JA|0)>>>0?l+1|0:l,c=Mt,r=l,GA=At(_e,z,Dt=65536|GA,V),hs=he,s=At(ss,Y,zr,z),i=he+hs|0,p=i=s>>>0>(Yt=s+GA|0)>>>0?i+1|0:i,t=At($t=-2147483648|t,0,me,z),l=he+i|0,l=t>>>0>(fr=t+Yt|0)>>>0?l+1|0:l,t=At(NA,Y,Er,z),er=l,l=l+he|0,ke=t>>>0>(mA=t+fr|0)>>>0?l+1|0:l,i=r+mA|0,l=_e=(t=0)>>>0>(me=t+c|0)>>>0?i+1|0:i,r=(t=me+Kr|0)>>>0<me>>>0?l+1|0:l,ye=((M+h|0)+ye|0)-16383|0,s=At($t,Y,Er,z),g=he,i=At(Dt,Y,zr,z),l=he+g|0,V=(0|g)==(0|(l=i>>>0>(c=i+s|0)>>>0?l+1|0:l))&s>>>0>c>>>0|l>>>0<g>>>0,g=l,i=At(NA,Y,ss,Y),l=he+l|0,i=l=(s=i+c|0)>>>0<i>>>0?l+1|0:l,c=(0|l)==(0|g)&s>>>0<c>>>0|l>>>0<g>>>0,l=0,l=(g=c)>>>0>(c=c+V|0)>>>0?1:l,g=c,c=At($t,Y,Dt,Y),l=he+l|0,Kr=g=g+c|0,c=c>>>0>g>>>0?l+1|0:l,g=s,z=i,i=(0|P)==(0|as)&Ke>>>0>lA>>>0|P>>>0<as>>>0,l=0,i=((V=P=(0|P)==(0|pt)&lA>>>0>JA>>>0|P>>>0>pt>>>0)>>>0>(P=i+P|0)>>>0?1:l)+z|0,l=c,V=i=(s=s+P|0)>>>0<P>>>0?i+1|0:i,Ke=s,i=s=(0|i)==(0|z)&s>>>0<g>>>0|i>>>0<z>>>0,P=s=s+Kr|0,c=l=i>>>0>s>>>0?l+1|0:l,i=At(NA,Y,Dt,Y),z=he,s=At($t,Y,ss,Y),l=he+z|0,s=l=s>>>0>(g=s+i|0)>>>0?l+1|0:l,i=(l=(0|z)==(0|l)&i>>>0>g>>>0|l>>>0<z>>>0)+c|0,c=i=s>>>0>(lA=s+P|0)>>>0?i+1|0:i,l=g+V|0,i=l=(s=(i=0)+Ke|0)>>>0<i>>>0?l+1|0:l,g=(0|V)==(0|l)&s>>>0<Ke>>>0|l>>>0<V>>>0,l=c,l=(c=g+(z=lA)|0)>>>0<g>>>0?l+1|0:l,Ke=c,g=s,P=i,i=(s=(s=(s=(0|p)==(0|hs)&GA>>>0>Yt>>>0|p>>>0<hs>>>0)+(p=(0|p)==(0|er)&Yt>>>0>fr>>>0|p>>>0>er>>>0)|0)+(i=(0|ke)==(0|er)&mA>>>0<fr>>>0|ke>>>0<er>>>0)|0)+P|0,l=c=l,P=c=(g=(0|(i=(s=p=(V=ke)+g|0)>>>0<V>>>0?i+1|0:i))==(0|P)&g>>>0>s>>>0|i>>>0<P>>>0)+Ke|0,c=l=g>>>0>c>>>0?l+1|0:l,g=s,l=0,p=i,i=i+((z=V=(0|Pe)==(0|_e)&me>>>0<Mt>>>0|Pe>>>0>_e>>>0)>>>0>(V=V+((0|Pe)==(0|pt)&JA>>>0>Mt>>>0|Pe>>>0<pt>>>0)|0)>>>0?1:l)|0,l=c,p=l=(c=g=(0|(i=(s=s+V|0)>>>0<V>>>0?i+1|0:i))==(0|p)&s>>>0<g>>>0|i>>>0<p>>>0)>>>0>(g=g+P|0)>>>0?l+1|0:l,65536&l?ye=ye+1|0:(P=ne>>>31|0,l=p<<1|g>>>31,g=g<<1|i>>>31,p=l,l=i<<1|s>>>31,s=s<<1|r>>>31,i=l,l=ne<<1|te>>>31,te<<=1,ne=l,l=r<<1|t>>>31,t=t<<1|P,r=l|(c=0)),(0|ye)>=32767)X|=2147418112,t=0,r=0;else{A:{if((0|ye)<=0){if((c=1-ye|0)>>>0<=127){Gt(I+48|0,te,ne,t,r,l=ye+127|0),Gt(I+32|0,s,i,g,p,l),ur(I+16|0,te,ne,t,r,c),ur(I,s,i,g,p,c),te=e[I+32>>2]|e[I+16>>2]|!!(e[I+48>>2]|e[I+56>>2]|e[I+52>>2]|e[I+60>>2]),ne=e[I+36>>2]|e[I+20>>2],t=e[I+40>>2]|e[I+24>>2],r=e[I+44>>2]|e[I+28>>2],s=e[I>>2],i=e[I+4>>2],c=e[I+8>>2],l=e[I+12>>2];break A}t=0,r=0;break e}c=g,l=65535&p|ye<<16}Y|=c,X|=l,(!t&(0|r)==-2147483648?!(te|ne):(0|r)>0|(0|r)>=0)?t|te|-2147483648^r|ne?(t=s,r=i):(P=X,X=(s=(0|(l=i))==(0|(r=(r=t=1&s)>>>0>(t=t+s|0)>>>0?l+1|0:l))&t>>>0<s>>>0|r>>>0<l>>>0)>>>0>(Y=s+Y|0)>>>0?P+1|0:P):(s=(0|i)==(0|(r=(t=s+1|0)?i:i+1|0))&t>>>0<s>>>0|r>>>0<i>>>0,i=X,X=(Y=s+Y|0)>>>0<s>>>0?i+1|0:i)}}e[A>>2]=t,e[A+4>>2]=r,e[A+8>>2]=Y,e[A+12>>2]=X,H=I+96|0}function LA(A,t,r,s,i,l,c){var g,p=0,I=0,h=0,M=0,P=0,z=0,Y=0,V=0,X=0,te=0,ne=0,me=0,ke=0,ye=0,Pe=0;H=g=H-480|0,e[g+476>>2]=0,e[g+456>>2]=0,e[g+460>>2]=0,e[g+448>>2]=0,e[g+452>>2]=0,e[g+440>>2]=0,e[g+444>>2]=0,e[g+432>>2]=0,e[g+436>>2]=0,p=0;e:if(e[A+684>>2]){for(Y=c?e[c>>2]:Y;h=d[t+p|0],f[(g+112|0)+p|0]=h,I=p+1|0,h&&(h=p>>>0<158,p=I,h););if(f[I+(g+112|0)|0]=0,!((te=268435456&l)|!(8&e[47197]))){I=0;A:if(223&(h=d[0|t]))for(p=0;;){if(f[(g+272|0)+p|0]=h,!(223&(h=d[(I=p+1|0)+t|0])))break A;if(M=p>>>0<118,p=I,!M)break}f[(p=g+272|0)+I|0]=0,e[g+48>>2]=p,Kt(e[47195],(0|l)>=0?87019:86877,g+48|0)}e[g+464>>2]=t,e[A+8208>>2]=0,e[A+8212>>2]=0,i&&(f[0|i]=0);A:{r:if(223&(p=d[0|t]))for(ne=536870912&l,me=4096&l,ke=g+105|0,I=t,h=0;;){M=_A(g+476|0,I),X=!!(0|Bt(e[g+476>>2]))+X|0,z=d[(p=(P=255&p)+A|0)+7668|0];a:if(!((V=e[g+476>>2])-48>>>0<10|V-2406>>>0<10)|(X?d[A+170|0]:0)){n:if((h=e[g+476>>2]-e[A+600>>2]|0)>>>0>127||!(h=e[6192+((h<<2)+A|0)>>2])){if(z){for(V=5168+((P<<2)+A|0)|0,z=z+(p=d[p+7924|0])|0,ye=P|d[I+1|0]<<8,h=0;e[(I=(p<<2)+A|0)+7184>>2]==(0|ye)&&(e[g+472>>2]=e[g+464>>2],OA(A,g+472|0,t,2,e[I+6704>>2],g+432|0,l,Y),(0|(I=e[g+432>>2]))>0&&(I=I+35|0,e[g+432>>2]=I),h=1,OA(A,g+464|0,t,1,e[V>>2],g+448|0,l,Y),e[g+448>>2]>(0|I)||(I=e[g+444>>2],e[g+456>>2]=e[g+440>>2],e[g+460>>2]=I,I=e[g+436>>2],e[g+448>>2]=e[g+432>>2],e[g+452>>2]=I,e[g+464>>2]=e[g+472>>2])),z>>>0>(p=p+1|0)>>>0;);if(h)break n}o:{c:{if(!(p=e[5168+((P<<2)+A|0)>>2])){if(OA(A,g+464|0,t,0,e[A+5168>>2],g+448|0,l,Y),e[g+448>>2])break o;if(16&d[188808])break c;if(h=_A(g+468|0,P=(I=e[g+464>>2])-1|0),p=e[g+468>>2],!(e[A+600>>2]<=0|(0|p)>577)){if(ci(p)){e[g+32>>2]=21,iA(r,87049,g+32|0);break A}p=e[g+468>>2]}if((0|p)==57384&&((0|(z=e[A+92>>2]))<=e[47352]||(e[47352]=z)),mn(p)&&((0|(p=e[A+72>>2]))<=e[47352]||(e[47352]=p)),!((z=(p=e[g+468>>2])-192|0)>>>0>413)&&(z=d[z+94240|0])&&(h=h-1|0,!(d[I-2|0]==32&d[h+I|0]==32))){for(e[g+472>>2]=P,f[0|P]=z;M=d[(p=I)+h|0],f[0|p]=M,I=p+1|0,(0|M)!=32;);if((0|h)>0&&Ve(p,32,h),e[A+24>>2]&&!((0|ii(94222,e[g+468>>2]))<=0)){e[g+464>>2]=P,h=0;break a}h=0,f[0|r]=0,e[g+464>>2]=t,e[A+8208>>2]=0,e[A+8212>>2]=0;break a}if(!(p=Ys(p))||(0|(I=e[p+4>>2]))==e[A+600>>2])break c;if((0|I)==e[A+188>>2]){e[g+4>>2]=Te(g- -64|0,e[A+192>>2]),e[g>>2]=21,iA(r,87218,g);break A}if(!(4&d[p+16|0]))break c;e[g+20>>2]=Te(g- -64|0,e[p+12>>2]),e[g+16>>2]=21,iA(r,87218,g+16|0);break A}if(OA(A,g+464|0,t,1,p,g+448|0,l,Y),e[g+448>>2])break o}c:if(!((p=e[g+476>>2])-768>>>0<112)){if(Bt(p)){if(f[(M+e[g+464>>2]|0)-1|0]<33&(0|X)<=1)break c;if(f[0|r]=0,!c)break r;e[c>>2]=4096|e[c>>2];break r}BA(A,e[g+476>>2],-1,g+272|0,0),d[g+272|0]&&(e[g+448>>2]=1,e[g+452>>2]=g+272)}e[g+464>>2]=(M+e[g+464>>2]|0)-1;break n}e[A+288>>2]=0}else OA(A,g+464|0,t,M,h,g+448|0,l,Y);if(I=(p=e[g+452>>2])||86135,e[g+452>>2]=I,h=0,!(e[g+448>>2]<=0)){if(p=1|e[g+456>>2],(0|l)<0)break e;if(!(d[0|I]!=21|me)){yA(r,I);break A}if(!(!(8&e[47197])|te))n:if(p=e[47195],(0|(M=e[p+76>>2]))>=0&(!M|e[56823]!=(-1073741825&M)))P=e[(M=p+76|0)>>2],e[M>>2]=P||1073741823,e[p+80>>2]==10||(0|(P=e[p+20>>2]))==e[p+16>>2]?Va(p):(e[p+20>>2]=P+1,f[0|P]=10),e[M>>2]=0;else{if(e[p+80>>2]!=10&&(0|(M=e[p+20>>2]))!=e[p+16>>2]){e[p+20>>2]=M+1,f[0|M]=10;break n}Va(p)}if(M=-32769&(p=e[g+456>>2]),e[g+456>>2]=M,!(!i|!M|(1024&p?ne:0))){A=e[g+464>>2],yA(i,I),p=M|(Pe=(r=A)-rt(t,A=g+112|0,CA(A))|0,(1151&p)==1024?Pe:0);break e}(p=e[g+460>>2])&&(f[0|p]=69),Bn(A,r,s,I)}}else f[g+104|0]=95,rt(ke,I,M),p=1,f[105+(g+M|0)|0]=0,DA(A,g+104|0,g- -64|0),h-1>>>0<=4294967293&&(p=CA(p=g- -64|0)+p|0,f[0|p]=11,f[p+1|0]=0,p=0),Bn(A,r,s,g- -64|0),e[g+464>>2]=I+M,h=p;if(I=e[g+464>>2],!(223&(p=d[0|I])))break}rt(t,A=g+112|0,CA(A))}p=0}return H=g+480|0,p}function QA(A,t){var r,s=0,i=0,l=0,c=0,g=0,p=0,I=0,h=0,M=0,P=0,z=0,Y=0,V=0,X=0,te=0,ne=0,me=0,ke=0,ye=0,Pe=0,_e=0,Ke=0;H=r=H-2976|0,e[t>>2]=1,s=e[A+20>>2],e[(g=r+2960|0)>>2]=e[A+16>>2],e[g+4>>2]=s,s=e[A+12>>2],e[(g=r+2952|0)>>2]=e[A+8>>2],e[g+4>>2]=s,s=e[A+4>>2],e[r+2944>>2]=e[A>>2],e[r+2948>>2]=s,e[50303]||gt();e:if(A=e[r+2948>>2],d[0|A]&&A||((A=e[r+2944>>2])||(A=(A=e[r+2952>>2])||85055,e[r+2944>>2]=A),Qt(s=r+80|0,A,60),en(s,0),!(l=br(201216,s))||(e[r+2948>>2]=e[l+4>>2]+1,d[r+2958|0]|d[r+2956|0]|d[r+2957|0]))){X=r+1536|0,H=Y=H-336|0;A:if(!(!(A=e[(V=r+2944|0)+4>>2])|!d[0|A])){if((0|(te=CA(A)))>=0){for(s=te>>>0>=79?79:te,h=1;A=Ms(f[e[V+4>>2]+i|0]),f[(Y+256|0)+i|0]=A,h=((255&A)==45)+h|0,A=(0|s)!=(0|i),i=i+1|0,A;);if((0|h)!=1)break A}h=1}if((0|(M=e[50303]))<=0)e[X>>2]=0,A=0;else{for(g=(0|h)>=0;;){I=e[201216+(ke<<2)>>2];A:if(Hr(e[I+8>>2],88032,3)){if((A=e[V+4>>2])&&Hr(A,91687,3)){if(g){A=100;r:if(h){if(s=0,i=e[I+4>>2],!(ne=d[0|i])){if(!Hr(Y+256|0,90013,9))break r;break A}for(;;){for(ye=1,p=i+1|0,me=1,Pe=0,i=0;(0|i)<(0|te)&&(0|(A=f[(Y+256|0)+i|0]))!=45||(A=0),Pe=((P=(0|(z=d[i+p|0]))==45)&!!(0|(me=(P?0:z)<<24>>24==(0|A)?me:0)))+Pe|0,i=i+1|0,ye=P+ye|0,z;);if(i=i+p|0,(P=me+Pe|0)&&(s=(0|(A=O((p=(0|(A=h-P|0))<=0?5:5-A|0)-((0|(A=ye-P|0))>0?A:0)|0,100)-(ne<<24>>24<<1)|0))>(0|s)?A:s),!(ne=d[0|i]))break}if(!(A=s))break A}(s=e[V>>2])&&(A=Ut(s,e[I>>2])?Ut(s,e[I+8>>2])?A:A+400|0:A+500|0),((i=d[V+12|0])-1&255)>>>0>1||((s=d[I+12|0])-1&255)>>>0>1||(A=(0|s)!=(0|i)?A-50|0:A+50|0),i=d[V+13|0],A=d[I+12|0]!=2|i>>>0>12?A:d[I+13|0]>12?A+5|0:A,(s=d[I+13|0])&&((s=((i?O(i,100):3e3)>>>0)/(s>>>0)|0)>>>0<=99&&(s=1e4/(s>>>0)|0),A=(p=A)+((A=5-(((s-100&65535)>>>0)/10|0)|0)>>31&A)|0,A=i?A+10|0:A),A=(0|A)<=1?1:A}else{if(Hr(e[I+8>>2],Y+256|0,te))break A;A=100}e[X+(c<<2)>>2]=I,e[I+16>>2]=A}else e[X+(c<<2)>>2]=I;c=c+1|0}if((0|M)==(0|(ke=ke+1|0)))break}e[X+(c<<2)>>2]=0,A=0,c&&(Sa(X,c,8),A=c)}if(H=Y+336|0,h=A,A||(e[t>>2]=0,A=br(201216,85055),e[r+1536>>2]=A,h=!!(0|A)),t=d[r+2957|0],g=2,(0|(A=d[r+2956|0]))!=2&&(g=2,(t-1&255)>>>0<12||(Ke=(0|A)!=1,g=(0|A)==1)),M=(c=e[132136+(g<<2)>>2])+(z=t>>>0<60)|0,A=0,(0|h)>0)for(s=0;;){l=e[(r+1536|0)+(_e<<2)>>2];A:{r:{a:{if(Ke){if(z||(t=0,s))break r}else{if(t=d[l+12|0],s|z)break a;t=(0|t)!=(0|g)}if(i=0,t|d[l+13|0]<60)break A;break r}if((0|t)!=(0|g)){i=s;break A}}e[(r+80|0)+(s<<2)>>2]=l,i=s+1|0}A:if(d[l+15|0]){if(P=0,t=A,s=i,!((0|A)>11))for(;;){if((i=d[0|M])||(M=c,i=d[0|c]),A=e[l+12>>2],p=O(t,24)+202624|0,e[p+8>>2]=e[l+8>>2],e[p+12>>2]=A,A=e[l+4>>2],e[p>>2]=e[l>>2],e[p+4>>2]=A,A=e[l+20>>2],e[p+16>>2]=e[l+16>>2],e[p+20>>2]=A,f[p+14|0]=i,e[(r+80|0)+(s<<2)>>2]=p,M=M+1|0,s=s+1|0,A=t+1|0,(P=P+1|0)>>>0>=d[l+15|0])break A;if(i=(0|t)<11,t=A,!i)break}}else s=i;if((0|(_e=_e+1|0))==(0|h))break}else{if(!l)break e;s=0}A:if(!(!(i=d[0|M])|(0|A)>=12))for(;;){if(t=e[l+12>>2],c=O(A,24)+202624|0,e[c+8>>2]=e[l+8>>2],e[c+12>>2]=t,t=e[l+4>>2],e[c>>2]=e[l>>2],e[c+4>>2]=t,t=e[l+20>>2],e[c+16>>2]=e[l+16>>2],e[c+20>>2]=t,f[c+14|0]=i,e[(r+80|0)+(s<<2)>>2]=c,s=s+1|0,!(i=d[0|(M=M+1|0)]))break A;if(t=(0|A)<11,A=A+1|0,!t)break}s?(A=e[(r+80|0)+(d[r+2958|0]%(0|s)<<2)>>2],(t=d[A+14|0])?(f[202976]=0,e[r+48>>2]=47,iA(r+2971|0,91351,r+48|0),f[r+2971|0]=0,t>>>0<=9?(e[r+20>>2]=t,e[r+16>>2]=r+2971,iA(202976,91378,r+16|0)):(e[r+36>>2]=t-10,e[r+32>>2]=r+2971,iA(202976,91503,r+32|0)),A=e[A+8>>2],e[r+4>>2]=202976,e[r>>2]=A,A=202912,iA(202912,87760,r)):A=e[A+8>>2]):A=0}else{if(A=e[l+8>>2],!d[202976])break e;e[r+64>>2]=A,e[r+68>>2]=202976,A=202912,iA(202912,87760,r- -64|0)}return H=r+2976|0,A}function SA(A,t,r,s,i){var l,c,g=0,p=0,I=0,h=0,M=0,P=0,z=0;H=l=H-464|0,f[l+432|0]=0,f[l+368|0]=0,f[l+304|0]=0,f[l+292|0]=0,M=(0|t)/10|0,g=e[33273];e:{if(!(c=2&s)|e[33272]!=2){z=32&s?113:111,h=1&s,P=t-O(M,10)|0;A:{r:{a:{n:{o:{c:{u:{l:if(d[0|g])g=0;else{i:{if(8&s){if(e[l+288>>2]=t,iA(p=l+452|0,91198,l+288|0),g=DA(A,p,l+304|0)){p=0;break l}e[l+272>>2]=t,iA(p=l+452|0,91314,l+272|0),g=DA(A,p,l+304|0),p=0}else{if(!h)break i;if(I=yA(l+432|0,133104),4&s){if(e[l+260>>2]=z,e[l+256>>2]=t,iA(p=l+452|0,91324,l+256|0),g=DA(A,p,l+304|0),d[133116]&&g)break u;if(p=g,g)break l}e[l+244>>2]=z,e[l+240>>2]=t,iA(p=l+452|0,91384,l+240|0),p=g=DA(A,p,l+304|0)}if(g)break l}i:{if(c){if(!(1&f[133096]))break i;e[l+208>>2]=t,iA(g=l+452|0,91498,l+208|0),g=DA(A,g,l+304|0)}else I=e[A+108>>2],e[l+224>>2]=t,iA(g=l+452|0,(0|r)>=2?91700:(262144&I)>>>18|0?91534:91700,l+224|0),g=DA(A,g,l+304|0);if(g)break l}!h|!(32&d[A+109|0])?(e[l+192>>2]=t,iA(g=l+452|0,91766,l+192|0),g=DA(A,g,l+304|0)):g=0}if(!(16&s)|(0|t)>9)break o;g=p;break c}if(yA(I,133116),!(16&s)|(0|t)>9)break n}DA(A,88875,l+368|0);break r}if(!g)break a;g=p}f[l+368|0]=0;break r}a:if(h&&(e[l+180>>2]=z,e[l+176>>2]=M,iA(g=l+452|0,91846,l+176|0),DA(A,g,l+368|0))){if(p=1,!P|!(16&d[A+109|0]))break a;Ur(l+368|0,133104)}else p||(e[l+160>>2]=M,iA(p=l+452|0,512&s?91936:92016,l+160|0),DA(A,p,l+368|0),p=0);if(g=P,d[l+368|0]||(g=P,16&d[A+106|0]&&(e[l+144>>2]=254&M,iA(g=l+452|0,92016,l+144|0),DA(A,g,l+368|0),g=(0|t)%20|0)),f[l+304|0]=0,M=g,(0|g)<=0)g=p;else{if(c&&(g=e[33273],d[0|g])){yA(l+304|0,g),f[l+432|0]=0,I=h;break A}if(I=0,8&s&&(e[l+128>>2]=M,iA(s=l+452|0,91314,l+128|0),I=DA(A,s,l+304|0)),!h|16&d[A+104|0]||(e[l+116>>2]=z,e[l+112>>2]=M,iA(s=l+452|0,91384,l+112|0),p=(I=DA(A,s,l+304|0))?1:p),g=p,!I){a:{if(!c|!(1&e[33274])){if(!(16&d[A+104|0])&&c)break a;p=e[A+108>>2],e[l+96>>2]=M,iA(s=l+452|0,(0|r)>=2?91700:(262144&p)>>>18|0?91534:91700,l+96|0),r=DA(A,s,l+304|0)}else e[l+80>>2]=M,iA(r=l+452|0,91498,l+80|0),r=DA(A,r,l+304|0);if(r)break r}e[l+64>>2]=M,iA(r=l+452|0,91766,l- -64|0),DA(A,r,l+304|0)}}}I=h,d[l+432|0]|g|!h||((0|t)<20|(16&d[A+104|0]?0:P)||(DA(A,92162,l+432|0),I=1,!d[l+432|0]))&&(DA(A,92205,l+432|0),I=1)}if(!(!(r=f[l+304|0])|!(48&(t=e[A+104>>2]))|!d[l+368|0])){if(DA(A,90824,l+292|0),!I|!(8&d[A+109|0])||(f[l+292|0]=0),16&d[A+104|0]){e[l+28>>2]=l+432,e[l+24>>2]=l+368,e[l+20>>2]=l+292,e[l+16>>2]=l+304,iA(i,91059,l+16|0),s=1;break e}e[l+12>>2]=l+432,e[l+8>>2]=l+304,e[l+4>>2]=l+292,e[l>>2]=l+368,iA(i,91059,l),s=1;break e}512&t&&(!r|(0|(t=CA(l+368|0)-1|0))<0||(g=d[e[144464+(f[0|(t=t+(l+368|0)|0)]<<2)>>2]+11|0]!=2,(0|(s=d[e[144464+(r<<2)>>2]+11|0]))==1&&(s=d[e[144464+(f[l+305|0]<<2)>>2]+11|0]),g|(255&s)!=2||(f[0|t]=0))),!(8&d[A+110|0])|!d[l+432|0]?(e[l+56>>2]=l+432,e[l+52>>2]=l+304,e[l+48>>2]=l+368,iA(i,92282,l+48|0)):(e[l+36>>2]=l+304,e[l+32>>2]=l+368,(0|(t=iA(i,90368,l+32|0)))>0&&(t=d[e[144464+(d[(r=t-1|0)+i|0]<<2)>>2]+11|0]==2?r:t),yA(t+i|0,l+432|0))}else yA(i,g);s=0}e:if(268435456&(A=e[A+104>>2])){if((0|CA(i))<=0)break e;for(t=0,A=0;d[0|(r=A+i|0)]==6&&(t&&(f[0|r]=5),t=1),A=A+1|0,(0|CA(i))>(0|A););}else if(256&A&&(t=0,!((0|(A=(h=CA(i))-1|0))<0))){if(A)for(P=-2&h,g=0;d[0|(p=A+i|0)]==6?(r=1,t&&(f[0|p]=5)):r=t,d[0|(p=p-1|0)]==6?(t=1,r&&(f[0|p]=5)):t=r,A=A-2|0,(0|P)!=(0|(g=g+2|0)););1&h&&(!t|d[0|(A=A+i|0)]!=6||(f[0|A]=5))}return H=l+464|0,s}function tr(A,t,r,s){var i,l,c=0,g=0,p=0,I=0,h=0,M=0,P=0;if(H=i=H-352|0,f[i+304|0]=0,f[i+224|0]=0,f[i+64|0]=0,p=e[e[47192]+292>>2],P=_A(i+348|0,t),(1048320&(c=e[i+348>>2]))==57344&&(c&=255,e[i+348>>2]=c),2&s&&Bs(c)&&DA(A,85437,i+304|0),c=pn(e[i+348>>2],A),e[i+348>>2]=c,M=1&s,BA(A,c,f[0|(l=t+P|0)],i+224|0,M),!(t=d[i+224|0])){e:if((t=Sn(e[i+348>>2]))&&(e[i+348>>2]=16383&t,4&s)){A:switch(1073741823&(t>>=14)){case 0:case 3:break e;default:break A}DA(A,t=e[131232+(t<<2)>>2],i+304|0),d[i+304|0]||(f[i+306|0]=Nn(84744),h=t,t=i+304|3,DA(e[47194],h,t),d[i+307|0]&&(k[i+304>>1]=5385,t=CA(t)+(i+304|0)|0,f[t+5|0]=0,f[t+4|0]=p,f[t+3|0]=21))}BA(A,e[i+348>>2],f[0|l],i+224|0,M),t=d[i+224|0]}e:{A:{if(t&=255){if((0|t)!=21)break A;yA(r,i+224|0),P=0;break e}if(t=1632,!((0|(c=e[i+348>>2]))<1632)){for(I=103360;;){if((0|c)>=(t+10|0)){if(!(t=e[(I=I+4|0)>>2]))break A;if((0|t)<=(0|c))continue;break A}break}(0|(t=48+(c-t|0)|0))<=0||BA(A,t,0,i+224|0,M)}}A:{r:{a:{n:{if(t=Ys(e[i+348>>2])){if(c=e[t+4>>2],!t|1&(I=e[t+16>>2])||(g=e[47192],e[g+600>>2]==(0|c)|e[g+188>>2]==(0|c)|e[g+184>>2]==(0|c)||(f[i+144|0]=0,DA(g,e[t>>2],i- -64|0)?(0|(g=e[47192]))!=(0|A)&&(p=e[A+292>>2],yA(i+144|0,i- -64|0),f[i+66|0]=e[g+292>>2]):(f[i+66|0]=Nn(84744),DA(e[47194],e[t>>2],i+144|0)),d[i+144|0]&&(k[i+64>>1]=5385,yA(3|(g=i- -64|0),h=i+144|0),g=CA(h)+g|0,f[g+5|0]=0,f[g+4|0]=p,f[g+3|0]=21))),d[i+224|0])break A;if(!c||(p=e[47192],e[p+188>>2]!=(0|c)))break n;t=e[p+192>>2];break r}if(d[i+224|0])break A;I=0,c=0;break a}if((t=e[t+12>>2])&&!(2&I))break r}t=25966}if((e[A+212>>2]==(0|t)&(0|t)!=27503||(f[i+226|0]=Nn(Te(i+47|0,t)),(t=e[47194])&&((0|(p=e[i+348>>2]))>55215||(0|(g=p-44032|0))<0?BA(t,p,f[0|l],i+224|3,M):(f[i+52|0]=32,t=h=i+53|0,p-50500>>>0>=588&&(t=dr(4352+((g>>>0)/588|0)|0,h)+h|0),dr(4449+(((p=(g>>>0)/28|0)>>>0)%21|0)|0,t),dr(4519+(g-O(p,28)|0)|0,t+3|0),f[t+6|0]=32,f[t+7|0]=0,f[i+227|0]=0,t=i+224|3,LA(e[47194],h,t,77,0,0,0),Lt(e[47194],t,0,-1,0)),t=i+224|3,d[i+227|0]==21&&(f[i+226|0]=Nn(i+224|4),BA(e[47194],e[i+348>>2],f[0|l],t,M)),rs(e[e[32972]+60>>2]),d[i+227|0]&&(k[i+224>>1]=5385,t=CA(t)+(i+224|0)|0,f[t+3|0]=21,M=e[A+292>>2],f[t+5|0]=0,f[t+4|0]=M)),!d[i+224|0]))&&(16&I||(FA(e[i+348>>2])&&DA(e[47192],85683,i+224|0),d[i+224|0]||(ar(e[i+348>>2])||DA(e[47192],85778,i+224|0),d[i+224|0]||Mr(85992,i+224|0,0))),!(8&I)||4&s)){if(t=e[i+348>>2],(0|c)!=10240?(e[i+32>>2]=t,iA(i+52|0,86013,i+32|0)):(c=i+52|0,1&t&&(f[i+52|0]=49,c=i+53|0),2&t&&(f[0|c]=50,c=c+1|0),4&t&&(f[0|c]=51,c=c+1|0,t=e[i+348>>2]),8&t&&(f[0|c]=52,c=c+1|0,t=e[i+348>>2]),16&t&&(f[0|c]=53,c=c+1|0,t=e[i+348>>2]),32&t&&(f[0|c]=54,c=c+1|0,t=e[i+348>>2]),64&t&&(f[0|c]=55,c=c+1|0,t=e[i+348>>2]),128&t&&(f[0|c]=56,c=c+1|0),f[0|c]=0),t=i+224|0,I=d[i+52|0])for(c=i+52|0;t=CA(t)+t|0,f[0|t]=23,t=t+1|0,BA(e[47192],I<<24>>24,0,t,1),(s=d[0|t])&&(0|s)!=21||(0|(s=f[0|c]))<97||Mr(e[130860+((255&s)<<2)>>2],t,0),I=d[0|(c=c+1|0)];);t=CA(t)+t|0,f[0|t]=9,f[t+1|0]=0}}t=CA(r),2&d[A+144|0]?(e[i+16>>2]=255,e[i+28>>2]=i+304,e[i+24>>2]=i+224,e[i+20>>2]=i- -64,iA(i+144|0,86210,i+16|0)):(e[i>>2]=255,e[i+12>>2]=i+224,e[i+8>>2]=i+304,e[i+4>>2]=i- -64,iA(i+144|0,86210,i)),CA(i+144|0)+t>>>0>199||yA(t+r|0,i+144|0)}return H=i+352|0,P}function bt(A,t,r,s,i,l,c){var g,p=0,I=0,h=0,M=0,P=0,z=0,Y=0,V=0,X=0,te=0,ne=0,me=0,ke=0,ye=0,Pe=0,_e=0,Ke=0,lA=0,mA=0,GA=0,NA=0,JA=0;H=g=H-528|0,te=c?e[c>>2]:0,_e=e[i+4>>2];e:{A:{if(e[A+220>>2]>0){Qt(I=g+352|0,t,160),H=z=H-176|0,V=1-(Y=e[A+220>>2])|0,X=e[A+224>>2],ne=e[A+216>>2],M=I;r:{a:{for(;;){if(me=_A(z+172|0,M),p=e[z+172>>2]){if((0|p)<(0|Y)|(0|p)>(0|ne))break a;if(X){if((0|(p=f[X+(p-Y|0)|0]))<=0)break a}else p=p+V|0;if(M=M+me|0,f[P+z|0]=p,p=160,(0|(P=P+1|0))!=160)continue}else p=P;break}if(X=0,f[p+z|0]=0,V=f[0|z],e[z+172>>2]=V,V){for(Ke=2+(ne-Y|0)|0,Y=p=z;;){ne=p+1|0;n:{if((me=e[A+8180>>2])&&(P=0,!((0|(M=k[me>>1]))>(0|(ye=(f[0|ne]<<8)+V|0)))))for(;;){if((0|M)==(0|ye)){V=P+Ke|0,e[z+172>>2]=V,p=p+2|0;break n}if(!((0|ye)>=(0|(M=k[me+((P=P+1|0)<<1)>>1]))))break}p=ne}if(ke=63&V|ke<<6,(0|(P=X+6|0))<8?X=P:(X=X-2|0,f[0|Y]=ke>>X,Y=Y+1|0),V=f[0|p],e[z+172>>2]=V,!V)break}(0|X)<=0||(f[0|Y]=ke<<8-X,Y=Y+1|0)}else Y=z;f[0|Y]=0,rt(I,z,p=Y-z|0),Y=64|p;break r}Y=CA(I)}H=z+176|0,z=I}else Y=CA(t),z=t;if(I=d[0|z]){for(p=0,P=z;h=1023&(h=(h<<3)+I|0)^h>>>8,p=p+1|0,I=d[0|(P=P+1|0)];);p=p+h&1023}else p=0;if(h=e[692+((p<<2)+A|0)>>2]){if(p=d[0|h])break A;p=0;break e}if(p=0,!i)break e;e[i>>2]=0;break e}for(me=1073741824&_e,ye=2048&l,_e=512&te,Ke=65536&te,lA=1&te,mA=2&te,te=8&l,GA=1024&l,ne=4&l,NA=63&Y,JA=A+8233|0;;){l=(255&p)+h|0;A:{r:if((127&(p=d[h+1|0]))==(0|Y)&&!Hr(z,h+2|0,NA)){h=2+((63&p)+h|0)|0;a:{if(p<<24>>24<0)X=0,f[0|s]=0;else{if((0|(X=CA(h)))>=160)break a;yA(s,h),h=1+(h+X|0)|0}if(I=0,l>>>0<=h>>>0)p=r,M=0;else{P=0,M=0;n:{for(;;){h=(p=h)+1|0;o:if((p=d[0|p])>>>0>=100){if(V=e[A+320>>2],p>>>0>=132){P|=V>>>p-132&1;break o}P|=!(V>>>p-100&1)}else{if(p>>>0>=81){V=p-80|0,ke=l-h|0;c:if(c)for(p=0;;){if(Pe=O(p,12)+c|0,!d[Pe+10|0])break c;if(P=!!(12&d[Pe+1|0])|P,Pe=(0|p)!=(0|V),p=p+1|0,!Pe)break}if(Fn(r,h,ke)|1&P)break r;e[33264]=V,p=r+ke|0,M|=128,h=l;break n}p>>>0>=65?(M=15&p|-16&M,M=12&~p?M:512|M):p>>>0>=32?I|=1<<p-32:M|=1<<p}if(!(l>>>0>h>>>0))break}if(p=r,1&P)break A}if(65536&I&&!ne||GA&&49152&I)break A}if(ne&&(16384&I||!te&&32768&I)||(mA?0:512&I)|(lA?0:1024&I)|(Ke?0:33554432&M)||!(!(131072&I)|ee[e[47192]+8204>>2]<=p>>>0|me)|(_e?0:262144&I)|(8&d[e[47192]+8242|0]?0:8192&I)||16&I&&(!e[A+8184>>2]&(!te|!e[A+8192>>2])||!(!te|e[A+212>>2]!=25966)&&2097152&e[A+8232>>2])||(e[A+8188>>2]?0:64&I)|(!e[A+8196>>2]|ye?32&I:0)||!(!(65536&M)|e[A+212>>2]!=26741|128&d[0|JA])|(e[47192]!=(0|A)?524288&I:0))break A;n:{o:{c:{if(!i){if(!X)break c;break n}if(e[i+4>>2]=I,e[i>>2]=1073741824|M,X)break o}if(p=0,!(8&d[188788]))break e;Dn(i,A=g+272|0),e[g>>2]=t,e[g+4>>2]=A,Kt(e[47195],89330,g);break e}e[i>>2]=-1073741824|M}if(8&d[188788]&&(os(s,g- -64|0),d[e[47192]+172|0]==(M>>>29&1)&&(!c|!(128&M)?(e[g+48>>2]=t,Kt(e[47195],89426,g+48|0)):(rt(A=g+352|0,s=r,r=p-r|0),f[351+(r+g|0)|0]=0,e[g+32>>2]=t,e[g+36>>2]=A,Kt(e[47195],89397,g+32|0)),Dn(i,A=g+272|0),t=e[47195],e[g+16>>2]=g- -64,e[g+20>>2]=A,Kt(t,89534,g+16|0))),d[_A(g- -64|0,z)+z|0]|!i||Bt(e[g+64>>2]))break e;e[i>>2]=134217728|e[i>>2];break e}pe(89236,86634,2467,94846),j()}h=l}if(!(p=d[0|h]))break}p=0}return H=g+528|0,p}function or(A,t,r,s,i){var l,c=0,g=0;H=l=H-304|0,f[l+278|0]=0;e:{if((0|t)>0&&(1&s&&(2&s&&(e[l+164>>2]=r,e[l+160>>2]=t,iA(c=l+290|0,89701,l+160|0),c=DA(A,c,l+224|0))||1&f[133096]&&(e[l+148>>2]=r,e[l+144>>2]=t,iA(c=l+290|0,89757,l+144|0),c=DA(A,c,l+224|0))||(e[l+132>>2]=r,e[l+128>>2]=t,iA(c=l+290|0,89894,l+128|0),c=DA(A,c,l+224|0)))||(e[l+116>>2]=r,e[l+112>>2]=t,iA(c=l+290|0,89974,l+112|0),c=DA(A,c,l+224|0))))break e;if((0|(g=(0|t)%100|0))>=20&&DA(A,90022,l+278|0),1&s){if(2&s){c=g-11|0;A:{r:{a:switch((448&e[e[47192]+108>>2])-64>>>6|0){case 0:if(c>>>0<9)break r;if(s=90418,(0|(c=(0|t)%10|0))==1)break A;if(c-2>>>0>=3)break r;s=90453;break A;case 1:if(t-2>>>0>=3)break r;s=90453;break A;case 2:if(c>>>0<9|((0|t)%10|0)-2>>>0>=3)break r;s=90453;break A;case 3:if(s=90508,c>>>0<9)break A;s=(s=(0|t)%10|0)?(0|s)==1?90453:90586:90508;break A;case 4:break a;default:break r}if(!(c>>>0<9)){if(s=90537,(0|(c=(0|t)%10|0))==1)break A;if(!(c-2>>>0>=3)){s=90453;break A}}}s=90586}if(e[l+100>>2]=r,e[l+96>>2]=s,iA(s=l+290|0,90058,l+96|0),c=0,DA(A,s,l+224|0))break e}if(s=g-11|0,1&f[133096]){A:{r:{a:switch((448&e[e[47192]+108>>2])-64>>>6|0){case 0:if(s>>>0<9)break r;if(c=90418,(0|(g=(0|t)%10|0))==1)break A;if(g-2>>>0>=3)break r;c=90453;break A;case 1:if(t-2>>>0>=3)break r;c=90453;break A;case 2:if(s>>>0<9|((0|t)%10|0)-2>>>0>=3)break r;c=90453;break A;case 3:if(c=90508,s>>>0<9)break A;c=(c=(0|t)%10|0)?(0|c)==1?90453:90586:90508;break A;case 4:break a;default:break r}if(!(s>>>0<9)){if(c=90537,(0|(g=(0|t)%10|0))==1)break A;if(!(g-2>>>0>=3)){c=90453;break A}}}c=90586}if(e[l+84>>2]=r,e[l+80>>2]=c,iA(g=l+290|0,90110,l+80|0),c=0,DA(A,g,l+224|0))break e}A:{r:{a:switch((448&e[e[47192]+108>>2])-64>>>6|0){case 0:if(s>>>0<9)break r;if(c=90418,(0|(g=(0|t)%10|0))==1)break A;if(g-2>>>0>=3)break r;c=90453;break A;case 1:if(t-2>>>0>=3)break r;c=90453;break A;case 2:if(s>>>0<9|((0|t)%10|0)-2>>>0>=3)break r;c=90453;break A;case 3:if(c=90508,s>>>0<9)break A;c=(c=(0|t)%10|0)?(0|c)==1?90453:90586:90508;break A;case 4:break a;default:break r}if(!(s>>>0<9)){if(c=90537,(0|(g=(0|t)%10|0))==1)break A;if(!(g-2>>>0>=3)){c=90453;break A}}}c=90586}if(e[l+68>>2]=r,e[l+64>>2]=c,iA(g=l+290|0,90139,l- -64|0),c=0,DA(A,g,l+224|0))break e}else s=g-11|0;A:{r:{a:switch((448&e[e[47192]+108>>2])-64>>>6|0){case 0:if(s>>>0<9)break r;if(c=90418,(0|(s=(0|t)%10|0))==1)break A;if(s-2>>>0>=3)break r;c=90453;break A;case 1:if(t-2>>>0>=3)break r;c=90453;break A;case 2:if(s>>>0<9|((0|t)%10|0)-2>>>0>=3)break r;c=90453;break A;case 3:if(c=90508,s>>>0<9)break A;c=(s=(0|t)%10|0)?(0|s)==1?90453:90586:90508;break A;case 4:break a;default:break r}if(!(s>>>0<9)){if(c=90537,(0|(s=(0|t)%10|0))==1)break A;if(!(s-2>>>0>=3)){c=90453;break A}}}c=90586}e[l+52>>2]=r,e[l+48>>2]=c,iA(s=l+290|0,90218,l+48|0),c=0,DA(A,s,l+224|0)||((0|r)<4||(e[l+32>>2]=r-1,iA(s=l+290|0,89026,l+32|0),DA(A,s,l+176|0)||(DA(A,90273,l+224|0),e[33275]=3)),d[l+224|0]||(e[l+16>>2]=t,iA(s=l+290|0,90303,l+16|0),(c=DA(A,s,l+224|0))||DA(A,90347,l+224|0),e[33275]=2))}return e[l+4>>2]=l+224,e[l>>2]=l+278,iA(i,90368,l),H=l+304|0,!((0|t)!=1|(0|r)!=1)&&(t=1,32&d[A+106|0])||(t=c),t}function _t(A,t,r,s){var i,l=0,c=0,g=0,p=0,I=0,h=0,M=0;H=i=H+-64|0,k[i+48>>1]=0,e[i+40>>2]=0,e[i+44>>2]=0,e[i+32>>2]=0,e[i+36>>2]=0,e[i+24>>2]=0,e[i+28>>2]=0,e[i+16>>2]=0,e[i+20>>2]=0,e[i+8>>2]=0,e[i+12>>2]=0,e[i>>2]=0,e[i+4>>2]=0,l=t;e:{for(;;){A:{r:{if((0|(c=d[0|l]))!=69){if((0|c)!=32)break r;if(s&&(f[rt(c=s,t,s=(0|(s=l-t|0))>=159?159:s)+s|0]=0),s=63&r)break A;break e}f[0|l]=101}l=l+1|0;continue}break}if(1&r){A:if((l=l-1|0)>>>0<t>>>0)c=s;else for(c=s;;){if((192&d[0|l])!=128)break A;if(c=c+1|0,!((l=l-1|0)>>>0>=t>>>0))break}g=s-1|0}else g=s,c=s;if((0|s)!=1)for(;;){s=g;A:if(!((l=l-1|0)>>>0<t>>>0))for(;;){if((192&d[0|l])!=128)break A;if(c=c+1|0,!((l=l-1|0)>>>0>=t>>>0))break}A:if(!((l=l-1|0)>>>0<t>>>0))for(;;){if((192&d[0|l])!=128)break A;if(c=c+1|0,!((l=l-1|0)>>>0>=t>>>0))break}if(g=s-2|0,!((0|s)>2))break}if((0|c)<=0)g=0;else{if(p=3&(g=(s=(t=c-1|0)>>>0>=48?48:t)+1|0),t=0,c=0,s>>>0>=3)for(M=-4&g,s=0;I=l+c|0,f[c+i|0]=d[0|I],f[0|I]=32,I=(h=1|c)+l|0,f[i+h|0]=d[0|I],f[0|I]=32,I=(h=2|c)+l|0,f[i+h|0]=d[0|I],f[0|I]=32,I=(h=3|c)+l|0,f[i+h|0]=d[0|I],f[0|I]=32,c=c+4|0,(0|M)!=(0|(s=s+4|0)););if(p)for(;s=l+c|0,f[c+i|0]=d[0|s],f[0|s]=32,c=c+1|0,(0|p)!=(0|(t=t+1|0)););}}if(f[i+g|0]=0,p=65520&r,!(512&r)|d[0|(s=l-1|0)]!=105||(f[0|s]=121),c=4|p,256&r){e:{A:{r:{if((0|(t=e[A+212>>2]))!=25966){if((0|t)!=28268)break r;if(f[0|s]<0||128&(t=f[0|(g=l-2|0)]))break e;if(p=e[A+632>>2])t=!!(0|Sr(p,t));else{if((0|(p=e[A+600>>2]))>0&&(t=t-p|0)-1>>>0>254)break e;t=128&d[344+(A+t|0)|0]}if(!t)break e;if(t=f[0|s],p=e[A+612>>2])t=!!(0|Sr(p,t));else{a:{if((0|(p=e[A+600>>2]))>0){if((t=t-p|0)-1>>>0<255)break a;break e}if((0|t)<0)break e}t=4&d[344+(A+t|0)|0]}if(!t)break e;t=f[l-3|0];a:{if(p=e[A+632>>2])t=!!(0|Sr(p,t));else{n:{if((0|(p=e[A+600>>2]))>0){if((t=t-p|0)-1>>>0<255)break n;break a}if((0|t)<0)break a}t=128&d[344+(A+t|0)|0]}if(t)break e}f[0|l]=d[0|s],f[0|s]=d[0|g],f[l+1|0]=32;break e}if(g=f[l-2|0],t=e[A+632>>2])t=!!(0|Sr(t,g));else{a:{if((0|(t=e[A+600>>2]))>0){if((g=g-t|0)-1>>>0<255)break a;break A}if((0|g)<0)break A}t=128&d[344+(A+g|0)|0]}if(!t)break A;if(g=f[0|s],t=e[A+608>>2])t=!!(0|Sr(t,g));else{if((0|(t=e[A+600>>2]))>0){if((g=g-t|0)-1>>>0>=255)break A}else if((0|g)<0)break A;t=2&d[344+(A+g|0)|0]}if(!t)break A;c=Hr(87771,l-3|0,3)?20|p:c;break e}c=e[A+204>>2]?20|p:c;break e}(d[0|s]==99||(g=d[(t=l-2|0)+1|0]<<8,(d[0|t]|g)==29554|(g|d[0|t])==29289||(d[0|(t=l-2|0)]|d[t+1|0]<<8)==29301||!Hr(88115,l-3|0,3)||(d[0|(t=l-2|0)]|d[t+1|0]<<8)==29550|d[0|s]==117||!Hr(88384,l-5|0,5)||(d[0|(t=l-4|0)]|d[t+1|0]<<8|d[t+2|0]<<16|d[t+3|0]<<24)==1735287154||(d[0|t]|d[t+1|0]<<8|d[t+2|0]<<16|d[t+3|0]<<24)==1735549292))&&(c=20|p)}16&c&&(dr(e[A+204>>2],l),8&d[188788]&&di(88683,6,e[47195]))}return e[A+8184>>2]|!(2048&r)||(e[A+8184>>2]=1),y[i>>1]!=115&&Hr(i,88850,3)||(c|=8),H=i- -64|0,d[0|i]==39?65531&c:c}function Rt(A,t,r,s,i,l,c,g,p){var I,h=0,M=0,P=0,z=0,Y=0,V=0,X=0,te=0,ne=0,me=0;H=I=H-112|0,h=2147483647&p;e:{if(P=!(t|r),(s|(M=2147483647&i)?M-2147418112>>>0<2147549184:P)||!(!g&(0|(Y=h-2147418112|0))==-2147418112?l|c:(0|Y)==-2147418112&!!(0|g)|Y>>>0>2147549184)){if(!(!s&(0|M)==2147418112?P:M>>>0<2147418112)){g=s,p=32768|i,l=t,c=r;break e}if(!(!g&(0|h)==2147418112?!(l|c):h>>>0<2147418112)){p|=32768;break e}if(!(t|s|2147418112^M|r)){z=s,g=(s=!(t^l|s^g|r^c|i^p^-2147483648))?0:z,p=s?2147450880:i,l=s?0:t,c=s?0:r;break e}if(!(l|g|2147418112^h|c))break e;if(!(t|s|r|M)){if(l|g|c|h)break e;l&=t,c&=r,g&=s,p&=i;break e}if(!(l|g|c|h)){l=t,c=r,g=s,p=i;break e}}M=(P=te=(z=(0|h)==(0|M))&(0|s)==(0|g)?(0|r)==(0|c)&t>>>0<l>>>0|r>>>0<c>>>0:z&s>>>0<g>>>0|h>>>0>M>>>0)?l:t,Y=P?c:r,ne=z=P?p:i,P=P?g:s,X=65535&z,s=te?s:g,me=i=te?i:p,z=i>>>16&32767,(V=ne>>>16&32767)||(p=i=!(P|X),h=i?M:P,g=i<<=6,Gt(I+96|0,M,Y,P,X,(i=i+((0|(p=be(p?Y:X)))==32?be(h)+32|0:p)|0)-15|0),P=e[I+104>>2],X=e[I+108>>2],Y=e[I+100>>2],V=16-i|0,M=e[I+96>>2]),l=te?t:l,c=te?r:c,g=s,p=65535&me,z||(i=t=!(g|p),h=t?l:g,r=t<<=6,Gt(I+80|0,l,c,g,p,(t=t+((0|(i=be(i?c:p)))==32?be(h)+32|0:i)|0)-15|0),z=16-t|0,g=e[I+88>>2],p=e[I+92>>2],c=e[I+84>>2],l=e[I+80>>2]),r=p<<3|g>>>29,t=g<<3|c>>>29,r|=524288,g=P<<3|Y>>>29,p=X<<3|P>>>29,te=ne^me,i=c<<3|l>>>29,s=l<<3,(0|z)!=(0|V)&&((l=V-z|0)>>>0>127?(t=0,r=0,i=0,s=1):(Gt(I- -64|0,s,i,t,r,128-l|0),ur(I+48|0,s,i,t,r,l),t=e[I+56>>2],r=e[I+60>>2],i=e[I+52>>2],s=e[I+48>>2]|!!(e[I+64>>2]|e[I+72>>2]|e[I+68>>2]|e[I+76>>2]))),P=s,h=i,z=g,X=524288|p,i=Y<<3|M>>>29,Y=M<<3,M=i;A:if((0|te)<0){if(l=0,c=0,g=0,p=0,!(P^Y|t^z|h^M|r^X))break e;if(s=Y-P|0,i=M-((P>>>0>Y>>>0)+h|0)|0,g=(l=z-t|0)-(c=(0|h)==(0|M)&P>>>0>Y>>>0|h>>>0>M>>>0)|0,p=t=(X-((t>>>0>z>>>0)+r|0)|0)-(l>>>0<c>>>0)|0,t>>>0>524287)break A;l=t=!(g|p),c=t?s:g,r=t<<=6,Gt(I+32|0,s,i,g,p,t=(t=t+((0|(l=be(l?i:p)))==32?be(c)+32|0:l)|0)-12|0),V=V-t|0,g=e[I+40>>2],p=e[I+44>>2],s=e[I+32>>2],i=e[I+36>>2]}else i=h+M|0,l=(0|h)==(0|(i=(s=P+Y|0)>>>0<Y>>>0?i+1|0:i))&s>>>0<P>>>0|i>>>0<h>>>0,h=r+X|0,h=(t=t+z|0)>>>0<z>>>0?h+1|0:h,1048576&(p=(g=t+l|0)>>>0<t>>>0?h+1|0:h)&&(s=1&P|(1&i)<<31|s>>>1,i=g<<31|i>>>1,V=V+1|0,g=(1&p)<<31|g>>>1,p=p>>>1|0);if(r=0,M=-2147483648&ne,(0|V)>=32767)g=r,p=2147418112|M,l=0,c=0;else if(z=0,(0|V)>0?z=V:(Gt(I+16|0,s,i,g,p,V+127|0),ur(I,s,i,g,p,1-V|0),s=e[I>>2]|!!(e[I+16>>2]|e[I+24>>2]|e[I+20>>2]|e[I+28>>2]),i=e[I+4>>2],g=e[I+8>>2],p=e[I+12>>2]),Y=7&s,s=(0|(t=g<<29|i>>>3))==(0|(c=(s=(7&i)<<29|s>>>3)>>>0>(l=(Y>>>0>4)+s|0)>>>0?t+1|0:t))&s>>>0>l>>>0|t>>>0>c>>>0,t=r|(7&p)<<29|g>>>3,p=M|p>>>3&65535|z<<16,p=t>>>0>(g=s+t|0)>>>0?p+1|0:p,(0|Y)!=4){if(!Y)break e}else h=c+(t=0)|0,p=(t=(0|t)==(0|(c=(s=l)>>>0>(l=l+(r=1&l)|0)>>>0?h+1|0:h))&r>>>0>l>>>0|t>>>0>c>>>0)>>>0>(g=t+g|0)>>>0?p+1|0:p}e[A>>2]=l,e[A+4>>2]=c,e[A+8>>2]=g,e[A+12>>2]=p,H=I+112|0}function zA(A){var t=0,r=0,s=0,i=0,l=0,c=0,g=0;e:if(A|=0){l=(s=A-8|0)+(A=-8&(t=e[A-4>>2]))|0;A:if(!(1&t)){if(!(3&t)||(s=s-(t=e[s>>2])|0)>>>0<ee[57156])break e;if(A=A+t|0,e[57157]==(0|s)){if(!(3&~(t=e[l+4>>2])))return e[57154]=A,e[l+4>>2]=-2&t,e[s+4>>2]=1|A,void(e[A+s>>2]=A)}else{if(t>>>0<=255){if(i=e[s+8>>2],t=t>>>3|0,(0|(r=e[s+12>>2]))==(0|i)){e[57152]=e[57152]&ts(-2,t);break A}e[i+12>>2]=r,e[r+8>>2]=i;break A}if(g=e[s+24>>2],(0|s)==(0|(t=e[s+12>>2])))if((r=e[(i=s+20|0)>>2])||(r=e[(i=s+16|0)>>2])){for(;c=i,(r=e[(i=(t=r)+20|0)>>2])||(i=t+16|0,r=e[t+16>>2]););e[c>>2]=0}else t=0;else r=e[s+8>>2],e[r+12>>2]=t,e[t+8>>2]=r;if(!g)break A;i=e[s+28>>2];r:{if(e[(r=228912+(i<<2)|0)>>2]==(0|s)){if(e[r>>2]=t,t)break r;e[57153]=e[57153]&ts(-2,i);break A}if(e[g+(e[g+16>>2]==(0|s)?16:20)>>2]=t,!t)break A}if(e[t+24>>2]=g,(r=e[s+16>>2])&&(e[t+16>>2]=r,e[r+24>>2]=t),!(r=e[s+20>>2]))break A;e[t+20>>2]=r,e[r+24>>2]=t}}if(!(s>>>0>=l>>>0)&&1&(t=e[l+4>>2])){A:{if(!(2&t)){if(e[57158]==(0|l)){if(e[57158]=s,A=e[57155]+A|0,e[57155]=A,e[s+4>>2]=1|A,e[57157]!=(0|s))break e;return e[57154]=0,void(e[57157]=0)}if(e[57157]==(0|l))return e[57157]=s,A=e[57154]+A|0,e[57154]=A,e[s+4>>2]=1|A,void(e[A+s>>2]=A);A=(-8&t)+A|0;r:if(t>>>0<=255){if(i=e[l+8>>2],t=t>>>3|0,(0|(r=e[l+12>>2]))==(0|i)){e[57152]=e[57152]&ts(-2,t);break r}e[i+12>>2]=r,e[r+8>>2]=i}else{if(g=e[l+24>>2],(0|l)==(0|(t=e[l+12>>2])))if((r=e[(i=l+20|0)>>2])||(r=e[(i=l+16|0)>>2])){for(;c=i,(r=e[(i=(t=r)+20|0)>>2])||(i=t+16|0,r=e[t+16>>2]););e[c>>2]=0}else t=0;else r=e[l+8>>2],e[r+12>>2]=t,e[t+8>>2]=r;if(g){i=e[l+28>>2];a:{if(e[(r=228912+(i<<2)|0)>>2]==(0|l)){if(e[r>>2]=t,t)break a;e[57153]=e[57153]&ts(-2,i);break r}if(e[g+(e[g+16>>2]==(0|l)?16:20)>>2]=t,!t)break r}e[t+24>>2]=g,(r=e[l+16>>2])&&(e[t+16>>2]=r,e[r+24>>2]=t),(r=e[l+20>>2])&&(e[t+20>>2]=r,e[r+24>>2]=t)}}if(e[s+4>>2]=1|A,e[A+s>>2]=A,e[57157]!=(0|s))break A;return void(e[57154]=A)}e[l+4>>2]=-2&t,e[s+4>>2]=1|A,e[A+s>>2]=A}if(A>>>0<=255)return t=228648+(-8&A)|0,(r=e[57152])&(A=1<<(A>>>3))?A=e[t+8>>2]:(e[57152]=A|r,A=t),e[t+8>>2]=s,e[A+12>>2]=s,e[s+12>>2]=t,void(e[s+8>>2]=A);i=31,A>>>0<=16777215&&(i=62+((A>>>38-(t=be(A>>>8|0))&1)-(t<<1)|0)|0),e[s+28>>2]=i,e[s+16>>2]=0,e[s+20>>2]=0,c=228912+(i<<2)|0;A:{r:{if((r=e[57153])&(t=1<<i)){for(i=A<<((0|i)!=31?25-(i>>>1|0):0),t=e[c>>2];;){if(r=t,(-8&e[t+4>>2])==(0|A))break r;if(t=i>>>29|0,i<<=1,!(t=e[(c=r+(4&t)|0)+16>>2]))break}e[c+16>>2]=s,e[s+24>>2]=r}else e[57153]=t|r,e[c>>2]=s,e[s+24>>2]=c;e[s+12>>2]=s,e[s+8>>2]=s;break A}A=e[r+8>>2],e[A+12>>2]=s,e[r+8>>2]=s,e[s+24>>2]=0,e[s+12>>2]=r,e[s+8>>2]=A}A=e[57160]-1|0,e[57160]=A||-1}}}function rr(A,t,r){var s,i=0,l=0,c=0,g=0,p=0,I=0,h=0,M=0,P=0,z=0,Y=0,V=0;H=s=H-176|0;e:{if(32&t)z=r-((0|r)>1)|0;else{l=Pt(A,93302);A:{r:{a:{if((0|t)!=2){if(l)break a;t=0;break e}if(z=r+1|0,M=(Y=O(r,76)+133152|0)+56|0,P=Pt(A,89360),c=Pt(A,93318),g=Pt(A,93426),p=Pt(A,93499),l)break r;break A}z=r+1|0,M=(Y=O(r,76)+133152|0)+56|0,p=0}for(A=0,I=(0|(i=e[l-4>>2]))!=34?(0|i)==39?i:0:i,V=O(r,76)+133208|0;;){if(i=A,!(A=e[l>>2]))break A;r:{if(!I){if((0|A)==32|A-9>>>0<5)break A;if((0|A)!=47)break r;break A}if((0|i)!=92&&(0|A)==(0|I))break A}if(l=l+4|0,!((0|(h=dr(A,h+V|0)+h|0))<16))break}}I=0,f[h+M|0]=0,h=O(r,76)+133168|0,l=0;A:if(P)for(A=0,M=(0|(i=e[P-4>>2]))!=34?(0|i)==39?i:0:i;;){if(i=A,!(A=e[P>>2]))break A;r:{if(!M){if((0|A)==32|A-9>>>0<5)break A;if((0|A)!=47)break r;break A}if((0|i)!=92&&(0|A)==(0|M))break A}if(P=P+4|0,!((0|(l=dr(A,l+h|0)+l|0))<36))break}if(f[l+h|0]=0,!(!c|e[c>>2]-48>>>0>=10)){for(;I=(e[c>>2]+O(I,10)|0)-48|0,e[(c=c+4|0)>>2]-48>>>0<10;);(0|I)<=0||(I=I-1|0)}if(i=O(r,76)+133152|0,e[i+4>>2]=I,A=0,l=0,!(!g|e[g>>2]-48>>>0>=10))for(;l=(e[g>>2]+O(l,10)|0)-48|0,e[(g=g+4|0)>>2]-48>>>0<10;);e[i+12>>2]=l,l=O(r,76)+133152|0;A:{r:if(p){for(;r=f[A+93099|0],(i=e[(A<<2)+p>>2])&&(A=A+1|0,(0|r)==(0|i)););a:{n:switch(i-34|0){case 0:case 5:break n;default:break a}if(!r){A=0;break A}}for(A=0;r=f[A+93116|0],(i=e[(A<<2)+p>>2])&&(A=A+1|0,(0|r)==(0|i)););a:{n:switch(i-34|0){case 0:case 5:break n;default:break a}if(!r){A=1;break A}}for(A=0;r=f[A+93197|0],(i=e[(A<<2)+p>>2])&&(A=A+1|0,(0|r)==(0|i)););a:switch(i-34|0){case 0:case 5:break a;default:break r}if(!r){A=2;break A}}A=3}e[l+8>>2]=e[131156+(A<<3)>>2],e[Y>>2]=t}if(yA(137776,133168),r=yA(s+96|0,133208),f[s+157|0]=e[33291],f[s+156|0]=e[33290],A=e[33289],e[s+152>>2]=0,f[s+158|0]=A,(0|z)>0)for(c=0;;){if(g=1,t=O(c,76)+133152|0,d[0|(A=t+16|0)]&&br(0,A)&&(yA(137776,A),g=0,f[0|r]=0,f[s+158|0]=0,k[s+156>>1]=0),d[0|(A=t+56|0)]){p=yA(r,A),i=e[33679];A:if(d[0|(A=i)])for(;;){if(!Ut(A=A+1|0,p)){yA(p,i+1|0);break A}if(A=1+(CA(A)+A|0)|0,!d[0|A])break}g&&(f[137776]=0)}if((A=e[t+8>>2])&&(f[s+156|0]=A),(A=e[t+12>>2])&&(f[s+157|0]=A),(A=e[t+4>>2])&&(f[s+158|0]=A),(0|z)==(0|(c=c+1|0)))break}e[s+148>>2]=r,e[s+144>>2]=137776,(A=QA(s+144|0,s+172|0))?Ns(A,43)||(t=d[s+156|0],!d[134672]|((0|t)!=d[134724]?t:0)||(e[s>>2]=A,e[s+4>>2]=134672,iA(t=s+16|0,93533,s),A=137776,Qt(137776,t,40))):A=92003,t=0,Ut(A,134784)&&(yA(134784,A),t=131072)}return H=s+176|0,t}function Ps(A,t){var r,s=0,i=0,l=0,c=0,g=0;r=A+t|0;e:{A:if(!(1&(s=e[A+4>>2]))){if(!(3&s))break e;t=(s=e[A>>2])+t|0;r:{if((0|(A=A-s|0))!=e[57157]){if(s>>>0<=255){if(l=e[A+8>>2],s=s>>>3|0,(0|(i=e[A+12>>2]))!=(0|l))break r;e[57152]=e[57152]&ts(-2,s);break A}if(g=e[A+24>>2],(0|(s=e[A+12>>2]))==(0|A))if((i=e[(l=A+20|0)>>2])||(i=e[(l=A+16|0)>>2])){for(;c=l,(i=e[(l=(s=i)+20|0)>>2])||(l=s+16|0,i=e[s+16>>2]););e[c>>2]=0}else s=0;else i=e[A+8>>2],e[i+12>>2]=s,e[s+8>>2]=i;if(!g)break A;l=e[A+28>>2];a:{if(e[(i=228912+(l<<2)|0)>>2]==(0|A)){if(e[i>>2]=s,s)break a;e[57153]=e[57153]&ts(-2,l);break A}if(e[g+(e[g+16>>2]==(0|A)?16:20)>>2]=s,!s)break A}if(e[s+24>>2]=g,(i=e[A+16>>2])&&(e[s+16>>2]=i,e[i+24>>2]=s),!(i=e[A+20>>2]))break A;e[s+20>>2]=i,e[i+24>>2]=s;break A}if(3&~(s=e[r+4>>2]))break A;return e[57154]=t,e[r+4>>2]=-2&s,e[A+4>>2]=1|t,void(e[r>>2]=t)}e[l+12>>2]=i,e[i+8>>2]=l}A:{if(!(2&(s=e[r+4>>2]))){if(e[57158]==(0|r)){if(e[57158]=A,t=e[57155]+t|0,e[57155]=t,e[A+4>>2]=1|t,e[57157]!=(0|A))break e;return e[57154]=0,void(e[57157]=0)}if(e[57157]==(0|r))return e[57157]=A,t=e[57154]+t|0,e[57154]=t,e[A+4>>2]=1|t,void(e[A+t>>2]=t);t=(-8&s)+t|0;r:if(s>>>0<=255){if(l=e[r+8>>2],s=s>>>3|0,(0|(i=e[r+12>>2]))==(0|l)){e[57152]=e[57152]&ts(-2,s);break r}e[l+12>>2]=i,e[i+8>>2]=l}else{if(g=e[r+24>>2],(0|r)==(0|(s=e[r+12>>2])))if((l=e[(i=r+20|0)>>2])||(l=e[(i=r+16|0)>>2])){for(;c=i,(l=e[(i=(s=l)+20|0)>>2])||(i=s+16|0,l=e[s+16>>2]););e[c>>2]=0}else s=0;else i=e[r+8>>2],e[i+12>>2]=s,e[s+8>>2]=i;if(g){l=e[r+28>>2];a:{if(e[(i=228912+(l<<2)|0)>>2]==(0|r)){if(e[i>>2]=s,s)break a;e[57153]=e[57153]&ts(-2,l);break r}if(e[g+(e[g+16>>2]==(0|r)?16:20)>>2]=s,!s)break r}e[s+24>>2]=g,(i=e[r+16>>2])&&(e[s+16>>2]=i,e[i+24>>2]=s),(i=e[r+20>>2])&&(e[s+20>>2]=i,e[i+24>>2]=s)}}if(e[A+4>>2]=1|t,e[A+t>>2]=t,e[57157]!=(0|A))break A;return void(e[57154]=t)}e[r+4>>2]=-2&s,e[A+4>>2]=1|t,e[A+t>>2]=t}if(t>>>0<=255)return s=228648+(-8&t)|0,(i=e[57152])&(t=1<<(t>>>3))?t=e[s+8>>2]:(e[57152]=t|i,t=s),e[s+8>>2]=A,e[t+12>>2]=A,e[A+12>>2]=s,void(e[A+8>>2]=t);l=31,t>>>0<=16777215&&(l=62+((t>>>38-(s=be(t>>>8|0))&1)-(s<<1)|0)|0),e[A+28>>2]=l,e[A+16>>2]=0,e[A+20>>2]=0,c=228912+(l<<2)|0;A:{if((i=e[57153])&(s=1<<l)){for(l=t<<((0|l)!=31?25-(l>>>1|0):0),s=e[c>>2];;){if(i=s,(-8&e[s+4>>2])==(0|t))break A;if(s=l>>>29|0,l<<=1,!(s=e[(c=i+(4&s)|0)+16>>2]))break}e[c+16>>2]=A,e[A+24>>2]=i}else e[57153]=s|i,e[c>>2]=A,e[A+24>>2]=c;return e[A+12>>2]=A,void(e[A+8>>2]=A)}t=e[i+8>>2],e[t+12>>2]=A,e[i+8>>2]=A,e[A+24>>2]=0,e[A+12>>2]=i,e[A+8>>2]=t}}function Rs(A){var t=0,r=0,s=0,i=0,l=0,c=0,g=0,p=0,I=0,h=0,M=0,P=0,z=0;if(!(t=f[88105]))return A;if(A=Ns(A,t)){if(!d[88106])return A;if(d[A+1|0]){if(!d[88107]){i=!!(0|(r=d[A+1|0]));e:if(r&&(0|(t=r|d[0|A]<<8))!=(0|(g=d[88106]|d[88105]<<8)))for(r=A+1|0;;){if(i=!!(0|(s=d[(A=r)+1|0])),!s)break e;if(r=A+1|0,(0|g)==(0|(t=s|t<<8&65280)))break}return i?A:0}if(d[A+2|0]){if(!d[88108]){r=A+2|0,i=!!(0|(t=d[A+2|0]));e:if(t&&(0|(t=d[A+1|0]<<16|d[0|A]<<24|t<<8))!=(0|(g=d[88106]<<16|d[88105]<<24|d[88107]<<8)))for(;;){if(A=r+1|0,i=!!(0|(s=d[r+1|0])),!s)break e;if(r=A,(0|g)==(0|(t=(t|s)<<8)))break}else A=r;return i?A-2|0:0}if(d[A+3|0]){if(!d[88109]){r=A+3|0,i=!!(0|(t=d[A+3|0]));e:if(t&&(0|(t=t|d[A+1|0]<<16|d[0|A]<<24|d[A+2|0]<<8))!=(0|(g=(A=d[88105]|d[88106]<<8|d[88107]<<16|d[88108]<<24)<<24|(65280&A)<<8|A>>>8&65280|A>>>24)))for(;;){if(A=r+1|0,i=!!(0|(s=d[r+1|0])),!s)break e;if(r=A,(0|g)==(0|(t=s|t<<8)))break}else A=r;return i?A-3|0:0}g=A,H=p=H-1056|0,e[(A=p+1048|0)>>2]=0,e[A+4>>2]=0,e[(A=p+1040|0)>>2]=0,e[A+4>>2]=0,e[p+1032>>2]=0,e[p+1036>>2]=0,e[p+1024>>2]=0,e[p+1028>>2]=0;e:{A:{r:{a:{if(t=d[88105]){for(;;){if(!d[l+g|0])break A;if(l=l+1|0,e[((255&t)<<2)+p>>2]=l,e[(A=(p+1024|0)+(t>>>3&28)|0)>>2]=e[A>>2]|1<<t,!(t=d[l+88105|0]))break}if(A=1,I=-1,l>>>0>1)break a}else I=-1,A=1;c=-1,r=1;break r}for(s=1,t=1;;){a:if((0|(c=d[88105+(t+I|0)|0]))!=(0|(i=d[A+88105|0])))i>>>0<c>>>0?(s=A-I|0,r=A,t=1):(I=r,r=r+1|0,s=1,t=1);else{if((0|t)==(0|s)){r=r+s|0,t=1;break a}t=t+1|0}if(!(l>>>0>(A=r+t|0)>>>0))break}if(r=1,c=-1,l>>>0<=1)A=s;else{for(A=0,i=1,t=1;;){a:if((0|(M=d[88105+(t+c|0)|0]))!=(0|(h=d[r+88105|0])))h>>>0>M>>>0?(i=r-c|0,A=r,t=1):(c=A,A=A+1|0,i=1,t=1);else{if((0|t)==(0|i)){A=A+i|0,t=1;break a}t=t+1|0}if(!(l>>>0>(r=A+t|0)>>>0))break}A=s,r=i}}for(t=A,Hr(88105,(s=(A=c+1>>>0>I+1>>>0)?r:t)+88105|0,M=(h=A?c:I)+1|0)?(s=((A=~h+l|0)>>>0<h>>>0?h:A)+1|0,i=0):i=l-s|0,z=l-1|0,P=63|l,c=0,A=g;;){if(!(g-A>>>0>=l>>>0))if(r=ba(g,0,P)){if(g=r,r-A>>>0<l>>>0)break A}else g=g+P|0;r=d[A+z|0],t=l;r:{if(e[(p+1024|0)+(r>>>3&28)>>2]>>>r&1)if((0|(r=e[(r<<2)+p>>2]))==(0|l)){a:{if(I=d[(r=(t=M)>>>0>c>>>0?t:c)+88105|0])for(;;){if(d[A+r|0]!=(255&I))break a;if(!(I=d[(r=r+1|0)+88105|0]))break}for(;;){if(t>>>0<=c>>>0)break e;if(d[(t=t-1|0)+88105|0]!=d[A+t|0])break}t=s,c=i;break r}t=r-h|0}else t=(r=l-r|0)>>>0>c>>>0?r:c;c=0}A=A+t|0}}A=0}H=p+1056|0,r=A}}}}return r}function Is(A,t,r,s,i,l){var c,g,p,I,h=0,M=0,P=0;if(H=c=H-560|0,f[c+448|0]=0,f[c+144|0]=0,f[c+120|0]=0,p=34&l,g=t-O(M=(0|t)/100|0,100)|0,1&(I=64&d[A+106|0]?(0|t)>999|l:0)|(0|t)>99){e:{A:{r:{if(!(!p|g)){if(!DA(A,90606,c+304|0))break r;break e}if(g)break A}if(DA(A,90691,c+304|0))break e}DA(A,90725,c+304|0)}h=l,(0|t)<1e3||(h=l,!(8&d[A+105|0])|t-2e3>>>0<4294967196&&(f[c+208|0]=0,or(A,h=(M>>>0)/10|0,s=16384&e[A+108>>2]?0:i+1|0,!((t>>>0)%1e3|0)|p,c+272|0)||SA(A,h,i,e[A+212>>2]==28012?520:(0|s)<4?(e[A+108>>2]>>>s&1)<<3:0,c+208|0),2&d[A+109|0]?(e[c+108>>2]=15,e[c+100>>2]=15,e[c+104>>2]=c+208,e[c+96>>2]=c+272,iA(c+144|0,90761,c+96|0)):(e[c+92>>2]=15,e[c+84>>2]=15,e[c+88>>2]=c+272,e[c+80>>2]=c+208,iA(c+144|0,90761,c+80|0)),s=1,1&(!!(0|(M=M-O(h,10)|0))|I)||(f[c+304|0]=0),h=1|l)),f[c+208|0]=0;e:if(!(~I&(0|M)<=0))if(!(4&d[A+106|0])|!(1&h|d[c+144|0])||DA(A,90824,c+120|0),!p|(16&d[A+109|0]?0:g)||(e[c+64>>2]=M,iA(s=c+548|0,90875,c- -64|0),P=DA(A,s,c+208|0),!(4096&e[A+108>>2])|(0|g)<=0||Ur(c+208|0,133104)),s=1,1&(~I|!!(0|M))){A:{r:{a:{n:{if(!(131072&e[A+108>>2])||1&h|(0|M)!=1){if(g|P||(e[c+48>>2]=M,iA(s=c+548|0,90985,c+48|0),P=DA(A,s,c+208|0)),P||(e[c+32>>2]=M,iA(s=c+548|0,91027,c+32|0),DA(A,s,c+208|0)))break n;if((0|M)!=1)break r;break a}if(!P)break a}f[c+304|0]=0;break A}if(s=1,4&d[A+105|0])break e}SA(A,M,i,0,c+208|0)}s=1}else DA(A,88875,c+208|0);e[c+28>>2]=c+304,e[c+24>>2]=c+208,e[c+20>>2]=c+120,e[c+16>>2]=c+144,iA(c+448|0,91059,c+16|0)}else h=l;f[c+132|0]=0;e:{A:{if((0|g)>0)16&d[A+109|0]&&2&h||(!(1&h)|i&&(0|t)<=100||!(64&(s=e[A+104>>2]))&(!(8388608&s)|g>>>0>9)||DA(A,90824,c+132|0),!(1&h|d[c+144|0])|!(524288&e[A+104>>2])|M||DA(A,90824,c+132|0)),f[c+336|0]=0;else if(f[c+336|0]=0,!g&s)break A;if(i?(l=e[A+108>>2],t=(0|i)<4?(l>>>i&1)<<3:0):(s=p?3:2,t=32&l|((0|t)<100?1&h?s:4|s:s),l=e[A+108>>2]),t=(0|i)==1&&e[A+212>>2]==28012?520|t:t,1048576&l&&(s=16|t,t=(0|M)>0||1&h?s:t),!SA(A,g,i,256&h|t,c+336|0)|!(128&d[A+104|0]))break e;f[c+132|0]=0;break e}d[133104]&&((0|(A=CA(c+448|0)))<=0||d[(A=A+c|0)+447|0]==10&&(f[A+447|0]=0),yA(c+336|0,133104))}e[c+8>>2]=15,e[c+12>>2]=c+336,e[c+4>>2]=c+132,e[c>>2]=c+448,iA(r,91101,c),H=c+560|0}function ea(A){var t,r,s,i=0,l=0,c=0,g=0,p=0,I=0,h=0,M=0,P=0,z=0,Y=0,V=0;for(i=e[32972],e[i+64>>2]=290816,e[i+68>>2]=4104,e[i+96>>2]=0,e[i+100>>2]=0,e[i+120>>2]=90,e[i+124>>2]=100,e[i+112>>2]=64,e[i+116>>2]=256,e[i+104>>2]=5,e[i+108>>2]=0,e[i+84>>2]=100,e[i+88>>2]=64,l=e[50754],e[i+132>>2]=0,e[i+136>>2]=0,e[i+128>>2]=l,e[i+140>>2]=0,e[i+144>>2]=0,e[i+148>>2]=0,e[i+152>>2]=0,e[i+156>>2]=0,e[i+160>>2]=0,e[36435]=450,e[i+92>>2]=2,e[50870]=0,e[50871]=0,e[50872]=0,e[50873]=0,e[50880]=0,e[50881]=0,e[50882]=0,e[50883]=0,e[50890]=0,e[50891]=0,e[50892]=0,e[50893]=0,c=-3.141592653589793/+e[50754],T[25429]=c,p=-2*c,T[25430]=p,t=(c=is(200*c))*-c,T[25434]=t,T[25439]=t,T[25444]=t,c=(p=c*es(2e3*p))+p,T[25433]=c,T[25438]=c,T[25443]=c,p=1-c-t,T[25432]=p,T[25437]=p,T[25442]=p,e[50902]=0,e[50903]=0,e[50900]=0,e[50901]=0,T[25449]=t,T[25448]=c,e[50912]=0,e[50913]=0,T[25447]=p,e[50910]=0,e[50911]=0,T[25454]=t,T[25453]=c,e[50922]=0,e[50923]=0,T[25452]=p,e[50920]=0,e[50921]=0,T[25459]=t,T[25458]=c,e[50932]=0,e[50933]=0,T[25457]=p,e[50930]=0,e[50931]=0,T[25464]=t,T[25463]=c,T[25462]=p,e[50942]=0,e[50943]=0,e[50940]=0,e[50941]=0,T[25469]=t,T[25468]=c,T[25467]=p,e[50952]=0,e[50953]=0,e[50950]=0,e[50951]=0,T[25474]=t,T[25473]=c,T[25472]=p,r=e[32972],l=0;k[(I=(l<<1)+r|0)+236>>1]=256,k[I+164>>1]=256,i=d[l+105376|0]<<1,k[I+254>>1]=i,k[I+182>>1]=i,k[I+200>>1]=d[l+105385|0]<<1,e[(i=(g=l<<2)+r|0)+308>>2]=e[g+105408>>2],e[i+272>>2]=0,k[I+218>>1]=0,e[g+200944>>2]=(0|O(e[g+105456>>2],22050))/e[50754],(0|(l=l+1|0))!=9;);for(z=e[32961],l=0,s=r+344|0;;){if(i=h,M=z,I=l,(0|(h=e[(l=(g=l<<2)+131840|0)>>2]))==-1&&(h=8e3,e[l>>2]=8e3,I&&(e[131840+(4|g)>>2]=e[g+131836>>2])),z=e[131840+(4|g)>>2],!((0|i)>=(0|(h=(0|h)/8|0))||(0|(P=h-i|0))<=0||(g=i+1|0,l=i,1&P&&(f[344+(i+r|0)|0]=(0|M)>=255?255:M,l=g),(0|g)==(0|h))))for(Y=z-M|0;g=((0|O(l-i|0,Y))/(0|P)|0)+M|0,f[l+s|0]=(0|g)>=255?255:g,V=((0|O((g=l+1|0)-i|0,Y))/(0|P)|0)+M|0,f[g+s|0]=(0|V)>=255?255:V,(0|h)!=(0|(l=l+2|0)););if(l=I+2|0,!(I>>>0<10))break}l=e[32972],e[l+80>>2]=232,e[l+72>>2]=256,e[l+76>>2]=238,A||(e[49848]=0),k[l+200>>1]=(0|O(k[l+200>>1],105))/100}function fs(A,t,r){var s,i=0,l=0,c=0,g=0,p=0,I=0,h=0,M=0;H=s=H-288|0,(0|t)!=132848&&Wt(132848,t,40),(0|(i=A+228|0))!=(0|t)&&Wt(i,t,40),e[s+88>>2]=t,e[s+84>>2]=47,e[s+80>>2]=137584,iA(i=s+96|0,84089,s+80|0),l=zs(i),(i=e[A+688>>2])&&(zA(i),e[A+688>>2]=0),i=$r(s+96|0,84577);e:if((0|l)>0&&i)if(r=tt(l),e[A+688>>2]=r,r)if(I=Gn(r,l,i),mr(i),I>>>0<=1032)e[s+16>>2]=s+96,Kt(e[30450],85164,s+16|0),r=2;else if(i=e[A+688>>2],r=e[i+4>>2],!((0|(l=e[i>>2]))!=1024|(0|r)<=0)&(0|r)<134217729){i=r+i|0,e[A+684>>2]=i,M=Ve(A+5168|0,0,1024),Ve(A+7664|0,0,260),Ve(A+7924|0,255,256),Ve(A+4788|0,0,380),Ve(A+6192|0,0,512);A:if((0|(r=d[0|i]))!=7)for(;;){if((0|(l=255&r))!=6){if(!l)break A;l=e[A+684>>2],e[s+72>>2]=r<<24>>24,e[s+64>>2]=132848,e[s+68>>2]=i-l,Kt(e[30450],88950,s- -64|0);break}r:{a:{n:{o:{c:switch((l=d[0|(r=i+1|0)])-18|0){case 0:break o;case 2:break c;default:break n}for(r=4+(-4&r)|0,e[A+180>>2]=r;r=(i=r)+1|0,!fi(i););for(;l=d[0|i],r=i,i=i+1|0,(0|l)!=7;);break r}if(r=i+3|0,(0|(i=((0|(i=f[i+2|0]))<65?191:-65)+i|0))>94)break a;e[4788+((i<<2)+A|0)>>2]=r;break a}r=1+((g=CA(r))+r|0)|0;n:switch(0|g){case 1:e[5168+((l<<2)+A|0)>>2]=r;break a;case 0:e[M>>2]=r;break a;default:break n}g=d[i+2|0],(0|l)!=1?(i=e[A+7664>>2],d[0|(h=(c=A+l|0)+7924|0)]==255&&(f[0|h]=i),f[0|(c=c+7668|0)]=d[0|c]+1,e[(c=(i<<2)+A|0)+6704>>2]=r,e[A+7664>>2]=i+1,e[c+7184>>2]=l|g<<8):e[6188+((g<<2)+A|0)>>2]=r}if(d[0|r]!=7)for(;r=1+(CA(r)+r|0)|0,d[0|r]!=7;);}r=d[0|(i=r+1|0)]}for(i=e[A+688>>2]+8|0;;){for(e[692+((r=p<<2)+A|0)>>2]=i;l=d[0|i];)i=i+l|0;for(i=i+1|0,e[692+((4|r)+A|0)>>2]=i;r=d[0|i];)i=r+i|0;if(i=i+1|0,(0|(p=p+2|0))==1024)break}r=0,(0|(A=e[A+324>>2]))<=0|A>>>0<=I>>>0||(e[s+48>>2]=t,Kt(e[30450],85519,s+48|0))}else e[s+40>>2]=r,e[s+36>>2]=l,e[s+32>>2]=s+96,Kt(e[30450],85349,s+32|0),r=2;else mr(i),r=3;else{if(r||(e[s>>2]=s+96,Kt(e[30450],84963,s)),r=1,!i)break e;mr(i)}return H=s+288|0,r}function ws(A){var t,r=0,s=0;for(t=Ve(A+344|0,0,256),f[A+364|0]=1,f[A+356|0]=1,f[A+357|0]=1,f[A+358|0]=1,f[A+359|0]=1,f[A+360|0]=1,f[A+361|0]=1,f[A+362|0]=1,f[A+363|0]=1,f[A+348|0]=1,f[A+349|0]=1,f[A+350|0]=1,f[A+351|0]=1,f[A+352|0]=1,f[A+353|0]=1,f[A+354|0]=1,f[A+355|0]=1,f[A+431|0]=3,f[A+429|0]=3,f[A+430|0]=3,f[A+406|0]=3,f[A+407|0]=3,f[A+408|0]=3,f[A+409|0]=3,f[A+410|0]=3,f[A+411|0]=3,f[A+412|0]=3,f[A+413|0]=3,f[A+414|0]=3,f[A+415|0]=3,f[A+416|0]=3,f[A+417|0]=3,f[A+418|0]=3,f[A+419|0]=3,f[A+420|0]=3,f[A+421|0]=3,f[A+440|0]=3,f[A+441|0]=3,f[A+442|0]=3,f[A+443|0]=3,s=21;f[(r=A+s|0)+344|0]=4|d[r+344|0],(0|(r=s+1|0))!=58;)f[0|(r=r+t|0)]=4|d[0|r],f[(r=s+t|0)+2|0]=4|d[r+2|0],f[r+3|0]=4|d[r+3|0],s=s+4|0;f[A+346|0]=4|d[A+346|0],f[A+347|0]=4|d[A+347|0],f[A+432|0]=4|d[A+432|0],f[A+433|0]=4|d[A+433|0],f[A+434|0]=4|d[A+434|0],f[A+435|0]=4|d[A+435|0],f[A+436|0]=4|d[A+436|0],f[A+437|0]=4|d[A+437|0],f[A+438|0]=4|d[A+438|0],f[A+439|0]=4|d[A+439|0],f[A+467|0]=4|d[A+467|0],f[A+468|0]=4|d[A+468|0],f[A+470|0]=4|d[A+470|0],f[A+471|0]=4|d[A+471|0],f[A+348|0]=64|d[A+348|0],f[A+349|0]=64|d[A+349|0],f[A+350|0]=64|d[A+350|0],f[A+351|0]=64|d[A+351|0],f[A+352|0]=64|d[A+352|0],f[A+353|0]=64|d[A+353|0],f[A+354|0]=64|d[A+354|0],f[A+355|0]=64|d[A+355|0],f[A+356|0]=64|d[A+356|0],f[A+357|0]=64|d[A+357|0],f[A+358|0]=64|d[A+358|0],f[A+359|0]=64|d[A+359|0],f[A+360|0]=64|d[A+360|0],f[A+361|0]=64|d[A+361|0],f[A+362|0]=64|d[A+362|0],f[A+363|0]=64|d[A+363|0],f[A+364|0]=64|d[A+364|0],f[A+406|0]=64|d[A+406|0],f[A+407|0]=64|d[A+407|0],f[A+408|0]=64|d[A+408|0],f[A+409|0]=64|d[A+409|0],f[A+410|0]=64|d[A+410|0],f[A+411|0]=64|d[A+411|0],f[A+412|0]=64|d[A+412|0],f[A+413|0]=64|d[A+413|0],f[A+414|0]=64|d[A+414|0],f[A+415|0]=64|d[A+415|0],f[A+416|0]=64|d[A+416|0],f[A+417|0]=64|d[A+417|0],f[A+418|0]=64|d[A+418|0],f[A+419|0]=64|d[A+419|0],f[A+420|0]=64|d[A+420|0],f[A+440|0]=64|d[A+440|0],f[A+441|0]=64|d[A+441|0],f[A+429|0]=64|d[A+429|0],f[A+430|0]=64|d[A+430|0],f[A+431|0]=64|d[A+431|0],f[A+442|0]=64|d[A+442|0],f[A+443|0]=64|d[A+443|0],e[A+40>>2]=1,e[A+204>>2]=e[A+600>>2]+77}function ks(A,t,r,s,i,l,c,g,p){var I,h=0,M=0,P=0,z=0,Y=0,V=0,X=0,te=0,ne=0,me=0;H=I=H-128|0;e:{A:{if(Jt(l,c,g,p,0,0,0,0)){M=65535&p;r:a:{if((0|(z=p>>>16&32767))!=32767){if(h=4,z)break a;h=l|g|c|M?3:2;break r}h=!(l|g|c|M)}if((0|(Y=32767&(ne=i>>>16|0)))!=32767&&h)break A}Le(I+16|0,t,r,s,i,l,c,g,p),Wr(I,t=e[I+16>>2],s=e[I+20>>2],i=e[I+24>>2],r=e[I+28>>2],t,s,i,r),s=e[I+8>>2],i=e[I+12>>2],g=e[I>>2],p=e[I+4>>2];break e}if(z=g,(0|Jt(t,r,h=s,V=2147483647&i,l,c,g,P=2147483647&p))<=0){if(Jt(t,r,h,V,l,c,z,P)){g=t,p=r;break e}Le(I+112|0,t,r,s,i,0,0,0,0),s=e[I+120>>2],i=e[I+124>>2],g=e[I+112>>2],p=e[I+116>>2]}else{if(X=p>>>16&32767,Y?(p=r,g=t):(Le(I+96|0,t,r,h,V,0,0,0,1081540608),h=e[I+104>>2],V=g=e[I+108>>2],Y=(g>>>16|0)-120|0,p=e[I+100>>2],g=e[I+96>>2]),X||(Le(I+80|0,l,c,z,P,0,0,0,1081540608),z=e[I+88>>2],P=l=e[I+92>>2],X=(l>>>16|0)-120|0,c=e[I+84>>2],l=e[I+80>>2]),te=z,me=65535&P|65536,V=65535&V|65536,(0|Y)>(0|X)){for(;;){if(z=(P=h-te|0)-(M=(0|c)==(0|p)&l>>>0>g>>>0|c>>>0>p>>>0)|0,(0|(M=(V-((h>>>0<te>>>0)+me|0)|0)-(M>>>0>P>>>0)|0))>0|(0|M)>=0){if(h=g,!((g=g-l|0)|z|(p=p-((l>>>0>h>>>0)+c|0)|0)|M)){Le(I+32|0,t,r,s,i,0,0,0,0),s=e[I+40>>2],i=e[I+44>>2],g=e[I+32>>2],p=e[I+36>>2];break e}M=M<<1|z>>>31,h=z<<1|p>>>31}else M=V<<1|h>>>31,h=h<<1|p>>>31;if(V=M,M=p<<1|g>>>31,g<<=1,p=M,!((0|(Y=Y-1|0))>(0|X)))break}Y=X}if(z=(P=h-te|0)-(M=(0|c)==(0|p)&l>>>0>g>>>0|c>>>0>p>>>0)|0,P=M=(V-((h>>>0<te>>>0)+me|0)|0)-(M>>>0>P>>>0)|0,(0|M)<0)z=h,P=V;else if(h=g,!((g=g-l|0)|z|(p=p-((l>>>0>h>>>0)+c|0)|0)|P)){Le(I+48|0,t,r,s,i,0,0,0,0),s=e[I+56>>2],i=e[I+60>>2],g=e[I+48>>2],p=e[I+52>>2];break e}if((0|P)==65535|P>>>0<65535)for(;t=p>>>31|0,Y=Y-1|0,V=p<<1|g>>>31,g<<=1,p=V,r=t,t=P<<1|z>>>31,z=r|z<<1,P=t,t>>>0<65536;);t=32768&ne,(0|Y)<=0?(Le(I- -64|0,g,p,z,65535&P|(t|Y+120)<<16,0,0,0,1065811968),s=e[I+72>>2],i=e[I+76>>2],g=e[I+64>>2],p=e[I+68>>2]):(s=z,i=65535&P|(t|Y)<<16)}}e[A>>2]=g,e[A+4>>2]=p,e[A+8>>2]=s,e[A+12>>2]=i,H=I+128|0}function Gs(A,t,r){var s,i,l=0,c=0,g=0,p=0,I=0,h=0,M=0,P=0,z=0;if(H=s=H-1040|0,(0|(c=Qn(A,589824,0)))>=0&&((l=Et(1,2072))?e[l+8>>2]=c:(ve(0|c),l=0)),i=l,l){e:if(l=si(i))for(z=e[30450],P=(s+96|0)+t|0;;){if((0|(c=e[50303]))>=348){e[s+4>>2]=350,e[s>>2]=c+1,Kt(z,91860,s);break e}if(d[l+19|0]!=46)if(e[s+88>>2]=l+19,e[s+84>>2]=47,e[s+80>>2]=A,iA(l=s+96|0,91924,s+80|0),(0|(l=zs(l)))!=-31){if(!((0|l)<=0)&&(M=$r(s+96|0,85712))){g=0,f[s+832|0]=0,f[s+752|0]=0,e[s+360>>2]=0,e[s+356>>2]=4,I=0;A:for(;;){for(h=299-I|0;nt(s+912|0,120,M);){l=s+912|0;r:{if(d[s+912|0]!=35){a:if(!((0|(l=CA(s+912|0)-1|0))<=0))for(;;){if(!((0|(c=f[0|(p=(s+912|0)+l|0)]))==32|c-9>>>0<5))break a;if(f[0|p]=0,!((0|(l=l-1|0))>0))break}if(!(l=Rs(s+912|0)))break r}f[0|l]=0}l=s+912|0;r:if(c=d[s+912|0])for(;;){if(ar(c<<24>>24))break r;if(!(c=d[0|(l=l+1|0)]))break}if(f[0|l]=0,d[s+912|0]){l=l+1|0;r:switch(As(131904,s+912|0)-1|0){case 0:for(;c=l,l=l+1|0,(0|(p=f[0|c]))==32|p-9>>>0<5;);Qt(s+832|0,c,80);continue;case 1:if(f[s+672|0]=0,e[s+364>>2]=5,c=s+672|0,e[s+16>>2]=c,e[s+20>>2]=s+364,$A(l,86237,s+16|0),(c=CA(c)+2|0)>>>0>=h>>>0)continue;f[0|(l=(s+368|0)+I|0)]=e[s+364>>2],yA(l+1|0,s+672|0),g=g+1|0,I=c+I|0;continue A;case 2:if(e[s+52>>2]=s+360,e[s+48>>2]=s+752,$A(l,86237,s+48|0),!r)continue;e[s+32>>2]=P,Kt(z,92042,s+32|0);continue;case 5:break r;default:continue}e[s+64>>2]=s+356,$A(l,87268,s- -64|0)}}break}f[(s+368|0)+I|0]=0,c=As(132112,s+752|0),g?(p=CA(P)+I|0,h=rt((g=Et(28+(CA(s+832|0)+p|0)|0,1))+24|0,s+368|0,l=I+1|0),e[g+4>>2]=h,l=yA(l+h|0,P),e[g>>2]=l,e[g+8>>2]=l,d[s+832|0]&&(e[g>>2]=yA(2+(p+h|0)|0,s+832|0)),l=e[s+360>>2],f[g+14|0]=0,f[g+12|0]=c,f[g+13|0]=l,f[g+15|0]=e[s+356>>2],mr(M),l=e[50303],e[50303]=l+1,e[201216+(l<<2)>>2]=g):mr(M)}}else Gs(s+96|0,t,r);if(!(l=si(i)))break}ko(e[i+8>>2]),zA(i)}H=s+1040|0}function Jr(A,t){var r,s=0,i=0,l=0,c=0,g=0,p=0,I=0,h=0,M=0;H=r=H-352|0;e:if(A||(A=e[136284+(t<<4)>>2])){d[0|A]!=47&&(e[r+12>>2]=A,e[r+4>>2]=47,e[r+8>>2]=47,e[r>>2]=137584,iA(A=r+16|0,84114,r)),f[r+240|0]=0;A:{r:{if(s=$r(A,84577)){if((0|ho(s,20))==-1)break A;if(l=ui(s),i=ui(s),g=ui(s),!((0|l)!=65537|(0|i)!=e[50754])&(0|g)==i<<1)break r;mr(s),k[r+256>>1]=d[84864]|d[84865]<<8,A=d[84852]|d[84853]<<8|d[84854]<<16|d[84855]<<24,e[r+240>>2]=d[84848]|d[84849]<<8|d[84850]<<16|d[84851]<<24,e[r+244>>2]=A,A=d[84860]|d[84861]<<8|d[84862]<<16|d[84863]<<24,e[r+248>>2]=d[84856]|d[84857]<<8|d[84858]<<16|d[84859]<<24,e[r+252>>2]=A,H=l=H-16|0;a:{if((s=CA(A=r+240|0))>>>0>=6&&!Hr(g=(A+s|0)-6|0,84274,6)){for(I=100;;){for(p=0,H=s=H-16|0,d[227196]||(f[227197]=Ge(),f[227196]=1),M=+Ae(),$(c=M/1e3)<9223372036854776e3?(h=$(c)>=1?~~(c>0?Ce(Ee(23283064365386963e-26*c),4294967295):Be(23283064365386963e-26*(c-+(~~c>>>0>>>0))))>>>0:0,i=~~c>>>0):(h=-2147483648,i=0),e[s>>2]=i,e[s+4>>2]=h,c=1e3*(M-(+(At(i,h,1e3,0)>>>0)+4294967296*+(0|he)))*1e3,i=$(c)<2147483648?~~c:-2147483648,e[s+8>>2]=i,i=g+(s>>>4|0)^O(e[s+8>>2],65537);f[g+p|0]=65+(15&i|i<<1&32),i=i>>>5|0,(0|(p=p+1|0))!=6;);if(H=s+16|0,e[l>>2]=384,(0|(s=Qn(A,194,l)))>=0)break a;if(I=I-1|0,e[56798]!=20||!I)break}rt(g,84274,6)}else e[56798]=28;s=-1}H=l+16|0,(0|s)<0||ko(s)}if(!(s=$r(A,84577))){A=vs(0,e[56798],A);break e}}if((0|(l=zs(A)))<0){mr(s),A=vs(0,0-l|0,A);break e}if((0|ho(s,0))==-1){t=e[56798],mr(s),A=vs(0,t,A);break e}if(!(i=Tt(e[(g=136280+(t<<4)|0)>>2],l))){mr(s),A=48;break e}if((0|Gn(i,l,s))!=(0|l)){t=e[56798],mr(s),d[r+240|0]&&mo(r+240|0),zA(i),A=vs(0,t,A);break e}mr(s),d[r+240|0]&&mo(r+240|0),e[136276+(t<<4)>>2]=(d[i+40|0]|d[i+41|0]<<8|d[i+42|0]<<16|d[i+43|0]<<24)/2,e[g>>2]=i,A=0;break e}t=e[56798],mr(s),A=vs(0,t,A)}else A=28;return H=r+352|0,A}function oa(A,t,r,s,i,l){var c,g=0,p=0,I=0,h=0,M=0,P=0,z=0,Y=0,V=0,X=0,te=0,ne=0,me=0,ke=0;for(f[0|r]=1,c=1&l,me=1,V=-1,X=-1,h=1,l=t;;){ke=ne-2|0,te=M,z=X;e:{A:{for(;;){if(!(P=d[0|l])){X=z,M=te;break e}if(l=l+1|0,Y=e[144464+(P<<2)>>2]){r:{if((0|(g=d[Y+11|0]))!=1){if(16&d[Y+6|0]|(0|g)!=2)break r;f[0|(M=r+h|0)]=V,g=(0|V)<4|(0|z)>(0|V),!(2&d[Y+4|0])|!c|(0|V)>=0||(f[0|M]=1),M=g?te:h,X=g?z:V,V=-1,h=h+1|0;break A}if(!y[Y+8>>1]){g=0,I=h;a:if((0|P)!=8)g=d[Y+14|0],e[i>>2]&&g>>>0>=4||(z=(0|g)<(0|z)?z:g,V=g);else{for(;;){if(P=g,I=I-1|0,e[i>>2]|(0|I)<=0||(0|(Y=f[0|(p=r+I|0)]))>3)break a;if(g=P+1|0,!(Y>>>0<2))break}if(f[0|p]=4,te=(0|z)<4?I:te,z=(0|z)<=4?4:z,I>>>0<2)break a;if(Y=3&(I=~P+ne|0),g=1,ke-P>>>0>=3)for(P=-4&I,I=0;d[0|(p=r+g|0)]==4&&(f[0|p]=3),d[p+1|0]==4&&(f[p+1|0]=3),d[p+2|0]==4&&(f[p+2|0]=3),d[p+3|0]==4&&(f[p+3|0]=3),g=g+4|0,(0|P)!=(0|(I=I+4|0)););if(p=0,!Y)break a;for(;d[0|(P=r+g|0)]==4&&(f[0|P]=3),g=g+1|0,(0|Y)!=(0|(p=p+1|0)););}if(me)continue;break e}}break}}X=z,M=te,(0|P)==20&&(f[r+h|0]=c&&(0|V)<0?1:V,h=h+1|0)}if(f[0|t]=P,ne=h-1|0,t=t+1|0,me=(0|h)<99)continue}break}f[r+h|0]=1,f[0|t]=0;e:if((0|(t=e[i>>2]))>0)X=4,(0|t)>=(0|h)&&(e[i>>2]=ne,t=ne),f[t+r|0]=4,M=e[i>>2];else if((0|X)==5&&(X=4,!((0|h)<2))){if(l=1,z=1&(t=h-1|0),(0|h)!=2)for(te=-2&t,I=0;;){p=4;A:{r:{a:switch(d[0|(t=(g=l)+r|0)]-4|0){case 1:break r;case 0:break a;default:break A}p=2&d[A+14|0]?1:3,g=M}f[0|t]=p,M=g}p=4;A:{r:{a:switch(d[0|(t=(g=l+1|0)+r|0)]-4|0){case 1:break r;case 0:break a;default:break A}p=2&d[A+14|0]?1:3,g=M}f[0|t]=p,M=g}if(l=l+2|0,(0|te)==(0|(I=I+2|0)))break}if(z){p=4;A:{r:switch(d[0|(t=r+l|0)]-4|0){case 1:break A;case 0:break r;default:break e}p=2&d[A+14|0]?1:3,l=M}f[0|t]=p,M=l}}return e[i>>2]=M,e[s>>2]=h,X}function Tt(A,t){var r,s,i=0,l=0,c=0,g=0,p=0,I=0,h=0,M=0,P=0;if(!A)return tt(t);if(t>>>0>=4294967232)return e[56798]=48,0;r=t>>>0<11?16:t+11&-8,c=-8&(s=e[(g=A-8|0)+4>>2]);e:if(3&s){p=c+g|0;A:if(c>>>0>=r>>>0){if((l=c-r|0)>>>0<16)break A;e[g+4>>2]=1&s|r|2,e[(i=g+r|0)+4>>2]=3|l,e[p+4>>2]=1|e[p+4>>2],Ps(i,l)}else if(e[57158]!=(0|p))if(e[57157]!=(0|p)){if(2&(l=e[p+4>>2])||(h=c+(-8&l)|0)>>>0<r>>>0)break e;P=h-r|0;r:if(l>>>0<=255){if(c=e[p+8>>2],i=l>>>3|0,(0|(l=e[p+12>>2]))==(0|c)){e[57152]=e[57152]&ts(-2,i);break r}e[c+12>>2]=l,e[l+8>>2]=c}else{if(M=e[p+24>>2],(0|(I=e[p+12>>2]))==(0|p))if((i=e[(c=p+20|0)>>2])||(i=e[(c=p+16|0)>>2])){for(;l=c,I=i,(i=e[(c=i+20|0)>>2])||(c=I+16|0,i=e[I+16>>2]););e[l>>2]=0}else I=0;else i=e[p+8>>2],e[i+12>>2]=I,e[I+8>>2]=i;if(M){l=e[p+28>>2];a:{if(e[(i=228912+(l<<2)|0)>>2]==(0|p)){if(e[i>>2]=I,I)break a;e[57153]=e[57153]&ts(-2,l);break r}if(e[(e[M+16>>2]==(0|p)?16:20)+M>>2]=I,!I)break r}e[I+24>>2]=M,(i=e[p+16>>2])&&(e[I+16>>2]=i,e[i+24>>2]=I),(i=e[p+20>>2])&&(e[I+20>>2]=i,e[i+24>>2]=I)}}P>>>0<=15?(e[g+4>>2]=1&s|h|2,e[(i=g+h|0)+4>>2]=1|e[i+4>>2]):(e[g+4>>2]=1&s|r|2,e[(l=g+r|0)+4>>2]=3|P,e[(i=g+h|0)+4>>2]=1|e[i+4>>2],Ps(l,P))}else{if((l=c+e[57154]|0)>>>0<r>>>0)break e;(i=l-r|0)>>>0>=16?(e[g+4>>2]=1&s|r|2,e[(c=g+r|0)+4>>2]=1|i,e[(l=l+g|0)>>2]=i,e[l+4>>2]=-2&e[l+4>>2]):(e[g+4>>2]=l|1&s|2,e[(i=l+g|0)+4>>2]=1|e[i+4>>2],i=0,c=0),e[57157]=c,e[57154]=i}else{if((c=c+e[57155]|0)>>>0<=r>>>0)break e;e[g+4>>2]=1&s|r|2,i=c-r|0,e[(l=g+r|0)+4>>2]=1|i,e[57155]=i,e[57158]=l}i=g}else{if(r>>>0<256||c>>>0>=r+4>>>0&&(i=g,c-r>>>0<=e[57272]<<1>>>0))break e;i=0}return i?i+8|0:(g=tt(t))?(rt(g,A,t>>>0>(i=(3&(i=e[A-4>>2])?-4:-8)+(-8&i)|0)>>>0?i:t),zA(A),g):0}function Qs(){var A,t,r=0,s=0;return A=ms(12),e[A>>2]=22050,t=ms(432),e[(s=t)+4>>2]=0,e[s+8>>2]=0,e[s>>2]=132304,e[s+32>>2]=0,e[s+12>>2]=0,e[s+16>>2]=0,e[s+20>>2]=0,e[s+24>>2]=0,Ve(s+40|0,0,376),e[s+420>>2]=0,e[s+424>>2]=-1,f[s+416|0]=1,r=Ve(ms(408),0,408),e[s+28>>2]=r,f[r+8|0]=1,e[A+4>>2]=s,r=ms(1096),e[r+8>>2]=22050,e[r+4>>2]=22050,e[r>>2]=132352,e[r+64>>2]=22050,e[r+56>>2]=0,e[r+60>>2]=0,e[r+32>>2]=0,e[r+36>>2]=0,e[r+24>>2]=22050,e[r+16>>2]=0,e[r+20>>2]=0,e[r+40>>2]=0,e[r+44>>2]=0,f[r+48|0]=0,e[r+128>>2]=0,e[r+132>>2]=0,k[r+96>>1]=0,e[r+72>>2]=22050,e[r+136>>2]=0,e[r+140>>2]=0,k[r+168>>1]=0,e[r+144>>2]=22050,e[r+200>>2]=0,e[r+204>>2]=0,e[r+208>>2]=0,e[r+212>>2]=0,e[r+216>>2]=22050,k[r+240>>1]=0,e[r+280>>2]=0,e[r+284>>2]=0,e[r+272>>2]=0,e[r+276>>2]=0,e[r+288>>2]=22050,k[r+312>>1]=0,e[r+344>>2]=0,e[r+348>>2]=0,e[r+352>>2]=0,e[r+356>>2]=0,e[r+360>>2]=22050,k[r+384>>1]=0,e[r+416>>2]=0,e[r+420>>2]=0,e[r+424>>2]=0,e[r+428>>2]=0,e[r+432>>2]=22050,k[r+456>>1]=0,e[r+488>>2]=0,e[r+492>>2]=0,e[r+496>>2]=0,e[r+500>>2]=0,e[r+504>>2]=22050,k[r+528>>1]=1,e[r+560>>2]=0,e[r+564>>2]=0,e[r+568>>2]=0,e[r+572>>2]=0,k[r+600>>1]=0,e[r+576>>2]=22050,e[r+640>>2]=0,e[r+644>>2]=0,e[r+632>>2]=0,e[r+636>>2]=0,k[r+680>>1]=0,e[r+656>>2]=22050,e[r+648>>2]=22050,e[r+720>>2]=0,e[r+724>>2]=0,e[r+712>>2]=0,e[r+716>>2]=0,k[r+752>>1]=0,e[r+728>>2]=22050,e[r+792>>2]=0,e[r+796>>2]=0,e[r+784>>2]=0,e[r+788>>2]=0,k[r+824>>1]=0,e[r+800>>2]=22050,e[r+864>>2]=0,e[r+868>>2]=0,e[r+856>>2]=0,e[r+860>>2]=0,e[r+872>>2]=22050,k[r+896>>1]=0,e[r+936>>2]=0,e[r+940>>2]=0,e[r+928>>2]=0,e[r+932>>2]=0,k[r+968>>1]=0,e[r+944>>2]=22050,e[r+1008>>2]=0,e[r+1012>>2]=0,e[r+1e3>>2]=0,e[r+1004>>2]=0,k[r+1040>>1]=0,e[r+1016>>2]=22050,e[r+1088>>2]=0,e[(s=r+1080|0)>>2]=0,e[s+4>>2]=0,e[(s=r+1072|0)>>2]=0,e[s+4>>2]=0,e[A+8>>2]=r,KA[e[e[r>>2]+4>>2]](r,t),A}function Fs(A,t,r){var s=0,i=0,l=0,c=0,g=0,p=0,I=0,h=0,M=0,P=0,z=0;e:if(M=e[50759]){if(s=e[50980],i=O(s,80)+222176|0,(0|(p=(0|(i=(0|(i=(e[i+12>>2]+e[i>>2]|0)/(0|A)|0))<(0|(h=((0|O(e[50754],19))/40<<16)/(0|A)|0))?i:h))>=399?399:i))>=0&&(Ve(t,0,4+(p<<2)|0),s=e[50980]),(0|s)>=0)for(P=e[50801];;){if(l=O(c,80)+222176|0,e[l+4>>2]&&(g=e[l>>2])){if(z=g+e[l+12>>2]|0,s=1+((g-e[l+8>>2]|0)/(0|A)|0)|0,(0|g)>(0|(s=O(i=(0|s)<=1?1:s,A))))for(;e[(I=(i<<2)+t|0)>>2]=e[I>>2]+O(e[l+4>>2],d[((g-s|0)/(e[l+8>>2]>>8)|0)+P|0]),i=i+1|0,(0|g)>(0|(s=A+s|0)););if(!((0|s)>=(0|z)))for(;e[(I=(i<<2)+t|0)>>2]=e[I>>2]+O(e[l+4>>2],d[((s-g|0)/(e[l+12>>2]>>8)|0)+P|0]),i=i+1|0,(0|z)>(0|(s=A+s|0)););}if(!((0|(c=c+1|0))<=e[50980]))break}if(i=1,!((0|(l=65536e3/(0|A)|0))<=0||(0|(s=O(e[55565],10)))<=0))for(l=(0|s)/(0|l)|0;e[(g=(i<<2)+t|0)>>2]=e[g>>2]+s,i=i+1|0,(0|(s=s-l|0))>0;);if((0|c)<=8)for(;i=(s=c<<2)+203216|0,l=O(c,80)+222176|0,g=e[l+4>>2]>>14,e[i>>2]=(0|O(O(g,g),5))/2,r?s=e[s+203264>>2]:(g=s+203264|0,s=e[l>>2]/(0|A)|0,e[g>>2]=s),(0|s)>=(0|h)&&(e[i>>2]=0),(0|(c=c+1|0))!=9;);if(i=0,(0|p)>=0)for(s=0;l=e[(c=(s<<2)+t|0)>>2]>>15,l=O(l,l)>>8,e[c>>2]=l,(0|i)<=524287999&&(e[c>>2]=O(l,d[344+((i>>19)+M|0)|0])>>13),i=A+i|0,c=(0|s)!=(0|p),s=s+1|0,c;);if(e[t+4>>2]=(0|O(e[t+4>>2],d[203300]?6:10))/8,1&r)for(A=e[50826],s=1;;){if(e[(r=s<<2)+203312>>2]=e[t+r>>2]-e[A+r>>2]>>3,(0|(r=s+1|0))==30)break e;e[(r<<=2)+203312>>2]=e[t+r>>2]-e[A+r>>2]>>3,s=s+2|0}}else p=1;return p}function qr(A,t,r,s){var i,l=0,c=0;H=i=H-176|0,f[0|A]=0,k[i+80>>1]=24320,e[i+104>>2]=0,e[i+108>>2]=0,f[82+(dr(r,l=i+80|2)+i|0)|0]=0;e:{A:{if(!s){if(s=i+80|1,e[i+12>>2]=s,gA(t,i+12|0,i+16|0,i+104|0,0,0)||(e[i+12>>2]=l,gA(t,i+12|0,i+16|0,i+104|0,0,0)||(f[i+81|0]=32,LA(t,l,i+16|0,60,0,0,0))),(r=d[i+16|0])&&(0|r)!=21)break A;r:{if(e[t+212>>2]!=25966){if(Ks(85719,188772,189296),f[i+81|0]=95,e[i+12>>2]=s,gA(e[47193],i+12|0,i+16|0,i+104|0,0,0)||(e[i+12>>2]=l,gA(e[47193],i+12|0,i+16|0,i+104|0,0,0)),d[i+16|0])break r;rs(e[e[32972]+60>>2]),r=d[i+16|0]}if(255&r)break A;t=d[87124]|d[87125]<<8|d[87126]<<16|d[87127]<<24,r=d[87120]|d[87121]<<8|d[87122]<<16|d[87123]<<24,f[0|A]=r,f[A+1|0]=r>>>8,f[A+2|0]=r>>>16,f[A+3|0]=r>>>24,f[A+4|0]=t,f[A+5|0]=t>>>8,f[A+6|0]=t>>>16,f[A+7|0]=t>>>24,f[A+16|0]=d[87136],t=d[87132]|d[87133]<<8|d[87134]<<16|d[87135]<<24,r=d[87128]|d[87129]<<8|d[87130]<<16|d[87131]<<24,f[A+8|0]=r,f[A+9|0]=r>>>8,f[A+10|0]=r>>>16,f[A+11|0]=r>>>24,f[A+12|0]=t,f[A+13|0]=t>>>8,f[A+14|0]=t>>>16,f[A+15|0]=t>>>24;break e}s=i+16|0,l=i+104|0,H=r=H-112|0,(c=e[47193])?(Lt(c,s,l,-1,0),os(l=s,s=r+48|0),t=e[t+212>>2],f[r+43|0]=t>>>24,f[0|(c=(l=r+43|0)+(t>>>0>16777215)|0)]=t>>>16,f[0|(c=c+!!(16711680&t)|0)]=t>>>8,f[0|(c=c+!!(65280&t)|0)]=t,f[c+!!(255&t)|0]=0,e[r+16>>2]=85719,e[r+24>>2]=l,e[r+20>>2]=s,iA(A,85662,r+16|0)):(Lt(t,s,l,-1,0),os(s,t=r+48|0),e[r>>2]=t,iA(A,85451,r)),H=r+112|0,rs(e[e[32972]+60>>2]);break e}if(e[i+12>>2]=l,gA(t,i+12|0,i+16|0,i+104|0,0,0),!d[i+16|0])break e}Lt(r=t,t=i+16|0,i+104|0,-1,0),os(r=t,t=i+112|0),e[i>>2]=t,iA(A,85451,i)}return H=i+176|0,A}function Lr(A,t){var r,s=0,i=0,l=0,c=0,g=0,p=0,I=0,h=0,M=0,P=0,z=0,Y=0,V=0,X=0,te=0,ne=0,me=0,ke=0;if(H=r=H-112|0,e[r+72>>2]=-1,e[(s=r- -64|0)>>2]=-1,e[s+4>>2]=-1,e[r+56>>2]=-1,e[r+60>>2]=-1,e[r+48>>2]=-1,e[r+52>>2]=-1,e[r+40>>2]=-1,e[r+44>>2]=-1,e[r+32>>2]=-1,e[r+36>>2]=-1,e[r+24>>2]=-1,e[r+28>>2]=-1,e[r+16>>2]=-1,e[r+20>>2]=-1,(0|t)>0){for(l=e[r+72>>2],c=e[r+68>>2],g=e[r+64>>2],p=e[r+60>>2],I=e[r+56>>2],h=e[r+52>>2],M=e[r+48>>2],P=e[r+44>>2],z=e[r+40>>2],Y=e[r+36>>2],V=e[r+32>>2],X=e[r+28>>2],te=e[r+24>>2],ne=e[r+20>>2],me=e[r+16>>2];i=l,l=(0|(l=e[(s=134912+(ke<<6)|0)+60>>2]))<0?i:l,i=c,c=(0|(c=e[s+56>>2]))<0?i:c,i=g,g=(0|(g=e[s+52>>2]))<0?i:g,i=p,p=(0|(p=e[s+48>>2]))<0?i:p,i=I,I=(0|(I=e[s+44>>2]))<0?i:I,i=h,h=(0|(h=e[s+40>>2]))<0?i:h,i=M,M=(0|(M=e[s+36>>2]))<0?i:M,i=P,P=(0|(P=e[s+32>>2]))<0?i:P,i=z,z=(0|(z=e[s+28>>2]))<0?i:z,i=Y,Y=(0|(Y=e[s+24>>2]))<0?i:Y,i=V,V=(0|(V=e[s+20>>2]))<0?i:V,i=X,X=(0|(X=e[s+16>>2]))<0?i:X,i=te,te=(0|(te=e[s+12>>2]))<0?i:te,i=ne,ne=(0|(ne=e[s+8>>2]))<0?i:ne,me=(0|(s=e[s+4>>2]))<0?me:s,(0|(ke=ke+1|0))!=(0|t););e[r+72>>2]=l,e[r+68>>2]=c,e[r+64>>2]=g,e[r+60>>2]=p,e[r+56>>2]=I,e[r+52>>2]=h,e[r+48>>2]=M,e[r+44>>2]=P,e[r+40>>2]=z,e[r+36>>2]=Y,e[r+32>>2]=V,e[r+28>>2]=X,e[r+24>>2]=te,e[r+20>>2]=ne,e[r+16>>2]=me}for(t=0;;){if((0|(s=e[(l=t<<2)+(r+16|0)>>2]))!=e[(l=l+134848|0)>>2]){f[r+80|0]=0;e:{A:switch(t-1|0){case 4:e[47201]=s-1;break e;case 5:e[47200]=s;break e;case 0:case 1:case 2:case 3:case 11:break A;default:break e}e[r+4>>2]=s,e[r>>2]=1,e[r+8>>2]=f[t+102812|0],iA(r+80|0,91942,r)}e[l>>2]=s,s=r+80|0,yA(e[A>>2]+189424|0,s),e[A>>2]=e[A>>2]+CA(s)}if((0|(t=t+1|0))==15)break}H=r+112|0}function uA(A){var t,r,s,i=0,l=0,c=0,g=0;for(i=17,e[A+328>>2]=17,e[A+224>>2]=0,e[A+216>>2]=1105,e[A+220>>2]=1072,e[A+600>>2]=1056,e[A+8180>>2]=105296,c=Ve(A+344|0,0,256),f[A+393|0]=1,f[A+365|0]=1,f[A+360|0]=1,f[A+545|0]=1,f[A+529|0]=1,f[A+391|0]=1,f[A+379|0]=1,f[A+374|0]=1,f[A+489|0]=1,f[A+487|0]=1,f[A+398|0]=1,f[A+387|0]=1,f[A+388|0]=2,f[A+389|0]=1,f[A+390|0]=1,f[A+385|0]=2,f[A+383|0]=2,f[A+368|0]=1,f[A+369|0]=2,l=104224;f[0|(i=i+c|0)]=4|d[0|i],i=c+d[l+1|0]|0,f[0|i]=4|d[0|i],i=c+d[l+2|0]|0,f[0|i]=4|d[0|i],i=d[0|(l=l+3|0)],(0|l)!=104251;);f[A+386|0]=8|d[A+386|0],f[A+382|0]=8|d[A+382|0],f[A+384|0]=8|d[A+384|0],f[A+369|0]=16|d[A+369|0],f[A+370|0]=16|d[A+370|0],f[A+371|0]=16|d[A+371|0],l=d[A+361|0],c=d[A+362|0],i=d[A+363|0],g=d[A+364|0],t=d[A+366|0],r=d[A+367|0],f[A+372|0]=16|d[A+372|0],f[A+373|0]=16|d[A+373|0],f[A+375|0]=16|d[A+375|0],f[A+376|0]=16|d[A+376|0],f[A+377|0]=16|d[A+377|0],f[A+378|0]=16|d[A+378|0],f[A+380|0]=16|d[A+380|0],f[A+381|0]=16|d[A+381|0],f[A+383|0]=16|d[A+383|0],f[A+385|0]=16|d[A+385|0],s=d[A+388|0],f[A+367|0]=48|r,f[A+366|0]=40|t,f[A+364|0]=48|g,f[A+363|0]=48|i,f[A+362|0]=48|c,f[A+361|0]=48|l,f[A+388|0]=80|s,l=d[A+390|0],c=d[A+391|0],i=d[A+393|0],f[A+360|0]=128|d[A+360|0],g=d[A+365|0],f[A+393|0]=192|i,f[A+365|0]=128|g,f[A+368|0]=128|d[A+368|0],f[A+374|0]=128|d[A+374|0],f[A+379|0]=128|d[A+379|0],f[A+387|0]=128|d[A+387|0],i=d[A+389|0],f[A+391|0]=192|c,f[A+390|0]=192|l,f[A+389|0]=128|i,f[A+529|0]=128|d[A+529|0],f[A+545|0]=128|d[A+545|0],f[A+489|0]=128|d[A+489|0],f[A+487|0]=128|d[A+487|0],f[A+398|0]=128|d[A+398|0]}function gA(A,t,r,s,i,l){var c,g=0,p=0,I=0,h=0,M=0,P=0;H=c=H-192|0,g=M=e[t>>2];e:{A:{for(;p=1,(0|(I=f[0|g]))>=0||(p=2,I>>>0<4294967264||(p=I>>>0<4294967280?3:4)),!(d[0|(I=p+g|0)]!=32|d[I+1|0]!=46);){if(h-160>>>0<4294967135)break A;rt((P=c+32|0)+h|0,g,p),f[(p=p+h|0)+P|0]=46,g=I+3|0,h=p+1|0}if(h){for(p=0;I=p,p=p+1|0,223&d[g+I|0];);if(!((P=I+h|0)+1>>>0>160)&&(rt((p=c+32|0)+h|0,g,I),f[p+P|0]=0,bt(A,p,g,r,s,i,l))){e[s>>2]=128|e[s>>2],e[33264]=h,A=1;break e}}}for(g=0;;){if(M=(p=M)+1|0,223&(p=d[0|p]))if(!g|(0|p)!=46|f[31+(g+c|0)|0]-48>>>0>=10){if(f[(c+32|0)+g|0]=p,p=159,(0|(g=g+1|0))!=159)continue}else p=g;else p=g;break}f[(g=c+32|0)+p|0]=0,g=bt(A,g,M,r,s,i,l);A:if(8&d[s+3|0]){if(!Ut(r,I=A+268|0)){if(I=e[A+288>>2]+1|0,e[A+288>>2]=I,(0|I)<4)break A;f[0|r]=0;break A}Qt(I,r,20),e[A+288>>2]=1}else e[A+288>>2]=0;A:{if(!g){if(g=0,8&d[s+5|0]&&(I=_A(c+28|0,g=c+32|d[c+32|0]==95),Aa(A,e[c+28>>2],r),g=g+I|0),!(p>>>0<2|g)){if(f[0|r]=0,!(16&i&&d[0|(g=31+(p+c|0)|0)]==101)&&(!(4096&i)||d[0|(g=(p=(c+32|0)+p|0)-1|0)]!=d[p-2|0]))break A;f[0|g]=0,g=bt(A,c+32|0,M,r,s,i,l)}if(!g)break A}if(h=e[s>>2],d[A+172|0]&&(h^=536870912,e[s>>2]=h),A=1,!(536870912&h))break e;2&i&&(k[66448]=8192,e[c+16>>2]=r,iA(132898,87470,c+16|0),A=e[t>>2],e[t>>2]=132898,8&d[188788]&&(rt(t=c+32|0,s=A,A=g-A|0),f[A+t|0]=0,e[c+4>>2]=132898,A=e[47195],e[c>>2]=t,Kt(A,87652,c)))}f[0|r]=0,A=0}return H=c+192|0,A}function WA(A,t){var r=0,s=0,i=0;r=31&A;e:{A:{r:{if((0|(A&=96))==96)A=-1;else{if((0|A)!=64)break r;A=1}if(r>>>0>=15)break e;t=e[203136+(r<<2)>>2]+O(A,t)|0;break A}if(r>>>0>=15)break e}A=e[(s=r<<2)+105616>>2],e[s+203136>>2]=(0|t)>=0?(0|A)>(0|t)?t:A:0}e:{A:{r:{a:{n:switch(r-1|0){case 5:if(!(A=e[50759]))break A;e[54728]=e[50982],t=e[50979],r=e[50978],Ve(205184,0,11e3),e[51293]=0,t=(r=(i=(0|(s=e[50789]))>0)?130:(0|r)>=5499?5499:r)?i?s:(0|t)>=100?100:t:0,e[50755]=t,r=(0|O(r,e[50754]))/1e3|0,e[51292]=r,e[54729]=(0|t)>20?r<<1:t?r:0,e[33037]=(0|O(500-t|0,(0|O(d[e[50797]+105596|0],(0|O(e[50787],55))/100|0))/16|0))/500;break a;case 0:break n;case 2:case 12:break e;case 4:break r;default:break A}if(!(A=e[50759]))break A}return t=256,(0|(r=(0|(r=e[50785]))>=101?101:r))>=51&&(t=256+(((O(r,25)-1250&65535)>>>0)/50|0)|0),k[A+164>>1]=(0|O(k[A+236>>1],t))/256,k[A+166>>1]=(0|O(k[A+238>>1],t))/256,k[A+168>>1]=(0|O(k[A+240>>1],t))/256,k[A+170>>1]=(0|O(k[A+242>>1],t))/256,k[A+172>>1]=(0|O(k[A+244>>1],t))/256,k[A+174>>1]=(0|O(k[A+246>>1],t))/256,A=e[50790],k[102e3]=(0|O(k[102036],O(A,-3)+256|0))/256,void(k[101999]=(0|O(k[102035],O(A,-6)+256|0))/256)}e[50759]&&(e[54728]=e[50982],A=e[50979],t=e[50978],Ve(205184,0,11e3),e[51293]=0,A=(t=(s=(0|(r=e[50789]))>0)?130:(0|t)>=5499?5499:t)?s?r:(0|A)>=100?100:A:0,e[50755]=A,t=(0|O(t,e[50754]))/1e3|0,e[51292]=t,e[54729]=(0|A)>20?t<<1:A?t:0,e[33037]=(0|O(500-A|0,(0|O(d[e[50797]+105596|0],(0|O(e[50787],55))/100|0))/16|0))/500)}return}e[33037]=(0|O(d[e[50797]+105596|0],(0|O(e[50787],55))/100|0))/16}function Mr(A,t,r){var s=0,i=0,l=0,c=0,g=0,p=0,I=0,h=0,M=0,P=0;r&&(e[r>>2]=0);e:{A:if(!((0|(s=f[0|A]))<0)){for(;;){if((0|(l=255&s))==32|l-9>>>0<5){if((0|(s=f[0|(A=A+1|0)]))>=0)continue;break A}break}if(!(255&s))break e}for(;;){if((0|(s=p=255&s))==32|s-9>>>0<5)break e;if((0|p)!=124||(0|(s=d[0|(l=A+1|0)]))==124){A:{if((0|(M=e[36115]))>=2){for(s=1,l=-1,I=0;;){r:if(!(!(h=e[144464+(s<<2)>>2])|d[h+11|0]==15)){g=e[h>>2];a:{n:{if(p>>>0>=33){if(P=0,c=0,(255&g)==(0|p)&&(c=1,(i=d[A+1|0])>>>0<33|(0|i)!=(g>>>8&255)||(c=2,(i=d[A+2|0])>>>0<33|(0|i)!=(g>>>16&255)||(c=(i=(i=d[A+3|0])>>>0>32&(0|i)==(g>>>24|0))?4:3,P=0-i|0))),(0|l)>=(0|c))break r;if(i=4,!(1&P))break n;break a}if(c=0,(0|l)>=0)break r}if(g>>>((i=c)<<3)&255)break r}I=d[h+10|0],l=i}if((0|M)==(0|(s=s+1|0)))break}if(I)break A}return r&&_A(r,A),void(f[0|t]=0)}f[0|t]=I,A=((0|l)<=1?1:l)+A|0,t=l=t+1|0;A:if((0|I)==21){r:if((0|(i=d[0|A]))==32|i-9>>>0<5)s=l;else if(s=l,i)for(;;){if(f[0|s]=Ms(i),s=s+1|0,(0|(i=d[0|(A=A+1|0)]))==32|i-9>>>0<5)break r;if(!i)break}if(f[0|s]=0,!i){if(t=s,Ut(l,85593))break A;return void(f[0|l]=0)}f[0|s]=124,t=s+1|0}s=d[0|A]}else A=l;if(!(255&s))break}}f[0|t]=0}function gs(A,t){var r=0,s=0,i=0,l=0,c=0;e:{A:{r:{a:{n:switch((0|(r=e[A+4>>2]))==e[A+104>>2]?r=Ie(A):(e[A+4>>2]=r+1,r=d[0|r]),r-43|0){case 0:case 2:break n;default:break a}if(l=(0|r)==45,c=!t,(0|(r=e[A+4>>2]))==e[A+104>>2]?r=Ie(A):(e[A+4>>2]=r+1,r=d[0|r]),c|(t=r-58|0)>>>0>4294967285)break r;if(e[A+116>>2]<0)break A;e[A+4>>2]=e[A+4>>2]-1;break A}t=r-58|0}if(!(t>>>0<4294967286)){if((t=r-48|0)>>>0<10){for(;i=(0|(s=(s=O(s,10)+r|0)-48|0))<214748364,(0|(t=e[A+4>>2]))==e[A+104>>2]?r=Ie(A):(e[A+4>>2]=t+1,r=d[0|t]),i&(t=r-48|0)>>>0<=9;);i=s>>31}r:if(!(t>>>0>=10))for(;;){if(t=(s=At(s,i,10,0))+r|0,r=he,r=t>>>0<s>>>0?r+1|0:r,s=t-48|0,i=r-(t>>>0<48)|0,(0|(t=e[A+4>>2]))==e[A+104>>2]?r=Ie(A):(e[A+4>>2]=t+1,r=d[0|t]),(t=r-48|0)>>>0>9)break r;if(!(s>>>0<2061584302&(0|i)<=21474836|(0|i)<21474836))break}if(t>>>0<10)for(;(0|(t=e[A+4>>2]))==e[A+104>>2]?t=Ie(A):(e[A+4>>2]=t+1,t=d[0|t]),t-48>>>0<10;);(0|(t=e[A+116>>2]))>0|(0|t)>=0&&(e[A+4>>2]=e[A+4>>2]-1),A=s,s=l?0-A|0:A,i=l?0-(!!(0|A)+i|0)|0:i;break e}}if(i=-2147483648,!(e[A+116>>2]<0))return e[A+4>>2]=e[A+4>>2]-1,he=-2147483648,0}return he=i,s}function js(A){var t=0,r=0,s=0,i=0;if(e[36432]=110,e[36433]=100,e[36434]=450,e[36430]=5,t=e[203136+((0|A)==2?32:8)>>2],s=e[32972],(0|(r=e[s+84>>2]))>0&&(t=(0|O(t,r))/100|0),r=(0|t)>=359?359:t,r=(0|(t=(0|t)>=450?450:t))>399?6:(0|t)>379?7:d[((0|r)<=80?80:r)+101856|0],1&A&&(e[32526]=(0|O(r,e[s+72>>2]))/256,e[32527]=(0|O(r,e[s+76>>2]))/256,e[32528]=(0|O(r,e[s+80>>2]))/256,r>>>0>7||(i=r-1|0,e[32528]=i,e[32526]=r,e[32527]=i)),2&A){A=e[s+72>>2];e:{A:{r:{a:{n:{o:{c:{u:{if((0|t)>=351)s=t-350|0,e[36432]=85-(((255&s)>>>0)/3|0)&255,s=60-(s>>>3|0)|0;else{if((0|t)<251)break u;s=t-250|0,e[36432]=110-(s>>>2|0),s=110-(s>>>1|0)|0}if(e[36433]=s,A=(0|O(A,r))/256|0,e[36431]=110+((0|O(A,150))/128|0),t>>>0<=349)break c;if(r=t-350|0,e[36431]=d[r+102224|0],t>>>0<390)break n;if(e[36434]=450+((t+112<<24>>24)/-2<<24>>24),t>>>0<441)break o;e[36434]=860-t,A=12;break A}A=(0|O(A,r))/256|0,e[36431]=(0|t)>=170?110+((0|O(A,150))/128|0)|0:128+((A<<7)/130|0)|0}A=(A<<8)/115|0;break A}if(A=12,t>>>0>430)break A;if(A=13,t>>>0<=400)break a;break A}if(A=(A<<8)/115|0,e[36428]=A,t>>>0<375)break r}A=14;break A}if((0|t)<351)break e;A=d[r+102336|0]}e[36428]=A}e[36429]=(0|A)<=16?16:A}}function pr(A,t,r){var s,i,l,c;s=.000244140625*+e[50767],T[r>>3]=s,T[r+40>>3]=.015625*+e[A+112>>2],T[r+48>>3]=.015625*+e[A+276>>2],T[r+56>>3]=.00390625*+(0|O(k[A+166>>1],k[t+4>>1]))+ +k[A+220>>1],T[r+64>>3]=.00390625*+(0|O(k[A+168>>1],k[t+6>>1]))+ +k[A+222>>1],T[r+72>>3]=.00390625*+(0|O(k[A+170>>1],k[t+8>>1]))+ +k[A+224>>1],T[r+80>>3]=.00390625*+(0|O(k[A+172>>1],k[t+10>>1]))+ +k[A+226>>1],T[r+88>>3]=.00390625*+(0|O(k[A+174>>1],k[t+12>>1]))+ +k[A+228>>1],i=k[A+230>>1],l=k[A+176>>1],c=k[t+14>>1],e[r+112>>2]=0,e[r+116>>2]=1080623104,e[r+104>>2]=0,e[r+108>>2]=1081032704,T[r+96>>3]=.00390625*+(0|O(l,c))+ +(0|i),d[t+40|0]?(e[r+184>>2]=0,e[r+188>>2]=1072693248,T[r+104>>3]=d[t+40|0]<<1):(e[r+184>>2]=0,e[r+188>>2]=0),T[r+120>>3]=.00390625*+k[A+202>>1]*+(d[t+35|0]<<1),T[r+128>>3]=.00390625*+k[A+204>>1]*+(d[t+36|0]<<1),T[r+136>>3]=.00390625*+k[A+206>>1]*+(d[t+37|0]<<1),t=d[t+38|0],A=k[A+208>>1],e[r+176>>2]=0,e[r+180>>2]=1079574528,e[r+160>>2]=0,e[r+164>>2]=1083129856,e[r+152>>2]=0,e[r+156>>2]=1083129856,e[r+352>>2]=0,e[r+356>>2]=1072693248,e[r+168>>2]=0,e[r+172>>2]=1079574528,T[r+144>>3]=.00390625*+(0|A)*+(t<<1),A=e[50779],T[r+368>>3]=s,T[r+360>>3]=+(0|A)/100*3}function Gr(A){var t=0;rA(A,Vr(A));e:{A:{r:{a:{n:{o:{c:{u:{l:{i:{if((0|(A=-1048576&he))<268435455|(0|A)<=268435455){p:{C:{if((0|A)<33554431|(0|A)<=33554431){if((0|A)<8388607|(0|A)<=8388607){if(t=524328,!0&(0|A)==-2147483648)break e;if(0|(0|A)!=-2143289344)break A;return 557096}if(!0&(0|A)==8388608)break C;if(0|(0|A)!=16777216)break A;return 524358}if((0|A)>71303167)break p;if(!0&(0|A)==33554432)break r;if(0|(0|A)!=67108864)break A}return 266270}if(!0&(0|A)==71303168)break i;if(!0&(0|A)==134217728)break a;if(0|(0|A)!=138412032)break A;return 294942}if((0|A)<542113791|(0|A)<=542113791){if((0|A)<536870911|(0|A)<=536870911){if(!0&(0|A)==268435456)break n;if(0|(0|A)!=272629760)break A;return 299028}if(!0&(0|A)==536870912)break c;if(!0&(0|A)==538968064)break o;if(0|(0|A)!=541065216)break A;return 569389}if((0|A)<1075838975|(0|A)<=1075838975){if(!0&(0|A)==542113792)break i;if(0|(0|A)!=1073741824)break A;return 532520}if(!0&(0|A)==1075838976)break u;if(!0&(0|A)==1077936128)break l;if(0|(0|A)!=1078984704)break A}return 299038}return 565288}return 1581096}return 536621}return 1585197}return 266260}return 262174}return 2396190}t=16384}return t}function Ws(A,t,r,s,i,l){var c,g,p=0,I=0,h=0,M=0;if(g=8388607&A,I=e[34456],p=d[0|(A=g+I|0)]|d[A+1|0]<<8){c=!(h=d[A+2|0]),A=e[36434]<<c,(0|r)<=0?r=p:(r=(0|O(e[50754],r))/1e3<<c,A=(0|A)<(0|(M=(0|O(r,A))/(0|p)|0))?M:A),i=(0|i)>0?(0|O(r,i))/256|0:r,r=(0|O(i,e[36431]))/256|0,r=(0|A)<(0|(r=(4&s)>>>2|0&&(0|r)>(0|i)?i:r))?r:A,h||(p=p>>>1|0,r=(0|r)/2|0);e:if(!((0|l)<0)){if(s=g+4|0,256&t)A=e[50758],e[36439]=A,e[(t=216192+(A<<4)|0)>>2]=7,e[t+8>>2]=s+I,e[t+4>>2]=p<<16|r,l=h|l<<8;else{if(A=e[50758],e[36439]=A,e[(A=216192+(A<<4)|0)>>2]=6,l=h|l<<8,e[A+12>>2]=l,e[A+8>>2]=s+I,I=A,A=O(t=p>>>2|0,3),i=(0|r)>(0|p),e[I+4>>2]=i?A:r,I=e[50758]+1|0,e[50758]=(0|I)<=169?I:0,(0|A)<(0|(r=i?r-A|0:0)))for(i=t<<1,h=s+(h?t:i)|0;t=e[50758],e[36439]=t,e[(t=216192+(t<<4)|0)>>2]=6,e[t+4>>2]=i,e[t+12>>2]=l,e[t+8>>2]=h+e[34456],t=e[50758]+1|0,e[50758]=(0|t)<=169?t:0,(0|A)<(0|(r=r-i|0)););if((0|r)<=0)break e;A=e[50758],e[36439]=A,e[(t=216192+(A<<4)|0)>>2]=6,e[t+4>>2]=r,e[t+8>>2]=e[34456]+(s+(p-r<<c)|0)}e[12+(216192+(A<<4)|0)>>2]=l,A=e[50758]+1|0,e[50758]=(0|A)<=169?A:0}}}function rt(A,t,r){var s,i=0,l=0;if(r>>>0>=512)return nA(0|A,0|t,0|r),A;s=A+r|0;e:if(3&(A^t))if(s>>>0<4)r=A;else if((i=s-4|0)>>>0<A>>>0)r=A;else for(r=A;f[0|r]=d[0|t],f[r+1|0]=d[t+1|0],f[r+2|0]=d[t+2|0],f[r+3|0]=d[t+3|0],t=t+4|0,i>>>0>=(r=r+4|0)>>>0;);else{A:if(3&A)if(r)for(r=A;;){if(f[0|r]=d[0|t],t=t+1|0,!(3&(r=r+1|0)))break A;if(!(r>>>0<s>>>0))break}else r=A;else r=A;if(!((i=-4&s)>>>0<64||(l=i+-64|0)>>>0<r>>>0))for(;e[r>>2]=e[t>>2],e[r+4>>2]=e[t+4>>2],e[r+8>>2]=e[t+8>>2],e[r+12>>2]=e[t+12>>2],e[r+16>>2]=e[t+16>>2],e[r+20>>2]=e[t+20>>2],e[r+24>>2]=e[t+24>>2],e[r+28>>2]=e[t+28>>2],e[r+32>>2]=e[t+32>>2],e[r+36>>2]=e[t+36>>2],e[r+40>>2]=e[t+40>>2],e[r+44>>2]=e[t+44>>2],e[r+48>>2]=e[t+48>>2],e[r+52>>2]=e[t+52>>2],e[r+56>>2]=e[t+56>>2],e[r+60>>2]=e[t+60>>2],t=t- -64|0,l>>>0>=(r=r- -64|0)>>>0;);if(r>>>0>=i>>>0)break e;for(;e[r>>2]=e[t>>2],t=t+4|0,i>>>0>(r=r+4|0)>>>0;);}if(r>>>0<s>>>0)for(;f[0|r]=d[0|t],t=t+1|0,(0|s)!=(0|(r=r+1|0)););return A}function is(A){var t=0,r=0,s=0,i=0,l=0,c=0,g=0,p=0;F(+A),t=0|v(1),v(0);e:{if((s=(t=t>>>20&2047)-969|0)>>>0<63)p=t;else{if((0|s)<0)return A+1;if(!(t>>>0<1033)){if(F(+A),s=0|v(1),r=0,!(0|v(0))&(0|s)==-1048576)break e;return t>>>0>=2047?A+1:(0|s)<0?(T[(t=H-16|0)+8>>3]=12882297539194267e-247,12882297539194267e-247*T[t+8>>3]):(T[(t=H-16|0)+8>>3]=3105036184601418e216,3105036184601418e216*T[t+8>>3])}}if(r=T[14409],l=(r=(A=(r=(i=T[14408]*A+r)-r)*T[14411]+(r*T[14410]+A))*A)*r*(A*T[14415]+T[14414]),r*=A*T[14413]+T[14412],F(+i),v(1),g=0|v(0),A=l+(r+(T[(s=g<<4&2032)+115376>>3]+A)),c=e[(s=s+115384|0)>>2],t=(g<<13)+(t=e[s+4>>2])|0,t=(s=(s=c)+(c=0)|0)>>>0<c>>>0?t+1|0:t,!p)return-2147483648&g?(x(0,0|s),x(1,t+1071644672|0),(A=(i=(r=+S())*A)+r)<1&&(e[(t=H-16|0)+8>>2]=0,e[t+12>>2]=1048576,T[t+8>>3]=22250738585072014e-324*T[t+8>>3],A=(A=(l=A+1)+(i+(r-A)+(A+(1-l)))+-1)==0?0:A),A*=22250738585072014e-324):(x(0,0|s),x(1,t-1058013184|0),A=5486124068793689e288*((r=+S())*A+r)),A;x(0,0|s),x(1,0|t),r=(r=+S())*A+r}return r}function $r(A,t){var r,s=0,i=0,l=0,c=0;H=r=H-16|0;e:{if(Ns(84270,f[0|t])){if(i=2,Ns(t,43)||(i=d[0|t]!=114),i=Ns(t,120)?128|i:i,l=i=Ns(t,101)?524288|i:i,c=64|i,l=(0|(i=d[0|t]))==114?l:c,l=(0|i)==119?512|l:l,e[r>>2]=438,e[r+4>>2]=0,(A=0|le(-100,0|A,32768|((0|i)==97?1024|l:l),0|r))>>>0>=4294963201&&(e[56798]=0-A,A=-1),(0|A)<0)break e;H=i=H-32|0;A:{r:{if(Ns(84270,f[0|t])){if(s=tt(1176))break r}else e[56798]=28;t=0;break A}Ve(s,0,144),Ns(t,43)||(e[s>>2]=d[0|t]==114?8:4),d[0|t]==97?(1024&(t=0|Fe(0|A,3,0))||(t|=1024,e[i+16>>2]=t,e[i+20>>2]=t>>31,Fe(0|A,4,i+16|0)),t=128|e[s>>2],e[s>>2]=t):t=e[s>>2],e[s+80>>2]=-1,e[s+48>>2]=1024,e[s+60>>2]=A,e[s+44>>2]=s+152,8&t||(e[i>>2]=i+24,e[i+4>>2]=0,0|oe(0|A,21523,0|i)||(e[s+80>>2]=10)),e[s+40>>2]=10,e[s+36>>2]=11,e[s+32>>2]=12,e[s+12>>2]=13,d[227205]||(e[s+76>>2]=-1),e[s+56>>2]=e[56816],(t=e[56816])&&(e[t+52>>2]=s),e[56816]=s,t=s}if(H=i+32|0,s=t)break e;ve(0|A)}else e[56798]=28;s=0}return H=r+16|0,s}function Sa(A,t,r){var s,i=0,l=0,c=0,g=0,p=0;if(c=A,H=s=H-208|0,e[s+8>>2]=1,e[s+12>>2]=0,g=t<<2){for(e[s+16>>2]=4,e[s+20>>2]=4,t=4,i=4,l=2;A=t,t=(i+4|0)+t|0,e[(s+16|0)+(l<<2)>>2]=t,l=l+1|0,i=A,t>>>0<g>>>0;);if((A=(c+g|0)-4|0)>>>0<=c>>>0)l=0,t=1,A=0;else{for(l=1,t=1;3&~l?(ee[(s+16|0)+((i=t-1|0)<<2)>>2]>=A-c>>>0?Ir(c,r,s+8|0,t,0,s+16|0):Wa(c,r,t,s+16|0),(0|t)!=1?(oi(s+8|0,i),t=1):(oi(s+8|0,1),t=0)):(Wa(c,r,t,s+16|0),li(s+8|0,2),t=t+2|0),l=1|(i=e[s+8>>2]),e[s+8>>2]=l,A>>>0>(c=c+4|0)>>>0;);l=i>>>0>1,A=e[s+12>>2]!=0}if(Ir(c,r,s+8|0,t,0,s+16|0),l|(0|t)!=1|A)for(;(0|t)<=1?(li(i=s+8|0,A=dA(i)),l=e[s+8>>2],A=A+t|0):(oi(i=s+8|0,2),e[s+8>>2]=7^e[s+8>>2],li(i,1),Ir((p=c-4|0)-e[(g=s+16|0)+((A=t-2|0)<<2)>>2]|0,r,i,t-1|0,1,g),oi(i,1),l=1|e[s+8>>2],e[s+8>>2]=l,Ir(p,r,i,A,1,g)),t=A,c=c-4|0,e[s+12>>2]|(0|t)!=1|(0|l)!=1;);}H=s+208|0}function Ca(A,t,r,s){var i,l=0,c=0,g=0;H=i=H-32|0,g=l=2147483647&s,c=l-1006698496|0;e:if(0|(l=l-1140785152|0)>>>0>c>>>0){if(l=r<<4|t>>>28,r=s<<4|r>>>28,(0|(t&=268435455))==134217728&!!(0|A)|t>>>0>134217728){c=r+1073741824|0,c=(l=l+1|0)?c:c+1|0;break e}if(c=r+1073741824|0,A|(0|t)!=134217728)break e;c=(A=1&l)>>>0>(l=A+l|0)>>>0?c+1|0:c}else(!r&(0|g)==2147418112?!(A|t):g>>>0<2147418112)?(l=0,c=2146435072,g>>>0>1140785151||(c=0,(g=g>>>16|0)>>>0<15249||(Gt(i+16|0,A,t,r,l=65535&s|65536,g-15233|0),ur(i,A,t,r,l,15361-g|0),l=(t=e[i+8>>2])<<4,t=e[i+12>>2]<<4|t>>>28,r=e[i>>2],g=c=e[i+4>>2],l|=c>>>28,c=t,(0|(A=268435455&g))==134217728&!!(0|(t=r|!!(e[i+16>>2]|e[i+24>>2]|e[i+20>>2]|e[i+28>>2])))|A>>>0>134217728?c=(l=l+1|0)?c:c+1|0:t|(0|A)!=134217728||(c=(A=l)>>>0>(l=l+(1&l)|0)>>>0?c+1|0:c)))):(l=r<<4|t>>>28,c=524287&(A=s<<4|r>>>28)|2146959360);return H=i+32|0,x(0,0|l),x(1,-2147483648&s|c),+S()}function Oa(A){var t,r=0,s=0,i=0,l=0,c=0;if(F(+A),c=0|v(1),i=0|v(0),(0|(l=c>>>20&2047))==2047)return(A*=1)/A;if(!(s=i<<1)&(0|(r=c<<1|i>>>31))==2145386496|r>>>0<2145386496)return!s&(0|r)==2145386496?0*A:A;if(l)r=1048575&c|1048576;else{if(l=0,s=i<<12,(0|(r=c<<12|i>>>20))>0|(0|r)>=0)for(;l=l-1|0,r=r<<1|s>>>31,s<<=1,(0|r)>0|(0|r)>=0;);s=31&(r=1-l|0),(63&r)>>>0>=32?(r=i<<s,i=0):(r=(1<<s)-1&i>>>32-s|c<<s,i<<=s)}if(s=i,(0|l)>1023){for(;;){if(!((0|(i=r+-1048576|0))<0||(r=i)|s))return 0*A;if(r=r<<1|s>>>31,s<<=1,!((0|(l=l-1|0))>1023))break}l=1023}if(!((0|(i=r+-1048576|0))<0||(r=i)|s))return 0*A;if((0|r)==1048575|r>>>0<1048575)for(;l=l-1|0,i=r>>>0<524288,r=r<<1|s>>>31,s<<=1,i;);return t=-2147483648&c,(0|l)>0?r=r+-1048576|l<<20:(i=1-l|0,c=r,l=s,s=31&i,(63&i)>>>0>=32?(r=0,s=c>>>s|0):(r=c>>>s|0,s=((1<<s)-1&c)<<32-s|l>>>s)),x(0,0|s),x(1,r|t),+S()}function Ss(A,t,r,s,i){var l,c=0,g=0;H=l=H-160|0;e:{A:{r:{a:switch((c=d[t+10|0])-15|0){case 6:break r;case 0:break a;default:break A}f[0|A]=0;break e}e[l>>2]=O(d[r+7|0],44)+137856,iA(A,86002,l),A=CA(A)+A|0;break e}if(s){if(f[l+140|0]=0,r?VA(0,0,r,l+8|0,0):ln(c,l+8|0),r=l+140|0,c=d[l+140|0]){if((0|c)==32){f[0|A]=0;break e}224&(c=c<<24>>24)||(i&&(e[i>>2]=c),r=l+141|0)}if(!((0|(i=CA(r)))<=0)){A=yA(A,r)+i|0,f[0|A]=0;break e}}i=0;A:if(!(!(r=255&(c=e[t>>2]))|(0|r)==47)){if(s){if((0|(g=255&c))==95)break A;r:{a:{if((0|g)==35){if(g=3,d[t+11|0]!=2)break a;break A}if((g=r-32|0)>>>0>95)break r}r=y[93952+(g<<1)>>1]}i=dr(r,A)}else f[0|A]=c,i=1;for(;;){if(!(r=255&(c>>=8))|(0|r)==47)break A;if(s){if((0|r)==35&d[t+11|0]==2)break A;if(r-48>>>0<10)continue;(g=r-32|0)>>>0<=95&&(r=y[93952+(g<<1)>>1]),i=dr(r,A+i|0)+i|0}else f[A+i|0]=c,i=i+1|0}}f[0|(A=A+i|0)]=0}return H=l+160|0,A}function Ys(A){var t,r=0;t=A,r=131280;e:{A:{if(!((0|A)<=1023||(r=131300,A>>>0<1328||(r=131320,A>>>0<1424||(r=131340,A>>>0<1536||(r=131360,A>>>0<1792||(r=131380,A>>>0<1872||(r=131400,A>>>0<2432||(r=131420,A>>>0<2560||(r=131440,A>>>0<2688||(r=131460,A>>>0<2816||(r=131480,A>>>0<2944||(r=131500,A>>>0<3072||(r=131520,A>>>0<3200||(r=131540,A>>>0<3328||(r=131560,A>>>0<3456||(r=131580,A>>>0<3584||(r=131600,A>>>0<3712||(r=131620,A>>>0<3840||(r=131640,A>>>0<4096||(r=131660,A>>>0<4256||(r=131680,A>>>0<4352||(r=131700,A>>>0<4608||(r=131720,A>>>0<5024||(r=131740,A>>>0<10496||(r=131760,A>>>0<12544||(r=131780,A>>>0<40960))))))))))))))))))))))))))){if(A>>>0>=55296)break A;r=131800}if((0|t)>=y[(A=r)+8>>1])break e}A=0}return A}function Aa(A,t,r){var s,i=0,l=0,c=0,g=0;H=s=H-208|0,f[s+80|0]=0;e:{if((i=t-224|0)>>>0<=158)t=101072+(i<<1)|0;else{if((t=t-592|0)>>>0>88)break e;t=101392+(t<<1)|0}if(t=y[t>>1]){if(c=t<<16>>16,g=(i=63&t)>>>0>37?i+59|0:k[101584+(i<<1)>>1],i=t>>>6|0,(0|c)<0)i=59+(63&i)|0,t=t>>>12&7;else{if(!(l=31&i))break e;i=0,t=t>>>11&15}(l=DA(A,e[129920+(l<<3)>>2],s+112|0))&&Ha(A,g,s+176|0)&&(t&&4096&DA(A,e[129920+(t<<3)>>2],s+80|0)&&(r=CA(t=yA(r,s+80|0)),f[s+80|0]=0,r=t+r|0),i?(Ha(t=A,i,A=s+144|0),e[s+68>>2]=s+80,e[s- -64>>2]=A,e[s+60>>2]=6,e[s+52>>2]=23,e[s+56>>2]=s+176,e[s+48>>2]=s+112,iA(r,84101,s+48|0)):(0|c)<0?yA(r,s+176|0):1&e[A+144>>2]|4096&l?(e[s+36>>2]=23,e[s+40>>2]=6,e[s+44>>2]=s+176,e[s+32>>2]=s+112,iA(r,84430,s+32|0)):(e[s+16>>2]=23,e[s+8>>2]=23,e[s>>2]=4,e[s+12>>2]=s+112,e[s+4>>2]=s+176,iA(r,84802,s)))}}H=s+208|0}function za(){lt(),e[55928]=0,e[55926]=0,e[55927]=0,e[55924]=0,e[56244]=0,e[56245]=0,e[56246]=0,e[56247]=0,e[56260]=0,e[56261]=0,e[56262]=0,e[56263]=0,e[56276]=0,e[56277]=0,e[56278]=0,e[56279]=0,e[55974]=0,e[55975]=0,e[55972]=0,e[55973]=0,e[55988]=0,e[55989]=0,e[55990]=0,e[55991]=0,e[56004]=0,e[56005]=0,e[56006]=0,e[56007]=0,e[56020]=0,e[56021]=0,e[56022]=0,e[56023]=0,e[56036]=0,e[56037]=0,e[56038]=0,e[56039]=0,e[56052]=0,e[56053]=0,e[56054]=0,e[56055]=0,e[56068]=0,e[56069]=0,e[56070]=0,e[56071]=0,e[56086]=0,e[56087]=0,e[56084]=0,e[56085]=0,e[56102]=0,e[56103]=0,e[56100]=0,e[56101]=0,e[56118]=0,e[56119]=0,e[56116]=0,e[56117]=0,e[56134]=0,e[56135]=0,e[56132]=0,e[56133]=0,e[56150]=0,e[56151]=0,e[56148]=0,e[56149]=0,e[56166]=0,e[56167]=0,e[56164]=0,e[56165]=0,e[56182]=0,e[56183]=0,e[56180]=0,e[56181]=0,e[56198]=0,e[56199]=0,e[56196]=0,e[56197]=0,e[56214]=0,e[56215]=0,e[56212]=0,e[56213]=0,e[56230]=0,e[56231]=0,e[56228]=0,e[56229]=0}function Na(A,t){var r=0,s=0,i=0,l=0,c=0,g=0,p=0,I=0,h=0,M=0;e:{if((0|(l=e[A+4>>2]))==e[A>>2])if((c=e[A+8>>2])>>>0<(r=e[A+12>>2])>>>0)r=(i=(1+(r-c>>2)|0)/2<<2)+c|0,(0|l)!=(0|c)&&(We(r=r-(s=c-l|0)|0,l,s),l=e[A+8>>2]),e[A+4>>2]=r,e[A+8>>2]=i+l;else{if((s=(0|r)==(0|l)?1:r-l>>1)>>>0>=1073741824)break e;if(h=(p=ms(r=s<<2))+r|0,g=r=(s+3&-4)+p|0,(0|l)!=(0|c)){if(M=-4&(c=c-l|0),i=r,s=l,c=1+((I=c-4|0)>>>2|0)&7)for(g=0;e[i>>2]=e[s>>2],s=s+4|0,i=i+4|0,(0|c)!=(0|(g=g+1|0)););if(g=r+M|0,!(I>>>0<28))for(;e[i>>2]=e[s>>2],e[i+4>>2]=e[s+4>>2],e[i+8>>2]=e[s+8>>2],e[i+12>>2]=e[s+12>>2],e[i+16>>2]=e[s+16>>2],e[i+20>>2]=e[s+20>>2],e[i+24>>2]=e[s+24>>2],e[i+28>>2]=e[s+28>>2],s=s+32|0,(0|g)!=(0|(i=i+32|0)););}e[A+12>>2]=h,e[A+8>>2]=g,e[A+4>>2]=r,e[A>>2]=p,l&&(zA(l),r=e[A+4>>2])}else r=l;return e[r-4>>2]=e[t>>2],void(e[A+4>>2]=e[A+4>>2]-4)}Si(),j()}function La(A,t,r){var s=0,i=0,l=0,c=0,g=0,p=0,I=0,h=0,M=0;e:{A:{r:{a:{n:{o:{c:{u:{l:{if(t){if(!r)break l;break u}return cA=(t=A)-O(A=(A>>>0)/(r>>>0)|0,r)|0,fA=0,he=0,A}if(!A)break c;break o}if(!((s=r-1|0)&r))break n;l=0-(c=(be(r)+33|0)-be(t)|0)|0;break r}return cA=0,fA=t-O(A=(t>>>0)/0|0,0)|0,he=0,A}if((s=32-be(t)|0)>>>0<31)break a;break A}if(cA=A&s,fA=0,(0|r)==1)break e;return r=31&(s=gi(r)),(63&s)>>>0>=32?A=t>>>r|0:(i=t>>>r|0,A=((1<<r)-1&t)<<32-r|A>>>r),he=i,A}c=s+1|0,l=63-s|0}if(s=31&(i=63&c),i>>>0>=32?(i=0,g=t>>>s|0):(i=t>>>s|0,g=((1<<s)-1&t)<<32-s|A>>>s),s=31&(l&=63),l>>>0>=32?(t=A<<s,A=0):(t=(1<<s)-1&A>>>32-s|t<<s,A<<=s),c)for(h=(0|(s=r-1|0))==-1?-1:0;p=i<<1|g>>>31,g=(i=g<<1|t>>>31)-(I=r&(l=h-(p+(i>>>0>s>>>0)|0)>>31))|0,i=p-(i>>>0<I>>>0)|0,t=t<<1|A>>>31,A=M|A<<1,M=p=1&l,c=c-1|0;);return cA=g,fA=i,he=t<<1|A>>>31,p|A<<1}cA=A,fA=t,A=0,t=0}return he=t,A}function _a(A,t){var r=0,s=0,i=0,l=0,c=0,g=0,p=0,I=0,h=0,M=0;e:{if((0|(r=e[A+8>>2]))==e[A+12>>2])if((s=e[A+4>>2])>>>0>(c=e[A>>2])>>>0)i=We((l=(1+(s-c>>2)|0)/-2<<2)+s|0,s,r=r-s|0)+r|0,e[A+8>>2]=i,e[A+4>>2]=l+e[A+4>>2];else{if((l=(0|r)==(0|c)?1:r-c>>1)>>>0>=1073741824)break e;if(h=(g=ms(i=l<<2))+i|0,i=l=(-4&l)+g|0,(0|r)!=(0|s)){if(M=-4&(r=r-s|0),I=1+((p=r-4|0)>>>2|0)&7)for(i=0,r=l;e[r>>2]=e[s>>2],s=s+4|0,r=r+4|0,(0|I)!=(0|(i=i+1|0)););else r=l;if(i=l+M|0,!(p>>>0<28))for(;e[r>>2]=e[s>>2],e[r+4>>2]=e[s+4>>2],e[r+8>>2]=e[s+8>>2],e[r+12>>2]=e[s+12>>2],e[r+16>>2]=e[s+16>>2],e[r+20>>2]=e[s+20>>2],e[r+24>>2]=e[s+24>>2],e[r+28>>2]=e[s+28>>2],s=s+32|0,(0|i)!=(0|(r=r+32|0)););}e[A+12>>2]=h,e[A+8>>2]=i,e[A+4>>2]=l,e[A>>2]=g,c&&(zA(c),i=e[A+8>>2])}else i=r;return e[i>>2]=e[t>>2],void(e[A+8>>2]=e[A+8>>2]+4)}Si(),j()}function Vs(A,t){var r,s=0,i=0,l=0,c=0,g=0;i=189088,H=r=H-320|0,e[r+312>>2]=0,l=oa(A,c=yA(r+112|0,189088),r,r+316|0,r+312|0,0),s=e[r+316>>2];e:if((0|t)<=3){if((0|s)<2)break e;if(l=3&(t=s-1|0),A=1,s-2>>>0>=3)for(g=-4&t,t=0;f[0|(s=A+r|0)]>=4&&(f[0|s]=3),f[(s=A+r|0)+1|0]>=4&&(f[s+1|0]=3),f[s+2|0]>=4&&(f[s+2|0]=3),f[s+3|0]>=4&&(f[s+3|0]=3),A=A+4|0,(0|g)!=(0|(t=t+4|0)););if(!l)break e;for(t=0;f[0|(s=A+r|0)]>=4&&(f[0|s]=3),A=A+1|0,(0|l)!=(0|(t=t+1|0)););}else if(A=1,!((0|s)<=1)){for(;;){if((0|l)>f[0|(g=A+r|0)]){if((0|s)!=(0|(A=A+1|0)))continue;break e}break}f[0|g]=t}if(A=d[0|c])for(t=1;s=e[144464+((255&A)<<2)>>2],d[s+11|0]!=2|16&d[s+6|0]||(l=255&(s=f[t+r|0]),(0|s)<2&&l||(f[0|i]=d[l+94151|0],i=i+1|0,A=d[0|c]),t=t+1|0),f[0|i]=A,i=i+1|0,A=d[0|(c=c+1|0)];);f[0|i]=0,H=r+320|0}function Oe(A){var t=0,r=0,s=0,i=0,l=0,c=0;r=t=e[(A|=0)>>2],e[A>>2]=t+1;e:{A:{r:{a:{n:{o:{c:switch(((l=d[0|t])>>>4|0)-8|0){case 0:case 1:case 2:case 3:break A;case 7:break n;case 6:break o;case 4:case 5:break c;default:break e}if((s=t+2|0)>>>0>=(i=e[A+4>>2])>>>0)break a;if(e[A>>2]=s,(192&(r=d[r+1|0]))!=128)break r;return 63&r|l<<6&1984}if((s=t+3|0)>>>0>=(i=e[A+4>>2])>>>0)break a;if(r=t+2|0,e[A>>2]=r,(192&(t=d[t+1|0]))!=128){s=r;break r}if(e[A>>2]=s,(192&(r=d[0|r]))!=128)break r;return 63&r|(63&t|l<<6&960)<<6}if(!((i=e[A+4>>2])>>>0<=(r=t+4|0)>>>0)){if(s=t+2|0,e[A>>2]=s,(192&(i=d[t+1|0]))!=128||(s=t+3|0,e[A>>2]=s,(192&(c=d[t+2|0]))!=128)||(e[A>>2]=r,t=d[0|s],s=r,(192&t)!=128))break r;return 0|((A=63&t|c<<6&4032|(63&i|l<<6&960)<<12)>>>0>=1114112?65533:A)}}e[A>>2]=i;break A}e[A>>2]=s-1}l=65533}return 0|l}function K(A,t,r,s){var i,l,c=0,g=0,p=0,I=0,h=0,M=0;if(H=i=H-432|0,!(!s|!(536870912&(l=tA(A,t,r,s))))&&(k[i+48>>1]=8192,s=yA(i+48|2,s),d[0|s])){for(p=i+224|0,c=1,I=200;;){if(_A(i+44|0,s),t=Bs(e[i+44>>2]),g=e[r>>2],t?(e[r>>2]=2|g,dr(Ms(e[i+44>>2]),s)):e[r>>2]=-3&g,M=e[33264],tA(A,s,r,0),1&c?(e[i+16>>2]=189088,g=Os(p,I,84130,i+16|0)):(e[i+32>>2]=15,e[i+36>>2]=189088,g=Os(p,I,84434,i+32|0)),c=(t=e[33264])+1|0,e[33264]=c,t>>>0<=2147483646){for(;;)if(t=s,s=s+1|0,(0|(h=f[0|t]))==32|h-9>>>0<5){for(;t=(s=t)+1|0,(0|(h=f[0|s]))==32|h-9>>>0<5;);if(c=c-1|0,e[33264]=c,!((0|c)>0))break}}if(p=p+g|0,e[33264]=M,!(d[0|s]&&(c=0,(0|(I=I-g|0))>1)))break}(i+224|0)!=(0|p)&&(e[i>>2]=i+224,Os(189088,200,84130,i))}return H=i+432|0,l}function fe(A,t,r,s,i,l,c,g){var p,I;p=e[32972],I=e[p+116>>2],k[A+8>>1]=y[A+8>>1]+l,l=32&g?0-l|0:l,k[A+10>>1]=l+y[A+10>>1],k[A+12>>1]=l+y[A+12>>1],s=(0|s)>(0|(l=((l=(0|O(t,I))/256|0)-(t=k[A+6>>1])|0)/2|0))?l:s,k[A+6>>1]=((0|r)<(0|s)?s:r)+t;e:{A:switch(i-1|0){case 0:t=(0|(t=235-(r=k[A+4>>1])|0))<=-100?-100:t,k[A+4>>1]=((0|t)>=-60?-60:t)+r;break e;case 1:t=(0|(t=(0|(t=235-(r=k[A+4>>1])|0))<=-300?-300:t))>=-150?-150:t,k[A+4>>1]=t+r,k[A+2>>1]=t+y[A+2>>1];break e;case 2:break A;default:break e}t=(0|(t=(0|(t=100-(r=k[A+4>>1])|0))<=-400?-400:t))>-300?-400:t,k[A+4>>1]=t+r,k[A+2>>1]=t+y[A+2>>1]}e[p+132>>2]||(f[A+20|0]=(O(d[A+20|0],c)>>>0)/100,f[A+21|0]=(O(d[A+21|0],c)>>>0)/100,f[A+22|0]=(O(d[A+22|0],c)>>>0)/100,f[A+23|0]=(O(d[A+23|0],c)>>>0)/100,f[A+24|0]=(O(d[A+24|0],c)>>>0)/100,f[A+25|0]=(O(d[A+25|0],c)>>>0)/100)}function Me(A){var t,r=0,s=0,i=0,l=0;H=t=H-48|0;e:{if(A){d[0|A]||(A=ca(84285),d[0|A]&&A||(A=ca(121696),d[0|A]&&A||(A=ca(84614),d[0|A]&&A||(A=84891))));A:{for(;;){if(!(!(s=d[A+r|0])|(0|s)==47)){if(i=23,(0|(r=r+1|0))!=23)continue;break A}break}i=r}s=84891;A:{r:{if(r=d[0|A],(d[A+i|0]|(0|r)==46||(s=A,(0|r)==67))&&!d[s+1|0]||!Ut(s,84891)||!Ut(s,85136)){if(r=121652,d[s+1|0]==46)break r;A=0;break A}if(r=e[56851])for(;;){if(!Ut(s,r+8|0))break r;if(!(r=e[r+32>>2]))break}(A=tt(36))&&(r=e[30414],e[A>>2]=e[30413],e[A+4>>2]=r,rt(r=A+8|0,s,i),f[r+i|0]=0,e[A+32>>2]=e[56851],e[56851]=A),r=A||121652}A=r}if((0|A)==-1)break e;e[56809]=A}else A=e[56809];l=A?A+8|0:84309}return H=t+48|0,l}function Ie(A){var t=0,r=0,s=0,i=0,l=0,c=0,g=0,p=0,I=0;p=!!((t=e[A+112>>2])|(s=e[A+116>>2])),i=t,c=t=(l=e[A+4>>2])-(g=e[A+44>>2])|0,r=t+e[A+120>>2]|0,t=e[A+124>>2]+(t>>31)|0;e:{if(!(((0|(t=r>>>0<c>>>0?t+1|0:t))>=(0|s)&r>>>0>=i>>>0|(0|t)>(0|s))&p)){if((0|(p=fn(A)))>=0)break e;l=e[A+4>>2],g=e[A+44>>2]}return e[A+112>>2]=-1,e[A+116>>2]=-1,e[A+104>>2]=l,s=(c=r)+(r=g-l|0)|0,t=(r>>31)+t|0,e[A+120>>2]=s,e[A+124>>2]=r>>>0>s>>>0?t+1|0:t,-1}return t=(s=r+1|0)?t:t+1|0,l=e[A+4>>2],g=e[A+8>>2],c=i=e[A+116>>2],i|(r=e[A+112>>2])&&(i=r-s|0,(0|(r=c-(t+(r>>>0<s>>>0)|0)|0))>=(0|(c=(I=g-l|0)>>31))&i>>>0>=I>>>0|(0|r)>(0|c)||(g=i+l|0)),e[A+104>>2]=g,s=(i=(r=e[A+44>>2])-l|0)+s|0,t=(i>>31)+t|0,e[A+120>>2]=s,e[A+124>>2]=s>>>0<i>>>0?t+1|0:t,r>>>0>=l>>>0&&(f[l-1|0]=p),p}function We(A,t,r){var s=0,i=0;e:if((0|A)!=(0|t)){if(t-(i=A+r|0)>>>0<=0-(r<<1)>>>0)return rt(A,t,r);if(s=3&(A^t),A>>>0<t>>>0){if(s)s=A;else{if(3&A)for(s=A;;){if(!r)break e;if(f[0|s]=d[0|t],t=t+1|0,r=r-1|0,!(3&(s=s+1|0)))break}else s=A;if(!(r>>>0<=3))for(;e[s>>2]=e[t>>2],t=t+4|0,s=s+4|0,(r=r-4|0)>>>0>3;);}if(r)for(;f[0|s]=d[0|t],s=s+1|0,t=t+1|0,r=r-1|0;);}else{if(!s){if(3&i)for(;;){if(!r)break e;if(f[0|(s=(r=r-1|0)+A|0)]=d[t+r|0],!(3&s))break}if(!(r>>>0<=3))for(;e[(r=r-4|0)+A>>2]=e[t+r>>2],r>>>0>3;);}if(!r)break e;for(;f[(r=r-1|0)+A|0]=d[t+r|0],r;);}}return A}function eA(A,t,r,s){e:switch(t-9|0){case 0:return t=e[r>>2],e[r>>2]=t+4,void(e[A>>2]=e[t>>2]);case 6:return t=e[r>>2],e[r>>2]=t+4,t=k[t>>1],e[A>>2]=t,void(e[A+4>>2]=t>>31);case 7:return t=e[r>>2],e[r>>2]=t+4,e[A>>2]=y[t>>1],void(e[A+4>>2]=0);case 8:return t=e[r>>2],e[r>>2]=t+4,t=f[0|t],e[A>>2]=t,void(e[A+4>>2]=t>>31);case 9:return t=e[r>>2],e[r>>2]=t+4,e[A>>2]=d[0|t],void(e[A+4>>2]=0);case 16:return t=e[r>>2]+7&-8,e[r>>2]=t+8,void(T[A>>3]=T[t>>3]);case 17:KA[0|s](A,r);default:return;case 1:case 4:case 14:return t=e[r>>2],e[r>>2]=t+4,t=e[t>>2],e[A>>2]=t,void(e[A+4>>2]=t>>31);case 2:case 5:case 11:case 15:return t=e[r>>2],e[r>>2]=t+4,e[A>>2]=e[t>>2],void(e[A+4>>2]=0);case 3:case 10:case 12:case 13:break e}t=e[r>>2]+7&-8,e[r>>2]=t+8,r=e[t+4>>2],e[A>>2]=e[t>>2],e[A+4>>2]=r}function vA(A,t,r,s,i,l){var c;H=c=H-80|0;e:if((0|l)>=16384){if(Le(c+32|0,t,r,s,i,0,0,0,2147352576),s=e[c+40>>2],i=e[c+44>>2],t=e[c+32>>2],r=e[c+36>>2],l>>>0<32767){l=l-16383|0;break e}Le(c+16|0,t,r,s,i,0,0,0,2147352576),l=((0|l)>=49149?49149:l)-32766|0,s=e[c+24>>2],i=e[c+28>>2],t=e[c+16>>2],r=e[c+20>>2]}else(0|l)>-16383||(Le(c- -64|0,t,r,s,i,0,0,0,7471104),s=e[c+72>>2],i=e[c+76>>2],t=e[c+64>>2],r=e[c+68>>2],l>>>0>4294934644?l=l+16269|0:(Le(c+48|0,t,r,s,i,0,0,0,7471104),l=((0|l)<=-48920?-48920:l)+32538|0,s=e[c+56>>2],i=e[c+60>>2],t=e[c+48>>2],r=e[c+52>>2]));Le(c,t,r,s,i,0,0,0,l+16383<<16),t=e[c+12>>2],e[A+8>>2]=e[c+8>>2],e[A+12>>2]=t,t=e[c+4>>2],e[A>>2]=e[c>>2],e[A+4>>2]=t,H=c+80|0}function xA(A,t){var r,s,i=0;H=r=H+-64|0,i=e[A>>2],s=e[i-4>>2],i=e[i-8>>2],e[r+32>>2]=0,e[r+36>>2]=0,e[r+40>>2]=0,e[r+44>>2]=0,e[r+48>>2]=0,e[r+52>>2]=0,f[r+55|0]=0,f[r+56|0]=0,f[r+57|0]=0,f[r+58|0]=0,f[r+59|0]=0,f[r+60|0]=0,f[r+61|0]=0,f[r+62|0]=0,e[r+24>>2]=0,e[r+28>>2]=0,e[r+20>>2]=0,e[r+16>>2]=125084,e[r+12>>2]=A,e[r+8>>2]=t,A=A+i|0,i=0;e:if(Js(s,t,0))e[r+56>>2]=1,KA[e[e[s>>2]+20>>2]](s,r+8|0,A,A,1,0),i=e[r+32>>2]==1?A:0;else{KA[e[e[s>>2]+24>>2]](s,r+8|0,A,1,0);A:switch(e[r+44>>2]){case 0:i=e[r+48>>2]==1&&e[r+36>>2]==1&&e[r+40>>2]==1?e[r+28>>2]:0;break e;case 1:break A;default:break e}e[r+32>>2]!=1&&e[r+48>>2]|e[r+36>>2]!=1|e[r+40>>2]!=1||(i=e[r+24>>2])}return H=r- -64|0,i}function BA(A,t,r,s,i){var l,c,g=0;H=l=H-80|0,k[l+72>>1]=0,e[l+64>>2]=0,e[l+68>>2]=0,f[0|s]=0,g=dr(t,c=2|(g=l- -64|0))+g|0,f[g+2|0]=32;e:if((0|r)!=-1)t>>>0>=33&&!ar(t)?(f[g+3|0]=(0|r)==32?32:31,f[l+65|0]=95,DA(A,l- -64|1,l+16|0)||(f[l+65|0]=32,DA(A,c,l+16|0)||LA(A,c,l+16|0,40,0,268435456,0)),d[l+16|0]||Aa(A,t,l+16|0),t=yA(s,l+16|0),!(r=d[0|t])|(0|r)==21||(e[l+56>>2]=0,e[l+60>>2]=0,Lt(A,t,l+56|0,-1,1&i))):(e[l>>2]=t,iA(t=l- -64|1,85485,l),DA(A,t,s));else{if(DA(A,c,s)||(f[l+65|0]=95,DA(A,l- -64|1,l+16|0)|e[A+212>>2]==25966))break e;Nn(85055),DA(e[47194],c,l+16|0)&&(f[0|s]=21,f[s+1|0]=0),rs(e[e[32972]+60>>2])}H=l+80|0}function Ve(A,t,r){var s=0,i=0,l=0,c=0;if(r&&(f[0|A]=t,f[(s=A+r|0)-1|0]=t,!(r>>>0<3||(f[A+2|0]=t,f[A+1|0]=t,f[s-3|0]=t,f[s-2|0]=t,r>>>0<7||(f[A+3|0]=t,f[s-4|0]=t,r>>>0<9||(i=(s=0-A&3)+A|0,t=O(255&t,16843009),e[i>>2]=t,e[(r=(s=r-s&-4)+i|0)-4>>2]=t,s>>>0<9||(e[i+8>>2]=t,e[i+4>>2]=t,e[r-8>>2]=t,e[r-12>>2]=t,s>>>0<25||(e[i+24>>2]=t,e[i+20>>2]=t,e[i+16>>2]=t,e[i+12>>2]=t,e[r-16>>2]=t,e[r-20>>2]=t,e[r-24>>2]=t,e[r-28>>2]=t,(r=s-(c=4&i|24)|0)>>>0<32))))))))for(s=At(t,0,1,1),l=he,t=i+c|0;e[t+24>>2]=s,e[t+28>>2]=l,e[t+16>>2]=s,e[t+20>>2]=l,e[t+8>>2]=s,e[t+12>>2]=l,e[t>>2]=s,e[t+4>>2]=l,t=t+32|0,(r=r-32|0)>>>0>31;);return A}function gt(){var A,t=0,r=0,s=0,i=0,l=0;if(H=A=H-208|0,(0|(s=e[50303]))>0)for(;(i=e[(r=201216+(t<<2)|0)>>2])&&(zA(i),e[r>>2]=0),(0|s)!=(0|(t=t+1|0)););if(e[50303]=0,e[A+16>>2]=137584,e[A+20>>2]=47,iA(t=A+32|0,87827,A+16|0),Gs(t,CA(t)+1|0,0),e[A+4>>2]=47,e[A>>2]=137584,iA(t,87933,A),Gs(t,CA(t)+1|0,1),t=e[50303],e[(r=t<<2)+201216>>2]=0,r=Tt(s=e[50741],r+4|0)){if(e[50741]=r,Sa(201216,t,7),s=e[50741],r=0,t=e[50304])for(i=0;l=e[t+4>>2],d[0|l]&&Ut(l+1|0,86589)&&Hr(e[t+8>>2],88032,3)&&(e[(r<<2)+s>>2]=t,r=r+1|0),t=e[201216+((i=i+1|0)<<2)>>2];);e[(r<<2)+s>>2]=0}return H=A+208|0,s}function nt(A,t,r){var s=0,i=0,l=0,c=0;if(l=t-1|0,(0|t)>=2){t=A;e:{for(;;){A:{r:{if((0|(s=e[r+4>>2]))!=(0|(i=e[r+8>>2]))){if((c=ba(s,10,i-s|0))?i=1+(c-(s=e[r+4>>2])|0)|0:(s=e[r+4>>2],i=e[r+8>>2]-s|0),rt(t,s,s=i>>>0<l>>>0?i:l),i=s+e[r+4>>2]|0,e[r+4>>2]=i,t=t+s|0,c||!(l=l-s|0))break A;if((0|i)!=e[r+8>>2]){e[r+4>>2]=i+1,s=d[0|i];break r}}if(!((0|(s=fn(r)))>=0)){if(s=0,(0|A)==(0|t))break e;if(16&d[0|r])break A;break e}}if(f[0|t]=s,t=t+1|0,(255&s)!=10&&(l=l-1|0))continue}break}A?(f[0|t]=0,s=A):s=0}}else if(t=e[r+72>>2],e[r+72>>2]=t-1|t,!l)return f[0|A]=0,A;return s}function jt(A){var t=0,r=0,s=0,i=0,l=0,c=0,g=0,p=0;if(t=O(A,44),(0|(A=e[t+137896>>2]))>0&&jt(A-1|0),A=e[36115],!((0|(t=e[(r=t+137856|0)+36>>2]))<=0)){if(i=e[r+32>>2],g=1&t,(0|t)!=1)for(p=-2&t,r=0;t=d[(l=(s=r<<4)+i|0)+10|0],e[144464+(t<<2)>>2]=l,(0|A)>=(0|t)?t=A:Ve(144464+((A=A+1|0)<<2)|0,0,t-A<<2),A=d[(s=(16|s)+i|0)+10|0],e[144464+(A<<2)>>2]=s,(0|A)<=(0|t)?A=t:Ve(144464+((t=t+1|0)<<2)|0,0,A-t<<2),r=r+2|0,(0|p)!=(0|(c=c+2|0)););else r=0;g&&(t=d[(r=(r<<4)+i|0)+10|0],e[144464+(t<<2)>>2]=r,(0|A)>=(0|t)||(Ve(144464+((A=A+1|0)<<2)|0,0,t-A<<2),A=t))}e[36115]=A}function Qr(A,t,r,s,i){var l,c=0,g=0,p=0;H=l=H-16|0;e:if(1&f[A+106|0]&&(c=d[0|r],!(!(1&f[s+2|0])&(0|c)!=46||256&(p=e[s+12>>2])|!(!(2&p)||i)||(_A(l+12|0,(0|c)!=46?r:r+2|0),!(c=d[0|r])|!d[r+1|0])))){if(!(!(p=e[l+12>>2])|2&d[s+2|0])){if(!Bt(p))break e;c=d[0|r]}(0|c)==46&&(f[0|r]=32),g=2,e[A+212>>2]!=26741|i||(r=Bt(e[l+12>>2])?K(A,r+2|0,0,0):0,128&d[A+8233|0]&&(!(!(i=e[l+12>>2])|2&d[s+2|0])&i-48>>>0>=10||(g=0)),g=32768&r?0:g,131072&r&&(g=163840&e[A+8232>>2]?34:d[t-2|0]!=45?g:0))}return H=l+16|0,g}function lr(A,t,r,s,i){var l,c=0,g=0;if(H=l=H-208|0,e[l+204>>2]=r,Ve(r=l+160|0,0,40),e[l+200>>2]=e[l+204>>2],(0|oA(0,t,l+200|0,l+80|0,r,s,i))<0)i=-1;else{e[A+76>>2]>=0,c=e[A>>2],e[A+72>>2]<=0&&(e[A>>2]=-33&c);e:{A:{if(e[A+48>>2]){if(e[A+16>>2])break A}else e[A+48>>2]=80,e[A+28>>2]=0,e[A+16>>2]=0,e[A+20>>2]=0,g=e[A+44>>2],e[A+44>>2]=l;if(r=-1,Ka(A))break e}r=oA(A,t,l+200|0,l+80|0,l+160|0,s,i)}g&&(KA[e[A+36>>2]](A,0,0),e[A+48>>2]=0,e[A+44>>2]=g,e[A+28>>2]=0,t=e[A+20>>2],e[A+16>>2]=0,e[A+20>>2]=0,r=t?r:-1),t=A,A=e[A>>2],e[t>>2]=A|32&c,i=32&A?-1:r}return H=l+208|0,i}function vr(A,t,r,s){var i,l=0,c=0,g=0,p=0,I=0,h=0,M=0;if(H=i=H-208|0,c=d[0|t])for(;f[l+i|0]=c,p=((255&c)==6&(0|g)!=21)+p|0,g=c<<24>>24,c=d[(l=l+1|0)+t|0];);if(f[l+i|0]=0,l=d[0|i])for(h=p-2|0,g=0,M=(0|s)<2,c=0;;){e:{A:if((255&l)!=6|M|(0|c)==21){if((0|(s=255&l))==255){if(!I|(0|r)<2)break e;s=r>>>0>2?11:(0|g)%3|0?23:11}c=s,s=g}else{if(l=g+1|0,d[A+169|0]){c=(0|l)>1?5:6,s=l;break A}if(c=6,s=p,(0|l)==(0|p))break A;c=(0|l)%3|0||(0|g)==(0|h)?5:6,s=l}g=s,f[0|t]=c,t=t+1|0}if(!(l=d[(I=I+1|0)+i|0]))break}(0|r)>=2&&(f[0|t]=11,t=t+1|0),f[0|t]=0,H=i+208|0}function kt(A,t){var r=0;r=0,A&&(r=e[50754],r=(A=(A=(0|O(e[145712+(t?12:((0|A)>199)<<2)>>2],A))/256|0)>>>0>(t=e[36430])>>>0?A:t)>>>0<=89999?(O(A,r)>>>0)/1e3|0:(O(A,(0|r)/25|0)>>>0)/40|0),(0|(A=e[36440]))<=0||(0|(t=e[36424]))<0||(e[(t=216192+(t<<4)|0)+4>>2]||(e[t+4>>2]=A),e[36440]=0),e[36426]=0,e[36439]=-1,e[36455]=e[50758],ie(),e[36427]=-1,A=216192+(e[50758]<<4)|0,e[A>>2]=5,e[A+4>>2]=r,A=e[50758]+1|0,e[50758]=(0|A)<=169?A:0,e[36426]=0,e[36438]&&(e[36438]=0,A=216192+(e[50758]<<4)|0,e[A>>2]=14,e[A+4>>2]=0,A=e[50758]+1|0,e[50758]=(0|A)<=169?A:0)}function Jt(A,t,r,s,i,l,c,g){var p,I=0,h=0,M=0;I=1,p=h=2147483647&s;e:if(!((M=(0|h)==2147418112)&!r?A|t:M&!!(0|r)|h>>>0>2147418112)&&!((M=(0|(h=2147483647&g))==2147418112)&!c?i|l:M&!!(0|c)|h>>>0>2147418112)){if(!(A|i|r|c|t|l|h|p))return 0;if((0|(I=s&g))>0|(0|I)>=0){if(I=-1,(0|r)==(0|c)&(0|s)==(0|g)?(0|t)==(0|l)&A>>>0<i>>>0|t>>>0<l>>>0:r>>>0<c>>>0&(0|s)<=(0|g)|(0|s)<(0|g))break e;return!!(A^i|r^c|t^l|s^g)}I=-1,((0|r)==(0|c)&(0|s)==(0|g)?(0|t)==(0|l)&A>>>0>i>>>0|t>>>0>l>>>0:r>>>0>c>>>0&(0|s)>=(0|g)|(0|s)>(0|g))||(I=!!(A^i|r^c|t^l|s^g))}return I}function os(A,t){var r=0,s=0,i=0,l=0;for(r=d[85836]|d[85837]<<8,f[0|t]=r,f[t+1|0]=r>>>8,f[t+2|0]=d[85838];;)if(i=d[0|A],A=r=A+1|0,(0|i)!=255){if(!i)break;if(!(s=e[144464+(i<<2)>>2]))continue;if(d[s+11|0]==1&&(l=d[s+14|0],!(y[s+8>>1]|l>>>0>4))){if(l>>>0<2)continue;f[0|t]=d[l+93943|0],t=t+1|0;continue}if(255&(A=e[s>>2]))for(;f[0|t]=A,t=t+1|0,s=65280&A,A=A>>>8|0,s;);if(A=r,(0|i)!=21||(32|(r=f[0|A]))-97>>>0>=26)continue;for(;f[0|t]=r,t=t+1|0,(32|(r=f[0|(A=A+1|0)]))-97>>>0<26;);}f[0|t]=0}function br(A,t){var r,s,i=0,l=0,c=0;H=r=H-112|0,A||(e[50303]||gt(),A=201216),Qt(i=r+16|0,t,40),e[r>>2]=47,e[r+4>>2]=i,iA(t=r- -64|0,87599,r),s=CA(t),c=-1;e:{A:{r:{if(l=e[A>>2]){t=0,i=-1;a:{for(;;){if(Pn(r+16|0,e[l>>2])){if(Pn(r+16|0,l=e[l+8>>2])?c=Pn(r- -64|0,l+(CA(l)-s|0)|0)?c:t:i=t,l=e[((t=t+1|0)<<2)+A>>2])continue;break a}break}if((0|t)>=0)break A;t=(0|i)<0?c:i;break r}if((0|(t=i))>=0)break r}t=c}if(i=0,(0|t)<0)break e}i=e[(t<<2)+A>>2]}return H=r+112|0,i}function _r(A,t){var r,s,i=0,l=0,c=0,g=0,p=0;H=r=H-16|0,F(+t),s=0|v(1),l=0|v(0),(0|(c=(i=2147483647&s)+-1048576|0))==2145386495|c>>>0<2145386495?(g=l<<28,c=i>>>4|0,i=(15&i)<<28|l>>>4,l=c+1006632960|0):(0|i)==2146435072|i>>>0>2146435072?(g=l<<28,i=(15&s)<<28|l>>>4,l=s>>>4|2147418112):i|l?(Gt(r,l,c=i,0,0,(i=i?be(i):be(l)+32|0)+49|0),p=e[r>>2],g=e[r+4>>2],c=15372-i<<16,i=e[r+8>>2],l=c|65536^e[r+12>>2]):(i=0,l=0),e[A>>2]=p,e[A+4>>2]=g,e[A+8>>2]=i,e[A+12>>2]=-2147483648&s|l,H=r+16|0}function Wt(A,t,r){var s=0,i=0;e:{A:{r:{if(!(3&((i=A)^t))){s=!!(0|r);a:if(!(!(3&t)|!r))for(;;){if(s=d[0|t],f[0|i]=s,!s)break e;if(i=i+1|0,s=!!(0|(r=r-1|0)),!(3&(t=t+1|0)))break a;if(!r)break}if(!s)break A;if(!d[0|t])break e;if(!(r>>>0<4))for(;;){if(~(s=e[t>>2])&s-16843009&-2139062144)break r;if(e[i>>2]=s,i=i+4|0,t=t+4|0,!((r=r-4|0)>>>0>3))break}}if(!r)break A}for(;;){if(s=d[0|t],f[0|i]=s,!s)break e;if(i=i+1|0,t=t+1|0,!(r=r-1|0))break}}r=0}return Ve(i,0,r),A}function Ir(A,t,r,s,i,l){var c,g=0,p=0,I=0;H=c=H-240|0,g=e[r>>2],e[c+232>>2]=g,r=e[r+4>>2],e[c>>2]=A,e[c+236>>2]=r,I=1;e:{A:{r:{if(r|(0|g)!=1){for(g=A;;){if((0|Za(r=g-e[(p=(s<<2)+l|0)>>2]|0,A,t))<=0){r=g;break r}a:{if(!((0|s)<2|i)&&(i=e[p-8>>2],(0|Za(p=g-4|0,r,t))>=0||(0|Za(p-i|0,r,t))>=0))break a;if(e[(I<<2)+c>>2]=r,li(g=c+232|0,i=dA(g)),I=I+1|0,s=s+i|0,i=0,g=r,e[c+236>>2]|e[c+232>>2]!=1)continue;break A}break}r=g;break A}r=A}if(i)break e}ri(c,I),Wa(r,t,s,l)}H=c+240|0}function wr(A,t){var r=0;e[4+((r=A<<2)+134912|0)>>2]=t,e[r+136192>>2]=t,r=28;e:{A:{r:switch(A-1|0){case 0:e[50792]=t,e[50786]=t,js(3);break A;case 1:e[50787]=t,e[33037]=(0|O(d[e[50797]+105596|0],(0|O(e[50787],55))/100|0))/16;break A;case 2:A=(0|t)>=99?99:t,e[50785]=(0|A)>0?A:0;break A;case 3:e[50788]=(0|t)>=99?99:t;break A;case 12:e[47268]=t;break A;case 6:e[47205]=t;break A;case 9:break A;case 8:break r;default:break e}(A=255&t)&&(e[e[47192]+152>>2]=A),e[47196]=t}r=0}return r}function Pt(A,t){var r=0,s=0,i=0;e:if(e[A>>2])for(;;){if(ar(e[A-4>>2])){if(s=0,(0|(r=f[0|t]))==e[A>>2])for(;(0|(r=f[(s=s+1|0)+t|0]))==e[(A=A+4|0)>>2];);if(!r){for(;t=A,A=A+4|0,ar(e[t>>2]););for(i=t+((e[t>>2]==61)<<2)|0;i=(A=i)+4|0,ar(e[A>>2]););A:switch((t=e[A>>2])-34|0){case 0:case 5:break e;default:break A}return ar(t)||e[A>>2]==47?102808:A}}if(!e[(A=A+4|0)>>2])break}return i}function cr(A,t,r,s){var i,l,c=0,g=0,p=0;return!d[A+25|0]|T[A+8>>3]!=r|T[A+16>>3]!=s?(T[A+16>>3]=s,T[A+8>>3]=r,s=(c=is(-3.141592653589793/(g=+e[A>>2])*s))*-c,T[A+48>>3]=s,c*=es(-6.283185307179586/g*r),c+=c,T[A+40>>3]=c,g=1-c-s,T[A+32>>3]=g,!(p=d[A+24|0])|r==0||(g=1/g,T[A+32>>3]=g,s*=r=-g,T[A+48>>3]=s,c*=r,T[A+40>>3]=c,p=1)):(p=d[A+24|0],s=T[A+48>>3],c=T[A+40>>3],g=T[A+32>>3]),f[A+25|0]=1,r=T[A+64>>3],i=T[A+56>>3],T[A+64>>3]=i,l=t,t=s*r+(g*t+c*i),T[A+56>>3]=p?l:t,t}function Yr(A,t,r,s,i){var l=0,c=0,g=0,p=0,I=0;if((g=e[34388])&&!((0|(c=e[34436]))>=(e[34393]-2|0))){if(e[34436]=c+1,l=O(c,36)+g|0,e[l>>2]=A,e[l+4>>2]=e[34437],I=e[34438],e[l+12>>2]=t>>>24,e[l+8>>2]=16777215&t,e[l+24>>2]=I,t=e[50754],i=e[34439]+((i-e[34392]|0)/2|0)|0,e[l+20>>2]=i,t=$(p=1e3*+(0|i)/+(0|t))<2147483648?~~p:-2147483648,e[l+16>>2]=t,A-3>>>0<=1)return void(e[28+(O(c,36)+g|0)>>2]=e[33282]+r);t=28+(O(c,36)+g|0)|0,e[t>>2]=r,(0|A)==7&&(e[t+4>>2]=s)}}function ur(A,t,r,s,i,l){var c=0,g=0,p=0,I=0;64&l?(t=31&(r=l+-64|0),(63&r)>>>0>=32?(r=0,t=i>>>t|0):(r=i>>>t|0,t=((1<<t)-1&i)<<32-t|s>>>t),s=0,i=0):l&&(p=s,c=31&(g=64-l|0),(63&g)>>>0>=32?(g=p<<c,I=0):(g=(1<<c)-1&p>>>32-c|i<<c,I=p<<c),p=t,t=31&l,(63&l)>>>0>=32?(c=0,t=r>>>t|0):(c=r>>>t|0,t=((1<<t)-1&r)<<32-t|p>>>t),t|=I,r=c|g,c=s,s=31&l,(63&l)>>>0>=32?(g=0,s=i>>>s|0):(g=i>>>s|0,s=((1<<s)-1&i)<<32-s|c>>>s),i=g),e[A>>2]=t,e[A+4>>2]=r,e[A+8>>2]=s,e[A+12>>2]=i}function kr(A){var t=0,r=0;if(!A){if(e[33174]&&(t=kr(e[33174])),e[33136]&&(t=kr(e[33136])|t),A=e[56816])for(;e[A+20>>2]!=e[A+28>>2]&&(t=kr(A)|t),A=e[A+56>>2];);return t}return e[A+76>>2]>=0,e[A+20>>2]==e[A+28>>2]||(KA[e[A+36>>2]](A,0,0),e[A+20>>2])?((0|(t=e[A+8>>2]))!=(0|(r=e[A+4>>2]))&&(t=r-t|0,KA[e[A+40>>2]](A,t,t>>31,1)),t=0,e[A+28>>2]=0,e[A+16>>2]=0,e[A+20>>2]=0,e[A+4>>2]=0,e[A+8>>2]=0):t=-1,t}function sr(A,t){var r=0,s=0,i=0,l=0,c=0;if((192&(r=d[0|t]))==128)for(;(192&(r=d[0|(t=t-1|0)]))==128;);e:if(128&(r=r<<24>>24)){if(s=1,(0|(i=224&r))!=192)if((240&r)!=224){if(s=3,(248&r)!=240){r&=255,s=0;break e}}else s=2,c=1;r=d[s+93846|0]&r,(l=d[t+1|0])?(r=63&l|r<<6,(0|i)!=192&&((i=d[t+2|0])?(r=63&i|r<<6,c||((t=d[t+3|0])?r=63&t|r<<6:s=2)):s=1)):s=0}return e[A>>2]=r,s+1|0}function qt(A,t,r,s){var i,l=0,c=0;return H=i=H-224|0,A?(e[i>>2]=137584,e[i+4>>2]=47,e[i+8>>2]=t,iA(t=i+16|0,85430,i),(0|(l=zs(t)))<0?t=vs(s,0-l|0,i+16|0):(t=$r(i+16|0,85659))?((c=e[A>>2])&&zA(c),l?(c=tt(l),e[A>>2]=c,c?(0|Gn(c,l,t))==(0|l)?(mr(t),t=0,r&&(e[r>>2]=l)):(r=e[56798],mr(t),zA(e[A>>2]),e[A>>2]=0,t=vs(s,r,i+16|0)):(mr(t),t=48)):(t=0,e[A>>2]=0)):t=vs(s,e[56798],i+16|0)):t=28,H=i+224|0,t}function _A(A,t){var r=0,s=0,i=0,l=0,c=0;if((192&(r=d[0|t]))==128)for(;(192&(r=d[0|(t=t+1|0)]))==128;);e:if(128&(r=r<<24>>24)){if(s=1,(0|(i=224&r))!=192)if((240&r)!=224){if(s=3,(248&r)!=240){r&=255,s=0;break e}}else s=2,c=1;r=d[s+93846|0]&r,(l=d[t+1|0])?(r=63&l|r<<6,(0|i)!=192&&((i=d[t+2|0])?(r=63&i|r<<6,c||((t=d[t+3|0])?r=63&t|r<<6:s=2)):s=1)):s=0}return e[A>>2]=r,s+1|0}function Gt(A,t,r,s,i,l){var c=0,g=0,p=0;64&l?(s=t,t=31&(i=l+-64|0),(63&i)>>>0>=32?(i=s<<t,s=0):(i=(1<<t)-1&s>>>32-t|r<<t,s<<=t),t=0,r=0):l&&(c=s,s=31&l,(63&l)>>>0>=32?(g=c<<s,p=0):(g=(1<<s)-1&c>>>32-s|i<<s,p=c<<s),c=t,s=31&(i=64-l|0),(63&i)>>>0>=32?(i=0,t=r>>>s|0):(i=r>>>s|0,t=((1<<s)-1&r)<<32-s|c>>>s),s=p|t,i|=g,t=31&l,(63&l)>>>0>=32?(g=c<<t,t=0):(g=(1<<t)-1&c>>>32-t|r<<t,t=c<<t),r=g),e[A>>2]=t,e[A+4>>2]=r,e[A+8>>2]=s,e[A+12>>2]=i}function Vr(A){var t=0;return A>>>0<=55295?t=d[e[125552+(A>>>6&67108860)>>2]+(255&A)|0]:(t=4,A>>>0<57344||(A>>>0<63488?t=3:A>>>0<=195327?t=d[e[126416+(A-63488>>>6&67108860)>>2]+(255&A)|0]:(t=2,A>>>0<917504||(A>>>0<=918015?t=d[e[128476+(A-917504>>>6&67108860)>>2]+(255&A)|0]:A>>>0<983040||(A>>>0<1048574?t=3:A>>>0<1048576||(t=3,A>>>0<1114110||(t=A>>>0<1114112?2:5))))))),255&t}function $a(A,t){var r=0,s=0,i=0,l=0,c=0,g=0,p=0,I=0,h=0;if(!((0|(r=e[33709]))<=0)){if(i=(0|A)>31?A-32|0:A,A=0,r>>>0>=4)for(h=-4&r;g=2|A,p=1|A,s=e[134912+((c=3|A)<<6)>>2]==(0|i)?c:e[134912+(g<<6)>>2]==(0|i)?g:e[134912+(p<<6)>>2]==(0|i)?p:e[134912+(A<<6)>>2]==(0|i)?A:s,A=A+4|0,(0|h)!=(0|(l=l+4|0)););if(l=3&r)for(;s=e[134912+(A<<6)>>2]==(0|i)?A:s,A=A+1|0,(0|l)!=(0|(I=I+1|0)););(0|s)<=0||(e[33709]=s,r=s)}Lr(t,r)}function $n(A){var t,r=0,s=0,i=0;for(H=t=H-96|0,Qt(t,A,60),en(t,1);i=Ms(f[0|(s=t+r|0)]),f[0|s]=i,r=r+1|0,255&i;);e[t+92>>2]=0,e[t+84>>2]=0,e[t+88>>2]=0,e[t+76>>2]=0,e[t+80>>2]=0,e[t+72>>2]=A;e:{A:{r:{if(ot(t,1)){if(d[202976])break r;break A}if(e[50303]||gt(),r=268437247,!(A=br(201216,t))||!ot(e[A+8>>2],0))break e;if(!d[202976])break A}ot(202976,2)}Fr(e[32972]),e[t+76>>2]=e[32972]+40,ja(t+72|0,202976),r=0}return H=t+96|0,r}function vn(A,t){if(!A)return 0;e:{A:{if(A){if(t>>>0<=127)break A;if(e[e[56841]>>2]){if(t>>>0<=2047){f[A+1|0]=63&t|128,f[0|A]=t>>>6|192,A=2;break e}if(!((-8192&t)!=57344&t>>>0>=55296)){f[A+2|0]=63&t|128,f[0|A]=t>>>12|224,f[A+1|0]=t>>>6&63|128,A=3;break e}if(t-65536>>>0<=1048575){f[A+3|0]=63&t|128,f[0|A]=t>>>18|240,f[A+2|0]=t>>>6&63|128,f[A+1|0]=t>>>12&63|128,A=4;break e}}else if((-128&t)==57216)break A;e[56798]=25,A=-1}else A=1;break e}f[0|A]=t,A=1}return A}function ei(A){var t=0,r=0,s=0,i=0;if(e[A+20>>2]=0,(s=(r=e[A+8>>2])-(t=e[A+4>>2])|0)>>>0>=9)for(;zA(e[t>>2]),t=e[A+4>>2]+4|0,e[A+4>>2]=t,(s=(r=e[A+8>>2])-t|0)>>>0>8;);i=512;e:switch((s>>>2|0)-1|0){case 1:i=1024;case 0:e[A+16>>2]=i;break;default:break e}if((0|t)!=(0|r)){for(;zA(e[t>>2]),(0|r)!=(0|(t=t+4|0)););(0|(t=e[A+8>>2]))!=(0|(r=e[A+4>>2]))&&(e[A+8>>2]=t+(3+(r-t|0)&-4))}(A=e[A>>2])&&zA(A)}function ba(A,t,r){var s=0,i=0;s=!!(0|r);e:{A:{r:if(!(!(3&A)|!r))for(i=255&t;;){if((0|i)==d[0|A])break A;if(s=!!(0|(r=r-1|0)),!(3&(A=A+1|0)))break r;if(!r)break}if(!s)break e;if(!(d[0|A]==(255&t)|r>>>0<4))for(s=O(255&t,16843009);;){if(~(i=s^e[A>>2])&i-16843009&-2139062144)break A;if(A=A+4|0,!((r=r-4|0)>>>0>3))break}if(!r)break e}for(t&=255;;){if((0|t)==d[0|A])return A;if(A=A+1|0,!(r=r-1|0))break}}return 0}function la(A,t){var r=0,s=0;e:{if(s=255&t){if(3&A)for(;;){if(!(r=d[0|A])|(0|r)==(255&t))break e;if(!(3&(A=A+1|0)))break}A:if(!(~(r=e[A>>2])&r-16843009&-2139062144))for(s=O(s,16843009);;){if(~(r^=s)&r-16843009&-2139062144)break A;if(r=e[A+4>>2],A=A+4|0,r-16843009&~r&-2139062144)break}for(;(s=d[0|(r=A)])&&(A=r+1|0,(0|s)!=(255&t)););return r}return CA(A)+A|0}return A}function Ai(A,t,r,s,i){var l,c=0,g=0;g=-1;e:if(!(((c=(0|(l=2147483647&s))==2147418112)&!r?A|t:c&!!(0|r)|l>>>0>2147418112)||(c=2147483647&i)>>>0>2147418112&(0|c)!=2147418112)){if(!(A|r|c|l|t))return 0;if((0|(c=s&i))>0|(0|c)>=0){if((!!(0|r)|(0|s)!=(0|i))&(0|s)<(0|i))break e;return!!(A|r|s^i|t)}(!r&(0|s)==(0|i)?A|t:!!(0|r)&(0|s)>=(0|i)|(0|s)>(0|i))||(g=!!(A|r|s^i|t))}return g}function en(A,t){var r,s=0;H=r=H+-64|0,f[202976]=0,e[r+48>>2]=47,iA(r+59|0,91351,r+48|0),t||(f[r+59|0]=0);e:{A:{if(A&&(A=Ns(A,43))){if(f[0|A]=0,f[0|(A=A+1|0)]-48>>>0>=10)break A;s=Us(A)}if((0|s)<=0)break e;if(s>>>0<=9){e[r+4>>2]=s,e[r>>2]=r+59,iA(202976,91378,r);break e}e[r+20>>2]=s-10,e[r+16>>2]=r+59,iA(202976,91503,r+16|0);break e}e[r+36>>2]=A,e[r+32>>2]=r+59,iA(202976,85425,r+32|0)}H=r- -64|0}function Ra(A){var t,r=0,s=0,i=0;H=t=H-80|0,r=QA(A,t+12|0),e[t+12>>2]?(Qt(s=t+16|0,r,60),r=0,en(s,1),!ot(s,0)|!d[202976]||ot(202976,2),Fr(e[32972]),ja(A,86012)):r=268437247,H=t+80|0;e:{A:{r:{a:{if((0|r)<=268437502){if(!r)break e;if((0|r)==268436479)break A;if((0|r)!=268437247)break a;return 2}if((0|r)==268437503|(0|r)==268437759)break r;if((0|r)==268439295)break e}return-1}return 2}i=1}return i}function Br(A,t,r,s,i,l,c,g,p){var I,h,M;p=At(t,r,g,p),g=he,i=At(s,i,l,c),s=he+g|0,g=i>>>0>(p=i+p|0)>>>0?s+1|0:s,I=c,h=r,c=(r=At(c,i=0,r,s=0))+p|0,p=he+g|0,M=c,r=r>>>0>c>>>0?p+1|0:p,c=At(l,0,t,0),g=he,s=At(l,p=0,h,s),l=he+p|0,l=s>>>0>(g=g+s|0)>>>0?l+1|0:l,s=r,l=l>>>0>(p=l+M|0)>>>0?s+1|0:s,r=At(t,0,I,i)+g|0,i=he,g=(i=r>>>0<g>>>0?i+1|0:i)+p|0,p=l,e[A+8>>2]=g,e[A+12>>2]=i>>>0>g>>>0?p+1|0:p,e[A>>2]=c,e[A+4>>2]=r}function yA(A,t){var r=0,s=0;e:{if(3&((s=A)^t))r=d[0|t];else{if(3&t)for(;;){if(r=d[0|t],f[0|s]=r,!r)break e;if(s=s+1|0,!(3&(t=t+1|0)))break}if(!(~(r=e[t>>2])&r-16843009&-2139062144))for(;e[s>>2]=r,r=e[t+4>>2],s=s+4|0,t=t+4|0,!(r-16843009&~r&-2139062144););}if(f[0|s]=r,255&r)for(;r=d[t+1|0],f[s+1|0]=r,s=s+1|0,t=t+1|0,r;);}return A}function es(A){var t,r=0,s=0;H=t=H-16|0,F(+A),s=0|v(1),v(0);e:if((s&=2147483647)>>>0<=1072243195){if(r=1,s>>>0<1044816030)break e;r=fa(A,0)}else if(r=A-A,!(s>>>0>=2146435072)){A:switch(3&xe(A,t)){case 0:r=fa(T[t>>3],T[t+8>>3]);break e;case 1:r=-ua(T[t>>3],T[t+8>>3],1);break e;case 2:r=-fa(T[t>>3],T[t+8>>3]);break e;default:break A}r=ua(T[t>>3],T[t+8>>3],1)}return H=t+16|0,A=r}function Bn(A,t,r,s){var i=0,l=0,c=0;if(!((CA(s)+CA(t)|0)>=(0|r))){for(c=e[36115],r=s;i=d[0|r];)if(r=r+1|0,!((0|i)>=(0|c))){e:{A:switch(i=e[144464+(i<<2)>>2],d[i+11|0]-1|0){case 1:break e;case 0:break A;default:continue}l=d[i+14|0]<4|l;continue}1&(d[i+4|0]>>>1|l)||(e[A+8212>>2]=e[A+8212>>2]+1),e[A+8208>>2]=e[A+8208>>2]+1,l=0}t&&Ur(t,s)}}function An(A){var t,r=0;H=t=H-16|0,F(+A),r=0|v(1),v(0);e:if((r&=2147483647)>>>0<=1072243195){if(r>>>0<1045430272)break e;A=ua(A,0,0)}else if(r>>>0>=2146435072)A-=A;else{A:switch(3&xe(A,t)){case 0:A=ua(T[t>>3],T[t+8>>3],1);break e;case 1:A=fa(T[t>>3],T[t+8>>3]);break e;case 2:A=-ua(T[t>>3],T[t+8>>3],1);break e;default:break A}A=-fa(T[t>>3],T[t+8>>3])}return H=t+16|0,A}function xn(A){var t=0;e[A+296>>2]=303173648,e[A+300>>2]=370677780,t=e[26341],e[A+304>>2]=e[26340],e[A+308>>2]=t,t=e[26343],e[A+312>>2]=e[26342],e[A+316>>2]=t,uA(A),e[A+56>>2]=2,e[A+36>>2]=3,e[A+40>>2]=1074,f[A+168|0]=5,e[A+132>>2]=32,e[A+104>>2]=1032,e[A+108>>2]=66,e[A+8>>2]=5,e[A+12>>2]=32,f[A+365|0]=64|d[A+365|0],f[A+368|0]=64|d[A+368|0],f[A+396|0]=64|d[A+396|0],f[A+399|0]=64|d[A+399|0]}function yn(A,t,r){var s=0,i=0,l=0;e:{if(!(s=e[r+16>>2])){if(Ka(r))break e;s=e[r+16>>2]}if(s-(l=e[r+20>>2])>>>0<t>>>0)return 0|KA[e[r+36>>2]](r,A,t);A:if(e[r+80>>2]<0)s=0;else{for(i=t;;){if(!(s=i)){s=0;break A}if(d[(i=s-1|0)+A|0]==10)break}if((i=0|KA[e[r+36>>2]](r,A,s))>>>0<s>>>0)break e;A=A+s|0,t=t-s|0,l=e[r+20>>2]}rt(l,A,t),e[r+20>>2]=e[r+20>>2]+t,i=t+s|0}return i}function tn(A){var t,r=0,s=0;e:{if((0|(t=e[34064]))>0)for(;;){if((s=e[136284+(r<<4)>>2])&&!Ut(A,s)){if(e[136276+(r<<4)>>2])return r;if(s=-1,Jr(0,r))break e;return r}if((0|t)==(0|(r=r+1|0)))break}s=-1,Jr(A,t)||(r=Tt(e[12+(136272+(e[34064]<<4)|0)>>2],CA(A)+1|0),s=e[34064],e[12+(136272+(s<<4)|0)>>2]=r,yA(r,A),e[34064]=s+1)}return s}function Dn(A,t){var r,s=0,i=0,l=0,c=0;for(H=r=H-16|0,f[0|t]=0,(s=15&e[A>>2])&&(t=(i=CA(t=yA(t,G(128496,64|s))))+t|0),s=8;;){e:{A:{if(s>>>0<=29){if(e[A>>2]>>>s&1)break A;break e}if(!(e[A+4>>2]>>>s-32&1)|s>>>0<32)break e}(0|(i=(c=CA(l=G(128496,s))+1|0)+i|0))>=80||(e[r>>2]=l,iA(t,84439,r),t=t+c|0)}if((0|(s=s+1|0))==64)break}H=r+16|0}function Tn(A,t,r){var s,i=0,l=0,c=0;if(H=s=H-16|0,d[0|A]){for(c=e[30450];;)if(l=A,A=A+1|0,!((0|(i=f[0|l]))==32|i-9>>>0<5)){for((0|(i=Us(l)))>0&&((0|i)<32?e[t>>2]=e[t>>2]|1<<i:(l=G(129568,r),e[s+4>>2]=i,e[s>>2]=l,Kt(c,84902,s)),l=A);l=(A=l)+1|0,(i=f[0|A])-48>>>0<10|(32|i)-97>>>0<26;);if(!i)break}}H=s+16|0}function rn(A,t,r){var s=0,i=0,l=0,c=0;e:if(t&&!((0|(i=r-4|0))<=0))for(l=(0|(r=e[t-4>>2]))!=34?(0|r)==39?r:0:r,r=0;;){if(c=r,!(r=e[t>>2]))break e;A:{if(!l){if((0|r)==32|r-9>>>0<5)break e;if((0|r)!=47)break A;break e}if((0|c)!=92&&(0|r)==(0|l))break e}if(t=t+4|0,!((0|i)>(0|(s=dr(r,A+s|0)+s|0))))break}return f[A+s|0]=0,s}function Bt(A){var t=0;e:if(!FA(A)){t=0;A:if(!(A>>>0<768)){if(A-2305>>>0<=1270){if((124&A)>>>0<100)break e;if(t=1,ii(93850,A))break A;return A-3450>>>0<6}if((0|A)==1541|A-1456>>>0<19|(0|A)==1648||(0|(t=-256&A))==10240|(0|t)==4352|A-3904>>>0<125|A>>>0<880)break e;t=1,A-1611>>>0<20||(t=A-12353>>>0<30400)}return t}return 1}function ja(A,t){var r=0;A?((r=e[A+4>>2])&&yA(133208,r),(r=e[A>>2])&&Qt(133168,r,40),e[33289]=d[A+14|0],e[33291]=d[A+13|0],e[33290]=d[A+12|0],Qt(134672,d[0|t]!=33|d[t+1|0]!=118?t:(d[t+2|0]==47?3:0)+t|0,40),A=e[50298],e[33678]=e[50297],e[33679]=A,A=e[50302],e[33682]=e[50301],e[33683]=A,A=e[50300],e[33680]=e[50299],e[33681]=A):Ve(133152,0,76)}function Ia(A,t,r,s){f[A+53|0]=1;e:if(e[A+4>>2]==(0|r)){f[A+52|0]=1;A:{if(!(r=e[A+16>>2])){if(e[A+36>>2]=1,e[A+24>>2]=s,e[A+16>>2]=t,(0|s)!=1)break e;if(e[A+48>>2]==1)break A;break e}if((0|t)==(0|r)){if((0|(r=e[A+24>>2]))==2&&(e[A+24>>2]=s,r=s),e[A+48>>2]!=1)break e;if((0|r)==1)break A;break e}e[A+36>>2]=e[A+36>>2]+1}f[A+54|0]=1}}function Hs(A,t){var r=0,s=0,i=0,l=0,c=0;e:if(r=e[t>>2])for(;;){s=0;A:if(A){for(;c=f[s+r|0],(i=e[(s<<2)+A>>2])&&(s=s+1|0,(0|c)==(0|i)););r:switch(i-34|0){case 0:case 5:break r;default:break A}if(!c)break e}if(!(r=e[((l=l+1|0)<<3)+t>>2]))break}return e[4+((l<<3)+t|0)>>2]}function ta(A,t){e:if((0|t)>=1024){if(A*=898846567431158e293,t>>>0<2047){t=t-1023|0;break e}A*=898846567431158e293,t=((0|t)>=3069?3069:t)-2046|0}else(0|t)>-1023||(A*=2004168360008973e-307,t>>>0>4294965304?t=t+969|0:(A*=2004168360008973e-307,t=((0|t)<=-2960?-2960:t)+1938|0));return x(0,0),x(1,t+1023<<20),A*+S()}function Os(A,t,r,s){var i,l,c,g=0;return H=l=H-16|0,e[l+12>>2]=s,H=i=H-160|0,c=t?A:i+158|0,e[i+144>>2]=c,g=-1,A=t-1|0,e[i+148>>2]=A>>>0<=t>>>0?A:0,A=Ve(i,0,144),e[A+76>>2]=-1,e[A+36>>2]=17,e[A+80>>2]=-1,e[A+44>>2]=A+159,e[A+84>>2]=A+144,(0|t)<0?e[56798]=61:(f[0|c]=0,g=lr(A,r,s,15,16)),H=A+160|0,H=l+16|0,g}function Pn(A,t){var r=0,s=0,i=0;e:if(r=d[0|A])for(;;){if(!(s=d[0|t])){i=r;break e}if((0|r)!=(0|s)&&(0|(s=r-65>>>0<26?32|r:r))!=(0|((r=d[0|t])-65>>>0<26?32|r:r))){i=d[0|A];break e}if(t=t+1|0,r=d[A+1|0],A=A+1|0,!r)break}return(i=(A=255&i)-65>>>0<26?32|A:A)-((A=d[0|t])-65>>>0<26?32|A:A)|0}function Gn(A,t,r){var s=0,i=0;if(s=e[r+72>>2],e[r+72>>2]=s-1|s,(0|(s=e[r+4>>2]))==(0|(i=e[r+8>>2]))?s=t:(rt(A,s,s=t>>>0>(s=i-s|0)>>>0?s:t),e[r+4>>2]=s+e[r+4>>2],A=A+s|0,s=t-s|0),s)for(;;){if(on(r)||!(i=0|KA[e[r+32>>2]](r,A,s)))return t-s|0;if(A=A+i|0,!(s=s-i|0))break}return t}function Us(A){for(var t=0,r=0,s=0,i=0;A=(t=A)+1|0,(0|(r=f[0|t]))==32|r-9>>>0<5;);e:{A:{r:switch((r=f[0|t])-43|0){case 0:break A;case 2:break r;default:break e}i=1}r=f[0|A],t=A}if(r-48>>>0<10)for(;s=48+(O(s,10)-f[0|t]|0)|0,A=f[t+1|0],t=t+1|0,A-48>>>0<10;);return i?s:0-s|0}function sn(A,t){var r,s,i,l=0;return H=r=H-32|0,e[t>>2]=0,e[t+4>>2]=0,e[(l=s=t+24|0)>>2]=0,e[l+4>>2]=0,e[(l=i=t+16|0)>>2]=0,e[l+4>>2]=0,e[(l=t+8|0)>>2]=0,e[l+4>>2]=0,e[r+28>>2]=t+28,e[r+24>>2]=s,e[r+20>>2]=t+20,e[r+16>>2]=i,e[r+12>>2]=t+12,e[r+8>>2]=l,e[r+4>>2]=t+4,e[r>>2]=t,A=$A(A,84553,r),H=r+32|0,A}function ti(A){var t=0,r=0,s=0;if((t=d[0|A])&&((r=d[A+1|0])?(r=t|r<<8,(t=d[A+2|0])&&(r|=t<<16,(A=d[A+3|0])&&(r|=A<<24))):r=t),(0|(t=e[36115]))>0)for(A=0;;){if(!(!(s=e[144464+(A<<2)>>2])|e[s>>2]!=(0|r)))return d[s+10|0];if((0|t)==(0|(A=A+1|0)))break}return 0}function Wa(A,t,r,s){var i,l=0,c=0,g=0,p=0,I=0;H=i=H-240|0,e[i>>2]=A,g=1;e:if(!((0|r)<2))for(l=A;;){if((0|Za(A,c=(l=l-4|0)-e[((p=r-2|0)<<2)+s>>2]|0,t))>=0&&(0|Za(A,l,t))>=0)break e;if(I=c,l=(c=(0|Za(c,l,t))>=0)?I:l,e[(g<<2)+i>>2]=l,g=g+1|0,!((0|(r=c?r-1|0:p))>1))break}ri(i,g),H=i+240|0}function iA(A,t,r){var s,i,l,c=0;return H=i=H-16|0,e[i+12>>2]=r,H=s=H-160|0,rt(l=s+8|0,124528,144),e[s+52>>2]=A,e[s+28>>2]=A,c=(c=-2-A|0)>>>0>2147483647?2147483647:c,e[s+56>>2]=c,A=A+c|0,e[s+36>>2]=A,e[s+24>>2]=A,A=_i(l,t,r),c&&(t=e[s+28>>2],f[t-((0|t)==e[s+24>>2])|0]=0),H=s+160|0,H=i+16|0,A}function ri(A,t){var r,s=0,i=0,l=0,c=0,g=0;if(s=4,H=r=H-256|0,(0|t)>=2)for(e[(g=(t<<2)+A|0)>>2]=r;;){for(l=s>>>0>=256?256:s,rt(e[g>>2],e[A>>2],l),i=0;c=(i<<2)+A|0,i=i+1|0,rt(e[c>>2],e[(i<<2)+A>>2],l),e[c>>2]=e[c>>2]+l,(0|t)!=(0|i););if(!(s=s-l|0))break}H=r+256|0}function DA(A,t,r){var s,i=0;return H=s=H-96|0,e[s+88>>2]=0,e[s+92>>2]=1073741824,e[s+84>>2]=t,t=gA(A,s+84|0,r,s+88|0,2,0),536870912&(i=e[s+88>>2])?(t=e[47202],e[47202]=0,f[s+2|0]=32,k[s>>1]=8192,Qt(i=3|s,e[s+84>>2],77),A=K(A,i,0,0),yA(r,189088),e[47202]=t):A=t?i:0,H=s+96|0,A}function Ks(A,t,r){var s=0,i=0,l=0;i=Xs(A),s=e[t>>2];e:{A:if((0|i)>=0){if(s){if(!Ut(A,r))break A;(l=e[s+688>>2])&&zA(l),zA(s),e[t>>2]=0}e[t>>2]=EA(A),A=yA(r,A),fs(r=e[t>>2],r+228|0,0)&&(rs(e[e[32972]+60>>2]),f[0|A]=0,i=-1),s=e[t>>2],e[s+292>>2]=i}else if(!s)break e;f[s+268|0]=0}return i}function an(A){var t=0,r=0;return(0|(t=e[A+76>>2]))>=0&(!t|e[56823]!=(-1073741825&t))?(r=e[(t=A+76|0)>>2],e[t>>2]=r||1073741823,(0|(r=e[A+4>>2]))==e[A+8>>2]?A=fn(A):(e[A+4>>2]=r+1,A=d[0|r]),e[t>>2]=0,A):(0|(t=e[A+4>>2]))!=e[A+8>>2]?(e[A+4>>2]=t+1,d[0|t]):fn(A)}function Hr(A,t,r){var s=0,i=0;e:{A:{if(r>>>0>=4){if(3&(A|t))break A;for(;;){if(e[A>>2]!=e[t>>2])break A;if(t=t+4|0,A=A+4|0,!((r=r-4|0)>>>0>3))break}}if(!r)break e}for(;;){if((0|(s=d[0|A]))==(0|(i=d[0|t]))){if(t=t+1|0,A=A+1|0,r=r-1|0)continue;break e}break}return s-i|0}return 0}function ls(A,t){var r,s=0,i=0,l=0;H=r=H-16|0,t?(Gt(r,i=((s=t>>31)^t)-s|0,0,0,0,(s=be(i))+81|0),i=0+e[r+8>>2]|0,s=(65536^e[r+12>>2])+(16414-s<<16)|0,l=-2147483648&t|(s=i>>>0<l>>>0?s+1|0:s),s=e[r+4>>2],t=e[r>>2]):t=0,e[A>>2]=t,e[A+4>>2]=s,e[A+8>>2]=i,e[A+12>>2]=l,H=r+16|0}function ca(A){var t,r=0,s=0,i=0;if((0|(r=la(A,61)))==(0|A))return 0;e:if(!d[(t=r-A|0)+A|0]&&(r=e[56800])&&(s=e[r>>2])){for(;;){if(Fn(A,s,t)||(s=e[r>>2]+t|0,d[0|s]!=61)){if(s=e[r+4>>2],r=r+4|0,s)continue;break e}break}i=s+1|0}return i}function Xs(A){var t=0,r=0;e:if(!((0|(r=e[34461]))<=0)){for(;;){if(!Ut(A,O(t,44)+137856|0)){e[34457]=t;break e}if((0|r)==(0|(t=t+1|0)))break}return-1}return(A=(0|t)==(0|r))?-1:((0|(A=A?-1:t))!=e[36114]&&(e[36115]=0,jt(A),e[36114]=A,e[36115]=e[36115]+1),t)}function Ya(A,t,r,s){var i=0,l=0;e:if((32|d[0|t])!=32){if(i=((0|s)>2)<<1,l=tr(A,t,r,i=(0|s)>1?4|i:i),d[0|r]!=21)for(i|=1,t=t+l|0,l=1;;){if((32|d[0|t])==32)break e;if(t=tr(A,t,r,i)+t|0,l=l+1|0,d[0|r]==21)break}return yA(189088,r),0}return vr(A,r,s,l),t}function dr(A,t){var r,s=0,i=0,l=0;if(A>>>0<=127)return f[0|t]=A,1;if(A>>>0>=1114112)return f[0|t]=32,1;for(s=O(r=A>>>0<2048?1:A>>>0<65536?2:3,6),f[0|t]=d[r+93842|0]|A>>>s;s=s-6|0,f[(i=i+1|0)+t|0]=A>>>s&63|128,(0|(l=l+1|0))!=(0|r););return r+1|0}function si(A){var t=0,r=0;e:{if((0|(t=e[A+12>>2]))>=e[A+16>>2]){if(t=0,(0|(r=0|ge(e[A+8>>2],A+24|0,2048)))<=0){if(!r|(0|r)==-44)break e;return e[56798]=0-r,0}e[A+16>>2]=r}r=t,t=A+t|0,e[A+12>>2]=r+y[t+40>>1],r=e[t+36>>2],e[A>>2]=e[t+32>>2],e[A+4>>2]=r,t=t+24|0}return t}function nn(A,t){var r,s=0;if(s=e[A+632>>2])return!!(0|Sr(s,t));e:{A:{if((0|(r=e[A+600>>2]))>0){if(s=0,(t=t-r|0)-1>>>0<255)break A;break e}if((s=t-192|0)>>>0<=413)return 128&d[344+(d[s+94240|0]+A|0)|0];if(s=0,t>>>0>255)break e}s=128&d[344+(A+t|0)|0]}return s}function ua(A,t,r){var s,i,l;return l=(s=A*A)*(s*s)*(158969099521155e-24*s-25050760253406863e-24)+(s*(27557313707070068e-22*s-.0001984126982985795)+.00833333333332249),i=s*A,r?A-(s*(.5*t-l*i)-t+.16666666666666632*i):i*(s*l-.16666666666666632)+A}function da(A,t){var r,s=0,i=0,l=0;H=r=H-16|0,t?(Gt(r,s=t,0,0,0,(t=be(t))+81|0),s=0+e[r+8>>2]|0,t=(65536^e[r+12>>2])+(16414-t<<16)|0,l=i>>>0>s>>>0?t+1|0:t,i=e[r+4>>2],t=e[r>>2]):t=0,e[A>>2]=t,e[A+4>>2]=i,e[A+8>>2]=s,e[A+12>>2]=l,H=r+16|0}function Va(A){var t,r=0;H=t=H-16|0,f[t+15|0]=10;e:{if(!(r=e[A+16>>2])){if(Ka(A))break e;r=e[A+16>>2]}(0|r)==(0|(r=e[A+20>>2]))|e[A+80>>2]==10?KA[e[A+36>>2]](A,t+15|0,1):(e[A+20>>2]=r+1,f[0|r]=10)}H=t+16|0}function on(A){var t,r=0;return r=e[A+72>>2],e[A+72>>2]=r-1|r,e[A+20>>2]!=e[A+28>>2]&&KA[e[A+36>>2]](A,0,0),e[A+28>>2]=0,e[A+16>>2]=0,e[A+20>>2]=0,4&(r=e[A>>2])?(e[A>>2]=32|r,-1):(t=e[A+44>>2]+e[A+48>>2]|0,e[A+8>>2]=t,e[A+4>>2]=t,r<<27>>31)}function wa(A){var t=0;e:{A:{r:{a:{if((0|(A=$n(A)))<=268437502){if(!A)break e;if((0|A)==268436479)break A;if((0|A)!=268437247)break a;return 2}if((0|A)==268437503|(0|A)==268437759)break r;if((0|A)==268439295)break e}return-1}return 2}t=1}return t}function CA(A){var t=0,r=0,s=0;e:{if(3&(t=A))for(;;){if(!d[0|t])break e;if(!(3&(t=t+1|0)))break}for(;r=t,t=t+4|0,!(~(s=e[r>>2])&s-16843009&-2139062144););for(;r=(t=r)+1|0,d[0|t];);}return t-A|0}function ps(A,t,r){var s,i=0,l=0,c=0;e[A+112>>2]=t,e[A+116>>2]=r,s=e[A+4>>2],i=e[A+44>>2]-s|0,e[A+120>>2]=i,e[A+124>>2]=i>>31,i=e[A+8>>2],t|r&&((0|r)>=(0|(c=(l=i-s|0)>>31))&t>>>0>=l>>>0|(0|r)>(0|c)||(i=t+s|0)),e[A+104>>2]=i}function ai(A,t){var r,s,i=0;if(F(+A),r=0|v(1),s=0|v(0),(0|(i=r>>>20&2047))!=2047){if(!i)return A==0?i=0:(A=ai(18446744073709552e3*A,t),i=e[t>>2]+-64|0),e[t>>2]=i,A;e[t>>2]=i-1022,x(0,0|s),x(1,-2146435073&r|1071644672),A=+S()}return A}function ni(A,t,r){return e[A+20>>2]!=e[A+28>>2]&&(KA[e[A+36>>2]](A,0,0),!e[A+20>>2])||(e[A+28>>2]=0,e[A+16>>2]=0,e[A+20>>2]=0,KA[e[A+40>>2]](A,t,r,0),(0|he)<0)?-1:(e[A+4>>2]=0,e[A+8>>2]=0,e[A>>2]=-17&e[A>>2],0)}function fa(A,t){var r,s,i=0;return(s=1-(i=.5*(r=A*A)))+(1-s-i+(r*(r*(r*(2480158728947673e-20*r-.001388888888887411)+.0416666666666666)+(i=r*r)*i*(r*(-11359647557788195e-27*r+2087572321298175e-24)-27557314351390663e-23))-A*t))}function Zs(A,t,r){var s=0,i=0;if(t)for(;r=r-1|0,i=A,A=Yi(A,t,10),s=he,f[0|r]=i-At(A,s,10,0)|48,i=t>>>0>9,t=s,i;);if(A)for(;t=(A>>>0)/10|0,f[0|(r=r-1|0)]=A-O(t,10)|48,s=A>>>0>9,A=t,s;);return r}function UA(A,t){var r=0,s=0,i=0;e:if(A){for(;i=f[t+r|0],(s=e[(r<<2)+A>>2])&&(r=r+1|0,(0|i)==(0|s)););A:switch(s-34|0){case 0:case 5:break A;default:break e}if(!i)return 0}return 1}function Qn(A,t,r){var s,i=0;return H=s=H-16|0,!(64&t)&&(i=0,4259840&~t)||(e[s+12>>2]=r+4,i=e[r>>2]),e[s>>2]=i,e[s+4>>2]=0,(A=0|le(-100,0|A,32768|t,0|s))>>>0>=4294963201&&(e[56798]=0-A,A=-1),H=s+16|0,A}function Fn(A,t,r){var s=0,i=0,l=0;if(!r)return 0;e:if(s=d[0|A]){for(;;){if((i=d[0|t])&&!(!(r=r-1|0)|(0|s)!=(0|i))){if(t=t+1|0,s=d[A+1|0],A=A+1|0,s)continue;break e}break}l=s}return(255&l)-d[0|t]|0}function ln(A,t){var r,s=0;H=s=H-128|0,s=Ve(s,0,128),f[s+98|0]=9,f[s+66|0]=9,f[s+34|0]=A,k[s+68>>1]=1,r=e[36125],e[s+104>>2]=r,e[s+72>>2]=r,e[s+40>>2]=e[144464+(A<<2)>>2],f[s+2|0]=9,e[s+8>>2]=r,VA(0,0,s+32|0,t,0),H=s+128|0}function ka(A){var t=0,r=0,s=0;if(f[e[A>>2]]-48>>>0>=10)return 0;for(;s=e[A>>2],r=-1,t>>>0<=214748364&&(r=(0|(r=f[0|s]-48|0))>(2147483647^(t=O(t,10)))?-1:r+t|0),e[A>>2]=s+1,t=r,f[s+1|0]-48>>>0<10;);return t}function Es(A,t){var r=0;if(!(!A|e[A>>2]-48>>>0>=10)){if(e[A>>2]-48>>>0<10)for(;r=(e[A>>2]+O(r,10)|0)-48|0,e[(A=A+4|0)>>2]-48>>>0<10;);(0|t)==1&&(r=(0|Ms(e[A>>2]))==115?O(r,1e3):r)}return r}function ar(A){var t=0;t=1;e:{A:switch(0|Vr(A)){case 30:if(t=0,(0|A)==160|(0|A)==8199|(0|A)==8239)break e;return 1;case 0:if(A-9>>>0<5)return 1;if((0|A)==133)break e;break;case 28:case 29:break e;default:break A}t=0}return t}function Ha(A,t,r){var s,i=0;return H=s=H-16|0,f[s+6|0]=0,f[s+7|0]=95,i=dr(i=t,t=s+8|0)+s|0,f[i+8|0]=32,f[i+9|0]=0,DA(A,s+7|0,r)||(f[s+7|0]=32,DA(A,t,r)||LA(A,t,r,20,0,0,0)),H=s+16|0,f[0|r]}function Sn(A){var t=0,r=0;r=170;e:if(!((0|A)<170))for(;;){if((0|A)==(0|r))return y[101616+(t<<1|2)>>1];if((2147483646&(t=t+2|0))==124)break e;if(!((0|(r=y[101616+(t<<1)>>1]))<=(0|A)))break}return 0}function At(A,t,r,s){var i,l,c,g,p=0,I=0;return g=O(p=r>>>16|0,I=A>>>16|0),p=(65535&(I=((c=O(i=65535&r,l=65535&A))>>>16|0)+O(I,i)|0))+O(p,l)|0,he=(O(t,r)+g|0)+O(A,s)+(I>>>16)+(p>>>16)|0,65535&c|p<<16}function Ms(A){var t=0,r=0,s=0,i=0;for(t=2778;;){if((0|(r=e[1040+((s=(t+i|0)/2|0)<<4)>>2]))==(0|A))return(t=e[1048+(s<<4)>>2])||A;if(!((0|(i=(r=A>>>0>r>>>0)?s+1|0:i))<=(0|(t=r?t:s-1|0))))break}return A}function Ua(A){var t=0,r=0,s=0,i=0;for(t=2778;;){if((0|(r=e[1040+((s=(t+i|0)/2|0)<<4)>>2]))==(0|A))return(t=e[1044+(s<<4)>>2])||A;if(!((0|(i=(r=A>>>0>r>>>0)?s+1|0:i))<=(0|(t=r?t:s-1|0))))break}return A}function zs(A){var t,r=0;return H=t=H-112|0,(A=0|ze(0|A,0|t))>>>0>=4294963201&&(e[56798]=0-A,A=-1),r=0-e[56798]|0,A||(r=-31,(61440&e[t+12>>2])!=16384&&(r=e[t+40>>2])),H=t+112|0,A=r}function cn(A,t,r){var s;if(!(s=e[A+16>>2]))return e[A+36>>2]=1,e[A+24>>2]=r,void(e[A+16>>2]=t);e:{if((0|t)==(0|s)){if(e[A+24>>2]!=2)break e;return void(e[A+24>>2]=r)}f[A+54|0]=1,e[A+24>>2]=2,e[A+36>>2]=e[A+36>>2]+1}}function xr(A,t,r,s,i){var l;if(H=l=H-256|0,!(73728&i|(0|r)<=(0|s))){if(Ve(l,255&t,(r=(s=r-s|0)>>>0<256)?s:256),!r)for(;Or(A,l,256),(s=s-256|0)>>>0>255;);Or(A,l,s)}H=l+256|0}function vs(A,t,r){var s=0;e:{if(A){if(s=e[A>>2]){zA(e[s+4>>2]),s=e[A>>2];break e}if(s=tt(16),e[A>>2]=s,s)break e;t=48}return t}return e[s>>2]=0,e[s+4>>2]=zn(r),A=e[A>>2],e[A+8>>2]=0,e[A+12>>2]=0,t}function mr(A){var t=0,r=0;kr(A),KA[e[A+12>>2]](A),1&f[0|A]||((t=e[A+52>>2])&&(e[t+56>>2]=e[A+56>>2]),(r=e[A+56>>2])&&(e[r+52>>2]=t),e[56816]==(0|A)&&(e[56816]=r),zA(e[A+96>>2]),zA(A))}function Bs(A){var t=0,r=0;t=1;e:{A:{r:{a:switch((r=Vr(A))-9|0){case 1:break e;case 6:case 18:break r;case 0:break a;default:break A}return(0|Ms(A))!=(0|A)}return rA(A,r)>>>15&1}t=0}return t}function un(A){var t,r,s,i=0,l=0;if(s=CA(A)+1|0,i=e[33282],(0|(r=(t=e[33287])+s|0))>=e[33286]){if(!(i=Tt(i,l=r+1e3|0)))return-1;e[33286]=l,e[33282]=i}return rt(i+t|0,A,s),e[33287]=r,t}function Ka(A){var t=0;return t=e[A+72>>2],e[A+72>>2]=t-1|t,8&(t=e[A>>2])?(e[A>>2]=32|t,-1):(e[A+4>>2]=0,e[A+8>>2]=0,t=e[A+44>>2],e[A+28>>2]=t,e[A+20>>2]=t,e[A+16>>2]=t+e[A+48>>2],0)}function On(A,t,r,s){e:if(A){A:switch(t+2|0){case 0:return void(f[0|A]=r);case 1:return void(k[A>>1]=r);case 2:case 3:return void(e[A>>2]=r);case 5:break A;default:break e}e[A>>2]=r,e[A+4>>2]=s}}function dn(A,t,r,s,i,l,c,g,p){var I;H=I=H-16|0,Rt(I,t,r,s,i,l,c,g,-2147483648^p),s=e[I>>2],r=e[I+4>>2],t=e[I+12>>2],e[A+8>>2]=e[I+8>>2],e[A+12>>2]=t,e[A>>2]=s,e[A+4>>2]=r,H=I+16|0}function Ut(A,t){var r=0,s=0;e:if(!(!(r=d[0|A])|(0|r)!=(0|(s=d[0|t]))))for(;;){if(s=d[t+1|0],!(r=d[A+1|0]))break e;if(t=t+1|0,A=A+1|0,(0|r)!=(0|s))break}return r-s|0}function G(A,t){var r=0,s=0,i=0;if(!(r=e[A>>2]))return 84399;if(e[A+4>>2]!=(0|t))for(;;){if(!(r=e[(s=A+8|0)>>2]))return 84399;if(i=A,A=s,e[i+12>>2]==(0|t))break}return r}function W(A,t,r){var s=0,i=0,l=0;e:if(r){for(;;){if(!(!(s=e[t>>2])|!(i=e[A>>2])|(0|s)!=(0|i))){if(t=t+4|0,A=A+4|0,r=r-1|0)continue;break e}break}l=i-s|0}return l}function Z(A){var t,r=0,s=0;if((0|(t=e[36115]))>0)for(;;){if(!(!(s=e[144464+(r<<2)>>2])|e[s>>2]!=(0|A)))return d[s+10|0];if((0|t)==(0|(r=r+1|0)))break}return 0}function se(A){var t,r;return(A=(t=e[33175])+(r=A+7&-8)|0)>>>0<=t>>>0&&r||A>>>0>U.byteLength/65536<<16>>>0&&!(0|kA(0|A))?(e[56798]=48,-1):(e[33175]=A,t)}function ce(A){var t=0;e:if(!((t=Vr(A))>>>0>27)){if(!(1<<t&134259072)){if((0|t)==6)return 1;if((0|t)!=9)break e;return(0|Ua(A))!=(0|A)}return rA(A,t)>>>14&1}return 0}function Te(A,t){var r=0;return f[0|A]=t>>>24,f[0|(r=(t>>>0>16777215)+A|0)]=t>>>16,f[0|(r=r+!!(16711680&t)|0)]=t>>>8,f[0|(r=r+!!(65280&t)|0)]=t,f[r+!!(255&t)|0]=0,A}function Ze(A,t){e:if((0|(A=wr(A,t)))<=268437502){if(!A|(0|A)==268436479|(0|A)!=268437247)break e;return}}function dA(A){var t=0;return t=e[A>>2]-1|0,(t=f[121600+(O(0-t&t,124511785)>>>27|0)|0])||(A=e[A+4>>2],t=(A=f[121600+(O(0-A&A,124511785)>>>27|0)|0])?A+32|0:0),t}function MA(A){var t=0,r=0,s=0;e:{if(!((t=Vr(A))>>>0>27)){if(r=1,116672&(s=1<<t))break e;if(134227968&s)return rA(A,t)>>>10&1}r=0}return r}function FA(A){var t=0,r=0,s=0;e:{if(!((t=Vr(A))>>>0>27)){if(r=1,34752&(s=1<<t))break e;if(134227968&s)return rA(A,t)>>>10&1}r=0}return r}function lt(){var A,t=0;(A=e[56797])&&((t=e[A+8>>2])&&KA[e[e[t>>2]+12>>2]](t),(t=e[A+4>>2])&&KA[e[e[t>>2]+16>>2]](t),zA(A)),e[56797]=0,e[56797]=Qs()}function Et(A,t){var r=0;return A&&(r=At(A,0,t,0),(A|t)>>>0<65536||(r=he?-1:r)),!(A=tt(r))|!(3&d[A-4|0])||Ve(A,0,r),A}function yt(A,t){var r,s;s=e[130128+(t-O(r=(0|t)/100|0,100)<<2)>>2],e[A+100>>2]=s,e[A+96>>2]=s,t+99>>>0>=199&&(e[A+100>>2]=e[130128+(r<<2)>>2])}function Fr(A){var t=0;(t=tt(1344))&&(A=rt(t,A,1344),t=216192+(e[50758]<<4)|0,e[t>>2]=11,e[t+8>>2]=A,A=e[50758]+1|0,e[50758]=(0|A)<=169?A:0)}function As(A,t){var r=0;e:if(r=e[A>>2])for(;;){if(t&&!Ut(t,r))break e;if(!(r=e[(A=A+8|0)>>2]))break}return e[A+4>>2]}function fn(A){var t,r=0;return H=t=H-16|0,r=-1,on(A)||(0|KA[e[A+32>>2]](A,t+15|0,1))==1&&(r=d[t+15|0]),H=t+16|0,r}function Sr(A,t){var r=0,s=0;if(t){for(;s=A,(r=e[A>>2])&&(A=s+4|0,(0|t)!=(0|r)););return r?s:0}return(Oi(A)<<2)+A|0}function ii(A,t){var r=0,s=0;if(r=y[A>>1])for(;;){if(s=s+1|0,(0|t)==(0|r))return s;if(!(r=y[(s<<1)+A>>1]))break}return 0}function oi(A,t){var r=0,s=0;t>>>0<=31?(s=e[A>>2],r=A+4|0):(t=t-32|0,r=A),r=e[r>>2],e[A>>2]=s<<t,e[A+4>>2]=r<<t|s>>>32-t}function li(A,t){var r=0,s=0;r=e[A+4>>2],t>>>0<=31?s=e[A>>2]:(t=t-32|0,s=r,r=0),e[A+4>>2]=r>>>t,e[A>>2]=r<<32-t|s>>>t}function ms(A){var t=0;A=A||1;e:{for(;;){if(t=tt(A))break e;if(!(t=e[57276]))break;KA[0|t]()}aA(),j()}return t}function ci(A){return A>>>0<=131071?d[117424+(A>>>3&31|d[117424+(A>>>8|0)|0]<<5)|0]>>>(7&A)&1:A>>>0<196606}function po(A,t,r,s,i,l,c,g,p){e[A>>2]=t,e[A+4>>2]=r,e[A+8>>2]=s,e[A+12>>2]=65535&i|(p>>>16&32768|i>>>16&32767)<<16}function Js(A,t,r){return r?(0|A)==(0|t)?1:!Ut(e[A+4>>2],e[t+4>>2]):e[A+4>>2]==e[t+4>>2]}function mo(A){var t=0;(0|(t=0|Se(-100,0|A,0)))==-31&&(t=0|de(0|A)),t>>>0>=4294963201&&(e[56798]=0-t)}function Si(){var A;A=tt(84)+80|0,e[A>>2]=125420,e[A>>2]=125380,e[A>>2]=125400,qe(0|A,125512,9),j()}function ui(A){var t,r;return t=an(A),r=an(A),an(A)<<16&16711680|r<<8&65280|255&t|an(A)<<24}function gn(A){var t=0;return A?(t=1,A-9472>>>0<160|A-65529>>>0<7||(t=ar(A)),t):0}function ho(A,t){var r;return r=t>>31,A=(e[A+76>>2],ni(A,t,r))}function Oi(A){var t=0,r=0;for(r=A;r=(t=r)+4|0,e[t>>2];);return t-A>>2}function Co(A,t){return f[0|A]=t,f[A+4|0]=0,f[A+3|0]=t>>>24,f[A+2|0]=t>>>16,f[A+1|0]=t>>>8,A}function ts(A,t){var r=0;return(-1>>>(r=31&t)&A)<<r|((r=A)&-1<<(A=0-t&31))>>>A}function pn(A,t){var r=0;return(0|A)==73&&(r=305,d[t+173|0])||(r=Ms(A)),r}function rs(A){e[36114]!=(0|A)&&(e[36115]=0,jt(A),e[36114]=A,e[36115]=e[36115]+1)}function zi(A){return A?e[34460]+A|0:(di(85328,20,e[30450]),e[32320])}function zn(A){var t,r;return(r=tt(t=CA(A)+1|0))?rt(r,A,t):0}function bo(){var A;e[33287]=0,(A=e[33282])&&(zA(A),e[33286]=0,e[33282]=0)}function Kt(A,t,r){var s;H=s=H-16|0,e[s+12>>2]=r,_i(A,t,r),H=s+16|0}function di(A,t,r){A=(e[r+76>>2],yn(A,t,r))}function Xa(A,t){return t?A<<24|(65280&A)<<8|A>>>8&65280|A>>>24:A}function mn(A){return A=A-8212>>>0>=12?ii(93856,A):1}function Io(A){var t=0;A&&((t=e[A+688>>2])&&zA(t),zA(A))}function wo(A){return A=(0|A)<=127?Ns(87712,A):0}function fi(A){return!(A=d[0|A]?1:Hr(A,A+1|0,3))}function ko(A){(A=(0|(A=0|ve(0|A)))!=27?A:0)&&(e[56798]=A)}function Za(A,t,r){return A|=0,t|=0,0|KA[0|(r|=0)](A,t)}function Ns(A,t){return A=la(A,t),d[0|A]==(255&t)?A:0}function Ni(A,t){return La(A,t,2147483647),he=fA,cA}function gi(A){return A?31-be(A-1^A)|0:32}function Or(A,t,r){32&d[0|A]||yn(t,r,A)}function Qt(A,t,r){f[(Wt(A,t,r)+r|0)-1|0]=0}function Nn(A){return Ks(A,188776,189328)}function Li(A,t){t|=0,e[(A|=0)+8>>2]=t}function _i(A,t,r){return lr(A,t,r,0,0)}function Eo(A){return e[(A|=0)+12>>2]}function Ri(A){return e[(A|=0)+16>>2]}function Mo(A){return e[(A|=0)+20>>2]}function ji(A){return e[(A|=0)+8>>2]}function Wi(A){return e[(A|=0)+4>>2]}function vo(A){return e[(A|=0)>>2]}function Yi(A,t,r){return La(A,t,r)}function Ln(A){(A|=0)&&zA(A)}function Ur(A,t){yA(CA(A)+A|0,t)}function Vi(A){return 0|(A|=0)}function Bo(A){return 0}function hn(A){zA(A|=0)}function Hi(A){}C(u=d,1024,""),C(u,45536,"HhYWFhgWFhYXExYaFhIWFg4ODg4ODg4ODg4WFhoaGhYWCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoXFhMZERkGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBhcaExo="),C(u,45664,""),C(u,81428,"ggAAAAAAAAIAAAAAAAAAAgAAAAAAAAAC"),C(u,81475,"AgAAAAAAACAAAAAAAAAAIA=="),C(u,81506,"IA=="),C(u,81522,"IAAAAAAAAAAg"),C(u,81618,"IA=="),C(u,81634,"IA=="),C(u,81650,"IAAAAAAAAAAg"),C(u,81682,"IAAAAAAAAAAgAAAAAAAAACAAAAAAAIAAAAAAAAAAgA=="),C(u,81728,"gAAAAAAAAACAAAAAAAAAAIA="),C(u,81760,"gAAAAAAAAACA"),C(u,81904,"gAAAAAAAAACAAAAAAAAAAIAAAAAAAAAAgAAAAAAAAACAAAAAAAAAAAAU"),C(u,81961,"FAAAAAAAAAAU"),C(u,81985,"FAAAAAAAAAAE"),C(u,82009,"BAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABA="),C(u,82097,"EAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABA="),C(u,82169,"EAAAAAAAAAAQAAAAAAAAABAAAAAAAACA"),C(u,82224,"gAAAAAAAAACA"),C(u,82272,"gAAAAAAAAACAAAAAAAAAAIAAAAAAAAAAgAAAAAAAAACAAAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABA=="),C(u,82353,"BAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABA=="),C(u,82393,"BAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAQAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAEAAAAAAAAABAAAAAAAAAABAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABA=="),C(u,82625,"BAAAAAAAAAAE"),C(u,82649,"BAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAQAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABA=="),C(u,83033,"BAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABA=="),C(u,83097,"BAAAAAAAAAAE"),C(u,83121,"BAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAEAAAAAAAAQAAAEAAAAAFAAAAQAAAAgEAAABAAAAAQQAAAAAAAACBAAAAAAAAAgEAAAAAAAAAAQAAAAAAAAABAAAAQAAAAgEAAAAAAAAAQQAAAAAAAAARAAAAAAAAAAEAAAAAAAAAAQA=="),C(u,83288,"QA=="),C(u,83303,"AkAAAAAAAAAQQAAAEAAAAIBAAAAAAAAACEA="),C(u,83352,"QAAAAAAAABBAAAAQAAAAgAAg"),C(u,83379,"gAAAAABAAACQggAAIEAAAJAAAAAAAAAAgAAAAABAAACQggAAIEAAAJCCAAAgAAAAgAAAAAAAAACAAAAAAAAAAIAAAAAAQAAAkIIAACBAAACQggAAIEAAAJCCAAAgQAAAkAAAAEBAAACQAAAAYEAAAJCCAABgQAAAkIIAACBAAACQggAAIEAAAJCCAAAgQAAAkIIAACBAAACQggAAIAAAAIAAAAAEAAAAAAAAAIAAAAAAAAAACAAAAAAAAAAEAAAAAAAAACAAAAAAAAAAQAAAAAAAAACAAAAAAAAAAIAAAAAAAAAAAkAAAAAAAAAQQAAAEAAAAIBAAAAAAAAABEAAAAAAAAAIAAAAgIIAAAAAAACAgAAAAAAAAIAAAAAAAAAAgIYAAAAAAACAhgAAAAAAAICAAAAAAAAAgIAAAAAAAACAggAAAAAAAICAAAAAAAAAgIAAAAAAAACAgAAAAAAAAICAAAAAAAAAgJIAAACAAACAggAAAIAAAICCAAAAAAAAgIIAAAAAAACAggAAAIAAAICCAAAAAAAAgIIAAAAAAACAggAAAAAAAICAAAAAAAAAgIAAAAAAAACAggAAAAAAAICGAAAAAAAAgIIAAAAAAACAhgAAAAAAAICCAAAAAAAAgIIAAAAAAACAggAAAAAAAICCAAAAAAAAgIAAAAAAAACAggAAAAAAAICAAAAAAAAAgIIAAAAAAACAggAAAAAAAICCAAAAAAAAgIAAAAAAAACAggAAAAAAAICGAAAAAAAAgJIAAAAAAACAhgAAAAAAAICAAAAAAAAAgIAAAAAAAACAhg=="),C(u,83999,""),C(u,93904,"ICAgICAgICAgICYlKyNTRFpBTCEgQD9KTktWP1RYP1dBQkNIRkdZPT0sLCcqICAAIAAhACIAsAIkACUA5gDIAigAKQB+AisAzAItAC4ALwBSAjEAMgBcAjQANQA2ADcAdQI5ANACsgI8AD0APgCUAlkCUQKyA+cA8ABbAkYAYgInAWoCXwJLAGsCcQJLAVQCpgNjAoACgwK4A4oCjAJTAccD+ACSAioDXABdAF4AXwBgAGEAYgBjAGQAZQBmAGECaABpAGoAawBsAG0AbgBvAHAAcQByAHMAdAB1AHYAdwB4AHkAegB7AHwAfQADA38APT0sLCcnAAMCBAUGBxoAAAAAAQECAwMEBQYHBwgJCgsAAAEBAgIDAwQFBgcHCAkKAAABAgMDAwQFBgcHBwgJClNldFdvcmRTdHJlc3MA5ADrAO8A9gD8AP8AAAAAAAAAYWFhYWFhYWNlZWVlaWlpaWRub29vb28Ab3V1dXV5dHNhYWFhYWFhY2VlZWVpaWlpZG5vb29vbwBvdXV1dXl0eWFhYWFhYWNjY2NjY2NjZGRkZGVlZWVlZWVlZWVnZ2dnZ2dnZ2hoaGhpaWlpaWlpaWlpaWlqamtra2xsbGxsbGxsbGxubm5ubm5ubm5vb29vb29vb3JycnJycnNzc3Nzc3NzdHR0dHR0dXV1dXV1dXV1dXV1d3d5eXl6enp6enpzYmJiYgAAb2NjZGRkZGRlZWVmZmdnaGlpa2tsbG1ubm9vb29vcHB5AABzc3R0dHR1dXV2eXl6enp6enp6AAAAd3R0dGtkZGRsbGxubm5hYWlpb291dXV1dXV1dXV1ZWFhYWFhYWdnZ2dra29vb296empkZGRnZ3d3bm5hYWFhb29hYWFhZWVlZWlpaWlvb29vcnJycnV1dXVzc3R0eXloaG5kb296emFhZWVvb29vb29vb3l5bG50amRxYWNjbHRzegAAYnV2ZWVqanFxcnJ5eWFhYWJvY2RkZWVlZWVl"),C(u,94846,"TG9va3VwRGljdDIAAAAAAAAAgACBAIIAgwCEAIUAhgCHAIgAiQCKAIsAjACNAI4AjwCQAJEAkgCTAJQAlQCWAJcAmACZAJoAmwCcAJ0AngCfAKAAoQCiAKMApAClAKYApwCoAKkAqgCrAKwArQCuAK8AsACxALIAswC0ALUAtgC3ALgAuQC6ALsAvAC9AL4AvwDAAMEAwgDDAMQAxQDGAMcAyADJAMoAywDMAM0AzgDPANAA0QDSANMA1ADVANYA1wDYANkA2gDbANwA3QDeAN8A4ADhAOIA4wDkAOUA5gDnAOgA6QDqAOsA7ADtAO4A7wDwAPEA8gDzAPQA9QD2APcA+AD5APoA+wD8AP0A/gD/AIAAgQCCAIMAhACFAIYAhwCIAIkAigCLAIwAjQCOAI8AkACRAJIAkwCUAJUAlgCXAJgAmQCaAJsAnACdAJ4AnwCgAAQB2AJBAaQAPQFaAacAqABgAV4BZAF5Aa0AfQF7AbAABQHbAkIBtAA+AVsBxwK4AGEBXwFlAXoB3QJ+AXwBVAHBAMIAAgHEADkBBgHHAAwByQAYAcsAGgHNAM4ADgEQAUMBRwHTANQAUAHWANcAWAFuAdoAcAHcAN0AYgHfAFUB4QDiAAMB5AA6AQcB5wANAekAGQHrABsB7QDuAA8BEQFEAUgB8wD0AFEB9gD3AFkBbwH6AHEB/AD9AGMB2QKAAIEAggCDAIQAhQCGAIcAiACJAIoAiwCMAI0AjgCPAJAAkQCSAJMAlACVAJYAlwCYAJkAmgCbAJwAnQCeAJ8AoAAmAdgCowCkAP3/JAGnAKgAMAFeAR4BNAGtAP3/ewGwACcBsgCzALQAtQAlAbcAuAAxAV8BHwE1Ab0A/f98AcAAwQDCAP3/xAAKAQgBxwDIAMkAygDLAMwAzQDOAM8A/f/RANIA0wDUACAB1gDXABwB2QDaANsA3ABsAVwB3wDgAOEA4gD9/+QACwEJAecA6ADpAOoA6wDsAO0A7gDvAP3/8QDyAPMA9AAhAfYA9wAdAfkA+gD7APwAbQFdAdkCgACBAIIAgwCEAIUAhgCHAIgAiQCKAIsAjACNAI4AjwCQAJEAkgCTAJQAlQCWAJcAmACZAJoAmwCcAJ0AngCfAKAABAE4AVYBpAAoATsBpwCoAGABEgEiAWYBrQB9Aa8AsAAFAdsCVwG0ACkBPAHHArgAYQETASMBZwFKAX4BSwEAAcEAwgDDAMQAxQDGAC4BDAHJABgBywAWAc0AzgAqARABRQFMATYB1ADVANYA1wDYAHIB2gDbANwAaAFqAd8AAQHhAOIA4wDkAOUA5gAvAQ0B6QAZAesAFwHtAO4AKwERAUYBTQE3AfQA9QD2APcA+ABzAfoA+wD8AGkBawHZAoAAgQCCAIMAhACFAIYAhwCIAIkAigCLAIwAjQCOAI8AkACRAJIAkwCUAJUAlgCXAJgAmQCaAJsAnACdAJ4AnwCgAAEEAgQDBAQEBQQGBAcECAQJBAoECwQMBK0ADgQPBBAEEQQSBBMEFAQVBBYEFwQYBBkEGgQbBBwEHQQeBB8EIAQhBCIEIwQkBCUEJgQnBCgEKQQqBCsELAQtBC4ELwQwBDEEMgQzBDQENQQ2BDcEOAQ5BDoEOwQ8BD0EPgQ/BEAEQQRCBEMERARFBEYERwRIBEkESgRLBEwETQROBE8EFiFRBFIEUwRUBFUEVgRXBFgEWQRaBFsEXASnAF4EXwSAAIEAggCDAIQAhQCGAIcAiACJAIoAiwCMAI0AjgCPAJAAkQCSAJMAlACVAJYAlwCYAJkAmgCbAJwAnQCeAJ8AoAD9//3//f+kAP3//f/9//3//f/9//3/DAatAP3//f/9//3//f/9//3//f/9//3//f/9//3/Gwb9//3//f8fBv3/IQYiBiMGJAYlBiYGJwYoBikGKgYrBiwGLQYuBi8GMAYxBjIGMwY0BjUGNgY3BjgGOQY6Bv3//f/9//3//f9ABkEGQgZDBkQGRQZGBkcGSAZJBkoGSwZMBk0GTgZPBlAGUQZSBv3//f/9//3//f/9//3//f/9//3//f/9//3/gACBAIIAgwCEAIUAhgCHAIgAiQCKAIsAjACNAI4AjwCQAJEAkgCTAJQAlQCWAJcAmACZAJoAmwCcAJ0AngCfAKAAGCAZIKMArCCvIKYApwCoAKkAegOrAKwArQD9/xUgsACxALIAswCEA4UDhgO3AIgDiQOKA7sAjAO9AI4DjwOQA5EDkgOTA5QDlQOWA5cDmAOZA5oDmwOcA50DngOfA6ADoQP9/6MDpAOlA6YDpwOoA6kDqgOrA6wDrQOuA68DsAOxA7IDswO0A7UDtgO3A7gDuQO6A7sDvAO9A74DvwPAA8EDwgPDA8QDxQPGA8cDyAPJA8oDywPMA80DzgP9/4AAgQCCAIMAhACFAIYAhwCIAIkAigCLAIwAjQCOAI8AkACRAJIAkwCUAJUAlgCXAJgAmQCaAJsAnACdAJ4AnwCgAP3/ogCjAKQApQCmAKcAqACpANcAqwCsAK0ArgCvALAAsQCyALMAtAC1ALYAtwC4ALkA9wC7ALwAvQC+AP3//f/9//3//f/9//3//f/9//3//f/9//3//f/9//3//f/9//3//f/9//3//f/9//3//f/9//3//f/9//3//f8XINAF0QXSBdMF1AXVBdYF1wXYBdkF2gXbBdwF3QXeBd8F4AXhBeIF4wXkBeUF5gXnBegF6QXqBf3//f8OIA8g/f+AAIEAggCDAIQAhQCGAIcAiACJAIoAiwCMAI0AjgCPAJAAkQCSAJMAlACVAJYAlwCYAJkAmgCbAJwAnQCeAJ8AoAChAKIAowCkAKUApgCnAKgAqQCqAKsArACtAK4ArwCwALEAsgCzALQAtQC2ALcAuAC5ALoAuwC8AL0AvgC/AMAAwQDCAMMAxADFAMYAxwDIAMkAygDLAMwAzQDOAM8AHgHRANIA0wDUANUA1gDXANgA2QDaANsA3AAwAV4B3wDgAOEA4gDjAOQA5QDmAOcA6ADpAOoA6wDsAO0A7gDvAB8B8QDyAPMA9AD1APYA9wD4APkA+gD7APwAMQFfAf8AgACBAIIAgwCEAIUAhgCHAIgAiQCKAIsAjACNAI4AjwCQAJEAkgCTAJQAlQCWAJcAmACZAJoAmwCcAJ0AngCfAKAABAESASIBKgEoATYBpwA7ARABYAFmAX0BrQBqAUoBsAAFARMBIwErASkBNwG3ADwBEQFhAWcBfgEVIGsBSwEAAcEAwgDDAMQAxQDGAC4BDAHJABgBywAWAc0AzgDPANAARQFMAdMA1ADVANYAaAHYAHIB2gDbANwA3QDeAN8AAQHhAOIA4wDkAOUA5gAvAQ0B6QAZAesAFwHtAO4A7wDwAEYBTQHzAPQA9QD2AGkB+ABzAfoA+wD8AP0A/gA4AYAAgQCCAIMAhACFAIYAhwCIAIkAigCLAIwAjQCOAI8AkACRAJIAkwCUAJUAlgCXAJgAmQCaAJsAnACdAJ4AnwCgAAEOAg4DDgQOBQ4GDgcOCA4JDgoOCw4MDg0ODg4PDhAOEQ4SDhMOFA4VDhYOFw4YDhkOGg4bDhwOHQ4eDh8OIA4hDiIOIw4kDiUOJg4nDigOKQ4qDisOLA4tDi4OLw4wDjEOMg4zDjQONQ42DjcOOA45DjoO/f/9//3//f8/DkAOQQ5CDkMORA5FDkYORw5IDkkOSg5LDkwOTQ5ODk8OUA5RDlIOUw5UDlUOVg5XDlgOWQ5aDlsO/f/9//3//f+AAIEAggCDAIQAhQCGAIcAiACJAIoAiwCMAI0AjgCPAJAAkQCSAJMAlACVAJYAlwCYAJkAmgCbAJwAnQCeAJ8AoAAdIKIAowCkAB4gpgCnANgAqQBWAasArACtAK4AxgCwALEAsgCzABwgtQC2ALcA+AC5AFcBuwC8AL0AvgDmAAQBLgEAAQYBxADFABgBEgEMAckAeQEWASIBNgEqATsBYAFDAUUB0wBMAdUA1gDXAHIBQQFaAWoB3AB7AX0B3wAFAS8BAQEHAeQA5QAZARMBDQHpAHoBFwEjATcBKwE8AWEBRAFGAfMATQH1APYA9wBzAUIBWwFrAfwAfAF+ARkggACBAIIAgwCEAIUAhgCHAIgAiQCKAIsAjACNAI4AjwCQAJEAkgCTAJQAlQCWAJcAmACZAJoAmwCcAJ0AngCfAKAAAh4DHqMACgELAQoepwCAHqkAgh4LHvIerQCuAHgBHh4fHiABIQFAHkEetgBWHoEeVx6DHmAe8x6EHoUeYR7AAMEAwgDDAMQAxQDGAMcAyADJAMoAywDMAM0AzgDPAHQB0QDSANMA1ADVANYAah7YANkA2gDbANwA3QB2Ad8A4ADhAOIA4wDkAOUA5gDnAOgA6QDqAOsA7ADtAO4A7wB1AfEA8gDzAPQA9QD2AGse+AD5APoA+wD8AP0AdwH/AIAAgQCCAIMAhACFAIYAhwCIAIkAigCLAIwAjQCOAI8AkACRAJIAkwCUAJUAlgCXAJgAmQCaAJsAnACdAJ4AnwCgAKEAogCjAKwgpQBgAacAYQGpAKoAqwCsAK0ArgCvALAAsQCyALMAfQG1ALYAtwB+AbkAugC7AFIBUwF4Ab8AwADBAMIAwwDEAMUAxgDHAMgAyQDKAMsAzADNAM4AzwDQANEA0gDTANQA1QDWANcA2ADZANoA2wDcAN0A3gDfAOAA4QDiAOMA5ADlAOYA5wDoAOkA6gDrAOwA7QDuAO8A8ADxAPIA8wD0APUA9gD3APgA+QD6APsA/AD9AP4A/wCAAIEAggCDAIQAhQCGAIcAiACJAIoAiwCMAI0AjgCPAJAAkQCSAJMAlACVAJYAlwCYAJkAmgCbAJwAnQCeAJ8AoAAEAQUBQQGsIB4gYAGnAGEBqQAYAqsAeQGtAHoBewGwALEADAFCAX0BHSC2ALcAfgENARkCuwBSAVMBeAF8AcAAwQDCAAIBxAAGAcYAxwDIAMkAygDLAMwAzQDOAM8AEAFDAdIA0wDUAFAB1gBaAXAB2QDaANsA3AAYARoC3wDgAOEA4gADAeQABwHmAOcA6ADpAOoA6wDsAO0A7gDvABEBRAHyAPMA9ABRAfYAWwFxAfkA+gD7APwAGQEbAv8AgACBAIIAgwCEAIUAhgCHAIgAiQCKAIsAjACNAI4AjwCQAJEAkgCTAJQAlQCWAJcAmACZAJoAmwCcAJ0AngCfAKAABAEFAUEBrCAeIGABpwBhAakAGAKrAHkBrQB6AXsBsACxAAwBQgF9AR0gtgC3AH4BDQEZArsAUgFTAXgBfAHAAMEAwgACAcQABgHGAMcAyADJAMoAywDMAM0AzgDPABABQwHSANMA1ABQAdYAWgFwAdkA2gDbANwAGAEaAt8A4ADhAOIAAwHkAAcB5gDnAOgA6QDqAOsA7ADtAO4A7wARAUQB8gDzAPQAUQH2AFsBcQH5APoA+wD8ABkBGwL/AP3//f/9//3//f/9//3//f/9//3//f/9//3//f/9//3//f/9//3//f/9//3//f/9//3//f/9//3//f/9//3//f/9/wEJAgkDCQUJBgkHCQgJCQkKCQsJDgkPCRAJDQkSCRMJFAkRCRUJFgkXCRgJGQkaCRsJHAkdCR4JHwkgCSEJIgkjCSQJJQkmCScJKAkpCSoJKwksCS0JLgkvCV8JMAkxCTIJMwk0CTUJNgk3CTgJOQkgAD4JPwlACUEJQglDCUYJRwlICUUJSglLCUwJSQlNCTwJZAn9//3//f/9//3/IAAwADEAMgAzADQANQA2ADcAOAA5AP3//f/9//3//f8CAAAAAAAAAAEAAAADAAAA//36+Pb08vDu7Oro5uTi4N7c2tjW1NLQzszKyMbEwsC+vLq4trSysK6sqqimpKKgnpyamJaUkpCOjIqIhoSCgH58enh2dHJwbmxqaGZkYmBeXFpYVlRSUE5MSkhGREJAPjw6ODY0MjAuLCooJiQiIB4cGhgWFBIQDgwKCAYEAgAAAgQGCAoMDhASFBYYGhweICIkJigqLC4wMjQ2ODo8PkBCREZISkxOUFJUVlhaXF5gYmRmaGpsbnBydHZ4enx+gIKEhoiKjI6QkpSWmJqcnqCipKaoqqyusLK0tri6vL7AwsTGyMrMztDS1NbY2tze4OLk5ujq7O7w8vT2+Pr9///06uDWzMO6saifl4+Hf3hxamNcVlBKRD85NC8rJiIeGhcTEA0LCAYEAgEAAAAAAAAAAQIDBAUHCAoMDhATFRcaHR8iJSgsLjAyNDY5Oz1AQkVHSkxPUVRXWl1fYmVoa25xdHh7foGFiIuPkpaZnaCkqKyvs7e7v8PHy8/T19vgz8zJxsPAvbm0sKunopyXkoyGgXt1b2ljXVdQSkQ+ODMtJyIcFxINCAQCAgEAAAAAAAEBAgMEBQcICgwNDxIUFhkbHiEkJyotMDQ2ODo8P0FDRkhLTVBSVVhaXWBjZmlsb3J1eHt+gYWIi4+SlpmdoKSorK+zt7u/w8fLz9PX2+D/+fTu6eTf2tXQy8bBvbizr6qmoZ2ZlZCMiISAfXl1cW5qZ2NgXVlWU1BNSkdEQT48OTc0Mi8tKygmJCIgHhwaGRcVFBIRDw4NDAoJCAcGBQUEAwICAQE="),C(u,99845,"AQECAgMEBAUGBwgJCgsMDg8QEhMVFxgaHB4g0M7NzMrIx8XDwcC9u7i1s7CtqqejoJ2ZlpKPi4eEgHx4dHBtaWVhXVlVUU1KRkI+Ozc0MS8tKigmJCIgHhwaGRcVFBIRDw4NDAoJCAcGBQUEAwICAQE="),C(u,99973,"AQECAgMEBAUGBwgJCgsMDg8QEhMVFxgaHB4gmJmZmpydn6Gkp6mssLO2ur7BxcnN0dTY3N/j5urt8PL19/n7/P3+/v////////79+/r49vPx7uzp5uTg3drX09DMyMTAvLi0sKyno5+alpGNiIR/e3ZybWllYFxYVFBMSERAPDk1Mi8rKCYjIB0aFxUSDw0KCAcFAwIBAAAAAAD+///////+/fz6+Pb08e7r6OXh3trW0s3JxL+6trCrpqGclpGLhoB7dW9qZF9ZVE9JRD86NTArJiIdGRURDQoHBAMBAAAAAAAAAAABAQIEBQcJCw0QEhUYGx4iJSktMTU6PkNITFFXW15iZWhrbnF0dnh7fH6AgYKDg4SEg4OCgXJycXFwb21samhmZGFfXFpXVFFOS0hFQj87ODUyLywpJiMgHRsYFhQSEA4MCwoJCAcHBwcHBgUFBQUFBQUFBQYHBwgJCgwNDxASFBYYGx0gIyYpLC8zNzs/Q0dMUVZbYGVqb3R5f4SJj5Wboaets7rAx87V3OPq8fX3+vz9/v///v79/fz7+/r6+fj49/f29vX09PPz8vLx8PDv7u7t7Ovq6uno5+bl5OPi4eDe3dzb2djW1dPS0M7My8nHxcPAvry5t7Wyr62qp6ShnpqXlJCNiYWBfXl1cW1oZGFeW1dUUU1KRkNAPDk1Mi4qJyMfHBgUEQ0LCQcFBAMCAQAAAAAAAAAAAQEBAgIDAwQEBQYGBwgICQoLDAwNDg8QERITFBYXGBkbHB0fICIjJSYoKSstLzAyNDY4Ojw+QEJER0lLTlBSVVdaXV9iZWdqbXBzdnl8f4KGiYyQk5aanaCjpqmsr7K1uLu+wcTHys3Q09bZ3N/i5Ofp7O7w8vT2+Pr7/X9/f4CBg4SHiYyPkpaZnaGlqq6yt7vAxcnN0tba3uLm6u3w8/X4+vv8/f7+/fz7+ff08Ozn4tzVzsa9tKmekoiCfXdybGZgWlROSUI8NzItKCQfGxgUEQ4MCQcGBQQEBAQFBggKDRAUGB0jKS83PkdQWmRwfIOFiIqMjo+RkpOTAEAIAEYSAAAAAAAAGAwAAARQEgZOFgAAAAAAACI0AAAEWBYGUhYAAAAAAAAiQAAAAFwIAFxQAAAAAAAATAgBAABWBABeQgAAAAAAACIKAAAAPgoAPhQAAAAAAAAcEAAABEQSBkQWAAAAAAAAHiwAAAZAEABCIAAAAAAAACASAAACRC4AKiAAAAAAAAAuOgAABE4YBkgWAAAAAAAAKjQAAARYIgBAIAAAAAAAAC5SAAAAOAwAOBQAAAAAAAAYDAAAAEYSAEYYAAAAAAAAIBQAAAkAAAAJAAAAEAAAABAAAAAQAAAAFwAAADcAAAAgAAAAACgYCAAKNCAUCgYmGA4EAAYAAAAHAAAACQAAAAkAAAAUAAAAFAAAABQAAAAZAAAA5iAUCA=="),C(u,101072,"ZgNmAWYCpgSmAiYEpoooAmoDagFqAqoCbgNuAW4CrgIpALMEdAN0AXQCtAS0AgAAdAR6A3oBegK6An4BOQC+AgAApgMAAKYBAADmAwAAaAEAAGgCAAAoAwAA6AEAAOkBAABpBAAAqgMAAKoBAAAqAwAA6gMAAOoBAABsAgAArAEAACwDAAAsAgAAbQIAAG0EAACuBAAArgMAAK4BAADuAwAALgAAAO6LAABvAgAAMAIwAAAAcQEAADECAADxAQAAMQMAAHEEAABzAQAAMwIAAPMBMwAAADMAAAC0AwAAtAEAAPQCAAC0igAAdwEAADcCAAD3AQAAeAEAAHgCAAA4AgAA+AEAADkCAAD5AQAAeQQAALoEAAC6AwAAugEAADoEAAD6AgAA+gMAAHwCAAB+AgAAAAB/AQAAPwMAAP8BOACmAAEAgQBnBQAAKAEpBWkF6gAAAEIFAADDAEMdAADvBGwFLABsAAQAAACtAG0FAADuBAUAbgCxBPEEMQXxj7IAAAByBQAAMwVzAPQEtJoAAAgAtwCOADcVAAA3BQAAzQB3ALcIOAUAAG8FyQAJAbkAOQX6BAoAewW7ALwAvgB+AD8FPwEAAAsBAADMAIwAAAAAAGcAAABsDW0ALwGwAHEAdgVMBEwc6Y8AAOnPOY4AADnO"),C(u,101586,"sQNZAlsCswO5A1MByQPGA4MCxQOSApQCfgJ8AgAAqgBhgLIAMoCzADOAuQAxgLoAb4CwAmiAsQJmgrICaoCzAnKAtAJ5grUCe4K2AoGCtwJ3gLgCeYDAApSCwQKVguACY4LhAmyA4gJzgOMCeIBwIDCAcSBpgHQgNIB1IDWAdiA2gHcgN4B4IDiAeSA5gHogK4B7IC2AfCA9gH0gKIB+ICmAfyBugIAgMECBIDFAgiAyQIMgM0CEIDRAhSA1QIYgNkCHIDdAiCA4QIkgOUCKICtAiyAtQIwgPUCNIChAjiApQJAgYUCRIGVAkiBvQJMgeECUIFlClSBoQJYga0CXIGxAmCBtQJkgbkCaIHBAmyBzQJwgdEAAAAAAaXhjbXZsZA=="),C(u,101888,"AQAAAAoAAABkAAAA6AMAAAUAAAAyAAAA9AEAAAAXCgkYExgY"),C(u,101936,"///////9+fXy7uvo5OHe2tjV0s/MycbEwb+8ure1s7CurKmopaOhn56bmZiWlJKRj42LiYiHhYOCgX9+fHt6eHd2dXNycXBvbm1ramloZ2ZlZGNiYWBfXl1cW1pZWVhXVlVUU1JSUVBQT05NTExLS0pJSEdHRkVFRENDQkJBQEA/Pj49PTw7Ozo6OTk4ODc2NjU1NDQ0MzIyMTEwMC8vLi4uLS0sLCwrKyopKCgoJycnJiYmJSUlJCQjIyMjIiIiISEhICAfHx8eHh4dHR0dHBwbGxsbGhoaGhkZGRgYGBgXFxcXFhYWFRUVFRQUFBQTExMSEhERERAQEBAQEA8PDw8ODg4NDQ0MDAwMCwsLCwoKCgkJCQgICAAAAAAAAAAAeHl4d3d2dnV0dHNycXBwb29ubWxrampoZ2dmZmZlZWNiYmFgYF9eXVtaW1pZWFZVVlVVVFJRUE9NTk5MTUtLSklHSEZFRUVDQUA/Pz89PTs7Ozo4OTo4NjU0NDU0NDIwLy8tLi0="),C(u,102336,"FhYWFhYWFhUVFRUUFBMTEhEQDw8PDw8PDwAAAAAAAABkeGRpZG5uZF9kaXhpbn2Ch3N9ZGl4S2RLaXhVS2RpeFVpX3N4ZF9kbnhfaWRzeGRkZGl4ZGlfc3huX2RpeGRpaXp9bmlkaXhkaWl6fW5pZGl4X2lkc3huZGRkeGRkZGRkZGRk"),C(u,102480,"ZJZkaW5zbm5uZGmWaW59h4xzh2RpllppWnqHZFpkaZZkaWR6h2RkZGmWZGlpc4duaWRplmRpaXqCeH1kaZZkaW56fXNuZGmWZGlpeod4aWRplmRpaXOHbmlkZGRkZGRkZGRkZA=="),C(u,102592,"bnhkbm5ubm5ubm54ZG5ubm5ubm5ueGRuZG5ubmRubnhkbm5ubm5ubm54ZG5ubm5ubm5ueGRubm5ubm5ubnhkbm5ubm5ubm54ZG5ubm5ubm5ueGRubm5ubm5ubnhkbm5ubm5ubg=="),C(u,102708,"rwAAAGQAAAAyAAAAMg=="),C(u,102744,"ZA=="),C(u,102764,"MjIoRlpkZGRGboeWZGRLZHiWAAAAAAAABwAAAA4AAAAVAAAAKAAAAFAAAAAAAAAAAFNBUFIAQwAAAAAARgAAAAAAAAABAAAAAgAAAAQAAAAPAAAAAAEAAAEBAAEBAgQAAAAAAPMAEAEAAQABAAEAAQAB8ADwAPA="),C(u,102898,"QABaAG4AgACPAJwAqQC1AMAAygDUAN0A5gDvAPcAAAEHAQ8BFgEeASUBLAEyATkBQAFGAUwBUgFYAV4BZAFqAW8BdQF6AYABhQGKAY8BlAGZAZ4BowGoAa0BsgG2AbsBwAHEAckBzQHRAdYB2gHeAeMB5wHrAe8B8wH3AfsBAAIDAgcCCwIPAhMCFwIbAh8CIgImAioCLQIxAjUCOAI8AkACQwJHAkoCTgJRAlQCWAJbAl8CYgJlAmkCbAJvAnMCdgJ5AnwCgAKDAoYCiQKMAo8CkgKWApkCnAKfAqICpQKoAqsCrgKxArQCtwK6Ar0CwALCAsUCyALLAs4C0QLUAtYC2QLcAt8C4gLkAucC6gLtAu8C8gL1AvcC+gL9AgADAgMFAwcDCgMNAw8DEgMVAxcDGgMcAx8DIQMkAycDKQMsAy4DMQMzAzYDOAM7Az0DQANCA0QDRwNJA0wDTgNRA1MDVQNYA1oDXQNfA2EDZANmA2gDawNtA28DcgN0A3YDeQN7A30DgAOCA4QDhgMAAAGqAqytAwQFsLGys7S0tgYHCLkJCrwMDQ4PEBESYWJjZGVmZ2hpamtsbW5vcHFyc3R1"),C(u,103360,"YAYAAPAGAABmCQAA5gkAAGYKAADmCgAAZgsAAOYLAABmDAAA5gwAAGYNAABQDgAA0A4AACAPAABAEAAAkBA="),C(u,103440,"5gDmAOYA5gAAAAAA5gDmAL4AqgC+AMgAAAAAAL4A8AC+AL4A0gDSAAAAAADSANIAyADIANIA0gAAAAAA5gDmAOYA5gDwAPAAAAAAAAQBBAGqAIwA3ADcAAAAAAD6AA4BoACMAMgAjAAAAAAA8ACgALQAtADSANIAAAAAAOYA8ACqANwAtAC0AAAAAAD6AA4BlgCCAMgAyAAAAAAADgEOAbYAjADcANwAAAAAAPgAEwGbALQA0gDSAAAAAAAOASwBwwMAAAAAAABsAAAAAAAAAKAAkQCbAJYAAAAAAMgA9QAnAAAAtwAAAAAAAADCugAAyADIAMgAyAAAAAAA0gDmAAABAgMEBQYHCAkKCwwNDg8QERITFBUWFxgZGgAAAAAAABscHR4fICEiIyQlJicoKSorAAAs"),C(u,103790,"LQAAAAAAAAAu"),C(u,103816,"Lw=="),C(u,103833,"MAAAAAAAMQ=="),C(u,103856,"Mg=="),C(u,103868,"MwAAAK0AAQBABgEADCAtAAAAAAC+AL4A0gDSAAAAAADmAPoAoACWAMgAyAAAAAAA+gAEAbkAwwDDAL4AAAAAANIA3AD6AMgA+gD6AAAAAAD6APoAMjM0Njk6PD0+P0BBQkNERkdJSktMTU5PUFFSU1RWAACWAIwAtAC0AAAAAADIAMgAbA=="),C(u,104016,"oADIALQAtAAAAAAA3ADwALQAoADIAMgAAAAAAPAA+gBjAAAAZgAAAGgAAABrAAAAcAAAAHQAAAB4AAAA/g=="),C(u,104096,"oACMAJYApQAAAAAA2gAxAZEAkQCqAKAAAAAAAEoBXgEuAAAALAAAACcAAADIAg=="),C(u,104160,"MTIzNTY3OTo7PD4/QEFCREVGR0hJSktMTU5PUFFSU1RW"),C(u,104208,"vgC0AOYA5gAAAAAA+gD6ABESExQWFxkaGxwdHyAhIiQlJicoKSosc3uDmwAAAAAAtAC0AL4AtAAAAAAA5gDwALQAtAC0AKAAAAAAAOYAtABABAAAMAQAADUEAAA4BAAAOQQAAD4EAABDBAAASwQAAE0EAABOBAAATwQAAFAEAABRBAAAVgQAAFcEAABdBAAAXgQ="),C(u,104368,"tACgAMgAyAAAAAAA3ADmAKAAhwDSANIAAAAAAAQBGAGgAIwAyADIAAAAAADcAOYAyADIAMgAyAAAAAAAyADIAKAAvgCvAK8AAAAAAMgA0gCqAHMA0gDwAAAAAAAEARgBqgCqALQAtAAAAAAA8AAEAZYAtADIAMgAAAAAANIA+gCWAJYAtAC0AAAAAAAsASwBoACHANwA3AAAAAAA+gAYAaAAqgDIAMgAAAAAAEABVAG0AKAA8ADwAAAAAAAEAQQBvgC0AMgA5gAAAAAA8AD6AJYAlgC0ALQA0gDmAOYA8ABhAAAA4AAAAOEAAACjHgAA4wAAAKEeAAADAQAAsR4AAK8eAACzHgAAtR4AALceAADiAAAApx4AAKUeAACpHgAAqx4AAK0eAABlAAAA6AAAAOkAAAC7HgAAvR4AALkeAADqAAAAwR4AAL8eAADDHgAAxR4AAMceAABpAAAA7AAAAO0AAADJHgAAKQEAAMseAABvAAAA8gAAAPMAAADPHgAA9QAAAM0eAAD0AAAA0x4AANEeAADVHgAA1x4AANkeAAChAQAA3R4AANseAADfHgAA4R4AAOMeAAB1AAAA+QAAAPoAAADnHgAAaQEAAOUeAACwAQAA6x4AAOkeAADtHgAA7x4AAPEeAAB5AAAA8x4AAP0AAAD3HgAA+R4AAPUe"),C(u,104896,"5gCWAOYA5gDmAAAA8AD6AAAAAAAnAAAAAAAAAAABAgM="),C(u,104945,"AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcYGRo="),C(u,105072,"GxwdAAAeHyAhIiMkACUmAAAAACcAACgAKQAqACsAAAAAAAAsAC0ALgAAAAAALwAAADAAAAAAAAAAMQ=="),C(u,105170,"MgAz"),C(u,105195,"NAAAAAAANQA2"),C(u,105226,"NwA4ADkArQABAAwgAQ=="),C(u,105249,"AQIDAAQAAQIDAAQFBgIDAAQFBwEDAAQICQoDAAAICAoDAAALCwsLAAAMDAwMAAAMAQ4BEwEBAw8DDgYRBgMJAQsPCwEMCQwBDgYOCQ4ODg8OHA4DDxEPEg8PEBEQAREGEQkRDxETEiAS/38AAAAAlgCMANwA3AAAAAAABAEYAYKAeHRkZICAgIyAgKCrq4CAgA=="),C(u,105412,"yAAAAMgAAACQAQAAkAEAAJABAABYAgAAWAIAAFgC"),C(u,105456,"8AAAAKoAAACqAAAAqgAAAKoAAACqAAAAqgAAAKoAAACqAAAAAQIMAw0EDgULAAAAAQIDBAUGAAAAAAAACwwNDg=="),C(u,105540,"MgAAAK8AAABkAAAAMg=="),C(u,105568,"rw=="),C(u,105596,"EBAKEBY="),C(u,105620,"/38AANAHAAAsAQAAYwAAAGMAAABjAAAAAAAAANAH"),C(u,105668,"BA=="),C(u,105680,"QEFCQ0RFRkdISUpLTE1OT1BRUlNUVldYWVtcXV5gYWJkZWdoaWtsbm9xc3R2d3l7fH6AgoSFh4mLjY+Rk5WXmZueoKKkp6mrrrCztbi6vb/CxcfKzdDT1tnc3+Ll6Ozv8vb5/P7/"),C(u,105792,"//7+/v7+/v7+/v39/f38/Pz7+/v6+vn5+Pj39/b19fTz8/Lx7+3r6efl4+Hf3drY1dPQzcvIxcK/u7i1sq6rp6OgnJiUkIyIhH97d3JuaWRgXltYVlNRTkxKR0VCQD48OTc1MzEvLCooJiQiIB4dGxkXFRMSEA4MCwkHBgQDAQ=="),C(u,106064,"//7+/v7+/f38+/v6+fj39vX08vHv7uzq6efl4+Hf3NrY1dPRz83LycfFw8G/vbu5t7SysK2rqaakoZ+cmpeUko+MioeEgX57eHZzcGxpZmNgX11bWlhWVVNSUE9NTEpJSEZFRENCQD8+PTw7Ojk4Nzc2NTQ0MzIyMTAwLy8uLi4tLS0sLCwsLCwsKysrKywrKiopKCgnJiYlJCQjIyIhISAgHx4eHR0cHBsaGhkZGBgXFxYWFRUUFBMTEhISEREQEA8PDw4ODQ0NDAwLCwsKCgoJCQkICAgHBwcHBgYGBQUFBQQEBAQEAwMDAwICAgICAgEBAQEBAQ=="),C(u,106341,"RvIpAC8ALwBF8ikALwAuAEXyKAAuAC0ANPIoAC0tLAA08igAKysrADTyKAAqKioANPIoACkpKQA08igAAOf/zv+1/5z/g/9q/1H/N/8e/wX/7P7T/rr+of6I/m/+Vf48/iP+Cv7x/dj9v/2m/Y39dP1b/UL9Kf0Q/ff83vzF/Kz8k/x6/GH8SPwv/Bb8/fvk+8v7svuZ+4D7Z/tP+zb7HfsE++v60vq6+qH6iPpv+lf6Pvol+g369Pnb+cP5qvmR+Xn5YPlH+S/5Fvn++OX4zfi0+Jz4g/hr+FP4Ovgi+Ar48ffZ98H3qPeQ93j3YPdH9y/3F/f/9uf2z/a39p/2h/Zv9lf2P/Yn9g/29/Xf9cf1sPWY9YD1aPVR9Tn1IfUK9fL02/TD9Kz0lPR99GX0TvQ29B/0CPTw89nzwvOr85TzfPNl807zN/Mg8wnz8vLb8sTyrvKX8oDyafJS8jzyJfIO8vjx4fHL8bTxnvGH8XHxW/FE8S7xGPEB8evw1fC/8Knwk/B98GfwUfA78CXwEPD67+Tvzu+576Pvje9472LvTe847yLvDe/47uLuze647qPuju557mTuT+467iXuEO777eft0u297antlO2A7WvtV+1C7S7tGu0F7fHs3ezJ7LXsoeyN7HnsZexR7D3sKuwW7ALs7+vb68jrtOuh643reutn61TrQest6xrrB+v06uLqz+q86qnqluqE6nHqX+pM6jrqJ+oV6gPq8One6czpuumo6ZbphOly6WHpT+k96SzpGukI6ffo5ujU6MPosuig6I/ofuht6FzoS+g76CroGegI6Pjn5+fX58bntuel55Xnhed152XnVedF5zXnJecV5wXn9ubm5tfmx+a45qjmmeaK5nvma+Zc5k3mPuYw5iHmEuYD5vXl5uXY5cnlu+Wt5Z7lkOWC5XTlZuVY5UrlPOUv5SHlE+UG5fjk6+Te5NDkw+S25KnknOSP5ILkdeRo5FzkT+RD5DbkKuQd5BHkBeT54+3j4ePV48njveOx46XjmuOO44Pjd+Ns42HjVuNL4z/jNOMq4x/jFOMJ4//i9OLq4t/i1eLK4sDituKs4qLimOKO4oTie+Jx4mfiXuJU4kviQuI54i/iJuId4hTiDOID4vrh8eHp4eDh2OHQ4cfhv+G34a/hp+Gf4Zfhj+GI4YDheOFx4WrhYuFb4VThTeFG4T/hOOEx4SrhJOEd4RbhEOEK4QPh/eD34PHg6+Dl4N/g2eDU4M7gyeDD4L7guOCz4K7gqeCk4J/gmuCV4JHgjOCH4IPgfuB64HbgcuBu4GrgZuBi4F7gWuBX4FPgT+BM4EngReBC4D/gPOA54DbgM+Ax4C7gK+Ap4CfgJOAi4CDgHuAc4BrgGOAW4BTgEuAR4A/gDuAN4AvgCuAJ4AjgB+AG4AXgBeAE4APgA+AC4ALgAuAC4ALgAeAC4ALgAuAC4ALgA+AD4ATgBeAF4AbgB+AI4AngCuAL4A3gDuAP4BHgEuAU4BbgGOAa4BzgHuAg4CLgJOAn4CngK+Au4DHgM+A24DngPOA/4ELgReBJ4EzgT+BT4FfgWuBe4GLgZuBq4G7gcuB24HrgfuCD4IfgjOCR4JXgmuCf4KTgqeCu4LPguOC+4MPgyeDO4NTg2eDf4OXg6+Dx4Pfg/eAD4QrhEOEW4R3hJOEq4THhOOE/4UbhTeFU4VvhYuFq4XHheOGA4Yjhj+GX4Z/hp+Gv4bfhv+HH4dDh2OHg4enh8eH64QPiDOIU4h3iJuIv4jniQuJL4lTiXuJn4nHie+KE4o7imOKi4qzituLA4sri1eLf4uri9OL/4gnjFOMf4yrjNOM/40vjVuNh42zjd+OD447jmuOl47HjvePJ49Xj4ePt4/njBeQR5B3kKuQ25EPkT+Rc5GjkdeSC5I/knOSp5Lbkw+TQ5N7k6+T45AblE+Uh5S/lPOVK5VjlZuV05YLlkOWe5a3lu+XJ5djl5uX15QPmEuYh5jDmPuZN5lzma+Z75ormmeao5rjmx+bX5ubm9uYF5xXnJec150XnVedl53XnheeV56XntufG59fn5+f45wjoGegq6DvoS+hc6G3ofuiP6KDosujD6NTo5uj36AjpGuks6T3pT+lh6XLphOmW6ajpuunM6d7p8OkD6hXqJ+o66kzqX+px6oTqluqp6rzqz+ri6vTqB+sa6y3rQetU62freuuN66HrtOvI69vr7+sC7BbsKuw97FHsZex57I3soey17Mns3ezx7AXtGu0u7ULtV+1r7YDtlO2p7b3t0u3n7fvtEO4l7jruT+5k7nnuju6j7rjuze7i7vjuDe8i7zjvTe9i73jvje+j77nvzu/k7/rvEPAl8DvwUfBn8H3wk/Cp8L/w1fDr8AHxGPEu8UTxW/Fx8YfxnvG08cvx4fH48Q7yJfI88lLyafKA8pfyrvLE8tvy8vIJ8yDzN/NO82XzfPOU86vzwvPZ8/DzCPQf9Db0TvRl9H30lPSs9MP02/Ty9Ar1IfU59VH1aPWA9Zj1sPXH9d/19/UP9if2P/ZX9m/2h/af9rf2z/bn9v/2F/cv90f3YPd495D3qPfB99n38fcK+CL4OvhT+Gv4g/ic+LT4zfjl+P74Fvkv+Uf5YPl5+ZH5qvnD+dv59PkN+iX6PvpX+m/6iPqh+rr60vrr+gT7Hfs2+0/7Z/uA+5n7svvL++T7/fsW/C/8SPxh/Hr8k/ys/MX83vz3/BD9Kf1C/Vv9dP2N/ab9v/3Y/fH9Cv4j/jz+Vf5v/oj+of66/tP+7P4F/x7/N/9R/2r/g/+c/7X/zv/n/wAAGQAyAEsAZAB9AJYArwDJAOIA+wAUAS0BRgFfAXgBkQGrAcQB3QH2AQ8CKAJBAloCcwKMAqUCvgLXAvACCQMiAzsDVANtA4YDnwO4A9ED6gMDBBwENQROBGcEgASZBLEEygTjBPwEFQUuBUYFXwV4BZEFqQXCBdsF8wUMBiUGPQZWBm8GhwagBrkG0QbqBgIHGwczB0wHZAd9B5UHrQfGB94H9gcPCCcIPwhYCHAIiAigCLkI0QjpCAEJGQkxCUkJYQl5CZEJqQnBCdkJ8QkJCiEKOQpQCmgKgAqYCq8KxwrfCvYKDgslCz0LVAtsC4MLmwuyC8oL4Qv4CxAMJww+DFUMbAyEDJsMsgzJDOAM9wwODSUNPA1SDWkNgA2XDa4NxA3bDfINCA4fDjUOTA5iDnkOjw6lDrwO0g7oDv8OFQ8rD0EPVw9tD4MPmQ+vD8UP2w/wDwYQHBAyEEcQXRBzEIgQnhCzEMgQ3hDzEAgRHhEzEUgRXRFyEYcRnBGxEcYR2xHwEQUSGRIuEkMSVxJsEoASlRKpEr4S0hLmEvsSDxMjEzcTSxNfE3MThxObE68TwxPWE+oT/hMRFCUUOBRMFF8UcxSGFJkUrBS/FNMU5hT5FAwVHhUxFUQVVxVqFXwVjxWhFbQVxhXZFesV/RUQFiIWNBZGFlgWahZ8Fo4WnxaxFsMW1BbmFvgWCRcaFywXPRdOF2AXcReCF5MXpBe1F8UX1hfnF/gXCBgZGCkYOhhKGFsYaxh7GIsYmxirGLsYyxjbGOsY+xgKGRoZKRk5GUgZWBlnGXYZhRmVGaQZsxnCGdAZ3xnuGf0ZCxoaGigaNxpFGlMaYhpwGn4ajBqaGqgathrEGtEa3xrtGvoaCBsVGyIbMBs9G0obVxtkG3EbfhuLG5gbpBuxG70byhvWG+Mb7xv7GwccExwfHCscNxxDHE8cWxxmHHIcfRyJHJQcnxyqHLUcwRzMHNYc4RzsHPccAR0MHRYdIR0rHTYdQB1KHVQdXh1oHXIdfB2FHY8dmR2iHawdtR2+Hccd0R3aHeMd7B30Hf0dBh4PHhceIB4oHjAeOR5BHkkeUR5ZHmEeaR5xHngegB6IHo8elh6eHqUerB6zHroewR7IHs8e1h7cHuMe6h7wHvYe/R4DHwkfDx8VHxsfIR8nHywfMh83Hz0fQh9IH00fUh9XH1wfYR9mH2sfbx90H3kffR+CH4Yfih+OH5Iflh+aH54foh+mH6kfrR+xH7Qftx+7H74fwR/EH8cfyh/NH88f0h/VH9cf2R/cH94f4B/iH+Qf5h/oH+of7B/uH+8f8R/yH/Mf9R/2H/cf+B/5H/of+x/7H/wf/R/9H/4f/h/+H/4f/h//H/4f/h/+H/4f/h/9H/0f/B/7H/sf+h/5H/gf9x/2H/Uf8x/yH/Ef7x/uH+wf6h/oH+Yf5B/iH+Af3h/cH9kf1x/VH9Ifzx/NH8ofxx/EH8Efvh+7H7cftB+xH60fqR+mH6Ifnh+aH5Yfkh+OH4ofhh+CH30feR90H28fax9mH2EfXB9XH1IfTR9IH0IfPR83HzIfLB8nHyEfGx8VHw8fCR8DH/0e9h7wHuoe4x7cHtYezx7IHsEeuh6zHqwepR6eHpYejx6IHoAeeB5xHmkeYR5ZHlEeSR5BHjkeMB4oHiAeFx4PHgYe/R30Hewd4x3aHdEdxx2+HbUdrB2iHZkdjx2FHXwdch1oHV4dVB1KHUAdNh0rHSEdFh0MHQEd9xzsHOEc1hzMHMEctRyqHJ8clByJHH0cchxmHFscTxxDHDccKxwfHBMcBxz7G+8b4xvWG8obvRuxG6QbmBuLG34bcRtkG1cbShs9GzAbIhsVGwgb+hrtGt8a0RrEGrYaqBqaGowafhpwGmIaUxpFGjcaKBoaGgsa/RnuGd8Z0BnCGbMZpBmVGYUZdhlnGVgZSBk5GSkZGhkKGfsY6xjbGMsYuxirGJsYixh7GGsYWxhKGDoYKRgZGAgY+BfnF9YXxRe1F6QXkxeCF3EXYBdOFz0XLBcaFwkX+BbmFtQWwxaxFp8WjhZ8FmoWWBZGFjQWIhYQFv0V6xXZFcYVtBWhFY8VfBVqFVcVRBUxFR4VDBX5FOYU0xS/FKwUmRSGFHMUXxRMFDgUJRQRFP4T6hPWE8MTrxObE4cTcxNfE0sTNxMjEw8T+xLmEtISvhKpEpUSgBJsElcSQxIuEhkSBRLwEdsRxhGxEZwRhxFyEV0RSBEzER4RCBHzEN4QyBCzEJ4QiBBzEF0QRxAyEBwQBhDwD9sPxQ+vD5kPgw9tD1cPQQ8rDxUP/w7oDtIOvA6lDo8OeQ5iDkwONQ4fDggO8g3bDcQNrg2XDYANaQ1SDTwNJQ0ODfcM4AzJDLIMmwyEDGwMVQw+DCcMEAz4C+ELyguyC5sLgwtsC1QLPQslCw4L9grfCscKrwqYCoAKaApQCjkKIQoJCvEJ2QnBCakJkQl5CWEJSQkxCRkJAQnpCNEIuQigCIgIcAhYCD8IJwgPCPYH3gfGB60HlQd9B2QHTAczBxsHAgfqBtEGuQagBocGbwZWBj0GJQYMBvMF2wXCBakFkQV4BV8FRgUuBRUF/ATjBMoEsQSZBIAEZwROBDUEHAQDBOoD0QO4A58DhgNtA1QDOwMiAwkD8ALXAr4CpQKMAnMCWgJBAigCDwL2Ad0BxAGrAZEBeAFfAUYBLQEUAfsA4gDJAK8AlgB9AGQASwAyABkAMAAAADAAAABAAAAAUAAAAJAAAACgAAAAsAAAAMAAAACAm7XL3Ojt7Obczr+wo5iQjIuMj5KUlZKMg3hpWUk8MSopLTZEVml9j5+qsbKtpJaHeGlcU09PVV5reoiWoquwsa6ooJiRi4iJjZSdqLK7wMG9tKWSfGNKMh4OBQIFDx4wRFltf4yWnJ+fnZuZmZyhqbO/ytXc4N7YzLumj3dgSzouKCkvOkhZanqGkJSVkYmAdWtiXFpcYWl0gIqUmp6dmJCGfHFoYmBja3iIm6/C0t/m5+LXxrKchG9bS0A5Nzg9Q0pQVFZVUk1IQj8+QUlWZ3yTq8PZ6vb8+/Tn1cCqlIBxZF1aXGFocHd9f397dGthV05IRkhOWWZ1hJOfp6uqpJmLe2pbTkZDRU1aa3+SprjFz9PSzcS5raGWjomHh4qNkZKRjIR4aFVBLhwOBQEFDx80TWiBmrDBzdPT0Mi/taukn5ydoKWqrrGwq6OWh3ZjUUI2Ly0xOkhZa36OnKaqqaOYintsXVJKSEpQWmd1gi0AAAAmAAAALQAAAC0AAAA3AAAALQ=="),C(u,110928,"yv5w/hICZAHgAFkAFwD2/8b/8P/NAVcCGAK9AgIDXQLxAc0BMAKUAW4A4ACDAGgAn/+bABYBZv9z+6r94QJ9ALD9KQALAAn/9v9BAFwAUADQ/kcApwD//3oA6QChANX/FgHfAeUBlwEKAYoChgBQAOwARAAEAQ0BswA1AIwAEwElASgBaAABAZgANwG2AAcB9QB9ADoBjAAsAMsA5gAV/+L+FwBrAFwApf8mANABuwGwAGIA8Pxv9p346/vA+Ur6mPoT+0v8Jv0="),C(u,111162,"BgAHAAgACQAKAAsADQAOABAAEgAUABYAGQAcACAAIwAoAC0AMwA5AEAARwBQAFoAZQByAIAAjgCfALMAygDjAAABHAE+AWcBlQHHAQACOAJ+As8CcQOPAwAEcQT8BJ4FVgYfBwAI4Qj4CTsLrAw9DgAQwxHwE3cWWBl7HAAghSPfJ+4ssDL2OABArkekUIVbZmYzc/9/"),C(u,111324,"qMtoQQAAAACoy2jBAAAAAAAAAAAXCtQJkglQCQ8JzgiPCE8IEwjVB5oHYgcoB/MGvgaLBloGKwb9BdMFqQWBBVwFOAUWBfcE1wS7BKAEhgRuBFcEQQQtBBkEBwT1A+QD1APFA7YDqAOZA40DfwNxA2UDVwNLAz4DMgMkAxgDCwP+AvIC5ALYAssCvgKxAqQClwKLAn0CcgJkAlkCTAJAAjQCKAIcAhICBQL7AfAB5QHbAdABxgG7AbIBqAGeAZQBigGBAXcBbgFjAVsBUAFIAT0BNAErASABGAENAQQB+gDwAOcA3ADUAMgAwAC1AKwAoQCYAI4AhQB7AHEAaQBeAFYATABDADkAMQAnAB4AFgALAAQA+//y/+n/4P/X/87/xP+7/7L/qf+g/5X/jf+C/3r/cP9m/1z/Uv9J/z//Nf8r/yL/F/8O/wT/+v7x/uf+3f7T/sr+wP62/q3+o/6b/pD+h/59/nP+av5f/lb+TP5C/jj+Lf4j/hn+Df4D/vf97P3h/dX9yf29/bH9pf2Y/Yz9f/1z/Wb9Wf1M/T/9M/0k/Rn9Cv3//PH85fzY/Mz8vvyz/KT8mPyL/H78cfxi/FX8Rfw4/Cb8GfwG/Pb74vvQ+7r7pfuO+3b7XPtB+yT7Bvvl+sT6n/p5+lP6KPr++dD5oflw+Tz5CfnR+Jr4YPgm+Oj3q/ds9yz36/aq9mj2Jvbj9bAEdgRABA4E3wO0A4sDZQNBAx8DAAPiAsYCqwKSAnoCZAJOAjoCJwIVAgMC8wHjAdQBxgG4AasBnwGTAYcBfAFyAWgBXgFVAUwBQwE7ATMBLAEkAR0BFgEQAQkBAwH9APcA8gDtAOcA4gDdANkA1ADQAMwAxwDDAMAAvAC4ALQAsQCuAKoApwCkAKEAngCbAJkAlgCTAJEAjgCMAIkAhwCFAIMAgAB+AHwAegB4AHcAdQBzAHEAbwBuAGwAagBpAGcAZgBkAGMAYQBgAF8AXQBcAFsAWgBYAFcAVgBVAFQAUwBSAFAATwBOAE0ATABLAEsASgBJAEgARwBGAEUARABEAEMAQgBBAEAAQAA/AD4APQA9ADwAOwA7ADoAOQA5ADgAOAA3ADcANgA2ADUANQA0ADQAMwAzADIAMgAxADEAMAAwAC8ALwAuAC4ALQAtACwALAArACsAKgAqACkAKQApACkAKAAoACcAJwAmACYAJgAmACUAJQAkACQAJAAkACMAIwAjACMAIgAiACEAIQAhACEAIAAgACAAIAAfAB8AHwAfAB4AHgAeAB4AHQAdAB0AHQAcABwAHAAcABsAGwAxNkZyYW1lTWFuYWdlckltcGwAMTJGcmFtZU1hbmFnZXIAMjNTcGVlY2hXYXZlR2VuZXJhdG9ySW1wbAAxOVNwZWVjaFdhdmVHZW5lcmF0b3IAMTNXYXZlR2VuZXJhdG9y"),C(u,112416,"AwAAAAQAAAAEAAAABgAAAIP5ogBETm4A/CkVANFXJwDdNPUAYtvAADyZlQBBkEMAY1H+ALveqwC3YcUAOm4kANJNQgBJBuAACeouAByS0QDrHf4AKbEcAOg+pwD1NYIARLsuAJzphAC0JnAAQX5fANaROQBTgzkAnPQ5AItfhAAo+b0A+B87AN7/lwAPmAUAES/vAApaiwBtH20Az342AAnLJwBGT7cAnmY/AC3qXwC6J3UA5evHAD178QD3OQcAklKKAPtr6gAfsV8ACF2NADADVgB7/EYA8KtrACC8zwA29JoA46kdAF5hkQAIG+YAhZllAKAUXwCNQGgAgNj/ACdzTQAGBjEAylYVAMmocwB74mAAa4zAABnERwDNZ8MACejcAFmDKgCLdsQAphyWAESv3QAZV9EApT4FAAUH/wAzfj8AwjLoAJhP3gC7fTIAJj3DAB5r7wCf+F4ANR86AH/yygDxhx0AfJAhAGokfADVbvoAMC13ABU7QwC1FMYAwxmdAK3EwgAsTUEADABdAIZ9RgDjcS0Am8aaADNiAAC00nwAtKeXADdV1QDXPvYAoxAYAE12/ABknSoAcNerAGN8+AB6sFcAFxXnAMBJVgA71tkAp4Q4ACQjywDWincAWlQjAAAfuQDxChsAGc7fAJ8x/wBmHmoAmVdhAKz7RwB+f9gAImW3ADLoiQDmv2AA78TNAGw2CQBdP9QAFt7XAFg73gDem5IA0iIoACiG6ADiWE0AxsoyAAjjFgDgfcsAF8BQAPMdpwAY4FsALhM0AIMSYgCDSAEA9Y5bAK2wfwAe6fIASEpDABBn0wCq3dgArl9CAGphzgAKKKQA05m0AAam8gBcd38Ao8KDAGE8iACKc3gAr4xaAG/XvQAtpmMA9L/LAI2B7wAmwWcAVcpFAMrZNgAoqNIAwmGNABLJdwAEJhQAEkabAMRZxADIxUQATbKRAAAX8wDUQ60AKUnlAP3VEAAAvvwAHpTMAHDO7gATPvUA7PGAALPnwwDH+CgAkwWUAMFxPgAuCbMAC0XzAIgSnACrIHsALrWfAEeSwgB7Mi8ADFVtAHKnkABr5x8AMcuWAHkWSgBBeeIA9N+JAOiUlwDi5oQAmTGXAIjtawBfXzYAu/0OAEiatABnpGwAcXJCAI1dMgCfFbgAvOUJAI0xJQD3dDkAMAUcAA0MAQBLCGgALO5YAEeqkAB05wIAvdYkAPd9pgBuSHIAnxbvAI6UpgC0kfYA0VNRAM8K8gAgmDMA9Ut+ALJjaADdPl8AQF0DAIWJfwBVUikAN2TAAG3YEAAySDIAW0x1AE5x1ABFVG4ACwnBACr1aQAUZtUAJwedAF0EUAC0O9sA6nbFAIf5FwBJa30AHSe6AJZpKQDGzKwArRRUAJDiagCI2YkALHJQAASkvgB3B5QA8zBwAAD8JwDqcagAZsJJAGTgPQCX3YMAoz+XAEOU/QANhowAMUHeAJI5nQDdcIwAF7fnAAjfOwAVNysAXICgAFqAkwAQEZIAD+jYAGyArwDb/0sAOJAPAFkYdgBipRUAYcu7AMeJuQAQQL0A0vIEAEl1JwDrtvYA2yK7AAoUqgCJJi8AZIN2AAk7MwAOlBoAUTqqAB2jwgCv7a4AXCYSAG3CTQAtepwAwFaXAAM/gwAJ8PYAK0CMAG0xmQA5tAcADCAVANjDWwD1ksQAxq1LAE7KpQCnN80A5qk2AKuSlADdQmgAGWPeAHaM7wBoi1IA/Ns3AK6hqwDfFTEAAK6hAAz72gBkTWYA7QW3ACllMABXVr8AR/86AGr5uQB1vvMAKJPfAKuAMABmjPYABMsVAPoiBgDZ5B0APbOkAFcbjwA2zQkATkLpABO+pAAzI7UA8KoaAE9lqADSwaUACz8PAFt4zQAj+XYAe4sEAIkXcgDGplMAb27iAO/rAACbSlgAxNq3AKpmugB2z88A0QIdALHxLQCMmcEAw613AIZI2gD3XaAAxoD0AKzwLwDd7JoAP1y8ANDebQCQxx8AKtu2AKMlOgAAr5oArVOTALZXBAApLbQAS4B+ANoHpwB2qg4Ae1mhABYSKgDcty0A+uX9AInb/gCJvv0A5HZsAAap/AA+gHAAhW4VAP2H/wAoPgcAYWczACoYhgBNveoAs+evAI9tbgCVZzkAMb9bAITXSAAw3xYAxy1DACVhNQDJcM4AMMu4AL9s/QCkAKIABWzkAFrdoAAhb0cAYhLSALlchABwYUkAa1bgAJlSAQBQVTcAHtW3ADPxxAATbl8AXTDkAIUuqQAdssMAoTI2AAi3pADqsdQAFvchAI9p5AAn/3cADAOAAI1ALQBPzaAAIKWZALOi0wAvXQoAtPlCABHaywB9vtAAm9vBAKsXvQDKooEACGpcAC5VFwAnAFUAfxTwAOEHhgAUC2QAlkGNAIe+3gDa/SoAayW2AHuJNAAF8/4Aub+eAGhqTwBKKqgAT8RaAC34vADXWpgA9MeVAA1NjQAgOqYApFdfABQ/sQCAOJUAzCABAHHdhgDJ3rYAv2D1AE1lEQABB2sAjLCsALLA0ABRVUgAHvsOAJVywwCjBjsAwEA1AAbcewDgRcwATin6ANbKyADo80EAfGTeAJtk2ADZvjEApJfDAHdY1ABp48UA8NoTALo6PABGGEYAVXVfANK99QBuksYArC5dAA5E7QAcPkIAYcSHACn96QDn1vMAInzKAG+RNQAI4MUA/9eNAG5q4gCw/cYAkwjBAHxddABrrbIAzW6dAD5yewDGEWoA98+pAClz3wC1yboAtwBRAOKyDQB0uiQA5X1gAHTYigANFSwAgRgMAH5mlAABKRYAn3p2AP39vgBWRe8A2X42AOzZEwCLurkAxJf8ADGoJwDxbsMAlMU2ANioVgC0qLUAz8wOABKJLQBvVzQALFaJAJnO4wDWILkAa16qAD4qnAARX8wA/QtKAOH0+wCOO20A4oYsAOnUhAD8tKkA7+7RAC41yQAvOWEAOCFEABvZyACB/AoA+0pqAC8c2ABTtIQATpmMAFQizAAqVdwAwMbWAAsZlgAacLgAaZVkACZaYAA/Uu4AfxEPAPS1EQD8y/UANLwtADS87gDoXcwA3V5gAGeOmwCSM+8AyRe4AGFYmwDhV7wAUYPGANg+EADdcUgALRzdAK8YoQAhLEYAWfPXANl6mACeVMAAT4b6AFYG/ADlea4AiSI2ADitIgBnk9wAVeiqAIImOADK55sAUQ2kAJkzsQCp1w4AaQVIAGWy8AB/iKcAiEyXAPnRNgAhkrMAe4JKAJjPIQBAn9wA3EdVAOF0OgBn60IA/p3fAF7UXwB7Z6QAuqx6AFX2ogAriCMAQbpVAFluCAAhKoYAOUeDAInj5gDlntQASftAAP9W6QAcD8oAxVmKAJT6KwDTwcUAD8XPANtargBHxYYAhUNiACGGOwAseZQAEGGHACpMewCALBoAQ78SAIgmkAB4PIkAqMTkAOXbewDEOsIAJvTqAPdnigANkr8AZaMrAD2TsQC9fAsApFHcACfdYwBp4d0AmpQZAKgplQBozigACe20AESfIABOmMoAcIJjAH58IwAPuTIAp/WOABRW5wAh8QgAtZ0qAG9+TQClGVEAtfmrAILf1gCW3WEAFjYCAMQ6nwCDoqEAcu1tADmNegCCuKkAazJcAEYnWwAANO0A0gB3APz0VQABWU0A4HGA"),C(u,115203,"QPsh+T8AAAAALUR0PgAAAICYRvg8AAAAYFHMeDsAAACAgxvwOQAAAEAgJXo4AAAAgCKC4zYAAAAAHfNpNf6CK2VHFWdAAAAAAAAAOEMAAPr+Qi52vzo7nrya9wy9vf3/////3z88VFVVVVXFP5ErF89VVaU/F9CkZxERgT8AAAAAAADIQu85+v5CLuY/JMSC/72/zj+19AzXCGusP8xQRtKrsoM/hDpOm+DXVT8="),C(u,115390,"8D9uv4gaTzubPDUz+6k99u8/XdzYnBNgcbxhgHc+muzvP9FmhxB6XpC8hX9u6BXj7z8T9mc1UtKMPHSFFdOw2e8/+o75I4DOi7ze9t0pa9DvP2HI5mFO92A8yJt1GEXH7z+Z0zNb5KOQPIPzxso+vu8/bXuDXaaalzwPiflsWLXvP/zv/ZIatY4890dyK5Ks7z/RnC9wPb4+PKLR0zLso+8/C26QiTQDarwb0/6vZpvvPw69LypSVpW8UVsS0AGT7z9V6k6M74BQvMwxbMC9iu8/FvTVuSPJkbzgLamumoLvP69VXOnj04A8UY6lyJh67z9Ik6XqFRuAvHtRfTy4cu8/PTLeVfAfj7zqjYw4+WrvP79TEz+MiYs8dctv61tj7z8m6xF2nNmWvNRcBITgW+8/YC86PvfsmjyquWgxh1TvP504hsuC54+8Hdn8IlBN7z+Nw6ZEQW+KPNaMYog7Ru8/fQTksAV6gDyW3H2RST/vP5SoqOP9jpY8OGJ1bno47z99SHTyGF6HPD+msk/OMe8/8ucfmCtHgDzdfOJlRSvvP14IcT97uJa8gWP14d8k7z8xqwlt4feCPOHeH/WdHu8/+r9vGpshPbyQ2drQfxjvP7QKDHKCN4s8CwPkpoUS7z+Py86JkhRuPFYvPqmvDO8/tquwTXVNgzwVtzEK/gbvP0x0rOIBQoY8MdhM/HAB7z9K+NNdOd2PPP8WZLII/O4/BFuOO4Cjhrzxn5JfxfbuP2hQS8ztSpK8y6k6N6fx7j+OLVEb+AeZvGbYBW2u7O4/0jaUPujRcbz3n+U02+fuPxUbzrMZGZm85agTwy3j7j9tTCqnSJ+FPCI0Ekym3u4/imkoemASk7wcgKwERdruP1uJF0iPp1i8Ki73IQrW7j8bmklnmyx8vJeoUNn10e4/EazCYO1jQzwtiWFgCM7uP+9kBjsJZpY8VwAd7UHK7j95A6Ha4cxuPNA8wbWixu4/MBIPP47/kzze09fwKsPuP7CvervOkHY8Jyo21dq/7j934FTrvR2TPA3d/ZmyvO4/jqNxADSUj7ynLJ12srnuP0mjk9zM3oe8QmbPotq27j9fOA+9xt54vIJPnVYrtO4/9lx77EYShrwPkl3KpLHuP47X/RgFNZM82ie1Nkev7j8Fm4ovt5h7PP3Hl9QSre4/CVQc4uFjkDwpVEjdB6vuP+rGGVCFxzQ8t0ZZiiap7j81wGQr5jKUPEghrRVvp+4/n3aZYUrkjLwJ3Ha54aXuP6hN7zvFM4y8hVU6sH6k7j+u6SuJeFOEvCDDzDRGo+4/WFhWeN3Ok7wlIlWCOKLuP2QZfoCqEFc8c6lM1FWh7j8oIl6/77OTvM07f2aeoO4/grk0h60Sary/2gt1EqDuP+6pbbjvZ2O8LxplPLKf7j9RiOBUPdyAvISUUfl9n+4/zz5afmQfeLx0X+zodZ/uP7B9i8BK7oa8dIGlSJqf7j+K5lUeMhmGvMlnQlbrn+4/09QJXsuckDw/Xd5PaaDuPx2lTbncMnu8hwHrcxSh7j9rwGdU/eyUPDLBMAHtoe4/VWzWq+HrZTxiTs8286LuP0LPsy/FoYi8Eho+VCek7j80NzvxtmmTvBPOTJmJpe4/Hv8ZOoRegLytxyNGGqfuP25XcthQ1JS87ZJEm9mo7j8Aig5bZ62QPJlmitnHqu4/tOrwwS+3jTzboCpC5azuP//nxZxgtmW8jES1FjKv7j9EX/NZg/Z7PDZ3FZmuse4/gz0epx8Jk7zG/5ELW7TuPykebIu4qV285cXNsDe37j9ZuZB8+SNsvA9SyMtEuu4/qvn0IkNDkrxQTt6fgr3uP0uOZtdsyoW8ugfKcPHA7j8nzpEr/K9xPJDwo4KRxO4/u3MK4TXSbTwjI+MZY8juP2MiYiIExYe8ZeVde2bM7j/VMeLjhhyLPDMtSuyb0O4/Fbu809G7kbxdJT6yA9XuP9Ix7pwxzJA8WLMwE57Z7j+zWnNuhGmEPL/9eVVr3u4/tJ2Ol83fgrx689O/a+PuP4czy5J3Gow8rdNamZ/o7j/62dFKj3uQvGa2jSkH7u4/uq7cVtnDVbz7FU+4ovPuP0D2pj0OpJC8OlnljXL57j80k6049NZovEde+/J2/+4/NYpYa+LukbxKBqEwsAXvP83dXwrX/3Q80sFLkB4M7z+smJL6+72RvAke11vCEu8/swyvMK5uczycUoXdmxnvP5T9n1wy4448etD/X6sg7z+sWQnRj+CEPEvRVy7xJ+8/ZxpOOK/NYzy15waUbS/vP2gZkmwsa2c8aZDv3CA37z/StcyDGIqAvPrDXVULP+8/b/r/P12tj7x8iQdKLUfvP0mpdTiuDZC88okNCIdP7z+nBz2mhaN0PIek+9wYWO8/DyJAIJ6RgryYg8kW42DvP6ySwdVQWo48hTLbA+Zp7z9LawGsWTqEPGC0AfMhc+8/Hz60ByHVgrxfm3szl3zvP8kNRzu5Kom8KaH1FEaG7z/TiDpgBLZ0PPY/i+cukO8/cXKdUezFgzyDTMf7UZrvP/CR048S94+82pCkoq+k7z99dCPimK6NvPFnji1Ir+8/CCCqQbzDjjwnWmHuG7rvPzLrqcOUK4Q8l7prNyvF7z/uhdExqWSKPEBFblt20O8/7eM75Lo3jrwUvpyt/dvvP53NkU07iXc82JCegcHn7z+JzGBBwQVTPPFxjyvC8+8/EhETFBUWFxgZGhscHR4fICERIiMkESUmJygpKissES0uLxAQMBAQEBAQEBAxMjMQNDUQEBERERERERERERERERERERERERERERERERE2ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERNxERERE4ETk6Ozw9PhERERERERERERERERERERERERERERERERERERERERERERERERERERERERE/EBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEUBBEUJDREVGR0hJShFLTE1OT1BREFJTVFVWV1hZWltcXRBeX2AQERERYWJjEBAQEBAQEBAQEBERERFkEBAQEBAQEBAQEBAQEBAQERFlEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQERFmZxAQaGkREREREREREREREREREREREREREREREWoREWsQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEWxtEBAQEBAQEBAQbhAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQb3BxchAQEBAQEBAQc3R1EBAQEBB2dxAQEBB4EBB5EBAQEBAQEBAQEBAQEBA="),C(u,117968,"//////////////////////////////////////////8AAAAAAAAAAP7//wf+//8HAAAAAAAEIAT//3////9//////////////////////////////////8P/AwAfUA=="),C(u,118072,"IAAAAAAA37xA1///+////////////7///////////////////////wP8///////////////////////////+////fwL//////wEAAAAA/7+2AP///4cHAAAA/wf//////////v/D////////////////7x/+4f+fAAD///////8A4P///////////////wMA//////8HMAT////8/x8AAP///wH/BwAAAAAAAP//3z8AAPD/+AP////////////v/9/h/8///v/vn/n///3F459ZgLDP/wMQ7of5///9bcOHGQJewP8/AO6/+////e3jvxsBAM//AB7un/n///3t458ZwLDP/wIA7Mc91hjH/8PHHYEAwP8AAO/f/f///f/j3x1gB8//AADv3/3///3v498dYEDP/wYA79/9/////+ffXfCAz/8A/Oz/f/z///svf4Bf/8D/DAD+/////3//Bz8g/wMAAAAA1vf//6///ztfIP/zAAAAAAEAAAD/AwAA//7///8f/v8D///+////HwAAAAAAAAAA////////f/n/A////////////z//////vyD///////f///////////89fz3//////z3/////PX89/3//////////Pf//////////BwAAAAD//wAA/////////////z8//v//////////////////////////////////////////////////////////n////v//B////////////8f/Af/fDwD//w8A//8PAP/fDQD////////P//8BgBD/AwAAAAD/A///////////////Af//////B///////////PwD///9//w//AcD/////Px8A//////8P////A/8DAAAAAP///w//////////f/7/HwD/A/8DgA=="),C(u,118768,"////////7//vD/8DAAAAAP//////8////////7//AwD///////9/AP/j//////8//wH//////+cAAAAAAN5vBP///////////////////////////////wAAAACA/x8A//8/P/////8/P/+q////P////////99f3B/PD/8f3B8="),C(u,118910,"AoAAAP8f"),C(u,118928,"hPwvPlC9//PgQwAA//////8B"),C(u,118982,"wP///////wMAAP//////f///////f/////////////////////8feAwA/////78g/////////4AAAP//fwB/f39/f39/f/////8AAAAAAIA="),C(u,119088,"4AAAAP4DPh/+////////////f+D+//////////////fg///////+/////////////38AAP///wcAAAAAAAD///////////////////////////////8/"),C(u,119184,"////////////////////////////////////////AAD//////////////////////x8AAAAAAAAAAP//////P/8f////DwAA//////9/8I///////////////////wAAAACA//z////////////////5////////fAAAAAAAgP+//////wAAAP///////w8A//////////8vAP8DAAD86P//////B/////8HAP///x/////////3/wCA/wP///9/////////fwD/P/8D//9//P////////9/BQAAOP//PAB+fn4Af3////////f/AP///////////////////wf/A///////////////////////////DwD//3/4//////8P/////////////////z//////////////////AwAAAAB/APjg//1/X9v/////////////////AwAAAPj///////////////8/AAD///////////z///////8AAAAAAP8P"),C(u,119582,"3/////////////////////8fAAD/A/7//wf+//8HwP////////////9//Pz8HAAAAAD/7///f///t/8//z8AAAAA////////////////////BwAAAAAAAAAA////////Hw=="),C(u,119712,"////H////////wEAAAAAAP////8A4P///wf//////wf///8//////w//PgAAAAAA/////////////////////////z//A/////8P/////w///////wD///////8P"),C(u,119824,"////////fwD//z8A/w=="),C(u,119856,"P/3/////v5H//z8A//9/AP///38AAAAAAAAAAP//NwD//z8A////AwAAAAAAAAAA/////////8AAAAAAAAAAAG/w7/7//z8AAAAAAP///x////8fAAAAAP/+//8fAAAA////////PwD//z8A//8HAP//Aw=="),C(u,119984,"////////////AQAAAAAAAP///////wcA////////BwD//////wD/Aw=="),C(u,120048,"////H4AA//8/"),C(u,120076,"//9/AP//////////PwAAAMD/AAD8////////AQAA////Af8D////////x/9wAP////9HAP//////////HgD/FwAAAAD///v///+fQAAAAAAAAAAAf73/v/8B/////////wH/A++f+f///e3jnxmB4A8="),C(u,120208,"//////////+7B/+DAAAAAP//////////swD/Aw=="),C(u,120256,"////////P38AAAA/AAAAAP////////9/EQD/AwAAAAD///////8/Af8DAAAAAAAA////5/8H/wM="),C(u,120336,"/////////wE="),C(u,120356,"////////////AwCA"),C(u,120388,"//z///////waAAAA////////538AAP///////////yAAAAAA/////////wH//f////9/fwEA/wMAAPz////8///+fw=="),C(u,120464,"f/v/////f7TLAP8Dv/3///9/ewH/Aw=="),C(u,120524,"//9/AP////////////////////////8D"),C(u,120560,"/////////////////38AAP///////////////////////////////w8="),C(u,120624,"//////9/"),C(u,120656,"//////////9/"),C(u,120688,"/////////wH///9//wM="),C(u,120714,"////PwAA////////AAAPAP8D+P//4P//"),C(u,120760,"//////////8="),C(u,120784,"////////////h/////////+A//8AAAAAAAAAAAsAAAD/////////////////////////////////////////AP///////////////////////////////////////wcA////fwAAAAAAAAcA8AD/////////////////////////////////////////////////////////////////D/////////////////8H/x//Af9D"),C(u,120976,"/////////////9///////////99k3v/r7/////////+/59/f////e1/8/f//////////////////////////////////////////////////////P/////3///f////3///f////3///f////3/////9/////f//98////////9////52wc="),C(u,121136,"//////8fgD//Qw=="),C(u,121192,"//////8P/wP///////////////////////////////8fAAAAAAAAAP//////////jwj/Aw=="),C(u,121264,"7////5b+9wqE6paqlvf3Xv/7/w/u+/8P"),C(u,121302,"////A////wP///8D"),C(u,121328,"/////////////////////////////////////////////////////////////////wABAgMEBQYHCAn/////////CgsMDQ4PEBESExQVFhcYGRobHB0eHyAhIiP///////8KCwwNDg8QERITFBUWFxgZGhscHR4fICEiI/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////8="),C(u,121601,"ARcCHRgTAx4bGQsUCAQNHxYcEhoKBwwVEQkGEAUPDt4SBJUAAAAA////////////////INsBABQAAABDLlVURi04"),C(u,121696,"TENfQ1RZUEUAAAAATENfTlVNRVJJQwAATENfVElNRQAAAAAATENfQ09MTEFURQAATENfTU9ORVRBUlkATENfTUVTU0FHRVM="),C(u,121776,"Qy5VVEYtOA=="),C(u,121800,"MAUCAE5vIGVycm9yIGluZm9ybWF0aW9uAElsbGVnYWwgYnl0ZSBzZXF1ZW5jZQBEb21haW4gZXJyb3IAUmVzdWx0IG5vdCByZXByZXNlbnRhYmxlAE5vdCBhIHR0eQBQZXJtaXNzaW9uIGRlbmllZABPcGVyYXRpb24gbm90IHBlcm1pdHRlZABObyBzdWNoIGZpbGUgb3IgZGlyZWN0b3J5AE5vIHN1Y2ggcHJvY2VzcwBGaWxlIGV4aXN0cwBWYWx1ZSB0b28gbGFyZ2UgZm9yIGRhdGEgdHlwZQBObyBzcGFjZSBsZWZ0IG9uIGRldmljZQBPdXQgb2YgbWVtb3J5AFJlc291cmNlIGJ1c3kASW50ZXJydXB0ZWQgc3lzdGVtIGNhbGwAUmVzb3VyY2UgdGVtcG9yYXJpbHkgdW5hdmFpbGFibGUASW52YWxpZCBzZWVrAENyb3NzLWRldmljZSBsaW5rAFJlYWQtb25seSBmaWxlIHN5c3RlbQBEaXJlY3Rvcnkgbm90IGVtcHR5AENvbm5lY3Rpb24gcmVzZXQgYnkgcGVlcgBPcGVyYXRpb24gdGltZWQgb3V0AENvbm5lY3Rpb24gcmVmdXNlZABIb3N0IGlzIGRvd24ASG9zdCBpcyB1bnJlYWNoYWJsZQBBZGRyZXNzIGluIHVzZQBCcm9rZW4gcGlwZQBJL08gZXJyb3IATm8gc3VjaCBkZXZpY2Ugb3IgYWRkcmVzcwBCbG9jayBkZXZpY2UgcmVxdWlyZWQATm8gc3VjaCBkZXZpY2UATm90IGEgZGlyZWN0b3J5AElzIGEgZGlyZWN0b3J5AFRleHQgZmlsZSBidXN5AEV4ZWMgZm9ybWF0IGVycm9yAEludmFsaWQgYXJndW1lbnQAQXJndW1lbnQgbGlzdCB0b28gbG9uZwBTeW1ib2xpYyBsaW5rIGxvb3AARmlsZW5hbWUgdG9vIGxvbmcAVG9vIG1hbnkgb3BlbiBmaWxlcyBpbiBzeXN0ZW0ATm8gZmlsZSBkZXNjcmlwdG9ycyBhdmFpbGFibGUAQmFkIGZpbGUgZGVzY3JpcHRvcgBObyBjaGlsZCBwcm9jZXNzAEJhZCBhZGRyZXNzAEZpbGUgdG9vIGxhcmdlAFRvbyBtYW55IGxpbmtzAE5vIGxvY2tzIGF2YWlsYWJsZQBSZXNvdXJjZSBkZWFkbG9jayB3b3VsZCBvY2N1cgBTdGF0ZSBub3QgcmVjb3ZlcmFibGUAUHJldmlvdXMgb3duZXIgZGllZABPcGVyYXRpb24gY2FuY2VsZWQARnVuY3Rpb24gbm90IGltcGxlbWVudGVkAE5vIG1lc3NhZ2Ugb2YgZGVzaXJlZCB0eXBlAElkZW50aWZpZXIgcmVtb3ZlZABEZXZpY2Ugbm90IGEgc3RyZWFtAE5vIGRhdGEgYXZhaWxhYmxlAERldmljZSB0aW1lb3V0AE91dCBvZiBzdHJlYW1zIHJlc291cmNlcwBMaW5rIGhhcyBiZWVuIHNldmVyZWQAUHJvdG9jb2wgZXJyb3IAQmFkIG1lc3NhZ2UARmlsZSBkZXNjcmlwdG9yIGluIGJhZCBzdGF0ZQBOb3QgYSBzb2NrZXQARGVzdGluYXRpb24gYWRkcmVzcyByZXF1aXJlZABNZXNzYWdlIHRvbyBsYXJnZQBQcm90b2NvbCB3cm9uZyB0eXBlIGZvciBzb2NrZXQAUHJvdG9jb2wgbm90IGF2YWlsYWJsZQBQcm90b2NvbCBub3Qgc3VwcG9ydGVkAFNvY2tldCB0eXBlIG5vdCBzdXBwb3J0ZWQATm90IHN1cHBvcnRlZABQcm90b2NvbCBmYW1pbHkgbm90IHN1cHBvcnRlZABBZGRyZXNzIGZhbWlseSBub3Qgc3VwcG9ydGVkIGJ5IHByb3RvY29sAEFkZHJlc3Mgbm90IGF2YWlsYWJsZQBOZXR3b3JrIGlzIGRvd24ATmV0d29yayB1bnJlYWNoYWJsZQBDb25uZWN0aW9uIHJlc2V0IGJ5IG5ldHdvcmsAQ29ubmVjdGlvbiBhYm9ydGVkAE5vIGJ1ZmZlciBzcGFjZSBhdmFpbGFibGUAU29ja2V0IGlzIGNvbm5lY3RlZABTb2NrZXQgbm90IGNvbm5lY3RlZABDYW5ub3Qgc2VuZCBhZnRlciBzb2NrZXQgc2h1dGRvd24AT3BlcmF0aW9uIGFscmVhZHkgaW4gcHJvZ3Jlc3MAT3BlcmF0aW9uIGluIHByb2dyZXNzAFN0YWxlIGZpbGUgaGFuZGxlAFJlbW90ZSBJL08gZXJyb3IAUXVvdGEgZXhjZWVkZWQATm8gbWVkaXVtIGZvdW5kAFdyb25nIG1lZGl1bSB0eXBlAE11bHRpaG9wIGF0dGVtcHRlZABSZXF1aXJlZCBrZXkgbm90IGF2YWlsYWJsZQBLZXkgaGFzIGV4cGlyZWQAS2V5IGhhcyBiZWVuIHJldm9rZWQAS2V5IHdhcyByZWplY3RlZCBieSBzZXJ2aWNl"),C(u,123730,"pQJbAPABtQWMBSUBgwYdA5QE/wDHAzEDCwa8AY8BfwPKBCsA2gavAEIDTgPcAQ4EFQChBg0BlAILAjgGZAK8Av8CXQPnBAsHzwLLBe8F2wXhAh4GRQKFAIICbANvBPEA8wMYBdkA2gNMBlQCewGdA70EAABRABUCuwCzA20A/wGFBC8F+QQ4AGUBRgGfALcGqAFzAlMB"),C(u,123928,"IQQAAAAAAAAAAC8C"),C(u,123960,"NQRHBFYE"),C(u,123982,"oAQ="),C(u,124002,"RgVgBW4FYQYAAM8BAAAAAAAAAADJBukG+QYeBzkHSQdeBw=="),C(u,124048,"GQAKABkZGQAAAAAFAAAAAAAACQAAAAALAAAAAAAAAAAZABEKGRkZAwoHAAEACQsYAAAJBgsAAAsABhkAAAAZGRk="),C(u,124129,"DgAAAAAAAAAAGQAKDRkZGQANAAACAAkOAAAACQAOAAAO"),C(u,124187,"DA=="),C(u,124199,"EwAAAAATAAAAAAkMAAAAAAAMAAAM"),C(u,124245,"EA=="),C(u,124257,"DwAAAAQPAAAAAAkQAAAAAAAQAAAQ"),C(u,124303,"Eg=="),C(u,124315,"EQAAAAARAAAAAAkSAAAAAAASAAASAAAaAAAAGhoa"),C(u,124370,"GgAAABoaGgAAAAAAAAk="),C(u,124419,"FA=="),C(u,124431,"FwAAAAAXAAAAAAkUAAAAAAAUAAAU"),C(u,124477,"Fg=="),C(u,124489,"FQAAAAAVAAAAAAkWAAAAAAAWAAAWAAAwMTIzNDU2Nzg5QUJDREVG"),C(u,124564,"EQ=="),C(u,124604,"//////////8="),C(u,124672,"0XSeAFedvSqAcFIP//8+JwoAAABkAAAA6AMAABAnAACghgEAQEIPAICWmAAA4fUFGAAAADUAAABxAAAAa////877//+Sv///AAAAAAAAAAACAADAAwAAwAQAAMAFAADABgAAwAcAAMAIAADACQAAwAoAAMALAADADAAAwA0AAMAOAADADwAAwBAAAMARAADAEgAAwBMAAMAUAADAFQAAwBYAAMAXAADAGAAAwBkAAMAaAADAGwAAwBwAAMAdAADAHgAAwB8AAMAAAACzAQAAwwIAAMMDAADDBAAAwwUAAMMGAADDBwAAwwgAAMMJAADDCgAAwwsAAMMMAADDDQAA0w4AAMMPAADDAAAMuwEADMMCAAzDAwAMwwQADNsAAAAAIAAAAAkAAAAKAAAADQAAAAsAAAAMAAAAhQAAAAAgAAABIAAAAiAAAAMgAAAEIAAABSAAAAYgAAAIIAAACSAAAAogAAAoIAAAKSAAAF8gAAAAMAAAAAAAAE4xMF9fY3h4YWJpdjExNl9fc2hpbV90eXBlX2luZm9FAAAAAGjpAQB46AEAZOoBAE4xMF9fY3h4YWJpdjExN19fY2xhc3NfdHlwZV9pbmZvRQAAAGjpAQCo6AEAnOgBAE4xMF9fY3h4YWJpdjExN19fcGJhc2VfdHlwZV9pbmZvRQAAAGjpAQDY6AEAnOgBAE4xMF9fY3h4YWJpdjExOV9fcG9pbnRlcl90eXBlX2luZm9FAGjpAQAI6QEA/OgBAAAAAADM6AEAFAAAABUAAAAWAAAAFwAAABgAAAAZAAAAGgAAABsAAAAAAAAAsOkBABQAAAAcAAAAFgAAABcAAAAYAAAAHQAAAB4AAAAfAAAATjEwX19jeHhhYml2MTIwX19zaV9jbGFzc190eXBlX2luZm9FAAAAAGjpAQCI6QEAzOgBAAAAAAAg6gEACQAAACAAAAAhAAAAAAAAAEjqAQAJAAAAIgAAACMAAAAAAAAACOoBAAkAAAAkAAAAJQAAAFN0OWV4Y2VwdGlvbgAAAABA6QEA+OkBAFN0OWJhZF9hbGxvYwAAAABo6QEAEOoBAAjqAQBTdDIwYmFkX2FycmF5X25ld19sZW5ndGgAAAAAaOkBACzqAQAg6gEAU3Q5dHlwZV9pbmZvAAAAAEDpAQBU6gE="),C(u,125552,"wLEAAMCyAADAswAAwLQAAMC1AADAtgAAwLcAAMC4AADAuQAAwLoAAMC7AADAvAAAwL0AAMC+AADAvwAAwMAAAMDBAADAwgAAwMMAAMDEAADAxQAAwMIAAMDGAADAxwAAwMgAAMDJAADAygAAwMsAAMDMAADAzQAAwM4AAMDPAADA0AAAwNEAAMDSAADA0wAAwNQAAMDVAADA1gAAwNcAAMDYAADA2QAAwNIAAMDaAADA2wAAwNwAAMDdAADA3gAAwN8AAMDgAADA4QAAwNgAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADA4gAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwOMAAMDkAADAwgAAwMIAAMDCAADA5QAAwMIAAMDmAADA5wAAwOgAAMDpAADA6gAAwOsAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADA7AAAwO0AAMDCAADA7gAAwO8AAMDCAADA8AAAwPEAAMDyAADA8wAAwPQAAMD1AADA9gAAwPcAAMD4AADAwgAAwPkAAMD6AADA+wAAwPwAAMD9AADA/gAAwP8AAMAAAQDAAQEAwAIBAMADAQDABAEAwAUBAMAGAQDABwEAwAgBAMAJAQDACgEAwAsBAMAMAQDACwEAwA0BAMAOAQDADwEAwAsBAMDCAADAwgAAwMIAAMAQAQDAEQEAwBIBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDAwgAAwMIAAMDCAADAwgAAwBMBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMDCAADAwgAAwBQBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMDCAADAwgAAwBUBAMAWAQDACwEAwAsBAMAXAQDAGAEAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAGQEAwMIAAMDCAADAGgEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMDCAADAGwEAwBwBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMAdAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwB4BAMAfAQDAIAEAwCEBAMAiAQDAIwEAwCQBAMAlAQDA2AAAwNgAAMAmAQDACwEAwAsBAMALAQDACwEAwAsBAMAnAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwCgBAMApAQDACwEAwAsBAMAqAQDACwEAwCsBAMALAQDALAEAwC0BAMAuAQDALwEAwNgAAMDYAADAMAEAwDEBAMAyAQDAMwEAwDQBAMALAQDACwEAwAsBAMALAQDACwEAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMA1AQDAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwDYBAMA3AQDAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAOAEAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMDCAADAwgAAwMIAAMA5AQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDACwEAwAsBAMALAQDAwgAAwMIAAMA6AQDAOwEAwDwB"),C(u,128496,"oVcBAEEAAADdVwEAQgAAACZYAQBDAAAAa1gBAEQAAADSWAEARQAAABNZAQBGAAAAfFkBAEcAAACEWQEASAAAADBaAQBJAAAAZ1oBAEoAAADuWgEASwAAAC5bAQBMAAAAcVsBAE0AAADZWwEATgAAAGtcAQBPAAAAh1wBAAgAAADcXAEACQAAAB9dAQAKAAAAZ10BAAsAAACVXQEADAAAAMpdAQANAAAAD14BAA4AAAAqXgEADwAAAIZeAQAPAAAAvV4BABAAAABDXwEAEQAAAH1fAQASAAAAq18BABMAAADZXwEAFAAAAAVgAQAVAAAAMGABABcAAABgYAEAGAAAAHlgAQAZAAAAtWABABsAAADdYAEAHAAAAPBgAQAdAAAAI2EBACAAAABEYQEAIQAAAG9hAQAiAAAAnWEBACMAAADRYQEAJAAAAPNhAQAlAAAAFWIBACYAAABZYgEAKAAAAH1iAQApAAAArmIBACoAAADoYgEAKwAAADVjAQAtAAAAb2MBAC4AAACnYwEALwAAAOZjAQAwAAAAeGQBADEAAACdZAEAMgAAAM9kAQAzAAAA/mQBAGQAAABgZQEAyAAAAN1lAQDJAAAAAAAAAP////8iZgEAAQAAAD5mAQACAAAABVUBAAMAAADNZgEAEQAAADRnAQASAAAAg2cBABMAAAD7ZwEAFAAAADtoAQAVAAAATGgBABYAAAB0aAEAEQAAALdoAQAhAAAAymgBACIAAAD+aAEAIwAAAEtpAQAkAAAAaWkBACUAAACfaQEAJgAAAOJpAQAhAAAAAAAAAP////8AAAAAAAAAACYAAAAAAAAAAQAAAJByAQABAAAAkHMBAAEAAACQdAEAAQAAAJB1AQABAAAAkHYBAAEAAACQdwEAAQAAAJB4AQABAAAAkHkBAAEAAACQegEAAQAAAJB7AQABAAAAkHwBAAEAAACQfQEAAQAAAJB+AQABAAAAkH8BAAEAAACQgAEAAQAAAJCBAQABAAAAkIIBAAUAAAAAAAAABg=="),C(u,129280,"oIMBAKCDAQAghAEAIIQBAKCEAQAghQEAoIUBACCGAQCghgEAoIYBACCHAQAghwEAoIcBAKCHAQAgiAEAIIgBAKCIAQCgiAEAIIkBACCJAQAuOU4ycIoBAAMHBQCQigEALjlOLnCKAQADBwUAkIoBAC45Ti5wigEAAwcFAJCKAQAuOVoycIoBAAMJBQCVigEALjlOMnCKAQADBwUAkIoBAC45SjdwigEABAcFAJqKAQAuOUo3cIoBAAQHBQCaigEALjlKN3CKAQAEBwUAmooBAC45TjJwigEAAwcFAJCKAQAuOU4ucIoBAAMHBQCQigEALjlOMnCKAQADBwUAkIoBACIpKSBwigEAAwcFAJqKAQAuOTcycIoBAAMHBQCaigEAo1MBABABAAAAVAEADAEAANJUAQARAQAAClUBACMAAAB/VQEAGwAAADRWAQAVAAAAxVYBAAABAAABVwEAAgEAAE1XAQADAQAAvVcBAAQBAAD7VwEABQEAAE5YAQATAAAAkVgBAB4AAADVWAEAFwAAAF9ZAQAaAAAAkVkBABkAAAD0WQEAGAAAADhaAQAdAAAAzloBABwAAAAPWwEAFgAAADdbAQAU"),C(u,129744,"Q1gBABABAACIWAEADAEAAPNYAQARAQAAM1kBACMAAACHWQEAGwAAAOBZAQAVAAAAQloBAAABAACcWgEAAgEAAABbAQADAQAAT1sBAAQBAACnWwEABQEAAEhcAQATAAAAc1wBAB4AAADEXAEAFwAAABVdAQAaAAAAXV0BABkAAACIXQEAGAAAANJdAQAdAAAABF4BABwAAAAvXgEAFgAAAF9eAQAU"),C(u,129920,"u08BAAEAAABcUAEAAAAAAM9QAQAAAAAAOFIBAAAAAABBUwEAAAAAAIFTAQAAAAAA+1MBAAAAAADnVAEAAAAAACVVAQAAAAAAiVUBAAAAAABUVgEAAAAAAPxWAQAAAAAADlcBAAAAAABIVwEAAAAAAKdXAQAAAAAA9lcBAAAAAAA3WAEAAAAAAKNYAQAAAAAA6FgBAAAAAAAuWQEAAAAAAH9ZAQAAAAAA61kBAAAAAAD/////g00BAIIAAAB5AAAAdg=="),C(u,130128,"4I8BAOCPAQBQkAEAwJABAMCQAQDAkAEAAQAAANQKAwCMCgMAROcC"),C(u,130176,"I0sBAAEAAAAAAAAA/////1dMAQABAAAA+0wBAAIAAADGTQEAAwAAAAAAAAD/////Vk4BAAAAAADSTgEAAQAAALJPAQACAAAAGFABABQAAAAAAAAA/////wAAAAAAAAAAt1ABABIAAABNUgEAFAAAAN5SAQAkAAAAhlMBAEAAAAARVAEAwQAAAAAAAAD/////q1QBAAEAAAAAAAAA/////1dMAQAAAAAAGVUBAAEAAACRVQEAAgAAAENWAQADAAAA31YBAAQAAAAgVwEABQAAAAAAAAD/////AAAAAAAAAABXTAEAAQAAAIlXAQACAAAAr1cBAAMAAADfVgEABAAAACBXAQAFAAAAAAAAAP////8AAAAAClgBADxYAQAYUAEAqFgB"),C(u,130480,"8l8BAAEAAAA5YAEAAgAAAFhgAQADAAAAgWABAAQAAACwYAEABQAAANNgAQAGAAAABWEBAAcAAAAqYQEACAAAAFFhAQAJAAAAdmEBAAoAAACQYQEACwAAAMNhAQAMAAAA+WEBAA0AAAAuYgEADgAAAE5iAQAPAAAAhmIBAA8AAADUYgEADwAAABljAQAPAAAAP2MBAA8AAACkYwEABwAAANpjAQAHAAAAO2QBAAcAAACEZAEABwAAAK9kAQAHAAAAw2QBAA4AAADnZAEADgAAAAplAQAQAAAA9GUBABAAAAArZgEAEAAAAN9WAQAQAAAAbmYBABAAAADBZgEAEA=="),C(u,130752,"f20BAD4AAACjbQEAPOAAAM1tAQAmAAAA1G0BACIAAAA6bgEAIAAAAHhuAQAnAAAAAAAAAP////8AAAAAAAAAAGNnAQBkAAAAxWcBAAAAAAAJaAEAHgAAAEJoAQBBAAAAQ1YBAGQAAACGaAEAlgAAAKVoAQDmAAAAAAAAAP////9jZwEAZAAAAL5oAQA8AAAA6WgBAFAAAABDVgEAZAAAABJpAQB9AAAAUmkBAKAAAAAAAAAA/////wAAAAAAAAAAY2cBAGQAAACUaQEARgAAAN5pAQBVAAAAQ1YBAGQAAAAoagEAbgAAAGdqAQB4AAAAAAAAAP////8AAAAAAAAAAGNnAQBkAAAAlGkBABQAAADeaQEAMgAAAENWAQBkAAAAKGoBAIwAAABnagEAtAAAAAAAAAD/////"),C(u,131076,"QP8BAAD/AQCA/wEAwP8B"),C(u,131104,"wmoBACDgAAALawEACeAAAEFrAQBf4AAAe2sBACI="),C(u,131152,"q2sBAAEAAAC8awEAAgAAAA1sAQAD"),C(u,131184,"+EwBAMJNAQBTTgEACU8BAOVPAQBkUAEA2lABAGdSAQDyUgEA1FMBAGFUAQ=="),C(u,131236,"iFIBADlTAQAAAAAAnlMBAGRUAQDwVAEAL1UBAJpVAQBQVgE="),C(u,131280,"Y1IBAIADAACAA/8DbGUAAAcAAAA0UwEAIAQAAAAELwUAAAAAAAAAAHNTAQAwBQAAMAWPBXloAAAEAAAAG1QBAJAFAACQBf8FAAAAAAAAAAC3VAEAAAYAAAAG/wYAAAAAAAAAACpVAQAABwAAAAdPBwAAAAAAAAAAllUBAAAJAAAACX8JaWgAAAQAAAA/VgEAgAkAAIAJ/wluYgAABAAAANZWAQAACgAAAAp/CmFwAAAEAAAAClcBAIAKAACACv8KdWcAAAQAAABfVwEAAAsAAAALfwsAAAAAAAAAAM5XAQCACwAAgAv/C2F0AAAEAAAAD1gBAAAMAAAADH8MZXQAAAAAAAAsWAEAgAwAAIAM/wxuawAABAAAAJ9YAQAADQAAAA1/DWxtAAAEAAAA5FgBAIANAACADf8NaXMAAAQAAAA8WQEAAA4AAAAOfw4AAAAAAAAAAJtZAQCADgAAgA7/DgAAAAAAAAAA8FkBAAAPAAAAD/8PAAAAAAAAAAA0WgEAABAAAAAQnxAAAAAAAAAAANlaAQCgEAAAoBD/EGFrAAAEAAAAGFsBAAARAAAAEf8Rb2sAAAQAAABKWwEAABIAAAASnxMAAAAAAAAAALlbAQAAKAAAACj/KAAAAAAQAAAAWlwBAEAwAABAMP8wAAAAAAgAAACDXAEAADEAAAAx/58AAAAACAAAABhbAQAApwAAAKf/129rAAAM"),C(u,131840,"WAIAAKoAAACwBAAAhwAAANAHAABuAAAAuAsAAG4AAAD/////"),C(u,131888,"qAsD"),C(u,131904,"mF4BAAEAAAA4XwEAAgAAAGFfAQADAAAAnV8BAAYAAADCXwEACQAAAPhfAQAKAAAAJ2ABAAQAAABNYAEABQAAAI1gAQAkAAAAq2ABAAsAAADVYAEADAAAAPZgAQANAAAAFmEBAA4AAABMYQEADwAAAGdhAQAQAAAAlmEBABEAAAC7YQEAEgAAAAJiAQAfAAAAG2IBACUAAABIYgEAIAAAAJJiAQAhAAAAzmIBACIAAADwYgEABwAAAC5jAQAI"),C(u,132112,"jmMBAAEAAAC8YwEAAgAAAAAAAAABAAAAFJwBACCcAQAsnAEAPAAAABo="),C(u,132163,"AgMFCAsOEhYbICUrMTc+RUxTWmJpcXmAiJCYn6autbzCyc/V2uDk6e3w9Pb5+/z9/f39/Pv59vTw7enk4NrVz8nCvLWupp+YkIiAeXFpYlpTTEU+NzErJSAbFhIOCwgFAwI="),C(u,132288,"QAAAAAABAAAAAAAA7AQCACcAAAAoAAAAKQAAACoAAAArAAAAQOkBAMO2AQBo6QEAsLYBAOQEAgAAAAAAJAUCACwAAAAtAAAALgAAAC8AAABA6QEAArcBAGjpAQDstgEAEAUCAGjpAQDStgEAGAUCAAU="),C(u,132412,"DQ=="),C(u,132436,"CwAAAAoAAADoeAM="),C(u,132460,"Ag=="),C(u,132476,"//////////8="),C(u,132544,"MAUCAAAAAAAF"),C(u,132564,"MA=="),C(u,132588,"CwAAADEAAAD4eAMAAAQ="),C(u,132612,"AQ=="),C(u,132628,"/////wo="),C(u,132696,"yAUCAAB/BA==");var _n,KA=(_n=[null,function(A){var t,r=0;return r=e[(A|=0)>>2],e[A>>2]=r+1,r=255&(t=f[0|r]),(0|t)<0&&(r=y[(e[A+12>>2]+(r<<1)|0)-256>>1]),0|r},Bo,function(A){var t,r;return t=e[(A|=0)>>2],r=e[t>>2],e[A>>2]=t+4,0|r},function(A){var t=0,r=0;return t=e[(A|=0)>>2],(0|(r=Oe(A)))==65533&&(e[A>>2]=t+1,e[A+8>>2]=1,r=255&(t=f[0|t]),(0|t)>=0||(r=y[(e[A+12>>2]+(r<<1)|0)-256>>1])),0|r},Oe,function(A){var t,r,s=0;return(s=e[4+(A|=0)>>2])>>>0<=(r=(t=e[A>>2])+1|0)>>>0?(e[A>>2]=s,65533):(e[A>>2]=r,s=d[0|t],e[A>>2]=t+2,s|d[t+1|0]<<8)},function(A,t){var r,s,i;return t|=0,A=e[(A|=0)>>2],r=e[A+4>>2],s=e[t>>2],(t=Ut(r+1|0,(i=e[s+4>>2])+1|0))||(t=f[0|r]-f[0|i]|0)||(t=Ut(e[A>>2],e[s>>2])),0|t},function(A,t){var r;return A|=0,t=e[(t|=0)>>2],r=e[A>>2],(A=e[t+16>>2]-e[r+16>>2]|0)||(A=Ut(e[r>>2],e[t>>2])),0|A},Vi,function(A,t,r,s){var i;return t|=0,r|=0,s|=0,H=i=H-16|0,(A=0|Je(e[60+(A|=0)>>2],0|t,0|r,255&s,i+8|0))?(e[56798]=A,A=-1):A=0,H=i+16|0,he=A?-1:e[i+12>>2],0|(A?-1:e[i+8>>2])},function(A,t,r){t|=0,r|=0;var s,i=0,l=0,c=0,g=0,p=0,I=0;H=s=H-32|0,i=e[28+(A|=0)>>2],e[s+16>>2]=i,c=e[A+20>>2],e[s+28>>2]=r,e[s+24>>2]=t,t=c-i|0,e[s+20>>2]=t,c=t+r|0,p=2;e:{A:{t=s+16|0,(i=0|Ne(e[A+60>>2],0|t,2,s+12|0))?(e[56798]=i,i=-1):i=0;r:{if(i)i=t;else for(;;){if((0|(l=e[s+12>>2]))==(0|c))break r;if((0|l)<0){i=t;break A}if(g=l-((I=(g=e[t+4>>2])>>>0<l>>>0)?g:0)|0,e[(i=(I<<3)+t|0)>>2]=g+e[i>>2],e[(t=(I?12:4)+t|0)>>2]=e[t>>2]-g,c=c-l|0,t=i,p=p-I|0,(l=0|Ne(e[A+60>>2],0|t,0|p,s+12|0))?(e[56798]=l,l=-1):l=0,l)break}if((0|c)!=-1)break A}t=e[A+44>>2],e[A+28>>2]=t,e[A+20>>2]=t,e[A+16>>2]=t+e[A+48>>2],A=r;break e}e[A+28>>2]=0,e[A+16>>2]=0,e[A+20>>2]=0,e[A>>2]=32|e[A>>2],A=0,(0|p)!=2&&(A=r-e[i+4>>2]|0)}return H=s+32|0,0|A},function(A,t,r){A|=0,t|=0,r|=0;var s,i=0,l=0,c=0;H=s=H-32|0,e[s+16>>2]=t,i=e[A+48>>2],e[s+20>>2]=r-!!(0|i),l=e[A+44>>2],e[s+28>>2]=i,e[s+24>>2]=l;e:{A:{if((i=0|AA(e[A+60>>2],s+16|0,2,s+12|0))?(e[56798]=i,i=-1):i=0,i)t=32;else{if((0|(i=e[s+12>>2]))>0)break A;t=i?32:16}e[A>>2]=t|e[A>>2];break e}c=i,(l=e[s+20>>2])>>>0>=i>>>0||(i=e[A+44>>2],e[A+4>>2]=i,e[A+8>>2]=i+(c-l|0),e[A+48>>2]&&(e[A+4>>2]=i+1,f[(t+r|0)-1|0]=d[0|i]),c=r)}return H=s+32|0,0|c},function(A){return 0|ve(e[60+(A|=0)>>2])},Za,function(A,t,r,s,i,l){A|=0,t=+t,r|=0,s|=0,i|=0,l|=0;var c,g=0,p=0,I=0,h=0,M=0,P=0,z=0,Y=0,V=0,X=0,te=0,ne=0,me=0,ke=0,ye=0,Pe=0,_e=0,Ke=0;H=c=H-560|0,e[c+44>>2]=0,F(+t),g=0|v(1),v(0),(0|g)<0?(ne=1,_e=84997,F(+(t=-t)),g=0|v(1),v(0)):2048&i?(ne=1,_e=85e3):(_e=(ne=1&i)?85003:84998,Ke=!ne);e:if(2146435072&~g){ke=c+16|0;A:{r:{a:{if(t=ai(t,c+44|0),(t+=t)!=0){if(g=e[c+44>>2],e[c+44>>2]=g-1,(0|(ye=32|l))!=97)break a;break A}if((0|(ye=32|l))==97)break A;M=e[c+44>>2],P=(0|s)<0?6:s;break r}M=g-29|0,e[c+44>>2]=M,t*=268435456,P=(0|s)<0?6:s}for(p=X=(c+48|0)+((0|M)>=0?288:0)|0;s=t<4294967296&t>=0?~~t>>>0:0,e[p>>2]=s,p=p+4|0,(t=1e9*(t-+(s>>>0)))!=0;);if((0|M)<=0)s=M,g=p,I=X;else for(I=X,s=M;;){if(Y=(0|s)>=29?29:s,!(I>>>0>(g=p-4|0)>>>0)){for(s=0;h=e[g>>2],Pe=s,s=31&Y,(63&Y)>>>0>=32?(z=h<<s,s=0):(z=(1<<s)-1&h>>>32-s,s=h<<s),h=z+V|0,s=Yi(Pe=Pe+s|0,s>>>0>Pe>>>0?h+1|0:h,1e9),e[g>>2]=Pe-At(s,he,1e9,0),I>>>0<=(g=g-4|0)>>>0;);s&&(e[(I=I-4|0)>>2]=s)}for(;I>>>0<(g=p)>>>0&&!e[(p=g-4|0)>>2];);if(s=e[c+44>>2]-Y|0,e[c+44>>2]=s,p=g,!((0|s)>0))break}if((0|s)<0)for(me=1+((P+25>>>0)/9|0)|0,V=(0|ye)==102;;){if(z=(0|(s=0-s|0))>=9?9:s,g>>>0<=I>>>0)p=e[I>>2];else{for(Y=1e9>>>z|0,h=~(-1<<z),s=0,p=I;Pe=s,s=e[p>>2],e[p>>2]=Pe+(s>>>z|0),s=O(Y,s&h),(p=p+4|0)>>>0<g>>>0;);p=e[I>>2],s&&(e[g>>2]=s,g=g+4|0)}if(s=z+e[c+44>>2]|0,e[c+44>>2]=s,I=(!p<<2)+I|0,g=g-(p=V?X:I)>>2>(0|me)?p+(me<<2)|0:g,!((0|s)<0))break}if(s=0,!(g>>>0<=I>>>0||(s=O(X-I>>2,9),p=10,(h=e[I>>2])>>>0<10)))for(;s=s+1|0,h>>>0>=(p=O(p,10))>>>0;);if((0|(p=(P-((0|ye)!=102?s:0)|0)-((0|ye)==103&!!(0|P))|0))<(O(g-X>>2,9)-9|0)){if(M=((((0|M)<0?4:292)+c|0)+((h=(0|(Y=p+9216|0))/9|0)<<2)|0)-4048|0,p=10,(0|(z=Y-O(h,9)|0))<=7)for(;p=O(p,10),(0|(z=z+1|0))!=8;);if(!(!(V=(Y=e[M>>2])-O(p,me=(Y>>>0)/(p>>>0)|0)|0)&(0|(h=M+4|0))==(0|g))&&(!(1&me)&&(t=9007199254740992,!(1&f[M-4|0])|(0|p)!=1e9|I>>>0>=M>>>0)||(t=9007199254740994),te=(0|g)==(0|h)?1:1.5,te=(h=p>>>1|0)>>>0>V>>>0?.5:(0|h)==(0|V)?te:1.5,d[0|_e]!=45|Ke||(te=-te,t=-t),h=Y-V|0,e[M>>2]=h,t+te!=t)){if(s=p+h|0,e[M>>2]=s,s>>>0>=1e9)for(;e[M>>2]=0,(M=M-4|0)>>>0<I>>>0&&(e[(I=I-4|0)>>2]=0),s=e[M>>2]+1|0,e[M>>2]=s,s>>>0>999999999;);if(s=O(X-I>>2,9),p=10,!((h=e[I>>2])>>>0<10))for(;s=s+1|0,h>>>0>=(p=O(p,10))>>>0;);}g=g>>>0>(p=M+4|0)>>>0?p:g}for(;h=g,!(Y=g>>>0<=I>>>0)&&!e[(g=h-4|0)>>2];);if((0|ye)==103){if(P=((g=(0|(p=P||1))>(0|s)&(0|s)>-5)?~s:-1)+p|0,l=(g?-1:-2)+l|0,!(M=8&i)){if(g=-9,!Y&&(M=e[h-4>>2])&&(z=10,g=0,!((M>>>0)%10|0))){for(;p=g,g=g+1|0,!((M>>>0)%((z=O(z,10))>>>0)|0););g=~p}p=O(h-X>>2,9),(-33&l)!=70?(M=0,P=(0|(g=(0|(g=((s+p|0)+g|0)-9|0))>0?g:0))>(0|P)?P:g):(M=0,P=(0|(g=(0|(g=(g+p|0)-9|0))>0?g:0))>(0|P)?P:g)}}else M=8&i;if(z=-1,(0|((Y=M|P)?2147483645:2147483646))<(0|P))break e;if(V=1+(!!(0|Y)+P|0)|0,(0|(p=-33&l))!=70){if((ke-(g=Zs(((g=s>>31)^s)-g|0,0,ke))|0)<=1)for(;f[0|(g=g-1|0)]=48,(ke-g|0)<2;);if(f[0|(me=g-2|0)]=l,f[g-1|0]=(0|s)<0?45:43,(0|(g=ke-me|0))>(2147483647^V))break e}else{if((2147483647^V)<(0|s))break e;g=(0|s)>0?s:0}if((0|(s=g+V|0))>(2147483647^ne))break e;xr(A,32,r,V=s+ne|0,i),Or(A,_e,ne),xr(A,48,r,V,65536^i);r:{a:{n:{if((0|p)==70){for(s=8|(l=c+16|0),M=9|l,I=p=I>>>0>X>>>0?X:I;;){g=Zs(e[I>>2],0,M);o:if((0|p)==(0|I))(0|g)==(0|M)&&(f[c+24|0]=48,g=s);else{if(c+16>>>0>=g>>>0)break o;for(;f[0|(g=g-1|0)]=48,c+16>>>0<g>>>0;);}if(Or(A,g,M-g|0),!(X>>>0>=(I=I+4|0)>>>0))break}if(Y&&Or(A,85998,1),(0|P)<=0|I>>>0>=h>>>0)break n;for(;;){if((g=Zs(e[I>>2],0,M))>>>0>c+16>>>0)for(;f[0|(g=g-1|0)]=48,c+16>>>0<g>>>0;);if(Or(A,g,(0|P)>=9?9:P),g=P-9|0,h>>>0<=(I=I+4|0)>>>0)break a;if(s=(0|P)>9,P=g,!s)break}break a}o:if(!((0|P)<0))for(X=I>>>0<h>>>0?h:I+4|0,s=8|(l=c+16|0),h=9|l,p=I;;){(0|h)==(0|(g=Zs(e[p>>2],0,h)))&&(f[c+24|0]=48,g=s);c:if((0|p)==(0|I))Or(A,g,1),g=g+1|0,M|P&&Or(A,85998,1);else{if(c+16>>>0>=g>>>0)break c;for(;f[0|(g=g-1|0)]=48,c+16>>>0<g>>>0;);}if(Or(A,g,(0|(l=h-g|0))>(0|P)?P:l),P=P-l|0,X>>>0<=(p=p+4|0)>>>0)break o;if(!((0|P)>=0))break}xr(A,48,P+18|0,18,0),Or(A,me,ke-me|0);break r}g=P}xr(A,48,g+9|0,9,0)}xr(A,32,r,V,8192^i),z=(0|r)<(0|V)?V:r;break e}if(M=(l<<26>>31&9)+_e|0,!(s>>>0>11)){for(g=12-s|0,te=16;te*=16,g=g-1|0;);t=d[0|M]!=45?t+te-te:-(te+(-t-te))}for((0|ke)==(0|(g=Zs(((g=e[c+44>>2])^(p=g>>31))-p|0,0,ke)))&&(f[c+15|0]=48,g=c+15|0),X=2|ne,I=32&l,p=e[c+44>>2],f[0|(P=g-2|0)]=l+15,f[g-1|0]=(0|p)<0?45:43,g=8&i,p=c+16|0;l=p,h=$(t)<2147483648?~~t:-2147483648,f[0|p]=I|d[h+124512|0],!((0|s)>0|g)&(t=16*(t-+(0|h)))==0|((p=l+1|0)-(c+16|0)|0)!=1||(f[l+1|0]=46,p=l+2|0),t!=0;);z=-1,(2147483645-(l=(g=ke-P|0)+X|0)|0)<(0|s)||(xr(A,32,r,l=(s=!s||((I=p-(c+16|0)|0)-2|0)>=(0|s)?I=p-(c+16|0)|0:s+2|0)+l|0,i),Or(A,M,X),xr(A,48,r,l,65536^i),Or(A,c+16|0,I),xr(A,48,s-I|0,0,0),Or(A,P,g),xr(A,32,r,l,8192^i),z=(0|r)<(0|l)?l:r)}else xr(A,32,r,g=ne+3|0,-65537&i),Or(A,_e,ne),s=32&l,Or(A,t!=t?s?85596:85774:s?85247:85460,3),xr(A,32,r,g,8192^i),z=(0|r)<(0|g)?g:r;return H=c+560|0,0|z},function(A,t){var r;A|=0,r=t|=0,t=e[t>>2]+7&-8,e[r>>2]=t+16,T[A>>3]=Ca(e[t>>2],e[t+4>>2],e[t+8>>2],e[t+12>>2])},function(A,t,r){t|=0,r|=0;var s,i,l=0,c=0;return s=e[84+(A|=0)>>2],c=e[s+4>>2],i=e[A+28>>2],(l=(l=e[A+20>>2]-i|0)>>>0>c>>>0?c:l)&&(rt(e[s>>2],i,l),e[s>>2]=l+e[s>>2],c=e[s+4>>2]-l|0,e[s+4>>2]=c),l=e[s>>2],(c=r>>>0>c>>>0?c:r)&&(rt(l,t,c),l=c+e[s>>2]|0,e[s>>2]=l,e[s+4>>2]=e[s+4>>2]-c),f[0|l]=0,t=e[A+44>>2],e[A+28>>2]=t,e[A+20>>2]=t,0|r},function(A,t,r){r|=0;var s,i,l=0;return rt(t|=0,s=e[84+(A|=0)>>2],r=r>>>0>(l=(i=ba(s,0,l=r+256|0))?i-s|0:l)>>>0?l:r),t=s+l|0,e[A+84>>2]=t,e[A+8>>2]=t,e[A+4>>2]=r+s,0|r},function(A,t,r){t|=0,r|=0;var s,i=0,l=0,c=0;i=e[84+(A|=0)>>2],s=e[i>>2]?i:84412,i=0;e:if(e[A+48>>2])for(;;){if(!(l=e[(i<<2)+s>>2]))break e;if(f[e[A+44>>2]+i|0]=(0|l)>=128?64:l,!((i=i+1|0)>>>0<ee[A+48>>2]))break}return l=e[A+44>>2],e[A+4>>2]=l,e[A+84>>2]=(i<<2)+s,e[A+8>>2]=i+l,!r|!i||(e[A+4>>2]=l+1,f[0|t]=d[0|l],c=1),0|c},Vi,hn,Hi,Hi,function(A,t,r){r|=0;var s,i=0;return H=s=H+-64|0,i=1,Js(A|=0,t|=0,0)||(i=0,t&&(i=0,(t=xA(t,125132))&&(Ve(4|(i=s+8|0),0,52),e[s+56>>2]=1,e[s+20>>2]=-1,e[s+16>>2]=A,e[s+8>>2]=t,KA[e[e[t>>2]+28>>2]](t,i,e[r>>2],1),(0|(A=e[s+32>>2]))==1&&(e[r>>2]=e[s+24>>2]),i=(0|A)==1))),H=s- -64|0,0|i},function(A,t,r,s,i,l){r|=0,s|=0,i|=0,l|=0,Js(A|=0,e[8+(t|=0)>>2],l)&&Ia(t,r,s,i)},function(A,t,r,s,i){if(r|=0,s|=0,i|=0,Js(A|=0,e[8+(t|=0)>>2],i))e[t+28>>2]==1|e[t+4>>2]!=(0|r)||(e[t+28>>2]=s);else e:if(Js(A,e[t>>2],i)){if(!(e[t+16>>2]!=(0|r)&e[t+20>>2]!=(0|r))){if((0|s)!=1)break e;return void(e[t+32>>2]=1)}e[t+20>>2]=r,e[t+32>>2]=s,e[t+40>>2]=e[t+40>>2]+1,e[t+36>>2]!=1|e[t+24>>2]!=2||(f[t+54|0]=1),e[t+44>>2]=4}},function(A,t,r,s){r|=0,s|=0,Js(A|=0,e[8+(t|=0)>>2],0)&&cn(t,r,s)},hn,function(A,t,r,s,i,l){r|=0,s|=0,i|=0,l|=0,Js(A|=0,e[8+(t|=0)>>2],l)?Ia(t,r,s,i):(A=e[A+8>>2],KA[e[e[A>>2]+20>>2]](A,t,r,s,i,l))},function(A,t,r,s,i){if(r|=0,s|=0,i|=0,Js(A|=0,e[8+(t|=0)>>2],i))e[t+28>>2]==1|e[t+4>>2]!=(0|r)||(e[t+28>>2]=s);else e:{if(Js(A,e[t>>2],i)){if(!(e[t+16>>2]!=(0|r)&e[t+20>>2]!=(0|r))){if((0|s)!=1)break e;return void(e[t+32>>2]=1)}e[t+32>>2]=s;A:if(e[t+44>>2]!=4){if(k[t+52>>1]=0,A=e[A+8>>2],KA[e[e[A>>2]+20>>2]](A,t,r,r,1,i),d[t+53|0]){if(e[t+44>>2]=3,!d[t+52|0])break A;break e}e[t+44>>2]=4}if(e[t+20>>2]=r,e[t+40>>2]=e[t+40>>2]+1,e[t+36>>2]!=1|e[t+24>>2]!=2)break e;return void(f[t+54|0]=1)}A=e[A+8>>2],KA[e[e[A>>2]+24>>2]](A,t,r,s,i)}},function(A,t,r,s){r|=0,s|=0,Js(A|=0,e[8+(t|=0)>>2],0)?cn(t,r,s):(A=e[A+8>>2],KA[e[e[A>>2]+28>>2]](A,t,r,s))},hn,function(A){return 84787},hn,function(A){return 85058},hn,function(A){return 84147},function(A){var t;return t=A|=0,A=e[A>>2],e[t>>2]=A+1,0|((0|(A=f[0|A]))<0?65533:255&A)},function(A,t,r,s,i,l){A|=0,t|=0,r|=0,s|=0,i|=0,l|=0;var c,g=0,p=0,I=0,h=0,M=0,P=0,z=0,Y=0;if(c=ms(408),e[c+4>>2]=s,e[c>>2]=r,t?(rt(c+16|0,t,376),T[c+392>>3]=(T[t+368>>3]-T[t>>3])/+(r>>>0),t=0):t=1,e[c+400>>2]=i,f[c+8|0]=t,l){if(r=e[A+24>>2])for(t=e[A+20>>2],s=e[A+8>>2];(i=e[e[(t>>>8&16777212)+s>>2]+((1023&t)<<2)>>2])&&(zA(i),r=e[A+24>>2],s=e[A+8>>2],t=e[A+20>>2]),t=t+1|0,e[A+20>>2]=t,r=r-1|0,e[A+24>>2]=r,t>>>0>=2048&&(zA(e[s>>2]),s=e[A+8>>2]+4|0,e[A+8>>2]=s,t=e[A+20>>2]-1024|0,e[A+20>>2]=t,r=e[A+24>>2]),r;);t=e[A+28>>2],e[A+420>>2]=e[t>>2],(r=e[A+32>>2])&&(f[t+8|0]=d[r+8|0],rt(t+16|0,A+40|0,376),(t=e[A+32>>2])&&zA(t),e[A+32>>2]=0)}if(r=(s=e[A+24>>2])+e[A+20>>2]|0,i=e[A+12>>2],(0|r)==(0|((0|(t=e[A+8>>2]))!=(0|i)?(i-t<<8)-1:0))){H=g=H-32|0;e:{A:{r:{a:{if((t=e[16+(l=A+4|0)>>2])>>>0>=1024){if(e[l+16>>2]=t-1024,t=e[l+4>>2],P=e[t>>2],i=t+4|0,e[l+4>>2]=i,(0|(t=e[l+8>>2]))==e[l+12>>2])if((p=e[l>>2])>>>0<i>>>0)r=We((s=(1+(i-p>>2)|0)/-2<<2)+i|0,i,t=t-i|0)+t|0,e[l+8>>2]=r,e[l+4>>2]=s+e[l+4>>2];else{if((r=(0|t)==(0|p)?1:t-p>>1)>>>0>=1073741824)break a;if(z=(s=r<<2)+(I=ms(s))|0,r=s=I+(-4&r)|0,(0|t)!=(0|i)){if(Y=-4&(t=t-i|0),M=1+((h=t-4|0)>>>2|0)&7)for(r=0,t=s;e[t>>2]=e[i>>2],i=i+4|0,t=t+4|0,(0|M)!=(0|(r=r+1|0)););else t=s;if(r=s+Y|0,!(h>>>0<28))for(;e[t>>2]=e[i>>2],e[t+4>>2]=e[i+4>>2],e[t+8>>2]=e[i+8>>2],e[t+12>>2]=e[i+12>>2],e[t+16>>2]=e[i+16>>2],e[t+20>>2]=e[i+20>>2],e[t+24>>2]=e[i+24>>2],e[t+28>>2]=e[i+28>>2],i=i+32|0,(0|r)!=(0|(t=t+32|0)););}e[l+12>>2]=z,e[l+8>>2]=r,e[l+4>>2]=s,e[l>>2]=I,p&&(zA(p),r=e[l+8>>2])}else r=t;e[r>>2]=P,e[l+8>>2]=e[l+8>>2]+4;break e}if((p=(i=e[l+8>>2])-e[l+4>>2]>>2)>>>0<(s=(t=e[l+12>>2])-(r=e[l>>2])|0)>>2>>>0){if((0|t)!=(0|i)){e[g+8>>2]=ms(4096),_a(l,g+8|0);break e}if(e[g+8>>2]=ms(4096),Na(l,g+8|0),t=e[l+4>>2],P=e[t>>2],i=t+4|0,e[l+4>>2]=i,(0|(t=e[l+8>>2]))==e[l+12>>2])if((p=e[l>>2])>>>0<i>>>0)r=We((s=(1+(i-p>>2)|0)/-2<<2)+i|0,i,t=t-i|0)+t|0,e[l+8>>2]=r,e[l+4>>2]=s+e[l+4>>2];else{if((r=(0|t)==(0|p)?1:t-p>>1)>>>0>=1073741824)break a;if(z=(s=r<<2)+(I=ms(s))|0,r=s=I+(-4&r)|0,(0|t)!=(0|i)){if(Y=-4&(t=t-i|0),M=1+((h=t-4|0)>>>2|0)&7)for(r=0,t=s;e[t>>2]=e[i>>2],i=i+4|0,t=t+4|0,(0|M)!=(0|(r=r+1|0)););else t=s;if(r=s+Y|0,!(h>>>0<28))for(;e[t>>2]=e[i>>2],e[t+4>>2]=e[i+4>>2],e[t+8>>2]=e[i+8>>2],e[t+12>>2]=e[i+12>>2],e[t+16>>2]=e[i+16>>2],e[t+20>>2]=e[i+20>>2],e[t+24>>2]=e[i+24>>2],e[t+28>>2]=e[i+28>>2],i=i+32|0,(0|r)!=(0|(t=t+32|0)););}e[l+12>>2]=z,e[l+8>>2]=r,e[l+4>>2]=s,e[l>>2]=I,p&&(zA(p),r=e[l+8>>2])}else r=t;e[r>>2]=P,e[l+8>>2]=e[l+8>>2]+4;break e}if(e[g+24>>2]=l+12,!((t=(0|t)==(0|r)?1:s>>1)>>>0>=1073741824)){if(t=ms(r=t<<2),e[g+8>>2]=t,s=t+(p<<2)|0,e[g+16>>2]=s,e[g+20>>2]=t+r,e[g+12>>2]=s,e[g+4>>2]=ms(4096),_a(g+8|0,g+4|0),(0|(i=e[l+8>>2]))==e[l+4>>2]){t=i;break A}for(;Na(g+8|0,i=i-4|0),e[l+4>>2]!=(0|i););break r}}Si(),j()}t=e[l+8>>2]}r=e[l>>2],e[l>>2]=e[g+8>>2],e[g+8>>2]=r,e[l+4>>2]=e[g+12>>2],e[g+12>>2]=i,e[l+8>>2]=e[g+16>>2],e[g+16>>2]=t,s=e[l+12>>2],e[l+12>>2]=e[g+20>>2],e[g+20>>2]=s,(0|t)!=(0|i)&&(e[g+16>>2]=t+(3+(i-t|0)&-4)),r&&zA(r)}H=g+32|0,r=(s=e[A+24>>2])+e[A+20>>2]|0,t=e[A+8>>2]}e[e[t+(r>>>8&16777212)>>2]+((1023&r)<<2)>>2]=c,e[A+24>>2]=s+1},function(A){var t=0,r=0,s=0,i=0,l=0,c=0,g=0,p=0,I=0;r=e[420+(A|=0)>>2]+1|0,e[A+420>>2]=r;e:{if(t=e[A+32>>2]){if(r>>>0>(g=e[t+4>>2])>>>0){(r=e[A+28>>2])&&(zA(r),t=e[A+32>>2]),e[A+32>>2]=0,e[A+28>>2]=t;break e}for(l=A+40|0,c=t+16|0,p=e[A+28>>2]+16|0,I=+(r>>>0)/+(g>>>0),t=0;;){if(s=T[(r=t<<3)+c>>3],i=T[r+p>>3],T[r+l>>3]=s==s?(s-i)*I+i:i,(0|(r=1|t))==47)break e;s=T[(r<<=3)+c>>3],i=T[r+p>>3],T[r+l>>3]=s==s?(s-i)*I+i:i,t=t+2|0}}if(t=e[A+28>>2],r>>>0>ee[t>>2]){if(l=e[A+24>>2]){if(f[A+416|0]=0,c=e[A+8>>2],r=e[A+20>>2],t=e[e[c+(r>>>8&16777212)>>2]+((1023&r)<<2)>>2],e[A+32>>2]=t,e[A+24>>2]=l-1,r=r+1|0,e[A+20>>2]=r,r>>>0>=2048&&(zA(e[c>>2]),e[A+8>>2]=e[A+8>>2]+4,e[A+20>>2]=e[A+20>>2]-1024,t=e[A+32>>2]),d[t+8|0])rt(t+16|0,e[A+28>>2]+16|0,376),t=e[A+32>>2],e[t+368>>2]=0,e[t+372>>2]=0,s=T[A+40>>3],e[t+392>>2]=0,e[t+396>>2]=0,T[t+16>>3]=s;else if(r=e[A+28>>2],d[r+8|0]&&(rt(r+16|0,t+16|0,376),t=e[A+28>>2],e[t+368>>2]=0,e[t+372>>2]=0,!(t=e[A+32>>2])))break e;(0|(r=e[t+400>>2]))!=-1&&(e[A+424>>2]=r),e[A+420>>2]=0,T[t+16>>3]=T[t+392>>3]*+ee[t+4>>2]+T[t+16>>3];break e}f[A+416|0]=1}else s=T[t+392>>3]+T[A+40>>3],T[A+40>>3]=s,T[t+16>>3]=s}return 0|(d[A+416|0]?0:A+40)},function(A){return e[424+(A|=0)>>2]},function(A){var t=0;return e[(A|=0)>>2]=132304,(t=e[A+28>>2])&&zA(t),(t=e[A+32>>2])&&zA(t),ei(A+4|0),0|A},function(A){var t=0;e[(A|=0)>>2]=132304,(t=e[A+28>>2])&&zA(t),(t=e[A+32>>2])&&zA(t),ei(A+4|0),zA(A)},function(A,t,r){t|=0,r|=0;var s=0,i=0,l=0,c=0,g=0,p=0,I=0,h=0,M=0,P=0,z=0,Y=0,V=0,X=0,te=0,ne=0,me=0,ke=0,ye=0;if(!e[1088+(A|=0)>>2])return 0;e:if(t){for(I=A+648|0,p=A- -64|0;;){if(s=e[A+1088>>2],!(s=0|KA[e[e[s>>2]+4>>2]](s)))break e;if(i=Oa(T[A+32>>3]+T[s+16>>3]/+e[A+24>>2]),T[A+32>>3]=i,i=An(6.283185307179586*i),i=Oa(T[A+16>>3]+T[s>>3]*(.06*i*T[s+8>>3]+1)/+e[A+8>>2]),T[A+16>>3]=i,g=At(e[56848],e[56849],1284865837,1481765933),l=he,l=(g=g+1|0)?l:l+1|0,e[56848]=g,e[56849]=l,c=.75*T[A+40>>3]+ +(l>>>1|0)/2147483647,T[A+40>>3]=c,h=T[s+24>>3],l=i>=T[s+32>>3],f[A+48|0]=l,c=(P=h)*(h=.2*c),c=cr(p+512|0,cr(p+440|0,i=T[s+352>>3]*(h*T[s+48>>3]+T[s+40>>3]*(i+i+-1+(l?c:.01*c)))*.5,T[s+104>>3],T[s+168>>3]),T[s+112>>3],T[s+176>>3]),c=cr(p+8|0,cr(p+80|0,cr(p+152|0,cr(p+224|0,cr(p+296|0,cr(p+368|0,c==c?(c-i)*T[s+184>>3]+i:i,T[s+96>>3],T[s+160>>3]),T[s+88>>3],T[s+152>>3]),T[s+80>>3],T[s+144>>3]),T[s+72>>3],T[s+136>>3]),T[s+64>>3],T[s+128>>3]),T[s+56>>3],T[s+120>>3]),g=At(e[56848],e[56849],1284865837,1481765933),l=he,l=(g=g+1|0)?l:l+1|0,e[56848]=g,e[56849]=l,i=.75*T[A+56>>3]+ +(l>>>1|0)/2147483647,T[A+56>>3]=i,l=(M<<1)+r|0,h=cr(I+8|0,i=T[s+352>>3]*(T[s+192>>3]*(.3*i))*.5,T[s+200>>3],T[s+248>>3]),z=T[s+296>>3],Y=cr(I+80|0,i,T[s+208>>3],T[s+256>>3]),V=T[s+304>>3],X=cr(I+152|0,i,T[s+216>>3],T[s+264>>3]),te=T[s+312>>3],ne=cr(I+224|0,i,T[s+224>>3],T[s+272>>3]),me=T[s+320>>3],ke=cr(I+296|0,i,T[s+232>>3],T[s+280>>3]),ye=T[s+328>>3],P=c,c=(cr(I+368|0,i,T[s+240>>3],T[s+288>>3])-i)*T[s+336>>3]+(ye*(ke-i)+(me*(ne-i)+(te*(X-i)+(V*(Y-i)+(z*(h-i)+0))))),i=(P+(i==i?(i-c)*T[s+344>>3]+c:c))*T[s+360>>3]*4e3,s=(0|(s=$(i)<2147483648?~~i:-2147483648))>=32e3?32e3:s,k[l>>1]=(0|s)<=-32e3?-32e3:s,(0|(M=M+1|0))==(0|t))break}M=t}return 0|(t>>>0>M>>>0?M:t)},function(A,t){t|=0,e[1088+(A|=0)>>2]=t},Vi,hn,Bo,function(A,t,r,s){return he=0,0}],_n.grow=function(A){var t=this.length;return this.length=this.length+A,t},_n.set=function(A,t){this[A]=t},_n.get=function(A){return this[A]},_n);return{v:function(){var A,t=0;H=A=H-16|0,0|Xe(A+12|0,A+8|0)||(t=tt(4+(e[A+12>>2]<<2)|0),e[56800]=t,t&&(!(t=tt(e[A+8>>2]))||(e[e[56800]+(e[A+12>>2]<<2)>>2]=0,0|He(e[56800],0|t)))&&(e[56800]=0)),H=A+16|0,e[56841]=227236,e[56823]=42},w:Ln,x:vo,y:function(A,t){t|=0,e[(A|=0)>>2]=t},z:function(A,t){return t|=0,f[e[(A|=0)+4>>2]+t|0]},A:ji,B:Li,C:function(A){return d[(A|=0)+12|0]},D:function(A,t){t|=0,f[(A|=0)+12|0]=t},E:function(A){return d[(A|=0)+13|0]},F:function(A,t){t|=0,f[(A|=0)+13|0]=t},G:function(A){return d[(A|=0)+14|0]},H:function(A,t){t|=0,f[(A|=0)+14|0]=t},I:function(A){return d[(A|=0)+15|0]},J:function(A,t){t|=0,f[(A|=0)+15|0]=t},K:Ri,L:function(A,t){t|=0,e[(A|=0)+16>>2]=t},M:Mo,N:function(A,t){t|=0,e[(A|=0)+20>>2]=t},O:Ln,P:vo,Q:Wi,R:ji,S:Eo,T:Ri,U:Mo,V:function(A){return e[(A|=0)+24>>2]},W:Ln,X:function(){var A,t=0,r=0,s=0,i=0,l=0,c=0,g=0,p=0,I=0,h=0,M=0,P=0,z=0,Y=0,V=0,X=0,te=0,ne=0,me=0,ke=0,ye=0,Pe=0,_e=0;if(A=ms(20),e[A+16>>2]=0,e[A+8>>2]=175,e[A+12>>2]=50,!(t=e[33208])){H=t=(H=me=H-16|0)-80|0;e:{if((r=ca(84292))&&(e[t+32>>2]=r,Os(137584,160,85959,t+32|0),(0|zs(137584))==-31||(e[t+16>>2]=r,Os(137584,160,86031,t+16|0),(0|zs(137584))==-31)))break e;(r=ca(84619))&&(e[t>>2]=r,Os(137584,160,85959,t),(0|zs(137584))==-31)||(r=d[84826]|d[84827]<<8|d[84828]<<16|d[84829]<<24,e[34396]=d[84822]|d[84823]<<8|d[84824]<<16|d[84825]<<24,e[34397]=r,k[68804]=d[84846]|d[84847]<<8,r=d[84842]|d[84843]<<8|d[84844]<<16|d[84845]<<24,e[34400]=d[84838]|d[84839]<<8|d[84840]<<16|d[84841]<<24,e[34401]=r,r=d[84834]|d[84835]<<8|d[84836]<<16|d[84837]<<24,e[34398]=d[84830]|d[84831]<<8|d[84832]<<16|d[84833]<<24,e[34399]=r)}if(H=t+80|0,e[me+12>>2]=0,i=me+12|0,H=g=H-16|0,e[g+12>>2]=22050,Me(85144)||Me(85315)||Me(85473)||Me(85698),M=g+12|0,H=l=H-16|0,e[l+12>>2]=0,!((t=qt(137832,84262,0,i))||(t=qt(137836,84420,0,i))||(t=qt(137840,84813,0,i))||(t=qt(137820,85016,l+12|0,i))))if(e[34454]=ee[l+12>>2]/68,r=e[34460],e[34456]=r,r&&(0|(I=d[0|r]|d[r+1|0]<<8|d[r+2|0]<<16|d[r+3|0]<<24))==83969){if(P=d[r+4|0]|d[r+5|0]<<8|d[r+6|0]<<16|d[r+7|0]<<24,r=e[34458],Y=d[0|r],e[34461]=Y,Y)for(t=r+4|0,I=0;s=O(I,44)+137856|0,i=d[0|t],e[s+36>>2]=i,e[s+40>>2]=d[t+1|0],c=d[t+8|0]|d[t+9|0]<<8|d[t+10|0]<<16|d[t+11|0]<<24,r=d[t+4|0]|d[t+5|0]<<8|d[t+6|0]<<16|d[t+7|0]<<24,f[0|s]=r,f[s+1|0]=r>>>8,f[s+2|0]=r>>>16,f[s+3|0]=r>>>24,f[s+4|0]=c,f[s+5|0]=c>>>8,f[s+6|0]=c>>>16,f[s+7|0]=c>>>24,c=d[t+16|0]|d[t+17|0]<<8|d[t+18|0]<<16|d[t+19|0]<<24,r=d[t+12|0]|d[t+13|0]<<8|d[t+14|0]<<16|d[t+15|0]<<24,f[s+8|0]=r,f[s+9|0]=r>>>8,f[s+10|0]=r>>>16,f[s+11|0]=r>>>24,f[s+12|0]=c,f[s+13|0]=c>>>8,f[s+14|0]=c>>>16,f[s+15|0]=c>>>24,c=d[t+24|0]|d[t+25|0]<<8|d[t+26|0]<<16|d[t+27|0]<<24,r=d[t+20|0]|d[t+21|0]<<8|d[t+22|0]<<16|d[t+23|0]<<24,f[s+16|0]=r,f[s+17|0]=r>>>8,f[s+18|0]=r>>>16,f[s+19|0]=r>>>24,f[s+20|0]=c,f[s+21|0]=c>>>8,f[s+22|0]=c>>>16,f[s+23|0]=c>>>24,c=d[t+32|0]|d[t+33|0]<<8|d[t+34|0]<<16|d[t+35|0]<<24,r=d[t+28|0]|d[t+29|0]<<8|d[t+30|0]<<16|d[t+31|0]<<24,f[s+24|0]=r,f[s+25|0]=r>>>8,f[s+26|0]=r>>>16,f[s+27|0]=r>>>24,f[s+28|0]=c,f[s+29|0]=c>>>8,f[s+30|0]=c>>>16,f[s+31|0]=c>>>24,r=t+36|0,e[s+32>>2]=r,t=r+(i<<4)|0,(0|Y)!=(0|(I=I+1|0)););(0|Y)<=e[34457]&&(e[34457]=0),t=0,M&&(e[M>>2]=P)}else e:{A:{if(i){if(r=e[i>>2]){zA(e[r+4>>2]),t=e[i>>2];break A}if(t=tt(16),e[i>>2]=t,t)break A;t=48}else t=268436223;break e}e[t>>2]=1,e[t+4>>2]=zn(137584),r=e[i>>2],e[r+12>>2]=83969,e[r+8>>2]=I,t=268436223}if(H=l+16|0,r=t,!t){if(M=e[g+12>>2],e[50754]=M,e[50759]=0,e[50760]=134217728/(0|M),e[50762]=0,e[50763]=0,e[50765]=2147483647,e[50781]=100,e[50779]=32,e[50761]=(M<<6)/(0|M),t=e[26385],e[50784]=e[26384],e[50785]=t,t=e[26387],e[50786]=e[26386],e[50787]=t,t=e[26389],e[50788]=e[26388],e[50789]=t,t=e[26391],e[50790]=e[26390],e[50791]=t,t=e[26393],e[50792]=e[26392],e[50793]=t,t=e[26395],e[50794]=e[26394],e[50795]=t,t=e[26397],e[50796]=e[26396],e[50797]=t,e[50798]=e[26398],P=(0|(t=(0|(i=O(M,60)))/12800|0))>=128?128:t,e[50799]=P,e[50800]=(0|P)/2,!((0|M)==22050|(0|i)<12800)){if(M=1&(t=(0|P)<=1?1:P),te=+(0|P),I=0,(0|P)>=2)for(P=2147483646&t,t=0;V=I+132160|0,p=127*(1-es(6.283185307179586*+(0|I)/te)),z=$(p)<2147483648?~~p:-2147483648,f[0|V]=z,V=(i=1|I)+132160|0,p=127*(1-es(6.283185307179586*+(0|i)/te)),z=$(p)<2147483648?~~p:-2147483648,f[0|V]=z,I=I+2|0,(0|P)!=(0|(t=t+2|0)););M&&(t=I+132160|0,p=127*(1-es(6.283185307179586*+(0|I)/te)),V=$(p)<2147483648?~~p:-2147483648,f[0|t]=V)}if(e[50801]=105792,e[56797]=Qs(),e[55964]=38,e[55921]=1,e[55918]=22050,e[56606]=0,e[55960]=110928,e[55958]=0,e[55959]=1074266112,e[55956]=100,e[55922]=20,e[55923]=220,e[55916]=1,e[55917]=0,lt(),e[56244]=0,e[56245]=0,e[55928]=0,e[55926]=0,e[55927]=0,e[55924]=0,e[56246]=0,e[56247]=0,e[56260]=0,e[56261]=0,e[56262]=0,e[56263]=0,e[56276]=0,e[56277]=0,e[56278]=0,e[56279]=0,e[55974]=0,e[55975]=0,e[55972]=0,e[55973]=0,te=-3.141592653589793/+(0|(t=e[55918])),T[27967]=te,i=(0|O(t,630))/1e4|0,e[55920]=i,t=(0|O(t,950))/1e4|0,e[55919]=t,p=-2*te,T[27968]=p,te=(Pe=is(te*+(0|i)))*-Pe,T[28129]=te,p=Pe*es(p*+(0|t)),p+=p,T[28128]=p,T[28127]=1-p-te,e[55990]=0,e[55991]=0,e[55988]=0,e[55989]=0,e[56006]=0,e[56007]=0,e[56004]=0,e[56005]=0,e[56022]=0,e[56023]=0,e[56020]=0,e[56021]=0,e[56038]=0,e[56039]=0,e[56036]=0,e[56037]=0,e[56054]=0,e[56055]=0,e[56052]=0,e[56053]=0,e[56070]=0,e[56071]=0,e[56068]=0,e[56069]=0,e[56086]=0,e[56087]=0,e[56084]=0,e[56085]=0,e[56102]=0,e[56103]=0,e[56100]=0,e[56101]=0,e[56118]=0,e[56119]=0,e[56116]=0,e[56117]=0,e[56134]=0,e[56135]=0,e[56132]=0,e[56133]=0,e[56150]=0,e[56151]=0,e[56148]=0,e[56149]=0,e[56166]=0,e[56167]=0,e[56164]=0,e[56165]=0,e[56182]=0,e[56183]=0,e[56180]=0,e[56181]=0,e[56198]=0,e[56199]=0,e[56196]=0,e[56197]=0,e[56214]=0,e[56215]=0,e[56212]=0,e[56213]=0,e[56230]=0,e[56231]=0,e[56228]=0,e[56229]=0,e[56639]=59,e[56640]=59,e[56629]=0,e[56630]=59,e[56619]=89,e[56620]=160,e[56609]=280,e[56610]=688,e[56611]=1064,e[56621]=70,e[56631]=59,e[56612]=2806,e[56613]=3260,e[56622]=160,e[56623]=200,e[56632]=59,e[56633]=59,e[56641]=89,e[56642]=149,e[56643]=200,e[56644]=200,e[56634]=59,e[56635]=59,e[56624]=200,e[56625]=500,e[56614]=3700,e[56615]=6500,e[56645]=500,e[56646]=0,e[56616]=7e3,e[56626]=500,e[56636]=0,e[56647]=0,e[56637]=0,e[56627]=500,e[56617]=8e3,e[56669]=89,e[56648]=0,e[56638]=0,e[56628]=89,e[56618]=280,e[56657]=62,e[56655]=0,e[56656]=0,e[56653]=50,e[56654]=0,e[56651]=0,e[56652]=0,e[56649]=0,e[56650]=40,e[56607]=1e3,e[56608]=59,H=l=H-416|0,e[l+16>>2]=137584,e[l+20>>2]=47,e[l+24>>2]=85952,iA(t=l+240|0,85699,l+16|0),c=$r(t,86034)){if(nt(l+240|0,170,c))for(M=5|(t=l+240|0),P=10|t;d[l+240|0]!=47&&(e[l+240>>2]!=1701736308?Hr(l+240|0,86614,9)||(e[l+4>>2]=l+32,e[l>>2]=l+239,(0|$A(P,86829,l))==2&&(i=e[34064],e[(Y=136272+(i<<4)|0)>>2]=f[l+239|0],t=zn(l+32|0),e[34064]=i+1,e[Y+12>>2]=t,e[Y+4>>2]=0)):(H=t=H-48|0,e[32960]=-1,e[32961]=-1,e[32970]=-1,e[32971]=-1,e[32968]=-1,e[32969]=-1,e[32966]=-1,e[32967]=-1,e[32964]=-1,e[32965]=-1,e[32962]=-1,e[32963]=-1,e[t+36>>2]=131876,e[t+32>>2]=131872,e[t+28>>2]=131868,e[t+24>>2]=131864,e[t+20>>2]=131860,e[t+16>>2]=131856,e[t+12>>2]=131852,e[t+8>>2]=131848,e[t+4>>2]=131844,e[t>>2]=131840,$A(M,84222,t),H=t+48|0)),nt(l+240|0,170,c););mr(c)}H=l+416|0,e[50297]=0,e[50298]=0,e[50301]=0,e[50302]=0,e[50299]=0,e[50300]=0,ja(0,85698),e[36425]=0,e[36424]=0,e[36426]=0,e[36427]=-1,bo(),ea(0),s=e[25690],e[34062]=s,h=e[25689],l=e[25688],e[34060]=l,e[34061]=h,X=e[25687],c=e[25686],e[34058]=c,e[34059]=X,ne=e[25685],Y=e[25684],e[34056]=Y,e[34057]=ne,ke=e[25683],M=e[25682],e[34054]=M,e[34055]=ke,ye=e[25681],P=e[25680],e[34052]=P,e[34053]=ye,z=e[25679],i=e[25678],e[34050]=i,e[34051]=z,V=e[25677],t=e[25676],e[34048]=t,e[34049]=V,e[33729]=t,e[33730]=V,e[33731]=i,e[33732]=z,e[33733]=P,e[33734]=ye,e[33735]=M,e[33736]=ke,e[33737]=Y,e[33738]=ne,e[33739]=c,e[33740]=X,e[33741]=l,e[33742]=h,e[33743]=s,wr(1,175),wr(2,100),wr(6,e[47200]),wr(5,e[47201]),wr(7,0),e[47198]=0,e[47197]=0,p=+Ae()/1e3,i=At(t=$(p)<9223372036854776e3?~~p>>>0:0,0,1103515245,0),t=he,t=(i=i+12345|0)>>>0<12345?t+1|0:t,e[33209]=Ni(i,t)}if(H=g+16|0,r){V=e[30450],ke=e[me+12>>2],g=(h=H-560|0)+48|0,H=s=(H=h)-16|0;e:{A:switch(0|ts(r-268435967|0,24)){case 0:Qt(g,84133,512);break e;case 1:Qt(g,84580,512);break e;case 2:Qt(g,84747,512);break e;case 3:Qt(g,85084,512);break e;case 4:Qt(g,85251,512);break e;case 5:Qt(g,85380,512);break e;case 6:Qt(g,85607,512);break e;case 7:Qt(g,85722,512);break e;case 8:Qt(g,85913,512);break e;case 9:Qt(g,86046,512);break e;case 10:Qt(g,86153,512);break e;case 11:Qt(g,86678,512);break e;case 12:Qt(g,86773,512);break e;case 14:Qt(g,86958,512);break e;case 15:Qt(g,87071,512);break e;default:break A}if(1879048192&r)e[s>>2]=r,Os(g,512,87182,s);else{if(I=0,l=y[123728+((r>>>0<=153?r:0)<<1)>>1]+121804|0,r=e[e[56841]+20>>2]){ye=e[r+4>>2],X=e[r>>2],ne=e[X>>2]+1794895138|0,z=Xa(e[X+8>>2],ne),i=Xa(e[X+12>>2],ne),t=Xa(e[X+16>>2],ne);A:if(!(ye>>>2>>>0<=z>>>0||3&(t|i)|(r=ye-(z<<2)|0)>>>0<=i>>>0|t>>>0>=r>>>0))for(M=t>>>2|0,P=i>>>2|0;;){if(Y=Xa(e[(r=((t=(i=(c=z>>>1|0)+_e|0)<<1)+P<<2)+X|0)>>2],ne),(r=Xa(e[r+4>>2],ne))>>>0>=ye>>>0|Y>>>0>=ye-r>>>0|d[(r+Y|0)+X|0])break A;if(!(r=Ut(l,r+X|0))){if(t=Xa(e[(r=(t+M<<2)+X|0)>>2],ne),(r=Xa(e[r+4>>2],ne))>>>0>=ye>>>0|t>>>0>=ye-r>>>0)break A;I=d[(t+r|0)+X|0]?0:r+X|0;break A}if((0|z)==1)break A;z=(r=(0|r)<0)?c:z-c|0,_e=r?_e:i}}if((r=CA(t=I||l))>>>0>=512){rt(g,t,511),f[g+511|0]=0;break e}rt(g,t,r+1|0)}}H=s+16|0;e:if(ke){A:switch(e[ke>>2]){case 0:e[h+16>>2]=e[ke+4>>2],e[h+20>>2]=h+48,Kt(V,87384,h+16|0);break e;case 1:break A;default:break e}t=e[ke+12>>2],r=e[ke+8>>2],e[h+36>>2]=e[ke+4>>2],he=r,e[h+40>>2]=t,e[h+44>>2]=he,e[h+32>>2]=h+48,Kt(V,87521,h+32|0)}else e[h>>2]=h+48,Kt(V,87700,h);H=h+560|0,(0|me)!=-12&&(r=e[me+12>>2])&&(zA(e[r+4>>2]),zA(e[me+12>>2]),e[me+12>>2]=0)}r=e[24806],e[34389]=0,e[32538]=r,r=(1e3+((r=O(e[50754],100))-((0|r)%1e3|0)|0)|0)/500|0,e[34390]=r,r=Tt(e[34391],r),e[34392]=r,r&&(e[34391]=r,e[34393]=40,(r=Tt(e[34388],1440))&&(e[34388]=r)),e[47198]=0,H=me+16|0,t=e[50754],e[33208]=t}return e[A+4>>2]=t,e[A>>2]=gt(),0|A},Y:function(A,t,r){A|=0,t|=0,r|=0,e[34440]=r,Ze(3,e[A+12>>2]),Ze(1,e[A+8>>2]),(A=e[A+16>>2])?Ra(A):wa(1024),PA(t),e[34440]=0},Z:function(A,t,r){return A|=0,t|=0,r|=0,e[34440]=0,(A=$r(r,1032))?(e[47195]=A,e[47197]=130,A||(e[47195]=e[30450]),PA(t),e[47195]=0,e[47197]=0,e[47195]=e[30450],mr(A),0):-1},_:function(A){return 36},$:function(A,t,r){var s;return A|=0,t|=0,H=s=H-32|0,(r|=0)?(e[s+24>>2]=0,e[s+28>>2]=0,e[s+16>>2]=0,e[s+20>>2]=0,e[s+12>>2]=r,e[s+8>>2]=t,f[s+21|0]=0,t=Ra(s+8|0)):t=wa(t),e[A+16>>2]=201188,H=s+32|0,0|t},aa:function(A,t,r,s){var i;return A|=0,t|=0,H=i=H-32|0,(r|=0)|(s|=0)?(e[i+24>>2]=0,e[i+28>>2]=0,e[i+16>>2]=0,e[i+20>>2]=0,e[i+12>>2]=r,e[i+8>>2]=t,f[i+22|0]=0,f[i+20|0]=s,t=Ra(i+8|0)):t=wa(t),e[A+16>>2]=201188,H=i+32|0,0|t},ba:function(A,t,r,s,i){var l;return A|=0,t|=0,H=l=H-32|0,(s|=0)|(i|=0)|(r|=0)?(e[l+24>>2]=0,e[l+28>>2]=0,e[l+16>>2]=0,e[l+20>>2]=0,e[l+12>>2]=r,e[l+8>>2]=t,f[l+21|0]=i,f[l+20|0]=s,t=Ra(l+8|0)):t=wa(t),e[A+16>>2]=201188,H=l+32|0,0|t},ca:function(A,t,r,s,i,l){var c;return A|=0,t|=0,H=c=H-32|0,(s|=0)|(i|=0)|(l|=0)|(r|=0)?(e[c+24>>2]=0,e[c+28>>2]=0,e[c+16>>2]=0,e[c+20>>2]=0,e[c+12>>2]=r,e[c+8>>2]=t,f[c+22|0]=l,f[c+21|0]=i,f[c+20|0]=s,t=Ra(c+8|0)):t=wa(t),e[A+16>>2]=201188,H=c+32|0,0|t},da:function(A,t){return t|=0,e[e[(A|=0)>>2]+(t<<2)>>2]},ea:function(A,t,r){t|=0,r|=0,e[e[(A|=0)>>2]+(t<<2)>>2]=r},fa:Wi,ga:ji,ha:Li,ia:Eo,ja:function(A,t){t|=0,e[(A|=0)+12>>2]=t},ka:Ln,la:function(){return 0},ma:function(){return 1},na:function(){return 2},oa:function(){return 3},pa:function(){return 4},qa:function(){return 5},ra:function(){return 6},sa:function(){return 7},ta:function(){return 8},ua:KA,va:function(){return 227192},wa:zA,xa:tt,ya:function(A){return(A|=0)?0|!!(0|xA(A,125228)):0}}}(n)}(o)},instantiate:function(a,o){return{then:function(n){var u=new fo.Module(a);n({instance:new fo.Instance(u,o)})}}},RuntimeError:Error};typeof fo!="object"&&En("no native wasm support detected");var TC=!1;function R2(a,o){a||En(o)}var Ds,ao,J0,Ot,jr,PC,GC,Sp=typeof TextDecoder<"u"?new TextDecoder("utf8"):void 0;function so(a,o,n){for(var u=o+n,m=o;a[m]&&!(m>=u);)++m;if(m-o>16&&a.buffer&&Sp)return Sp.decode(a.subarray(o,m));for(var b="";o<m;){var C=a[o++];if(128&C){var w=63&a[o++];if((224&C)!=192){var E=63&a[o++];if((C=(240&C)==224?(15&C)<<12|w<<6|E:(7&C)<<18|w<<12|E<<6|63&a[o++])<65536)b+=String.fromCharCode(C);else{var B=C-65536;b+=String.fromCharCode(55296|B>>10,56320|1023&B)}}else b+=String.fromCharCode((31&C)<<6|w)}else b+=String.fromCharCode(C)}return b}function no(a,o){return a?so(ao,a,o):""}function Vc(a,o,n,u){if(!(u>0))return 0;for(var m=n,b=n+u-1,C=0;C<a.length;++C){var w=a.charCodeAt(C);if(w>=55296&&w<=57343&&(w=65536+((1023&w)<<10)|1023&a.charCodeAt(++C)),w<=127){if(n>=b)break;o[n++]=w}else if(w<=2047){if(n+1>=b)break;o[n++]=192|w>>6,o[n++]=128|63&w}else if(w<=65535){if(n+2>=b)break;o[n++]=224|w>>12,o[n++]=128|w>>6&63,o[n++]=128|63&w}else{if(n+3>=b)break;o[n++]=240|w>>18,o[n++]=128|w>>12&63,o[n++]=128|w>>6&63,o[n++]=128|63&w}}return o[n]=0,n-m}function QC(a){for(var o=0,n=0;n<a.length;++n){var u=a.charCodeAt(n);u<=127?o++:u<=2047?o+=2:u>=55296&&u<=57343?(o+=4,++n):o+=3}return o}var In,j2=ae.INITIAL_MEMORY||16777216;_0=ae.wasmMemory?ae.wasmMemory:new fo.Memory({initial:j2/65536,maximum:j2/65536}),In=_0.buffer,ae.HEAP8=Ds=new Int8Array(In),ae.HEAP16=J0=new Int16Array(In),ae.HEAP32=Ot=new Int32Array(In),ae.HEAPU8=ao=new Uint8Array(In),ae.HEAPU16=new Uint16Array(In),ae.HEAPU32=jr=new Uint32Array(In),ae.HEAPF32=PC=new Float32Array(In),ae.HEAPF64=GC=new Float64Array(In),j2=_0.buffer.byteLength;var Op=[],FC=[],zp=[],SC=!1;function OC(a){FC.unshift(a)}var ct,Tr,Di=0,Ko=null;function zC(a){Di++,ae.monitorRunDependencies&&ae.monitorRunDependencies(Di)}function NC(a){if(Di--,ae.monitorRunDependencies&&ae.monitorRunDependencies(Di),Di==0&&Ko){var o=Ko;Ko=null,o()}}function En(a){throw ae.onAbort&&ae.onAbort(a),uo(a="Aborted("+a+")"),TC=!0,a+=". Build with -sASSERTIONS for more info.",new fo.RuntimeError(a)}function RI(a){this.name="ExitStatus",this.message="Program terminated with exit("+a+")",this.status=a}function W2(a){for(;a.length>0;)a.shift()(ae)}function jI(a,o="i8"){switch(o.endsWith("*")&&(o="*"),o){case"i1":case"i8":return Ds[a|0];case"i16":return J0[a>>1];case"i32":case"i64":return Ot[a>>2];case"float":return PC[a>>2];case"double":return GC[a>>3];case"*":return jr[a>>2];default:En("invalid type for getValue: "+o)}return null}function WI(a){this.excPtr=a,this.ptr=a-24,this.set_type=function(o){jr[this.ptr+4>>2]=o},this.get_type=function(){return jr[this.ptr+4>>2]},this.set_destructor=function(o){jr[this.ptr+8>>2]=o},this.get_destructor=function(){return jr[this.ptr+8>>2]},this.set_refcount=function(o){Ot[this.ptr>>2]=o},this.set_caught=function(o){o=o?1:0,Ds[this.ptr+12|0]=o},this.get_caught=function(){return Ds[this.ptr+12|0]!=0},this.set_rethrown=function(o){o=o?1:0,Ds[this.ptr+13|0]=o},this.get_rethrown=function(){return Ds[this.ptr+13|0]!=0},this.init=function(o,n){this.set_adjusted_ptr(0),this.set_type(o),this.set_destructor(n),this.set_refcount(0),this.set_caught(!1),this.set_rethrown(!1)},this.add_ref=function(){var o=Ot[this.ptr>>2];Ot[this.ptr>>2]=o+1},this.release_ref=function(){var o=Ot[this.ptr>>2];return Ot[this.ptr>>2]=o-1,o===1},this.set_adjusted_ptr=function(o){jr[this.ptr+16>>2]=o},this.get_adjusted_ptr=function(){return jr[this.ptr+16>>2]},this.get_exception_ptr=function(){if(_b(this.get_type()))return jr[this.excPtr>>2];var o=this.get_adjusted_ptr();return o!==0?o:this.excPtr}}var Ar={isAbs:a=>a.charAt(0)==="/",splitPath:a=>/^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/.exec(a).slice(1),normalizeArray:(a,o)=>{for(var n=0,u=a.length-1;u>=0;u--){var m=a[u];m==="."?a.splice(u,1):m===".."?(a.splice(u,1),n++):n&&(a.splice(u,1),n--)}if(o)for(;n;n--)a.unshift("..");return a},normalize:a=>{var o=Ar.isAbs(a),n=a.substr(-1)==="/";return(a=Ar.normalizeArray(a.split("/").filter(u=>!!u),!o).join("/"))||o||(a="."),a&&n&&(a+="/"),(o?"/":"")+a},dirname:a=>{var o=Ar.splitPath(a),n=o[0],u=o[1];return n||u?(u&&(u=u.substr(0,u.length-1)),n+u):"."},basename:a=>{if(a==="/")return"/";var o=(a=(a=Ar.normalize(a)).replace(/\/$/,"")).lastIndexOf("/");return o===-1?a:a.substr(o+1)},join:function(){var a=Array.prototype.slice.call(arguments);return Ar.normalize(a.join("/"))},join2:(a,o)=>Ar.normalize(a+"/"+o)},Xn={resolve:function(){for(var a="",o=!1,n=arguments.length-1;n>=-1&&!o;n--){var u=n>=0?arguments[n]:q.cwd();if(typeof u!="string")throw new TypeError("Arguments to path.resolve must be strings");if(!u)return"";a=u+"/"+a,o=Ar.isAbs(u)}return(o?"/":"")+(a=Ar.normalizeArray(a.split("/").filter(m=>!!m),!o).join("/"))||"."},relative:(a,o)=>{function n(B){for(var D=0;D<B.length&&B[D]==="";D++);for(var v=B.length-1;v>=0&&B[v]==="";v--);return D>v?[]:B.slice(D,v-D+1)}a=Xn.resolve(a).substr(1),o=Xn.resolve(o).substr(1);for(var u=n(a.split("/")),m=n(o.split("/")),b=Math.min(u.length,m.length),C=b,w=0;w<b;w++)if(u[w]!==m[w]){C=w;break}var E=[];for(w=C;w<u.length;w++)E.push("..");return(E=E.concat(m.slice(C))).join("/")}};function LC(a,o,n){var u=QC(a)+1,m=new Array(u),b=Vc(a,m,0,m.length);return o&&(m.length=b),m}var yi={ttys:[],init:function(){},shutdown:function(){},register:function(a,o){yi.ttys[a]={input:[],output:[],ops:o},q.registerDevice(a,yi.stream_ops)},stream_ops:{open:function(a){var o=yi.ttys[a.node.rdev];if(!o)throw new q.ErrnoError(43);a.tty=o,a.seekable=!1},close:function(a){a.tty.ops.fsync(a.tty)},fsync:function(a){a.tty.ops.fsync(a.tty)},read:function(a,o,n,u,m){if(!a.tty||!a.tty.ops.get_char)throw new q.ErrnoError(60);for(var b=0,C=0;C<u;C++){var w;try{w=a.tty.ops.get_char(a.tty)}catch{throw new q.ErrnoError(29)}if(w===void 0&&b===0)throw new q.ErrnoError(6);if(w==null)break;b++,o[n+C]=w}return b&&(a.node.timestamp=Date.now()),b},write:function(a,o,n,u,m){if(!a.tty||!a.tty.ops.put_char)throw new q.ErrnoError(60);try{for(var b=0;b<u;b++)a.tty.ops.put_char(a.tty,o[n+b])}catch{throw new q.ErrnoError(29)}return u&&(a.node.timestamp=Date.now()),b}},default_tty_ops:{put_char:function(a,o){o===null||o===10?(Z0(so(a.output,0)),a.output=[]):o!=0&&a.output.push(o)},fsync:function(a){a.output&&a.output.length>0&&(Z0(so(a.output,0)),a.output=[])}},default_tty1_ops:{put_char:function(a,o){o===null||o===10?(uo(so(a.output,0)),a.output=[]):o!=0&&a.output.push(o)},fsync:function(a){a.output&&a.output.length>0&&(uo(so(a.output,0)),a.output=[])}}};function _C(a){En()}var wt={ops_table:null,mount:function(a){return wt.createNode(null,"/",16895,0)},createNode:function(a,o,n,u){if(q.isBlkdev(n)||q.isFIFO(n))throw new q.ErrnoError(63);wt.ops_table||(wt.ops_table={dir:{node:{getattr:wt.node_ops.getattr,setattr:wt.node_ops.setattr,lookup:wt.node_ops.lookup,mknod:wt.node_ops.mknod,rename:wt.node_ops.rename,unlink:wt.node_ops.unlink,rmdir:wt.node_ops.rmdir,readdir:wt.node_ops.readdir,symlink:wt.node_ops.symlink},stream:{llseek:wt.stream_ops.llseek}},file:{node:{getattr:wt.node_ops.getattr,setattr:wt.node_ops.setattr},stream:{llseek:wt.stream_ops.llseek,read:wt.stream_ops.read,write:wt.stream_ops.write,allocate:wt.stream_ops.allocate,mmap:wt.stream_ops.mmap,msync:wt.stream_ops.msync}},link:{node:{getattr:wt.node_ops.getattr,setattr:wt.node_ops.setattr,readlink:wt.node_ops.readlink},stream:{}},chrdev:{node:{getattr:wt.node_ops.getattr,setattr:wt.node_ops.setattr},stream:q.chrdev_stream_ops}});var m=q.createNode(a,o,n,u);return q.isDir(m.mode)?(m.node_ops=wt.ops_table.dir.node,m.stream_ops=wt.ops_table.dir.stream,m.contents={}):q.isFile(m.mode)?(m.node_ops=wt.ops_table.file.node,m.stream_ops=wt.ops_table.file.stream,m.usedBytes=0,m.contents=null):q.isLink(m.mode)?(m.node_ops=wt.ops_table.link.node,m.stream_ops=wt.ops_table.link.stream):q.isChrdev(m.mode)&&(m.node_ops=wt.ops_table.chrdev.node,m.stream_ops=wt.ops_table.chrdev.stream),m.timestamp=Date.now(),a&&(a.contents[o]=m,a.timestamp=m.timestamp),m},getFileDataAsTypedArray:function(a){return a.contents?a.contents.subarray?a.contents.subarray(0,a.usedBytes):new Uint8Array(a.contents):new Uint8Array(0)},expandFileStorage:function(a,o){var n=a.contents?a.contents.length:0;if(!(n>=o)){o=Math.max(o,n*(n<1048576?2:1.125)>>>0),n!=0&&(o=Math.max(o,256));var u=a.contents;a.contents=new Uint8Array(o),a.usedBytes>0&&a.contents.set(u.subarray(0,a.usedBytes),0)}},resizeFileStorage:function(a,o){if(a.usedBytes!=o)if(o==0)a.contents=null,a.usedBytes=0;else{var n=a.contents;a.contents=new Uint8Array(o),n&&a.contents.set(n.subarray(0,Math.min(o,a.usedBytes))),a.usedBytes=o}},node_ops:{getattr:function(a){var o={};return o.dev=q.isChrdev(a.mode)?a.id:1,o.ino=a.id,o.mode=a.mode,o.nlink=1,o.uid=0,o.gid=0,o.rdev=a.rdev,q.isDir(a.mode)?o.size=4096:q.isFile(a.mode)?o.size=a.usedBytes:q.isLink(a.mode)?o.size=a.link.length:o.size=0,o.atime=new Date(a.timestamp),o.mtime=new Date(a.timestamp),o.ctime=new Date(a.timestamp),o.blksize=4096,o.blocks=Math.ceil(o.size/o.blksize),o},setattr:function(a,o){o.mode!==void 0&&(a.mode=o.mode),o.timestamp!==void 0&&(a.timestamp=o.timestamp),o.size!==void 0&&wt.resizeFileStorage(a,o.size)},lookup:function(a,o){throw q.genericErrors[44]},mknod:function(a,o,n,u){return wt.createNode(a,o,n,u)},rename:function(a,o,n){if(q.isDir(a.mode)){var u;try{u=q.lookupNode(o,n)}catch{}if(u)for(var m in u.contents)throw new q.ErrnoError(55)}delete a.parent.contents[a.name],a.parent.timestamp=Date.now(),a.name=n,o.contents[n]=a,o.timestamp=a.parent.timestamp,a.parent=o},unlink:function(a,o){delete a.contents[o],a.timestamp=Date.now()},rmdir:function(a,o){var n=q.lookupNode(a,o);for(var u in n.contents)throw new q.ErrnoError(55);delete a.contents[o],a.timestamp=Date.now()},readdir:function(a){var o=[".",".."];for(var n in a.contents)a.contents.hasOwnProperty(n)&&o.push(n);return o},symlink:function(a,o,n){var u=wt.createNode(a,o,41471,0);return u.link=n,u},readlink:function(a){if(!q.isLink(a.mode))throw new q.ErrnoError(28);return a.link}},stream_ops:{read:function(a,o,n,u,m){var b=a.node.contents;if(m>=a.node.usedBytes)return 0;var C=Math.min(a.node.usedBytes-m,u);if(C>8&&b.subarray)o.set(b.subarray(m,m+C),n);else for(var w=0;w<C;w++)o[n+w]=b[m+w];return C},write:function(a,o,n,u,m,b){if(!u)return 0;var C=a.node;if(C.timestamp=Date.now(),o.subarray&&(!C.contents||C.contents.subarray)){if(b)return C.contents=o.subarray(n,n+u),C.usedBytes=u,u;if(C.usedBytes===0&&m===0)return C.contents=o.slice(n,n+u),C.usedBytes=u,u;if(m+u<=C.usedBytes)return C.contents.set(o.subarray(n,n+u),m),u}if(wt.expandFileStorage(C,m+u),C.contents.subarray&&o.subarray)C.contents.set(o.subarray(n,n+u),m);else for(var w=0;w<u;w++)C.contents[m+w]=o[n+w];return C.usedBytes=Math.max(C.usedBytes,m+u),u},llseek:function(a,o,n){var u=o;if(n===1?u+=a.position:n===2&&q.isFile(a.node.mode)&&(u+=a.node.usedBytes),u<0)throw new q.ErrnoError(28);return u},allocate:function(a,o,n){wt.expandFileStorage(a.node,o+n),a.node.usedBytes=Math.max(a.node.usedBytes,o+n)},mmap:function(a,o,n,u,m){if(!q.isFile(a.node.mode))throw new q.ErrnoError(43);var b,C,w=a.node.contents;if(2&m||w.buffer!==Ds.buffer){if((n>0||n+o<w.length)&&(w=w.subarray?w.subarray(n,n+o):Array.prototype.slice.call(w,n,n+o)),C=!0,!(b=_C()))throw new q.ErrnoError(48);Ds.set(w,b)}else C=!1,b=w.byteOffset;return{ptr:b,allocated:C}},msync:function(a,o,n,u,m){return wt.stream_ops.write(a,o,0,u,n,!1),0}}},q={root:null,mounts:[],devices:{},streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:!1,ignorePermissions:!0,ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,lookupPath:(a,o={})=>{if(!(a=Xn.resolve(a)))return{path:"",node:null};if((o=Object.assign({follow_mount:!0,recurse_count:0},o)).recurse_count>8)throw new q.ErrnoError(32);for(var n=a.split("/").filter(B=>!!B),u=q.root,m="/",b=0;b<n.length;b++){var C=b===n.length-1;if(C&&o.parent)break;if(u=q.lookupNode(u,n[b]),m=Ar.join2(m,n[b]),q.isMountpoint(u)&&(!C||C&&o.follow_mount)&&(u=u.mounted.root),!C||o.follow)for(var w=0;q.isLink(u.mode);){var E=q.readlink(m);if(m=Xn.resolve(Ar.dirname(m),E),u=q.lookupPath(m,{recurse_count:o.recurse_count+1}).node,w++>40)throw new q.ErrnoError(32)}}return{path:m,node:u}},getPath:a=>{for(var o;;){if(q.isRoot(a)){var n=a.mount.mountpoint;return o?n[n.length-1]!=="/"?n+"/"+o:n+o:n}o=o?a.name+"/"+o:a.name,a=a.parent}},hashName:(a,o)=>{for(var n=0,u=0;u<o.length;u++)n=(n<<5)-n+o.charCodeAt(u)|0;return(a+n>>>0)%q.nameTable.length},hashAddNode:a=>{var o=q.hashName(a.parent.id,a.name);a.name_next=q.nameTable[o],q.nameTable[o]=a},hashRemoveNode:a=>{var o=q.hashName(a.parent.id,a.name);if(q.nameTable[o]===a)q.nameTable[o]=a.name_next;else for(var n=q.nameTable[o];n;){if(n.name_next===a){n.name_next=a.name_next;break}n=n.name_next}},lookupNode:(a,o)=>{var n=q.mayLookup(a);if(n)throw new q.ErrnoError(n,a);for(var u=q.hashName(a.id,o),m=q.nameTable[u];m;m=m.name_next){var b=m.name;if(m.parent.id===a.id&&b===o)return m}return q.lookup(a,o)},createNode:(a,o,n,u)=>{var m=new q.FSNode(a,o,n,u);return q.hashAddNode(m),m},destroyNode:a=>{q.hashRemoveNode(a)},isRoot:a=>a===a.parent,isMountpoint:a=>!!a.mounted,isFile:a=>(61440&a)==32768,isDir:a=>(61440&a)==16384,isLink:a=>(61440&a)==40960,isChrdev:a=>(61440&a)==8192,isBlkdev:a=>(61440&a)==24576,isFIFO:a=>(61440&a)==4096,isSocket:a=>!(49152&~a),flagModes:{r:0,"r+":2,w:577,"w+":578,a:1089,"a+":1090},modeStringToFlags:a=>{var o=q.flagModes[a];if(o===void 0)throw new Error("Unknown file open mode: "+a);return o},flagsToPermissionString:a=>{var o=["r","w","rw"][3&a];return 512&a&&(o+="w"),o},nodePermissions:(a,o)=>q.ignorePermissions||(!o.includes("r")||292&a.mode)&&(!o.includes("w")||146&a.mode)&&(!o.includes("x")||73&a.mode)?0:2,mayLookup:a=>{var o=q.nodePermissions(a,"x");return o||(a.node_ops.lookup?0:2)},mayCreate:(a,o)=>{try{return q.lookupNode(a,o),20}catch{}return q.nodePermissions(a,"wx")},mayDelete:(a,o,n)=>{var u;try{u=q.lookupNode(a,o)}catch(b){return b.errno}var m=q.nodePermissions(a,"wx");if(m)return m;if(n){if(!q.isDir(u.mode))return 54;if(q.isRoot(u)||q.getPath(u)===q.cwd())return 10}else if(q.isDir(u.mode))return 31;return 0},mayOpen:(a,o)=>a?q.isLink(a.mode)?32:q.isDir(a.mode)&&(q.flagsToPermissionString(o)!=="r"||512&o)?31:q.nodePermissions(a,q.flagsToPermissionString(o)):44,MAX_OPEN_FDS:4096,nextfd:(a=0,o=q.MAX_OPEN_FDS)=>{for(var n=a;n<=o;n++)if(!q.streams[n])return n;throw new q.ErrnoError(33)},getStream:a=>q.streams[a],createStream:(a,o,n)=>{q.FSStream||(q.FSStream=function(){this.shared={}},q.FSStream.prototype={},Object.defineProperties(q.FSStream.prototype,{object:{get:function(){return this.node},set:function(m){this.node=m}},isRead:{get:function(){return(2097155&this.flags)!=1}},isWrite:{get:function(){return!!(2097155&this.flags)}},isAppend:{get:function(){return 1024&this.flags}},flags:{get:function(){return this.shared.flags},set:function(m){this.shared.flags=m}},position:{get:function(){return this.shared.position},set:function(m){this.shared.position=m}}})),a=Object.assign(new q.FSStream,a);var u=q.nextfd(o,n);return a.fd=u,q.streams[u]=a,a},closeStream:a=>{q.streams[a]=null},chrdev_stream_ops:{open:a=>{var o=q.getDevice(a.node.rdev);a.stream_ops=o.stream_ops,a.stream_ops.open&&a.stream_ops.open(a)},llseek:()=>{throw new q.ErrnoError(70)}},major:a=>a>>8,minor:a=>255&a,makedev:(a,o)=>a<<8|o,registerDevice:(a,o)=>{q.devices[a]={stream_ops:o}},getDevice:a=>q.devices[a],getMounts:a=>{for(var o=[],n=[a];n.length;){var u=n.pop();o.push(u),n.push.apply(n,u.mounts)}return o},syncfs:(a,o)=>{typeof a=="function"&&(o=a,a=!1),q.syncFSRequests++,q.syncFSRequests>1&&uo("warning: "+q.syncFSRequests+" FS.syncfs operations in flight at once, probably just doing extra work");var n=q.getMounts(q.root.mount),u=0;function m(C){return q.syncFSRequests--,o(C)}function b(C){if(C)return b.errored?void 0:(b.errored=!0,m(C));++u>=n.length&&m(null)}n.forEach(C=>{if(!C.type.syncfs)return b(null);C.type.syncfs(C,a,b)})},mount:(a,o,n)=>{var u,m=n==="/",b=!n;if(m&&q.root)throw new q.ErrnoError(10);if(!m&&!b){var C=q.lookupPath(n,{follow_mount:!1});if(n=C.path,u=C.node,q.isMountpoint(u))throw new q.ErrnoError(10);if(!q.isDir(u.mode))throw new q.ErrnoError(54)}var w={type:a,opts:o,mountpoint:n,mounts:[]},E=a.mount(w);return E.mount=w,w.root=E,m?q.root=E:u&&(u.mounted=w,u.mount&&u.mount.mounts.push(w)),E},unmount:a=>{var o=q.lookupPath(a,{follow_mount:!1});if(!q.isMountpoint(o.node))throw new q.ErrnoError(28);var n=o.node,u=n.mounted,m=q.getMounts(u);Object.keys(q.nameTable).forEach(C=>{for(var w=q.nameTable[C];w;){var E=w.name_next;m.includes(w.mount)&&q.destroyNode(w),w=E}}),n.mounted=null;var b=n.mount.mounts.indexOf(u);n.mount.mounts.splice(b,1)},lookup:(a,o)=>a.node_ops.lookup(a,o),mknod:(a,o,n)=>{var u=q.lookupPath(a,{parent:!0}).node,m=Ar.basename(a);if(!m||m==="."||m==="..")throw new q.ErrnoError(28);var b=q.mayCreate(u,m);if(b)throw new q.ErrnoError(b);if(!u.node_ops.mknod)throw new q.ErrnoError(63);return u.node_ops.mknod(u,m,o,n)},create:(a,o)=>(o=o!==void 0?o:438,o&=4095,o|=32768,q.mknod(a,o,0)),mkdir:(a,o)=>(o=o!==void 0?o:511,o&=1023,o|=16384,q.mknod(a,o,0)),mkdirTree:(a,o)=>{for(var n=a.split("/"),u="",m=0;m<n.length;++m)if(n[m]){u+="/"+n[m];try{q.mkdir(u,o)}catch(b){if(b.errno!=20)throw b}}},mkdev:(a,o,n)=>(n===void 0&&(n=o,o=438),o|=8192,q.mknod(a,o,n)),symlink:(a,o)=>{if(!Xn.resolve(a))throw new q.ErrnoError(44);var n=q.lookupPath(o,{parent:!0}).node;if(!n)throw new q.ErrnoError(44);var u=Ar.basename(o),m=q.mayCreate(n,u);if(m)throw new q.ErrnoError(m);if(!n.node_ops.symlink)throw new q.ErrnoError(63);return n.node_ops.symlink(n,u,a)},rename:(a,o)=>{var n,u,m=Ar.dirname(a),b=Ar.dirname(o),C=Ar.basename(a),w=Ar.basename(o);if(n=q.lookupPath(a,{parent:!0}).node,u=q.lookupPath(o,{parent:!0}).node,!n||!u)throw new q.ErrnoError(44);if(n.mount!==u.mount)throw new q.ErrnoError(75);var E,B=q.lookupNode(n,C),D=Xn.relative(a,b);if(D.charAt(0)!==".")throw new q.ErrnoError(28);if((D=Xn.relative(o,m)).charAt(0)!==".")throw new q.ErrnoError(55);try{E=q.lookupNode(u,w)}catch{}if(B!==E){var v=q.isDir(B.mode),x=q.mayDelete(n,C,v);if(x)throw new q.ErrnoError(x);if(x=E?q.mayDelete(u,w,v):q.mayCreate(u,w))throw new q.ErrnoError(x);if(!n.node_ops.rename)throw new q.ErrnoError(63);if(q.isMountpoint(B)||E&&q.isMountpoint(E))throw new q.ErrnoError(10);if(u!==n&&(x=q.nodePermissions(n,"w")))throw new q.ErrnoError(x);q.hashRemoveNode(B);try{n.node_ops.rename(B,u,w)}catch(S){throw S}finally{q.hashAddNode(B)}}},rmdir:a=>{var o=q.lookupPath(a,{parent:!0}).node,n=Ar.basename(a),u=q.lookupNode(o,n),m=q.mayDelete(o,n,!0);if(m)throw new q.ErrnoError(m);if(!o.node_ops.rmdir)throw new q.ErrnoError(63);if(q.isMountpoint(u))throw new q.ErrnoError(10);o.node_ops.rmdir(o,n),q.destroyNode(u)},readdir:a=>{var o=q.lookupPath(a,{follow:!0}).node;if(!o.node_ops.readdir)throw new q.ErrnoError(54);return o.node_ops.readdir(o)},unlink:a=>{var o=q.lookupPath(a,{parent:!0}).node;if(!o)throw new q.ErrnoError(44);var n=Ar.basename(a),u=q.lookupNode(o,n),m=q.mayDelete(o,n,!1);if(m)throw new q.ErrnoError(m);if(!o.node_ops.unlink)throw new q.ErrnoError(63);if(q.isMountpoint(u))throw new q.ErrnoError(10);o.node_ops.unlink(o,n),q.destroyNode(u)},readlink:a=>{var o=q.lookupPath(a).node;if(!o)throw new q.ErrnoError(44);if(!o.node_ops.readlink)throw new q.ErrnoError(28);return Xn.resolve(q.getPath(o.parent),o.node_ops.readlink(o))},stat:(a,o)=>{var n=q.lookupPath(a,{follow:!o}).node;if(!n)throw new q.ErrnoError(44);if(!n.node_ops.getattr)throw new q.ErrnoError(63);return n.node_ops.getattr(n)},lstat:a=>q.stat(a,!0),chmod:(a,o,n)=>{var u;if(typeof a=="string"?u=q.lookupPath(a,{follow:!n}).node:u=a,!u.node_ops.setattr)throw new q.ErrnoError(63);u.node_ops.setattr(u,{mode:4095&o|-4096&u.mode,timestamp:Date.now()})},lchmod:(a,o)=>{q.chmod(a,o,!0)},fchmod:(a,o)=>{var n=q.getStream(a);if(!n)throw new q.ErrnoError(8);q.chmod(n.node,o)},chown:(a,o,n,u)=>{var m;if(typeof a=="string"?m=q.lookupPath(a,{follow:!u}).node:m=a,!m.node_ops.setattr)throw new q.ErrnoError(63);m.node_ops.setattr(m,{timestamp:Date.now()})},lchown:(a,o,n)=>{q.chown(a,o,n,!0)},fchown:(a,o,n)=>{var u=q.getStream(a);if(!u)throw new q.ErrnoError(8);q.chown(u.node,o,n)},truncate:(a,o)=>{if(o<0)throw new q.ErrnoError(28);var n;if(typeof a=="string"?n=q.lookupPath(a,{follow:!0}).node:n=a,!n.node_ops.setattr)throw new q.ErrnoError(63);if(q.isDir(n.mode))throw new q.ErrnoError(31);if(!q.isFile(n.mode))throw new q.ErrnoError(28);var u=q.nodePermissions(n,"w");if(u)throw new q.ErrnoError(u);n.node_ops.setattr(n,{size:o,timestamp:Date.now()})},ftruncate:(a,o)=>{var n=q.getStream(a);if(!n)throw new q.ErrnoError(8);if(!(2097155&n.flags))throw new q.ErrnoError(28);q.truncate(n.node,o)},utime:(a,o,n)=>{var u=q.lookupPath(a,{follow:!0}).node;u.node_ops.setattr(u,{timestamp:Math.max(o,n)})},open:(a,o,n)=>{if(a==="")throw new q.ErrnoError(44);var u;if(n=n===void 0?438:n,n=64&(o=typeof o=="string"?q.modeStringToFlags(o):o)?4095&n|32768:0,typeof a=="object")u=a;else{a=Ar.normalize(a);try{u=q.lookupPath(a,{follow:!(131072&o)}).node}catch{}}var m=!1;if(64&o)if(u){if(128&o)throw new q.ErrnoError(20)}else u=q.mknod(a,n,0),m=!0;if(!u)throw new q.ErrnoError(44);if(q.isChrdev(u.mode)&&(o&=-513),65536&o&&!q.isDir(u.mode))throw new q.ErrnoError(54);if(!m){var b=q.mayOpen(u,o);if(b)throw new q.ErrnoError(b)}512&o&&!m&&q.truncate(u,0),o&=-131713;var C=q.createStream({node:u,path:q.getPath(u),flags:o,seekable:!0,position:0,stream_ops:u.stream_ops,ungotten:[],error:!1});return C.stream_ops.open&&C.stream_ops.open(C),!ae.logReadFiles||1&o||(q.readFiles||(q.readFiles={}),a in q.readFiles||(q.readFiles[a]=1)),C},close:a=>{if(q.isClosed(a))throw new q.ErrnoError(8);a.getdents&&(a.getdents=null);try{a.stream_ops.close&&a.stream_ops.close(a)}catch(o){throw o}finally{q.closeStream(a.fd)}a.fd=null},isClosed:a=>a.fd===null,llseek:(a,o,n)=>{if(q.isClosed(a))throw new q.ErrnoError(8);if(!a.seekable||!a.stream_ops.llseek)throw new q.ErrnoError(70);if(n!=0&&n!=1&&n!=2)throw new q.ErrnoError(28);return a.position=a.stream_ops.llseek(a,o,n),a.ungotten=[],a.position},read:(a,o,n,u,m)=>{if(u<0||m<0)throw new q.ErrnoError(28);if(q.isClosed(a))throw new q.ErrnoError(8);if((2097155&a.flags)==1)throw new q.ErrnoError(8);if(q.isDir(a.node.mode))throw new q.ErrnoError(31);if(!a.stream_ops.read)throw new q.ErrnoError(28);var b=m!==void 0;if(b){if(!a.seekable)throw new q.ErrnoError(70)}else m=a.position;var C=a.stream_ops.read(a,o,n,u,m);return b||(a.position+=C),C},write:(a,o,n,u,m,b)=>{if(u<0||m<0)throw new q.ErrnoError(28);if(q.isClosed(a))throw new q.ErrnoError(8);if(!(2097155&a.flags))throw new q.ErrnoError(8);if(q.isDir(a.node.mode))throw new q.ErrnoError(31);if(!a.stream_ops.write)throw new q.ErrnoError(28);a.seekable&&1024&a.flags&&q.llseek(a,0,2);var C=m!==void 0;if(C){if(!a.seekable)throw new q.ErrnoError(70)}else m=a.position;var w=a.stream_ops.write(a,o,n,u,m,b);return C||(a.position+=w),w},allocate:(a,o,n)=>{if(q.isClosed(a))throw new q.ErrnoError(8);if(o<0||n<=0)throw new q.ErrnoError(28);if(!(2097155&a.flags))throw new q.ErrnoError(8);if(!q.isFile(a.node.mode)&&!q.isDir(a.node.mode))throw new q.ErrnoError(43);if(!a.stream_ops.allocate)throw new q.ErrnoError(138);a.stream_ops.allocate(a,o,n)},mmap:(a,o,n,u,m)=>{if(2&u&&!(2&m)&&(2097155&a.flags)!=2)throw new q.ErrnoError(2);if((2097155&a.flags)==1)throw new q.ErrnoError(2);if(!a.stream_ops.mmap)throw new q.ErrnoError(43);return a.stream_ops.mmap(a,o,n,u,m)},msync:(a,o,n,u,m)=>a.stream_ops.msync?a.stream_ops.msync(a,o,n,u,m):0,munmap:a=>0,ioctl:(a,o,n)=>{if(!a.stream_ops.ioctl)throw new q.ErrnoError(59);return a.stream_ops.ioctl(a,o,n)},readFile:(a,o={})=>{if(o.flags=o.flags||0,o.encoding=o.encoding||"binary",o.encoding!=="utf8"&&o.encoding!=="binary")throw new Error('Invalid encoding type "'+o.encoding+'"');var n,u=q.open(a,o.flags),m=q.stat(a).size,b=new Uint8Array(m);return q.read(u,b,0,m,0),o.encoding==="utf8"?n=so(b,0):o.encoding==="binary"&&(n=b),q.close(u),n},writeFile:(a,o,n={})=>{n.flags=n.flags||577;var u=q.open(a,n.flags,n.mode);if(typeof o=="string"){var m=new Uint8Array(QC(o)+1),b=Vc(o,m,0,m.length);q.write(u,m,0,b,void 0,n.canOwn)}else{if(!ArrayBuffer.isView(o))throw new Error("Unsupported data type");q.write(u,o,0,o.byteLength,void 0,n.canOwn)}q.close(u)},cwd:()=>q.currentPath,chdir:a=>{var o=q.lookupPath(a,{follow:!0});if(o.node===null)throw new q.ErrnoError(44);if(!q.isDir(o.node.mode))throw new q.ErrnoError(54);var n=q.nodePermissions(o.node,"x");if(n)throw new q.ErrnoError(n);q.currentPath=o.path},createDefaultDirectories:()=>{q.mkdir("/tmp"),q.mkdir("/home"),q.mkdir("/home/web_user")},createDefaultDevices:()=>{q.mkdir("/dev"),q.registerDevice(q.makedev(1,3),{read:()=>0,write:(a,o,n,u,m)=>u}),q.mkdev("/dev/null",q.makedev(1,3)),yi.register(q.makedev(5,0),yi.default_tty_ops),yi.register(q.makedev(6,0),yi.default_tty1_ops),q.mkdev("/dev/tty",q.makedev(5,0)),q.mkdev("/dev/tty1",q.makedev(6,0)),q.mkdir("/dev/shm"),q.mkdir("/dev/shm/tmp")},createSpecialDirectories:()=>{q.mkdir("/proc");var a=q.mkdir("/proc/self");q.mkdir("/proc/self/fd"),q.mount({mount:()=>{var o=q.createNode(a,"fd",16895,73);return o.node_ops={lookup:(n,u)=>{var m=+u,b=q.getStream(m);if(!b)throw new q.ErrnoError(8);var C={parent:null,mount:{mountpoint:"fake"},node_ops:{readlink:()=>b.path}};return C.parent=C,C}},o}},{},"/proc/self/fd")},createStandardStreams:()=>{ae.stdin?q.createDevice("/dev","stdin",ae.stdin):q.symlink("/dev/tty","/dev/stdin"),ae.stdout?q.createDevice("/dev","stdout",null,ae.stdout):q.symlink("/dev/tty","/dev/stdout"),ae.stderr?q.createDevice("/dev","stderr",null,ae.stderr):q.symlink("/dev/tty1","/dev/stderr"),q.open("/dev/stdin",0),q.open("/dev/stdout",1),q.open("/dev/stderr",1)},ensureErrnoError:()=>{q.ErrnoError||(q.ErrnoError=function(a,o){this.node=o,this.setErrno=function(n){this.errno=n},this.setErrno(a),this.message="FS error"},q.ErrnoError.prototype=new Error,q.ErrnoError.prototype.constructor=q.ErrnoError,[44].forEach(a=>{q.genericErrors[a]=new q.ErrnoError(a),q.genericErrors[a].stack="<generic error, no stack>"}))},staticInit:()=>{q.ensureErrnoError(),q.nameTable=new Array(4096),q.mount(wt,{},"/"),q.createDefaultDirectories(),q.createDefaultDevices(),q.createSpecialDirectories(),q.filesystems={MEMFS:wt}},init:(a,o,n)=>{q.init.initialized=!0,q.ensureErrnoError(),ae.stdin=a||ae.stdin,ae.stdout=o||ae.stdout,ae.stderr=n||ae.stderr,q.createStandardStreams()},quit:()=>{q.init.initialized=!1;for(var a=0;a<q.streams.length;a++){var o=q.streams[a];o&&q.close(o)}},getMode:(a,o)=>{var n=0;return a&&(n|=365),o&&(n|=146),n},findObject:(a,o)=>{var n=q.analyzePath(a,o);return n.exists?n.object:null},analyzePath:(a,o)=>{try{a=(u=q.lookupPath(a,{follow:!o})).path}catch{}var n={isRoot:!1,exists:!1,error:0,name:null,path:null,object:null,parentExists:!1,parentPath:null,parentObject:null};try{var u=q.lookupPath(a,{parent:!0});n.parentExists=!0,n.parentPath=u.path,n.parentObject=u.node,n.name=Ar.basename(a),u=q.lookupPath(a,{follow:!o}),n.exists=!0,n.path=u.path,n.object=u.node,n.name=u.node.name,n.isRoot=u.path==="/"}catch(m){n.error=m.errno}return n},createPath:(a,o,n,u)=>{a=typeof a=="string"?a:q.getPath(a);for(var m=o.split("/").reverse();m.length;){var b=m.pop();if(b){var C=Ar.join2(a,b);try{q.mkdir(C)}catch{}a=C}}return C},createFile:(a,o,n,u,m)=>{var b=Ar.join2(typeof a=="string"?a:q.getPath(a),o),C=q.getMode(u,m);return q.create(b,C)},createDataFile:(a,o,n,u,m,b)=>{var C=o;a&&(a=typeof a=="string"?a:q.getPath(a),C=o?Ar.join2(a,o):a);var w=q.getMode(u,m),E=q.create(C,w);if(n){if(typeof n=="string"){for(var B=new Array(n.length),D=0,v=n.length;D<v;++D)B[D]=n.charCodeAt(D);n=B}q.chmod(E,146|w);var x=q.open(E,577);q.write(x,n,0,n.length,0,b),q.close(x),q.chmod(E,w)}return E},createDevice:(a,o,n,u)=>{var m=Ar.join2(typeof a=="string"?a:q.getPath(a),o),b=q.getMode(!!n,!!u);q.createDevice.major||(q.createDevice.major=64);var C=q.makedev(q.createDevice.major++,0);return q.registerDevice(C,{open:w=>{w.seekable=!1},close:w=>{u&&u.buffer&&u.buffer.length&&u(10)},read:(w,E,B,D,v)=>{for(var x=0,S=0;S<D;S++){var F;try{F=n()}catch{throw new q.ErrnoError(29)}if(F===void 0&&x===0)throw new q.ErrnoError(6);if(F==null)break;x++,E[B+S]=F}return x&&(w.node.timestamp=Date.now()),x},write:(w,E,B,D,v)=>{for(var x=0;x<D;x++)try{u(E[B+x])}catch{throw new q.ErrnoError(29)}return D&&(w.node.timestamp=Date.now()),x}}),q.mkdev(m,b,C)},forceLoadFile:a=>{if(a.isDevice||a.isFolder||a.link||a.contents)return!0;throw typeof XMLHttpRequest<"u"?new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread."):new Error("Cannot load without read() or XMLHttpRequest.")},createLazyFile:(a,o,n,u,m)=>{function b(){this.lengthKnown=!1,this.chunks=[]}if(b.prototype.get=function(v){if(!(v>this.length-1||v<0)){var x=v%this.chunkSize,S=v/this.chunkSize|0;return this.getter(S)[x]}},b.prototype.setDataGetter=function(v){this.getter=v},b.prototype.cacheLength=function(){var v=new XMLHttpRequest;if(v.open("HEAD",n,!1),v.send(null),!(v.status>=200&&v.status<300||v.status===304))throw new Error("Couldn't load "+n+". Status: "+v.status);var x,S=Number(v.getResponseHeader("Content-length")),F=(x=v.getResponseHeader("Accept-Ranges"))&&x==="bytes",j=(x=v.getResponseHeader("Content-Encoding"))&&x==="gzip",J=1048576;F||(J=S);var L=this;L.setDataGetter(N=>{var U=N*J,f=(N+1)*J-1;if(f=Math.min(f,S-1),L.chunks[N]===void 0&&(L.chunks[N]=((k,e)=>{if(k>e)throw new Error("invalid range ("+k+", "+e+") or no bytes requested!");if(e>S-1)throw new Error("only "+S+" bytes available! programmer error!");var d=new XMLHttpRequest;if(d.open("GET",n,!1),S!==J&&d.setRequestHeader("Range","bytes="+k+"-"+e),d.responseType="arraybuffer",d.overrideMimeType&&d.overrideMimeType("text/plain; charset=x-user-defined"),d.send(null),!(d.status>=200&&d.status<300||d.status===304))throw new Error("Couldn't load "+n+". Status: "+d.status);return d.response!==void 0?new Uint8Array(d.response||[]):LC(d.responseText||"",!0)})(U,f)),L.chunks[N]===void 0)throw new Error("doXHR failed!");return L.chunks[N]}),!j&&S||(J=S=1,S=this.getter(0).length,J=S,Z0("LazyFiles on gzip forces download of the whole file when length is accessed")),this._length=S,this._chunkSize=J,this.lengthKnown=!0},typeof XMLHttpRequest<"u"){if(!_I)throw"Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc";var C=new b;Object.defineProperties(C,{length:{get:function(){return this.lengthKnown||this.cacheLength(),this._length}},chunkSize:{get:function(){return this.lengthKnown||this.cacheLength(),this._chunkSize}}});var w={isDevice:!1,contents:C}}else w={isDevice:!1,url:n};var E=q.createFile(a,o,w,u,m);w.contents?E.contents=w.contents:w.url&&(E.contents=null,E.url=w.url),Object.defineProperties(E,{usedBytes:{get:function(){return this.contents.length}}});var B={};function D(v,x,S,F,j){var J=v.node.contents;if(j>=J.length)return 0;var L=Math.min(J.length-j,F);if(J.slice)for(var N=0;N<L;N++)x[S+N]=J[j+N];else for(N=0;N<L;N++)x[S+N]=J.get(j+N);return L}return Object.keys(E.stream_ops).forEach(v=>{var x=E.stream_ops[v];B[v]=function(){return q.forceLoadFile(E),x.apply(null,arguments)}}),B.read=(v,x,S,F,j)=>(q.forceLoadFile(E),D(v,x,S,F,j)),B.mmap=(v,x,S,F,j)=>{q.forceLoadFile(E);var J=_C();if(!J)throw new q.ErrnoError(48);return D(v,Ds,J,x,S),{ptr:J,allocated:!0}},E.stream_ops=B,E},indexedDB:()=>window.indexedDB||window.mozIndexedDB||window.webkitIndexedDB||window.msIndexedDB,DB_NAME:()=>"EM_FS_"+window.location.pathname,DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:(a,o,n)=>{o=o||(()=>{}),n=n||(()=>{});var u=q.indexedDB();try{var m=u.open(q.DB_NAME(),q.DB_VERSION)}catch(b){return n(b)}m.onupgradeneeded=()=>{Z0("creating db"),m.result.createObjectStore(q.DB_STORE_NAME)},m.onsuccess=()=>{var b=m.result.transaction([q.DB_STORE_NAME],"readwrite"),C=b.objectStore(q.DB_STORE_NAME),w=0,E=0,B=a.length;function D(){E==0?o():n()}a.forEach(v=>{var x=C.put(q.analyzePath(v).object.contents,v);x.onsuccess=()=>{++w+E==B&&D()},x.onerror=()=>{E++,w+E==B&&D()}}),b.onerror=n},m.onerror=n},loadFilesFromDB:(a,o,n)=>{o=o||(()=>{}),n=n||(()=>{});var u=q.indexedDB();try{var m=u.open(q.DB_NAME(),q.DB_VERSION)}catch(b){return n(b)}m.onupgradeneeded=n,m.onsuccess=()=>{var b=m.result;try{var C=b.transaction([q.DB_STORE_NAME],"readonly")}catch(x){return void n(x)}var w=C.objectStore(q.DB_STORE_NAME),E=0,B=0,D=a.length;function v(){B==0?o():n()}a.forEach(x=>{var S=w.get(x);S.onsuccess=()=>{q.analyzePath(x).exists&&q.unlink(x),q.createDataFile(Ar.dirname(x),Ar.basename(x),S.result,!0,!0,!0),++E+B==D&&v()},S.onerror=()=>{B++,E+B==D&&v()}}),C.onerror=n},m.onerror=n}},Cr={DEFAULT_POLLMASK:5,calculateAt:function(a,o,n){if(Ar.isAbs(o))return o;var u;if(a===-100?u=q.cwd():u=Cr.getStreamFromFD(a).path,o.length==0){if(!n)throw new q.ErrnoError(44);return u}return Ar.join2(u,o)},doStat:function(a,o,n){try{var u=a(o)}catch(w){if(w&&w.node&&Ar.normalize(o)!==Ar.normalize(q.getPath(w.node)))return-54;throw w}Ot[n>>2]=u.dev,Ot[n+8>>2]=u.ino,Ot[n+12>>2]=u.mode,jr[n+16>>2]=u.nlink,Ot[n+20>>2]=u.uid,Ot[n+24>>2]=u.gid,Ot[n+28>>2]=u.rdev,Tr=[u.size>>>0,(ct=u.size,+Math.abs(ct)>=1?ct>0?(0|Math.min(+Math.floor(ct/4294967296),4294967295))>>>0:~~+Math.ceil((ct-+(~~ct>>>0))/4294967296)>>>0:0)],Ot[n+40>>2]=Tr[0],Ot[n+44>>2]=Tr[1],Ot[n+48>>2]=4096,Ot[n+52>>2]=u.blocks;var m=u.atime.getTime(),b=u.mtime.getTime(),C=u.ctime.getTime();return Tr=[Math.floor(m/1e3)>>>0,(ct=Math.floor(m/1e3),+Math.abs(ct)>=1?ct>0?(0|Math.min(+Math.floor(ct/4294967296),4294967295))>>>0:~~+Math.ceil((ct-+(~~ct>>>0))/4294967296)>>>0:0)],Ot[n+56>>2]=Tr[0],Ot[n+60>>2]=Tr[1],jr[n+64>>2]=m%1e3*1e3,Tr=[Math.floor(b/1e3)>>>0,(ct=Math.floor(b/1e3),+Math.abs(ct)>=1?ct>0?(0|Math.min(+Math.floor(ct/4294967296),4294967295))>>>0:~~+Math.ceil((ct-+(~~ct>>>0))/4294967296)>>>0:0)],Ot[n+72>>2]=Tr[0],Ot[n+76>>2]=Tr[1],jr[n+80>>2]=b%1e3*1e3,Tr=[Math.floor(C/1e3)>>>0,(ct=Math.floor(C/1e3),+Math.abs(ct)>=1?ct>0?(0|Math.min(+Math.floor(ct/4294967296),4294967295))>>>0:~~+Math.ceil((ct-+(~~ct>>>0))/4294967296)>>>0:0)],Ot[n+88>>2]=Tr[0],Ot[n+92>>2]=Tr[1],jr[n+96>>2]=C%1e3*1e3,Tr=[u.ino>>>0,(ct=u.ino,+Math.abs(ct)>=1?ct>0?(0|Math.min(+Math.floor(ct/4294967296),4294967295))>>>0:~~+Math.ceil((ct-+(~~ct>>>0))/4294967296)>>>0:0)],Ot[n+104>>2]=Tr[0],Ot[n+108>>2]=Tr[1],0},doMsync:function(a,o,n,u,m){if(!q.isFile(o.node.mode))throw new q.ErrnoError(43);if(2&u)return 0;var b=ao.slice(a,a+n);q.msync(o,b,m,n,u)},varargs:void 0,get:function(){return Cr.varargs+=4,Ot[Cr.varargs-4>>2]},getStr:function(a){return no(a)},getStreamFromFD:function(a){var o=q.getStream(a);if(!o)throw new q.ErrnoError(8);return o}},Y2={};function Xo(){if(!Xo.strings){var a={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:(typeof navigator=="object"&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",_:Yc||"./this.program"};for(var o in Y2)Y2[o]===void 0?delete a[o]:a[o]=Y2[o];var n=[];for(var o in a)n.push(o+"="+a[o]);Xo.strings=n}return Xo.strings}var Np=function(a,o,n,u){a||(a=this),this.parent=a,this.mount=a.mount,this.mounted=null,this.id=q.nextInode++,this.name=o,this.mode=n,this.node_ops={},this.stream_ops={},this.rdev=u};Object.defineProperties(Np.prototype,{read:{get:function(){return!(365&~this.mode)},set:function(a){a?this.mode|=365:this.mode&=-366}},write:{get:function(){return!(146&~this.mode)},set:function(a){a?this.mode|=146:this.mode&=-147}},isFolder:{get:function(){return q.isDir(this.mode)}},isDevice:{get:function(){return q.isChrdev(this.mode)}}}),q.FSNode=Np,q.staticInit(),ae.FS_createPath=q.createPath,ae.FS_createDataFile=q.createDataFile,ae.FS_unlink=q.unlink,ae.FS_createLazyFile=q.createLazyFile,ae.FS_createDevice=q.createDevice;var YI={g:function(a,o,n,u){En("Assertion failed: "+no(a)+", at: "+[o?no(o):"unknown filename",n,u?no(u):"unknown function"])},u:function(a,o,n){throw new WI(a).init(o,n),a},d:function(a,o,n){Cr.varargs=n;try{var u=Cr.getStreamFromFD(a);switch(o){case 0:return(m=Cr.get())<0?-28:q.createStream(u,m).fd;case 1:case 2:case 6:case 7:return 0;case 3:return u.flags;case 4:var m=Cr.get();return u.flags|=m,0;case 5:return m=Cr.get(),J0[m+0>>1]=2,0;case 16:case 8:default:return-28;case 9:return b=28,Ot[Lb()>>2]=b,-1}}catch(C){if(q===void 0||!(C instanceof q.ErrnoError))throw C;return-C.errno}var b},q:function(a,o,n){try{var u=Cr.getStreamFromFD(a);u.getdents||(u.getdents=q.readdir(u.path));for(var m=280,b=0,C=q.llseek(u,0,1),w=Math.floor(C/m);w<u.getdents.length&&b+m<=n;){var E,B,D=u.getdents[w];if(D===".")E=u.node.id,B=4;else if(D==="..")E=q.lookupPath(u.path,{parent:!0}).node.id,B=4;else{var v=q.lookupNode(u.node,D);E=v.id,B=q.isChrdev(v.mode)?2:q.isDir(v.mode)?4:q.isLink(v.mode)?10:8}Tr=[E>>>0,(ct=E,+Math.abs(ct)>=1?ct>0?(0|Math.min(+Math.floor(ct/4294967296),4294967295))>>>0:~~+Math.ceil((ct-+(~~ct>>>0))/4294967296)>>>0:0)],Ot[o+b>>2]=Tr[0],Ot[o+b+4>>2]=Tr[1],Tr=[(w+1)*m>>>0,(ct=(w+1)*m,+Math.abs(ct)>=1?ct>0?(0|Math.min(+Math.floor(ct/4294967296),4294967295))>>>0:~~+Math.ceil((ct-+(~~ct>>>0))/4294967296)>>>0:0)],Ot[o+b+8>>2]=Tr[0],Ot[o+b+12>>2]=Tr[1],J0[o+b+16>>1]=280,Ds[o+b+18|0]=B,Vc(D,ao,o+b+19,256),b+=m,w+=1}return q.llseek(u,w*m,0),b}catch(x){if(q===void 0||!(x instanceof q.ErrnoError))throw x;return-x.errno}},h:function(a,o,n){Cr.varargs=n;try{var u=Cr.getStreamFromFD(a);switch(o){case 21509:case 21505:case 21510:case 21511:case 21512:case 21506:case 21507:case 21508:case 21523:case 21524:return u.tty?0:-59;case 21519:if(!u.tty)return-59;var m=Cr.get();return Ot[m>>2]=0,0;case 21520:return u.tty?-28:-59;case 21531:return m=Cr.get(),q.ioctl(u,o,m);default:return-28}}catch(b){if(q===void 0||!(b instanceof q.ErrnoError))throw b;return-b.errno}},e:function(a,o,n,u){Cr.varargs=u;try{o=Cr.getStr(o),o=Cr.calculateAt(a,o);var m=u?Cr.get():0;return q.open(o,n,m).fd}catch(b){if(q===void 0||!(b instanceof q.ErrnoError))throw b;return-b.errno}},o:function(a){try{return a=Cr.getStr(a),q.rmdir(a),0}catch(o){if(q===void 0||!(o instanceof q.ErrnoError))throw o;return-o.errno}},n:function(a,o){try{return a=Cr.getStr(a),Cr.doStat(q.stat,a,o)}catch(n){if(q===void 0||!(n instanceof q.ErrnoError))throw n;return-n.errno}},p:function(a,o,n){try{return o=Cr.getStr(o),o=Cr.calculateAt(a,o),n===0?q.unlink(o):n===512?q.rmdir(o):En("Invalid flags passed to unlinkat"),0}catch(u){if(q===void 0||!(u instanceof q.ErrnoError))throw u;return-u.errno}},i:function(){return!0},l:function(){En("")},f:function(){return Date.now()},j:function(a,o,n){ao.copyWithin(a,o,o+n)},m:function(a){ao.length,En("OOM")},r:function(a,o){var n=0;return Xo().forEach(function(u,m){var b=o+n;jr[a+4*m>>2]=b,function(C,w){for(var E=0;E<C.length;++E)Ds[0|w++]=C.charCodeAt(E);Ds[0|w]=0}(u,b),n+=u.length+1}),0},s:function(a,o){var n=Xo();jr[a>>2]=n.length;var u=0;return n.forEach(function(m){u+=m.length+1}),jr[o>>2]=u,0},b:function(a){try{var o=Cr.getStreamFromFD(a);return q.close(o),0}catch(n){if(q===void 0||!(n instanceof q.ErrnoError))throw n;return n.errno}},t:function(a,o,n,u){try{var m=function(b,C,w,E){for(var B=0,D=0;D<w;D++){var v=jr[C>>2],x=jr[C+4>>2];C+=8;var S=q.read(b,Ds,v,x,E);if(S<0)return-1;if(B+=S,S<x)break}return B}(Cr.getStreamFromFD(a),o,n);return jr[u>>2]=m,0}catch(b){if(q===void 0||!(b instanceof q.ErrnoError))throw b;return b.errno}},k:function(a,o,n,u,m){try{var b=(E=n)+2097152>>>0<4194305-!!(w=o)?(w>>>0)+4294967296*E:NaN;if(isNaN(b))return 61;var C=Cr.getStreamFromFD(a);return q.llseek(C,b,u),Tr=[C.position>>>0,(ct=C.position,+Math.abs(ct)>=1?ct>0?(0|Math.min(+Math.floor(ct/4294967296),4294967295))>>>0:~~+Math.ceil((ct-+(~~ct>>>0))/4294967296)>>>0:0)],Ot[m>>2]=Tr[0],Ot[m+4>>2]=Tr[1],C.getdents&&b===0&&u===0&&(C.getdents=null),0}catch(B){if(q===void 0||!(B instanceof q.ErrnoError))throw B;return B.errno}var w,E},c:function(a,o,n,u){try{var m=function(b,C,w,E){for(var B=0,D=0;D<w;D++){var v=jr[C>>2],x=jr[C+4>>2];C+=8;var S=q.write(b,Ds,v,x,E);if(S<0)return-1;B+=S}return B}(Cr.getStreamFromFD(a),o,n);return jr[u>>2]=m,0}catch(b){if(q===void 0||!(b instanceof q.ErrnoError))throw b;return b.errno}},a:_0};(function(){var a,o={a:YI};function n(m,b){var C=m.exports;ae.asm=C,ae.asm.ua,OC(ae.asm.v),NC()}function u(m){n(m.instance)}if(zC(),ae.instantiateWasm)try{return ae.instantiateWasm(o,n)}catch(m){return uo("Module.instantiateWasm callback failed with error: "+m),!1}a=u,async function(){return[]}().then(function(m){return fo.instantiate(m,o)}).then(function(m){return m}).then(a,function(m){uo("failed to asynchronously prepare wasm: "+m),En(m)})})(),ae.___wasm_call_ctors=function(){return(ae.___wasm_call_ctors=ae.asm.v).apply(null,arguments)};var RC=ae._emscripten_bind_VoidPtr___destroy___0=function(){return(RC=ae._emscripten_bind_VoidPtr___destroy___0=ae.asm.w).apply(null,arguments)},jC=ae._emscripten_bind_espeak_VOICE_get_name_0=function(){return(jC=ae._emscripten_bind_espeak_VOICE_get_name_0=ae.asm.x).apply(null,arguments)},WC=ae._emscripten_bind_espeak_VOICE_set_name_1=function(){return(WC=ae._emscripten_bind_espeak_VOICE_set_name_1=ae.asm.y).apply(null,arguments)},YC=ae._emscripten_bind_espeak_VOICE_get_languages_1=function(){return(YC=ae._emscripten_bind_espeak_VOICE_get_languages_1=ae.asm.z).apply(null,arguments)},VC=ae._emscripten_bind_espeak_VOICE_get_identifier_0=function(){return(VC=ae._emscripten_bind_espeak_VOICE_get_identifier_0=ae.asm.A).apply(null,arguments)},HC=ae._emscripten_bind_espeak_VOICE_set_identifier_1=function(){return(HC=ae._emscripten_bind_espeak_VOICE_set_identifier_1=ae.asm.B).apply(null,arguments)},UC=ae._emscripten_bind_espeak_VOICE_get_gender_0=function(){return(UC=ae._emscripten_bind_espeak_VOICE_get_gender_0=ae.asm.C).apply(null,arguments)},KC=ae._emscripten_bind_espeak_VOICE_set_gender_1=function(){return(KC=ae._emscripten_bind_espeak_VOICE_set_gender_1=ae.asm.D).apply(null,arguments)},XC=ae._emscripten_bind_espeak_VOICE_get_age_0=function(){return(XC=ae._emscripten_bind_espeak_VOICE_get_age_0=ae.asm.E).apply(null,arguments)},ZC=ae._emscripten_bind_espeak_VOICE_set_age_1=function(){return(ZC=ae._emscripten_bind_espeak_VOICE_set_age_1=ae.asm.F).apply(null,arguments)},JC=ae._emscripten_bind_espeak_VOICE_get_variant_0=function(){return(JC=ae._emscripten_bind_espeak_VOICE_get_variant_0=ae.asm.G).apply(null,arguments)},qC=ae._emscripten_bind_espeak_VOICE_set_variant_1=function(){return(qC=ae._emscripten_bind_espeak_VOICE_set_variant_1=ae.asm.H).apply(null,arguments)},$C=ae._emscripten_bind_espeak_VOICE_get_xx1_0=function(){return($C=ae._emscripten_bind_espeak_VOICE_get_xx1_0=ae.asm.I).apply(null,arguments)},eb=ae._emscripten_bind_espeak_VOICE_set_xx1_1=function(){return(eb=ae._emscripten_bind_espeak_VOICE_set_xx1_1=ae.asm.J).apply(null,arguments)},Ab=ae._emscripten_bind_espeak_VOICE_get_score_0=function(){return(Ab=ae._emscripten_bind_espeak_VOICE_get_score_0=ae.asm.K).apply(null,arguments)},tb=ae._emscripten_bind_espeak_VOICE_set_score_1=function(){return(tb=ae._emscripten_bind_espeak_VOICE_set_score_1=ae.asm.L).apply(null,arguments)},rb=ae._emscripten_bind_espeak_VOICE_get_spare_0=function(){return(rb=ae._emscripten_bind_espeak_VOICE_get_spare_0=ae.asm.M).apply(null,arguments)},sb=ae._emscripten_bind_espeak_VOICE_set_spare_1=function(){return(sb=ae._emscripten_bind_espeak_VOICE_set_spare_1=ae.asm.N).apply(null,arguments)},ab=ae._emscripten_bind_espeak_VOICE___destroy___0=function(){return(ab=ae._emscripten_bind_espeak_VOICE___destroy___0=ae.asm.O).apply(null,arguments)},nb=ae._emscripten_bind_espeak_EVENT_get_type_0=function(){return(nb=ae._emscripten_bind_espeak_EVENT_get_type_0=ae.asm.P).apply(null,arguments)},ib=ae._emscripten_bind_espeak_EVENT_get_unique_identifier_0=function(){return(ib=ae._emscripten_bind_espeak_EVENT_get_unique_identifier_0=ae.asm.Q).apply(null,arguments)},ob=ae._emscripten_bind_espeak_EVENT_get_text_position_0=function(){return(ob=ae._emscripten_bind_espeak_EVENT_get_text_position_0=ae.asm.R).apply(null,arguments)},lb=ae._emscripten_bind_espeak_EVENT_get_length_0=function(){return(lb=ae._emscripten_bind_espeak_EVENT_get_length_0=ae.asm.S).apply(null,arguments)},cb=ae._emscripten_bind_espeak_EVENT_get_audio_position_0=function(){return(cb=ae._emscripten_bind_espeak_EVENT_get_audio_position_0=ae.asm.T).apply(null,arguments)},ub=ae._emscripten_bind_espeak_EVENT_get_sample_0=function(){return(ub=ae._emscripten_bind_espeak_EVENT_get_sample_0=ae.asm.U).apply(null,arguments)},db=ae._emscripten_bind_espeak_EVENT_get_user_data_0=function(){return(db=ae._emscripten_bind_espeak_EVENT_get_user_data_0=ae.asm.V).apply(null,arguments)},fb=ae._emscripten_bind_espeak_EVENT___destroy___0=function(){return(fb=ae._emscripten_bind_espeak_EVENT___destroy___0=ae.asm.W).apply(null,arguments)},gb=ae._emscripten_bind_eSpeakNGWorker_eSpeakNGWorker_0=function(){return(gb=ae._emscripten_bind_eSpeakNGWorker_eSpeakNGWorker_0=ae.asm.X).apply(null,arguments)},pb=ae._emscripten_bind_eSpeakNGWorker_synth__2=function(){return(pb=ae._emscripten_bind_eSpeakNGWorker_synth__2=ae.asm.Y).apply(null,arguments)},mb=ae._emscripten_bind_eSpeakNGWorker_synth_ipa__2=function(){return(mb=ae._emscripten_bind_eSpeakNGWorker_synth_ipa__2=ae.asm.Z).apply(null,arguments)},hb=ae._emscripten_bind_eSpeakNGWorker_getSizeOfEventStruct__0=function(){return(hb=ae._emscripten_bind_eSpeakNGWorker_getSizeOfEventStruct__0=ae.asm._).apply(null,arguments)},Cb=ae._emscripten_bind_eSpeakNGWorker_set_voice_2=function(){return(Cb=ae._emscripten_bind_eSpeakNGWorker_set_voice_2=ae.asm.$).apply(null,arguments)},bb=ae._emscripten_bind_eSpeakNGWorker_set_voice_3=function(){return(bb=ae._emscripten_bind_eSpeakNGWorker_set_voice_3=ae.asm.aa).apply(null,arguments)},Ib=ae._emscripten_bind_eSpeakNGWorker_set_voice_4=function(){return(Ib=ae._emscripten_bind_eSpeakNGWorker_set_voice_4=ae.asm.ba).apply(null,arguments)},wb=ae._emscripten_bind_eSpeakNGWorker_set_voice_5=function(){return(wb=ae._emscripten_bind_eSpeakNGWorker_set_voice_5=ae.asm.ca).apply(null,arguments)},kb=ae._emscripten_bind_eSpeakNGWorker_get_voices_1=function(){return(kb=ae._emscripten_bind_eSpeakNGWorker_get_voices_1=ae.asm.da).apply(null,arguments)},Eb=ae._emscripten_bind_eSpeakNGWorker_set_voices_2=function(){return(Eb=ae._emscripten_bind_eSpeakNGWorker_set_voices_2=ae.asm.ea).apply(null,arguments)},Mb=ae._emscripten_bind_eSpeakNGWorker_get_samplerate_0=function(){return(Mb=ae._emscripten_bind_eSpeakNGWorker_get_samplerate_0=ae.asm.fa).apply(null,arguments)},vb=ae._emscripten_bind_eSpeakNGWorker_get_rate_0=function(){return(vb=ae._emscripten_bind_eSpeakNGWorker_get_rate_0=ae.asm.ga).apply(null,arguments)},Bb=ae._emscripten_bind_eSpeakNGWorker_set_rate_1=function(){return(Bb=ae._emscripten_bind_eSpeakNGWorker_set_rate_1=ae.asm.ha).apply(null,arguments)},xb=ae._emscripten_bind_eSpeakNGWorker_get_pitch_0=function(){return(xb=ae._emscripten_bind_eSpeakNGWorker_get_pitch_0=ae.asm.ia).apply(null,arguments)},yb=ae._emscripten_bind_eSpeakNGWorker_set_pitch_1=function(){return(yb=ae._emscripten_bind_eSpeakNGWorker_set_pitch_1=ae.asm.ja).apply(null,arguments)},Db=ae._emscripten_bind_eSpeakNGWorker___destroy___0=function(){return(Db=ae._emscripten_bind_eSpeakNGWorker___destroy___0=ae.asm.ka).apply(null,arguments)},Tb=ae._emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_LIST_TERMINATED=function(){return(Tb=ae._emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_LIST_TERMINATED=ae.asm.la).apply(null,arguments)},Pb=ae._emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_WORD=function(){return(Pb=ae._emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_WORD=ae.asm.ma).apply(null,arguments)},Gb=ae._emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_SENTENCE=function(){return(Gb=ae._emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_SENTENCE=ae.asm.na).apply(null,arguments)},Qb=ae._emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_MARK=function(){return(Qb=ae._emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_MARK=ae.asm.oa).apply(null,arguments)},Fb=ae._emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_PLAY=function(){return(Fb=ae._emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_PLAY=ae.asm.pa).apply(null,arguments)},Sb=ae._emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_END=function(){return(Sb=ae._emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_END=ae.asm.qa).apply(null,arguments)},Ob=ae._emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_MSG_TERMINATED=function(){return(Ob=ae._emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_MSG_TERMINATED=ae.asm.ra).apply(null,arguments)},zb=ae._emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_PHONEME=function(){return(zb=ae._emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_PHONEME=ae.asm.sa).apply(null,arguments)},Nb=ae._emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_SAMPLERATE=function(){return(Nb=ae._emscripten_enum_espeak_EVENT_TYPE_espeakEVENT_SAMPLERATE=ae.asm.ta).apply(null,arguments)},Lb=ae.___errno_location=function(){return(Lb=ae.___errno_location=ae.asm.va).apply(null,arguments)};ae._free=function(){return(ae._free=ae.asm.wa).apply(null,arguments)},ae._malloc=function(){return(ae._malloc=ae.asm.xa).apply(null,arguments)};var q0,_b=ae.___cxa_is_pointer_type=function(){return(_b=ae.___cxa_is_pointer_type=ae.asm.ya).apply(null,arguments)};function Rb(a){function o(){q0||(q0=!0,ae.calledRun=!0,TC||(SC=!0,ae.noFSInit||q.init.initialized||q.init(),q.ignorePermissions=!1,W2(FC),ae.onRuntimeInitialized&&ae.onRuntimeInitialized(),function(){if(ae.postRun)for(typeof ae.postRun=="function"&&(ae.postRun=[ae.postRun]);ae.postRun.length;)n=ae.postRun.shift(),zp.unshift(n);var n;W2(zp)}()))}Di>0||(function(){if(ae.preRun)for(typeof ae.preRun=="function"&&(ae.preRun=[ae.preRun]);ae.preRun.length;)n=ae.preRun.shift(),Op.unshift(n);var n;W2(Op)}(),Di>0||(ae.setStatus?(ae.setStatus("Running..."),setTimeout(function(){setTimeout(function(){ae.setStatus("")},1),o()},1)):o()))}if(ae.___start_em_js=132724,ae.___stop_em_js=132822,ae.addRunDependency=zC,ae.removeRunDependency=NC,ae.FS_createPath=q.createPath,ae.FS_createDataFile=q.createDataFile,ae.FS_createLazyFile=q.createLazyFile,ae.FS_createDevice=q.createDevice,ae.FS_unlink=q.unlink,Ko=function a(){q0||Rb(),q0||(Ko=a)},ae.preInit)for(typeof ae.preInit=="function"&&(ae.preInit=[ae.preInit]);ae.preInit.length>0;)ae.preInit.pop()();function $s(){}function $0(a){return(a||$s).__cache__}function io(a,o){var n=$0(o),u=n[a];return u||((u=Object.create((o||$s).prototype)).ptr=a,n[a]=u)}Rb(),$s.prototype=Object.create($s.prototype),$s.prototype.constructor=$s,$s.prototype.__class__=$s,$s.__cache__={},ae.WrapperObject=$s,ae.getCache=$0,ae.wrapPointer=io,ae.castObject=function(a,o){return io(a.ptr,o)},ae.NULL=io(0),ae.destroy=function(a){if(!a.__destroy__)throw"Error: Cannot destroy object. (Did you create it yourself?)";a.__destroy__(),delete $0(a.__class__)[a.ptr]},ae.compare=function(a,o){return a.ptr===o.ptr},ae.getPointer=function(a){return a.ptr},ae.getClass=function(a){return a.__class__};var Zt={buffer:0,size:0,pos:0,temps:[],needed:0,prepare:function(){if(Zt.needed){for(var a=0;a<Zt.temps.length;a++)ae._free(Zt.temps[a]);Zt.temps.length=0,ae._free(Zt.buffer),Zt.buffer=0,Zt.size+=Zt.needed,Zt.needed=0}Zt.buffer||(Zt.size+=128,Zt.buffer=ae._malloc(Zt.size),R2(Zt.buffer)),Zt.pos=0},alloc:function(a,o){R2(Zt.buffer);var n,u=o.BYTES_PER_ELEMENT,m=a.length*u;return m=m+7&-8,Zt.pos+m>=Zt.size?(R2(m>0),Zt.needed+=m,n=ae._malloc(m),Zt.temps.push(n)):(n=Zt.buffer+Zt.pos,Zt.pos+=m),n},copy:function(a,o,n){switch(n>>>=0,o.BYTES_PER_ELEMENT){case 2:n>>>=1;break;case 4:n>>>=2;break;case 8:n>>>=3}for(var u=0;u<a.length;u++)o[n+u]=a[u]}};function Ei(a){if(typeof a=="string"){var o=LC(a),n=Zt.alloc(o,Ds);return Zt.copy(o,Ds,n),n}return a}function wn(){throw"cannot construct a VoidPtr, no constructor in IDL"}function RA(){throw"cannot construct a espeak_VOICE, no constructor in IDL"}function vt(){throw"cannot construct a espeak_EVENT, no constructor in IDL"}function mt(){this.ptr=gb(),$0(mt)[this.ptr]=this}wn.prototype=Object.create($s.prototype),wn.prototype.constructor=wn,wn.prototype.__class__=wn,wn.__cache__={},ae.VoidPtr=wn,wn.prototype.__destroy__=wn.prototype.__destroy__=function(){var a=this.ptr;RC(a)},RA.prototype=Object.create($s.prototype),RA.prototype.constructor=RA,RA.prototype.__class__=RA,RA.__cache__={},ae.espeak_VOICE=RA,RA.prototype.get_name=RA.prototype.get_name=function(){var a=this.ptr;return no(jC(a))},RA.prototype.set_name=RA.prototype.set_name=function(a){var o=this.ptr;Zt.prepare(),a=a&&typeof a=="object"?a.ptr:Ei(a),WC(o,a)},Object.defineProperty(RA.prototype,"name",{get:RA.prototype.get_name,set:RA.prototype.set_name}),RA.prototype.get_languages=RA.prototype.get_languages=function(a){var o=this.ptr;return a&&typeof a=="object"&&(a=a.ptr),YC(o,a)},Object.defineProperty(RA.prototype,"languages",{get:RA.prototype.get_languages}),RA.prototype.get_identifier=RA.prototype.get_identifier=function(){var a=this.ptr;return no(VC(a))},RA.prototype.set_identifier=RA.prototype.set_identifier=function(a){var o=this.ptr;Zt.prepare(),a=a&&typeof a=="object"?a.ptr:Ei(a),HC(o,a)},Object.defineProperty(RA.prototype,"identifier",{get:RA.prototype.get_identifier,set:RA.prototype.set_identifier}),RA.prototype.get_gender=RA.prototype.get_gender=function(){var a=this.ptr;return UC(a)},RA.prototype.set_gender=RA.prototype.set_gender=function(a){var o=this.ptr;a&&typeof a=="object"&&(a=a.ptr),KC(o,a)},Object.defineProperty(RA.prototype,"gender",{get:RA.prototype.get_gender,set:RA.prototype.set_gender}),RA.prototype.get_age=RA.prototype.get_age=function(){var a=this.ptr;return XC(a)},RA.prototype.set_age=RA.prototype.set_age=function(a){var o=this.ptr;a&&typeof a=="object"&&(a=a.ptr),ZC(o,a)},Object.defineProperty(RA.prototype,"age",{get:RA.prototype.get_age,set:RA.prototype.set_age}),RA.prototype.get_variant=RA.prototype.get_variant=function(){var a=this.ptr;return JC(a)},RA.prototype.set_variant=RA.prototype.set_variant=function(a){var o=this.ptr;a&&typeof a=="object"&&(a=a.ptr),qC(o,a)},Object.defineProperty(RA.prototype,"variant",{get:RA.prototype.get_variant,set:RA.prototype.set_variant}),RA.prototype.get_xx1=RA.prototype.get_xx1=function(){var a=this.ptr;return $C(a)},RA.prototype.set_xx1=RA.prototype.set_xx1=function(a){var o=this.ptr;a&&typeof a=="object"&&(a=a.ptr),eb(o,a)},Object.defineProperty(RA.prototype,"xx1",{get:RA.prototype.get_xx1,set:RA.prototype.set_xx1}),RA.prototype.get_score=RA.prototype.get_score=function(){var a=this.ptr;return Ab(a)},RA.prototype.set_score=RA.prototype.set_score=function(a){var o=this.ptr;a&&typeof a=="object"&&(a=a.ptr),tb(o,a)},Object.defineProperty(RA.prototype,"score",{get:RA.prototype.get_score,set:RA.prototype.set_score}),RA.prototype.get_spare=RA.prototype.get_spare=function(){var a=this.ptr;return rb(a)},RA.prototype.set_spare=RA.prototype.set_spare=function(a){var o=this.ptr;a&&typeof a=="object"&&(a=a.ptr),sb(o,a)},Object.defineProperty(RA.prototype,"spare",{get:RA.prototype.get_spare,set:RA.prototype.set_spare}),RA.prototype.__destroy__=RA.prototype.__destroy__=function(){var a=this.ptr;ab(a)},vt.prototype=Object.create($s.prototype),vt.prototype.constructor=vt,vt.prototype.__class__=vt,vt.__cache__={},ae.espeak_EVENT=vt,vt.prototype.get_type=vt.prototype.get_type=function(){var a=this.ptr;return nb(a)},Object.defineProperty(vt.prototype,"type",{get:vt.prototype.get_type}),vt.prototype.get_unique_identifier=vt.prototype.get_unique_identifier=function(){var a=this.ptr;return ib(a)},Object.defineProperty(vt.prototype,"unique_identifier",{get:vt.prototype.get_unique_identifier}),vt.prototype.get_text_position=vt.prototype.get_text_position=function(){var a=this.ptr;return ob(a)},Object.defineProperty(vt.prototype,"text_position",{get:vt.prototype.get_text_position}),vt.prototype.get_length=vt.prototype.get_length=function(){var a=this.ptr;return lb(a)},Object.defineProperty(vt.prototype,"length",{get:vt.prototype.get_length}),vt.prototype.get_audio_position=vt.prototype.get_audio_position=function(){var a=this.ptr;return cb(a)},Object.defineProperty(vt.prototype,"audio_position",{get:vt.prototype.get_audio_position}),vt.prototype.get_sample=vt.prototype.get_sample=function(){var a=this.ptr;return ub(a)},Object.defineProperty(vt.prototype,"sample",{get:vt.prototype.get_sample}),vt.prototype.get_user_data=vt.prototype.get_user_data=function(){var a=this.ptr;return db(a)},Object.defineProperty(vt.prototype,"user_data",{get:vt.prototype.get_user_data}),vt.prototype.__destroy__=vt.prototype.__destroy__=function(){var a=this.ptr;fb(a)},mt.prototype=Object.create($s.prototype),mt.prototype.constructor=mt,mt.prototype.__class__=mt,mt.__cache__={},ae.eSpeakNGWorker=mt,mt.prototype.synth_=mt.prototype.synth_=function(a,o){var n=this.ptr;Zt.prepare(),a=a&&typeof a=="object"?a.ptr:Ei(a),o&&typeof o=="object"&&(o=o.ptr),pb(n,a,o)},mt.prototype.synth_ipa_=mt.prototype.synth_ipa_=function(a,o){var n=this.ptr;return Zt.prepare(),a=a&&typeof a=="object"?a.ptr:Ei(a),o=o&&typeof o=="object"?o.ptr:Ei(o),mb(n,a,o)},mt.prototype.getSizeOfEventStruct_=mt.prototype.getSizeOfEventStruct_=function(){var a=this.ptr;return hb(a)},mt.prototype.set_voice=mt.prototype.set_voice=function(a,o,n,u,m){var b=this.ptr;return Zt.prepare(),a=a&&typeof a=="object"?a.ptr:Ei(a),o=o&&typeof o=="object"?o.ptr:Ei(o),n&&typeof n=="object"&&(n=n.ptr),u&&typeof u=="object"&&(u=u.ptr),m&&typeof m=="object"&&(m=m.ptr),n===void 0?Cb(b,a,o):u===void 0?bb(b,a,o,n):m===void 0?Ib(b,a,o,n,u):wb(b,a,o,n,u,m)},mt.prototype.get_voices=mt.prototype.get_voices=function(a){var o=this.ptr;return a&&typeof a=="object"&&(a=a.ptr),io(kb(o,a),RA)},mt.prototype.set_voices=mt.prototype.set_voices=function(a,o){var n=this.ptr;Zt.prepare(),a&&typeof a=="object"&&(a=a.ptr),o&&typeof o=="object"&&(o=o.ptr),Eb(n,a,o)},Object.defineProperty(mt.prototype,"voices",{get:mt.prototype.get_voices,set:mt.prototype.set_voices}),mt.prototype.get_samplerate=mt.prototype.get_samplerate=function(){var a=this.ptr;return Mb(a)},Object.defineProperty(mt.prototype,"samplerate",{get:mt.prototype.get_samplerate}),mt.prototype.get_rate=mt.prototype.get_rate=function(){var a=this.ptr;return vb(a)},mt.prototype.set_rate=mt.prototype.set_rate=function(a){var o=this.ptr;a&&typeof a=="object"&&(a=a.ptr),Bb(o,a)},Object.defineProperty(mt.prototype,"rate",{get:mt.prototype.get_rate,set:mt.prototype.set_rate}),mt.prototype.get_pitch=mt.prototype.get_pitch=function(){var a=this.ptr;return xb(a)},mt.prototype.set_pitch=mt.prototype.set_pitch=function(a){var o=this.ptr;a&&typeof a=="object"&&(a=a.ptr),yb(o,a)},Object.defineProperty(mt.prototype,"pitch",{get:mt.prototype.get_pitch,set:mt.prototype.set_pitch}),mt.prototype.__destroy__=mt.prototype.__destroy__=function(){var a=this.ptr;Db(a)},function(){function a(){ae.espeakEVENT_LIST_TERMINATED=Tb(),ae.espeakEVENT_WORD=Pb(),ae.espeakEVENT_SENTENCE=Gb(),ae.espeakEVENT_MARK=Qb(),ae.espeakEVENT_PLAY=Fb(),ae.espeakEVENT_END=Sb(),ae.espeakEVENT_MSG_TERMINATED=Ob(),ae.espeakEVENT_PHONEME=zb(),ae.espeakEVENT_SAMPLERATE=Nb()}SC?a():OC(a)}(),mt.prototype.list_voices=function(){for(var a,o=[],n=this.get_voices(a=0);n.ptr!=0;n=this.get_voices(++a)){let w=function(E){for(var B="",D=E,v=n.get_languages(D++);v!=0;)B+=String.fromCharCode(v),v=n.get_languages(D++);return B};for(var u={name:n.get_name(),identifier:n.get_identifier(),languages:[]},m=0,b=n.get_languages(m);b!=0;){var C={priority:b,name:w(++m)};u.languages.push(C),m+=C.name.length+1,b=n.get_languages(m)}o.push(u)}return o};var VI=["list_terminated","word","sentence","mark","play","end","msg_terminated","phoneme","samplerate"];mt.prototype.synthesize=function(a,o){var n=this.getSizeOfEventStruct_(),u=addFunction(function(m,b,C){for(var w=new Float32Array(2*b),E=0;E<b;E++)w[2*E]=Math.max(-1,Math.min(1,jI(m+2*E,"i16")/32768)),w[2*E+1]=w[2*E];var B=[];for(m=C,ev=io(m,vt);ev.get_type()!=ae.espeakEVENT_LIST_TERMINATED;ev=io(m+=n,vt))B.push({type:VI[ev.get_type()],text_position:ev.get_text_position(),word_length:ev.get_length(),audio_position:ev.get_audio_position()});return o(w,B)?1:0});this.synth_(a,u),removeFunction(u)},mt.prototype.synthesize_ipa=function(a,o){var n="espeak-ng-ipa-tmp-"+Math.random().toString().substring(2),u="",m=this.synth_ipa_(a,n);return m==0&&(u=q.readFile(n,{encoding:"utf8"})),q.unlink(n),{code:m,ipa:u}};const jb=new Promise(a=>{ae.calledRun?a(new ae.eSpeakNGWorker):ae.onRuntimeInitialized=()=>a(new ae.eSpeakNGWorker)}),HI=["en"],UI=jb.then(a=>{const o=a.list_voices().map(({name:u,identifier:m,languages:b})=>({name:u,identifier:m,languages:b.filter(C=>HI.includes(C.name.split("-")[0]))})).filter(u=>u.languages.length>0),n=new Set;for(const u of o){n.add(u.identifier);for(const m of u.languages)n.add(m.name)}return{voices:o,identifiers:n}}),KI=async(a,o="en-us")=>{const n=await jb,{identifiers:u}=await UI;if(!u.has(o))throw new Error(`Invalid language identifier: "${o}". Should be one of: ${Array.from(u).toSorted().join(", ")}.`);return n.set_voice(o),n.synthesize_ipa(a).ipa?.split(`
`).filter(m=>m.length>0)??[]};var S0={};function XI(a){if(a.includes("."))return a;if(a.includes(":")){let[b,C]=a.split(":").map(Number);return C===0?`${b} o'clock`:C<10?`${b} oh ${C}`:`${b} ${C}`}let o=parseInt(a.slice(0,4),10);if(o<1100||o%1e3<10)return a;let n=a.slice(0,2),u=parseInt(a.slice(2,4),10),m=a.endsWith("s")?"s":"";if(o%1e3>=100&&o%1e3<=999){if(u===0)return`${n} hundred${m}`;if(u<10)return`${n} oh ${u}${m}`}return`${n} ${u}${m}`}function ZI(a){const o=a[0]==="$"?"dollar":"pound";if(isNaN(Number(a.slice(1))))return`${a.slice(1)} ${o}s`;if(!a.includes(".")){let b=a.slice(1)==="1"?"":"s";return`${a.slice(1)} ${o}${b}`}const[n,u]=a.slice(1).split("."),m=parseInt(u.padEnd(2,"0"),10);return`${n} ${o}${n==="1"?"":"s"} and ${m} ${a[0]==="$"?m===1?"cent":"cents":m===1?"penny":"pence"}`}function JI(a){let[o,n]=a.split(".");return`${o} point ${n.split("").join(" ")}`}const qI=new RegExp(`(\\s*[${Lp=';:,.!?¡¿—…"«»“”(){}[]',Lp.replace(/[.*+?^${}()|[\]\\]/g,"\\$&")}]+\\s*)+`,"g");var Lp;async function _p(a,o="a",n=!0){n&&(a=function(w){return w.replace(/[‘’]/g,"'").replace(/«/g,"“").replace(/»/g,"”").replace(/[“”]/g,'"').replace(/\(/g,"«").replace(/\)/g,"»").replace(/、/g,", ").replace(/。/g,". ").replace(/！/g,"! ").replace(/，/g,", ").replace(/：/g,": ").replace(/；/g,"; ").replace(/？/g,"? ").replace(/[^\S \n]/g," ").replace(/  +/," ").replace(/(?<=\n) +(?=\n)/g,"").replace(/\bD[Rr]\.(?= [A-Z])/g,"Doctor").replace(/\b(?:Mr\.|MR\.(?= [A-Z]))/g,"Mister").replace(/\b(?:Ms\.|MS\.(?= [A-Z]))/g,"Miss").replace(/\b(?:Mrs\.|MRS\.(?= [A-Z]))/g,"Mrs").replace(/\betc\.(?! [A-Z])/gi,"etc").replace(/\b(y)eah?\b/gi,"$1e'a").replace(/\d*\.\d+|\b\d{4}s?\b|(?<!:)\b(?:[1-9]|1[0-2]):[0-5]\d\b(?!:)/g,XI).replace(/(?<=\d),(?=\d)/g,"").replace(/[$£]\d+(?:\.\d+)?(?: hundred| thousand| (?:[bm]|tr)illion)*\b|[$£]\d+\.\d\d?\b/gi,ZI).replace(/\d*\.\d+/g,JI).replace(/(?<=\d)-(?=\d)/g," to ").replace(/(?<=\d)S/g," S").replace(/(?<=[BCDFGHJ-NP-TV-Z])'?s\b/g,"'S").replace(/(?<=X')S\b/g,"s").replace(/(?:[A-Za-z]\.){2,} [a-z]/g,E=>E.replace(/\./g,"-")).replace(/(?<=[A-Z])\.(?=[A-Z])/gi,"-").trim()}(a));const u=function(w,E){const B=[];let D=0;for(const v of w.matchAll(E)){const x=v[0];D<v.index&&B.push({match:!1,text:w.slice(D,v.index)}),x.length>0&&B.push({match:!0,text:x}),D=v.index+x.length}return D<w.length&&B.push({match:!1,text:w.slice(D)}),B}(a,qI),m=o==="a"?"en-us":"en";let C=(await Promise.all(u.map(async({match:w,text:E})=>w?E:(await KI(E,m)).join(" ")))).join("").replace(/kəkˈoːɹoʊ/g,"kˈoʊkəɹoʊ").replace(/kəkˈɔːɹəʊ/g,"kˈəʊkəɹəʊ").replace(/ʲ/g,"j").replace(/r/g,"ɹ").replace(/x/g,"k").replace(/ɬ/g,"l").replace(/(?<=[a-zɹː])(?=hˈʌndɹɪd)/g," ").replace(/ z(?=[;:,.!?¡¿—…"«»“” ]|$)/g,"z");return o==="a"&&(C=C.replace(/(?<=nˈaɪn)ti(?!ː)/g,"di")),C.trim()}function V2(a,o=!0){return".!?…。？！".includes(a)||o&&a===`
`}function $I(a,o){let n=o;for(;n<a.length&&!/\s/.test(a[n]);)++n;return a.substring(o,n)}const e5=new Set(["mr","mrs","ms","dr","prof","sr","jr","sgt","col","gen","rep","sen","gov","lt","maj","capt","st","mt","etc","co","inc","ltd","dept","vs","p","pg","jan","feb","mar","apr","jun","jul","aug","sep","sept","oct","nov","dec","sun","mon","tu","tue","tues","wed","th","thu","thur","thurs","fri","sat"]);function A5(a){return a=a.replace(/['’]s$/i,"").replace(/\.+$/,""),e5.has(a.toLowerCase())}const Wb=new Map([[")","("],["]","["],["}","{"],["》","《"],["〉","〈"],["›","‹"],["»","«"],["〉","〈"],["」","「"],["』","『"],["〕","〔"],["】","【"]]),t5=new Set(Wb.values());function r5(a,o,n,u){if(a==='"'||a==="'")return a==="'"&&n>0&&n<u.length-1&&/[A-Za-z]/.test(u[n-1])&&/[A-Za-z]/.test(u[n+1])?void 0:void(o.length&&o.at(-1)===a?o.pop():o.push(a));if(t5.has(a))return void o.push(a);const m=Wb.get(a);m&&o.length&&o.at(-1)===m&&o.pop()}class el{constructor(){this._buffer="",this._sentences=[],this._resolver=null,this._closed=!1}push(...o){for(const n of o)this._buffer+=n,this._process()}close(){if(this._closed)throw new Error("Stream is already closed.");this._closed=!0,this.flush()}flush(){const o=this._buffer.trim();o.length>0&&this._sentences.push(o),this._buffer="",this._resolve()}_resolve(){this._resolver&&(this._resolver(),this._resolver=null)}_process(){let o=0;const n=this._buffer,u=n.length;let m=0,b=[];const C=w=>{let E=w;for(;E+1<u&&V2(n[E+1],!1);)++E;for(;E+1<u&&(B=n[E+1],`"')]}」』`.includes(B));)++E;var B;let D=E+1;for(;D<u&&/\s/.test(n[D]);)++D;return{end:E,nextNonSpace:D}};for(;m<u;){const w=n[m];if(r5(w,b,m,n),b.length===0&&V2(w)){const E=n.slice(o,m);if(/(^|\n)\d+$/.test(E)){++m;continue}const{end:B,nextNonSpace:D}=C(m);if(m===D-1&&w!==`
`){++m;continue}if(D===u)break;let v=m-1;for(;v>=0&&/\S/.test(n[v]);)v--;v=Math.max(o,v+1);const x=$I(n,v);if(!x){++m;continue}if((/https?[,:]\/\//.test(x)||x.includes("@"))&&!V2(x.at(-1))){m=v+x.length;continue}if(A5(x)){++m;continue}if(/^([A-Za-z]\.)+$/.test(x)&&D<u&&/[A-Z]/.test(n[D])){++m;continue}if(w==="."&&D<u&&/[a-z]/.test(n[D])){++m;continue}const S=n.substring(o,B+1).trim();if(S==="..."||S==="…"){++m;continue}S&&this._sentences.push(S),m=o=B+1}else++m}this._buffer=n.substring(o),this._sentences.length>0&&this._resolve()}async*[Symbol.asyncIterator](){if(this._resolver)throw new Error("Another iterator is already active.");for(;;)if(this._sentences.length>0)yield this._sentences.shift();else{if(this._closed)break;await new Promise(o=>{this._resolver=o})}}[Symbol.iterator](){this.flush();const o=this._sentences[Symbol.iterator]();return this._sentences=[],o}get sentences(){return this._sentences}}const jo=Object.freeze({af_heart:{name:"Heart",language:"en-us",gender:"Female",traits:"❤️",targetQuality:"A",overallGrade:"A"},af_alloy:{name:"Alloy",language:"en-us",gender:"Female",targetQuality:"B",overallGrade:"C"},af_aoede:{name:"Aoede",language:"en-us",gender:"Female",targetQuality:"B",overallGrade:"C+"},af_bella:{name:"Bella",language:"en-us",gender:"Female",traits:"🔥",targetQuality:"A",overallGrade:"A-"},af_jessica:{name:"Jessica",language:"en-us",gender:"Female",targetQuality:"C",overallGrade:"D"},af_kore:{name:"Kore",language:"en-us",gender:"Female",targetQuality:"B",overallGrade:"C+"},af_nicole:{name:"Nicole",language:"en-us",gender:"Female",traits:"🎧",targetQuality:"B",overallGrade:"B-"},af_nova:{name:"Nova",language:"en-us",gender:"Female",targetQuality:"B",overallGrade:"C"},af_river:{name:"River",language:"en-us",gender:"Female",targetQuality:"C",overallGrade:"D"},af_sarah:{name:"Sarah",language:"en-us",gender:"Female",targetQuality:"B",overallGrade:"C+"},af_sky:{name:"Sky",language:"en-us",gender:"Female",targetQuality:"B",overallGrade:"C-"},am_adam:{name:"Adam",language:"en-us",gender:"Male",targetQuality:"D",overallGrade:"F+"},am_echo:{name:"Echo",language:"en-us",gender:"Male",targetQuality:"C",overallGrade:"D"},am_eric:{name:"Eric",language:"en-us",gender:"Male",targetQuality:"C",overallGrade:"D"},am_fenrir:{name:"Fenrir",language:"en-us",gender:"Male",targetQuality:"B",overallGrade:"C+"},am_liam:{name:"Liam",language:"en-us",gender:"Male",targetQuality:"C",overallGrade:"D"},am_michael:{name:"Michael",language:"en-us",gender:"Male",targetQuality:"B",overallGrade:"C+"},am_onyx:{name:"Onyx",language:"en-us",gender:"Male",targetQuality:"C",overallGrade:"D"},am_puck:{name:"Puck",language:"en-us",gender:"Male",targetQuality:"B",overallGrade:"C+"},am_santa:{name:"Santa",language:"en-us",gender:"Male",targetQuality:"C",overallGrade:"D-"},bf_emma:{name:"Emma",language:"en-gb",gender:"Female",traits:"🚺",targetQuality:"B",overallGrade:"B-"},bf_isabella:{name:"Isabella",language:"en-gb",gender:"Female",targetQuality:"B",overallGrade:"C"},bm_george:{name:"George",language:"en-gb",gender:"Male",targetQuality:"B",overallGrade:"C"},bm_lewis:{name:"Lewis",language:"en-gb",gender:"Male",targetQuality:"C",overallGrade:"D+"},bf_alice:{name:"Alice",language:"en-gb",gender:"Female",traits:"🚺",targetQuality:"C",overallGrade:"D"},bf_lily:{name:"Lily",language:"en-gb",gender:"Female",traits:"🚺",targetQuality:"C",overallGrade:"D"},bm_daniel:{name:"Daniel",language:"en-gb",gender:"Male",traits:"🚹",targetQuality:"C",overallGrade:"D"},bm_fable:{name:"Fable",language:"en-gb",gender:"Male",traits:"🚹",targetQuality:"B",overallGrade:"C"}}),H2=new Map;async function s5(a){if(H2.has(a))return H2.get(a);const o=new Float32Array(await async function(n){if(S0&&Object.hasOwn(S0,"readFile")){const w=typeof __dirname<"u"?__dirname:import.meta.dirname,E=S0.resolve(w,`../voices/${n}.bin`),{buffer:B}=await S0.readFile(E);return B}const u=`https://huggingface.co/onnx-community/Kokoro-82M-v1.0-ONNX/resolve/main/voices/${n}.bin`;let m;try{m=await caches.open("kokoro-voices");const w=await m.match(u);if(w)return await w.arrayBuffer()}catch(w){console.warn("Unable to open cache",w)}const b=await fetch(u),C=await b.arrayBuffer();if(m)try{await m.put(u,new Response(C,{headers:b.headers}))}catch(w){console.warn("Unable to cache file",w)}return C}(a));return H2.set(a,o),o}class Hc{constructor(o,n){this.model=o,this.tokenizer=n}static async from_pretrained(o,{dtype:n="fp32",device:u=null,progress_callback:m=null}={}){const b=zI.from_pretrained(o,{progress_callback:m,dtype:n,device:u}),C=DC.from_pretrained(o,{progress_callback:m}),w=await Promise.all([b,C]);return new Hc(...w)}get voices(){return jo}list_voices(){console.table(jo)}_validate_voice(o){if(!jo.hasOwnProperty(o))throw console.error(`Voice "${o}" not found. Available voices:`),console.table(jo),new Error(`Voice "${o}" not found. Should be one of: ${Object.keys(jo).join(", ")}.`);return o.at(0)}async generate(o,{voice:n="af_heart",speed:u=1}={}){const m=this._validate_voice(n),b=await _p(o,m),{input_ids:C}=this.tokenizer(b,{truncation:!0});return this.generate_from_ids(C,{voice:n,speed:u})}async generate_from_ids(o,{voice:n="af_heart",speed:u=1}={}){const m=256*Math.min(Math.max(o.dims.at(-1)-2,0),509),b=(await s5(n)).slice(m,m+256),C={input_ids:o,style:new t0("float32",b,[1,256]),speed:new t0("float32",[u],[1])},{waveform:w}=await this.model(C);return new OI(w.data,24e3)}async*stream(o,{voice:n="af_heart",speed:u=1,split_pattern:m=null}={}){const b=this._validate_voice(n);let C;if(o instanceof el)C=o;else{if(typeof o!="string")throw new Error("Invalid input type. Expected string or TextSplitterStream.");{C=new el;const w=m?o.split(m).map(E=>E.trim()).filter(E=>E.length>0):[o];C.push(...w)}}for await(const w of C){const E=await _p(w,b),{input_ids:B}=this.tokenizer(E,{truncation:!0}),D=await this.generate_from_ids(B,{voice:n,speed:u});yield{text:w,phonemes:E,audio:D}}}}const rl=16e3,Uc=rl/1e3,a5=.3,n5=.1,i5=400,o5=i5*Uc,l5=80,Yb=l5*Uc,c5=250*Uc,u5=30,d5=512,f5=Math.ceil(Yb/d5),g5="onnx-community/Kokoro-82M-v1.0-ONNX";let Al;const sl=await Hc.from_pretrained(g5,{dtype:"fp32",device:"webgpu"}),uc="webgpu";self.postMessage({type:"info",message:`Using device: "${uc}"`});self.postMessage({type:"info",message:"Loading models...",duration:"until_next"});const p5=await QI.from_pretrained("onnx-community/silero-vad",{config:{model_type:"custom"},dtype:"fp32"}).catch(a=>{throw self.postMessage({error:a}),a}),m5={webgpu:{encoder_model:"fp32",decoder_model_merged:"fp32"},wasm:{encoder_model:"fp32",decoder_model_merged:"q8"}},Vb=await LI("automatic-speech-recognition","onnx-community/whisper-base",{device:uc,dtype:m5[uc]}).catch(a=>{throw self.postMessage({error:a}),a});await Vb(new Float32Array(rl));const Hb="HuggingFaceTB/SmolLM2-1.7B-Instruct",R0=await DC.from_pretrained(Hb),Ub=await FI.from_pretrained(Hb,{dtype:"q4f16",device:"webgpu"}),Kb={role:"system",content:"You're a helpful and conversational voice assistant. Keep your responses short, clear, and casual."};await Ub.generate({...R0("x"),max_new_tokens:1});let Zo=[Kb],dc,fc;self.postMessage({type:"status",status:"ready",message:"Ready!",voices:sl.voices});const oo=new Float32Array(u5*rl);let Zn=0;const h5=new t0("int64",[rl],[]);let Rp=new t0("float32",new Float32Array(2*1*128),[2,1,128]),Jo=!1,tl=!1;async function C5(a){const o=new t0("float32",a,[1,a.length]),{stateN:n,output:u}=await p5({input:o,sr:h5,state:Rp});Rp=n;const m=u.data[0];return m>a5||Jo&&m>=n5}const b5=async(a,o)=>{tl=!0;const n=await Vb(a).then(({text:D})=>D.trim());if(["","[BLANK_AUDIO]"].includes(n))return;Zo.push({role:"user",content:n});const u=new el,m=sl.stream(u,{voice:Al});(async()=>{for await(const{text:D,phonemes:v,audio:x}of m)self.postMessage({type:"output",text:D,result:x})})();const b=R0.apply_chat_template(Zo,{add_generation_prompt:!0,return_dict:!0}),C=new NI(R0,{skip_prompt:!0,skip_special_tokens:!0,callback_function:D=>{u.push(D)},token_callback_function:()=>{}});fc=new SI;const{past_key_values:w,sequences:E}=await Ub.generate({...b,past_key_values:dc,do_sample:!1,max_new_tokens:1024,streamer:C,stopping_criteria:fc,return_dict_in_generate:!0});dc=w,u.close();const B=R0.batch_decode(E.slice(null,[b.input_ids.dims[1],null]),{skip_special_tokens:!0});Zo.push({role:"assistant",content:B[0]})};let j0=0;const Xb=(a=0)=>{self.postMessage({type:"status",status:"recording_end",message:"Transcribing...",duration:"until_next"}),oo.fill(0,a),Zn=a,Jo=!1,j0=0},jp=a=>{const o=a?.length??0,n=oo.slice(0,Zn+Yb),u=qo.reduce((C,w)=>C+w.length,0),m=new Float32Array(u+n.length);let b=0;for(const C of qo)m.set(C,b),b+=C.length;m.set(n,b),b5(m),a&&oo.set(a,0),Xb(o)};let qo=[];self.onmessage=async a=>{const{type:o,buffer:n}=a.data;if(o==="audio"&&tl)return;switch(o){case"start_call":{const C=sl.voices[Al??"af_heart"]?.name??"Heart";I5(`Hey there, my name is ${C}! How can I help you today?`);return}case"end_call":Zo=[Kb],dc=null;case"interrupt":fc?.interrupt();return;case"set_voice":Al=a.data.voice;return;case"playback_ended":tl=!1;return}const u=Jo,m=await C5(n);if(!u&&!m){qo.length>=f5&&qo.shift(),qo.push(n);return}const b=oo.length-Zn;if(n.length>=b){oo.set(n.subarray(0,b),Zn),Zn+=b;const C=n.subarray(b);jp(C);return}else oo.set(n,Zn),Zn+=n.length;if(m){Jo||self.postMessage({type:"status",status:"recording_start",message:"Listening...",duration:"until_next"}),Jo=!0,j0=0;return}if(j0+=n.length,!(j0<o5)){if(Zn<c5){Xb();return}jp()}};function I5(a){tl=!0;const o=new el,n=sl.stream(o,{voice:Al});(async()=>{for await(const{text:u,audio:m}of n)self.postMessage({type:"output",text:u,result:m})})(),o.push(a),o.close(),Zo.push({role:"assistant",content:a})}
